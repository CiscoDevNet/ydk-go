// This module contains a collection of YANG definitions
// for Cisco IOS-XR ip-rsvp package operational data.
// 
// This module contains definitions
// for the following management objects:
//   rsvp-standby: RSVP operational data for standby role
//   rsvp: rsvp
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ip_rsvp_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ip_rsvp_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rsvp-oper rsvp-standby}", reflect.TypeOf(RsvpStandby{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby", reflect.TypeOf(RsvpStandby{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rsvp-oper rsvp}", reflect.TypeOf(Rsvp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rsvp-oper:rsvp", reflect.TypeOf(Rsvp{}))
}

// RsvpMgmtAssociation represents RSVP ASSOCIATION Types
type RsvpMgmtAssociation string

const (
    // No ASSOCIATION Object present
    RsvpMgmtAssociation_none RsvpMgmtAssociation = "none"

    // IPv4 ASSOCIATION Type
    RsvpMgmtAssociation_ipv4 RsvpMgmtAssociation = "ipv4"

    // IPv6 ASSOCIATION Type
    RsvpMgmtAssociation_ipv6 RsvpMgmtAssociation = "ipv6"

    // EXTENDED IPv4 ASSOCIATION Type
    RsvpMgmtAssociation_extended_ipv4 RsvpMgmtAssociation = "extended-ipv4"

    // EXTENDED IPv6 ASSOCIATION Type
    RsvpMgmtAssociation_extended_ipv6 RsvpMgmtAssociation = "extended-ipv6"
)

// RsvpMgmtEroSubobj represents RSVP ERO Types
type RsvpMgmtEroSubobj string

const (
    // IPv4 ERO Type
    RsvpMgmtEroSubobj_rsvp_mgmt_ero_type_ipv4 RsvpMgmtEroSubobj = "rsvp-mgmt-ero-type-ipv4"

    // Unnumbered ERO Type
    RsvpMgmtEroSubobj_rsvp_mgmt_ero_type_un_num RsvpMgmtEroSubobj = "rsvp-mgmt-ero-type-un-num"
)

// RsvpMgmtQosServiceEnum represents QOS Types
type RsvpMgmtQosServiceEnum string

const (
    // QOS Unknown
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_unknown RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-unknown"

    // QOS Guaranteed
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_guaranteed RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-guaranteed"

    // QOS Controlled Load
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_controlled_load RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-controlled-load"

    // QOS Qualitative
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_qualitative RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-qualitative"
)

// RsvpMgmtHelloInstance represents RSVP Hello instance types
type RsvpMgmtHelloInstance string

const (
    // Hello requests and ACKs are sent
    RsvpMgmtHelloInstance_active RsvpMgmtHelloInstance = "active"

    // Hello ACKs only are sent
    RsvpMgmtHelloInstance_passive RsvpMgmtHelloInstance = "passive"
)

// IgpteLibBwModel represents Bandwidth model
type IgpteLibBwModel string

const (
    // Russian Dolls Model
    IgpteLibBwModel_rdm IgpteLibBwModel = "rdm"

    // Maximum Allocation Model
    IgpteLibBwModel_mam IgpteLibBwModel = "mam"

    // No model set
    IgpteLibBwModel_not_set IgpteLibBwModel = "not-set"
)

// RsvpMgmtFrrStateEnum represents RSVP FRR States
type RsvpMgmtFrrStateEnum string

const (
    // Ready State
    RsvpMgmtFrrStateEnum_ready_state RsvpMgmtFrrStateEnum = "ready-state"

    // Pending
    RsvpMgmtFrrStateEnum_pending_state RsvpMgmtFrrStateEnum = "pending-state"

    // Active State
    RsvpMgmtFrrStateEnum_active_state RsvpMgmtFrrStateEnum = "active-state"
)

// RsvpProcNsrNotReadyReason represents Rsvp proc nsr not ready reason
type RsvpProcNsrNotReadyReason string

const (
    // Collab connection time out
    RsvpProcNsrNotReadyReason_collab_time_out RsvpProcNsrNotReadyReason = "collab-time-out"

    // Collab connection down or IDT not done
    RsvpProcNsrNotReadyReason_collab_conntection_idt RsvpProcNsrNotReadyReason = "collab-conntection-idt"

    // NSR peer not connected
    RsvpProcNsrNotReadyReason_nsr_peer_not_connected RsvpProcNsrNotReadyReason = "nsr-peer-not-connected"

    // NSR peer not in sync
    RsvpProcNsrNotReadyReason_nsr_peer_not_in_sync RsvpProcNsrNotReadyReason = "nsr-peer-not-in-sync"
)

// RsvpMgmtDsteModes represents RSVP DSTE modes
type RsvpMgmtDsteModes string

const (
    // pre standard
    RsvpMgmtDsteModes_pre_standard RsvpMgmtDsteModes = "pre-standard"

    // standard
    RsvpMgmtDsteModes_standard RsvpMgmtDsteModes = "standard"
)

// RsvpMgmtRestartState represents RSVP GR (Graceful Restart) Restart states
type RsvpMgmtRestartState string

const (
    // Restart is done
    RsvpMgmtRestartState_done RsvpMgmtRestartState = "done"

    // Neighbor is in recovery
    RsvpMgmtRestartState_recovery RsvpMgmtRestartState = "recovery"

    // Neighbor recovery aborted
    RsvpMgmtRestartState_abort RsvpMgmtRestartState = "abort"
)

// RsvpMgmtReservationTypeEnum represents RSVP Reservation Types
type RsvpMgmtReservationTypeEnum string

const (
    // Single Reservation
    RsvpMgmtReservationTypeEnum_rsvp_mgmt_ff_option RsvpMgmtReservationTypeEnum = "rsvp-mgmt-ff-option"

    // Shared Reservation, Unlimited Scope
    RsvpMgmtReservationTypeEnum_rsvp_mgmt_wf_option RsvpMgmtReservationTypeEnum = "rsvp-mgmt-wf-option"

    // Shared Reservation, Limited Scope
    RsvpMgmtReservationTypeEnum_rsvp_mgmt_se_option RsvpMgmtReservationTypeEnum = "rsvp-mgmt-se-option"
)

// RsvpMgmtTspec represents RSVP Generic Sender Tspec Types
type RsvpMgmtTspec string

const (
    // G709 OTN Sender Tspec Type
    RsvpMgmtTspec_g709otn RsvpMgmtTspec = "g709otn"

    // Int-Serv Sender Tspec Type
    RsvpMgmtTspec_intsrv RsvpMgmtTspec = "intsrv"
)

// RsvpMgmtAuthDirection represents RSVP Authentication Direction Types
type RsvpMgmtAuthDirection string

const (
    // Send
    RsvpMgmtAuthDirection_rsvp_mgmt_auth_direction_send RsvpMgmtAuthDirection = "rsvp-mgmt-auth-direction-send"

    // Receive
    RsvpMgmtAuthDirection_rsvp_mgmt_auth_direction_recv RsvpMgmtAuthDirection = "rsvp-mgmt-auth-direction-recv"
)

// RsvpMgmtFilter represents RSVP Filter Types
type RsvpMgmtFilter string

const (
    // IPv4 FilterSpec Type
    RsvpMgmtFilter_rsvp_mgmt_filter_type_ipv4 RsvpMgmtFilter = "rsvp-mgmt-filter-type-ipv4"

    // P2MP LSP IPv4 FilterSpec Type
    RsvpMgmtFilter_rsvp_mgmt_filter_type_p2mp_lsp_ipv4 RsvpMgmtFilter = "rsvp-mgmt-filter-type-p2mp-lsp-ipv4"
)

// RsvpProcRole represents RSVP Process Role
type RsvpProcRole string

const (
    // Unknown
    RsvpProcRole_unknown RsvpProcRole = "unknown"

    // V1 Active
    RsvpProcRole_v1_active RsvpProcRole = "v1-active"

    // V1 Standby
    RsvpProcRole_v1_standby RsvpProcRole = "v1-standby"

    // V2 Active
    RsvpProcRole_v2_active RsvpProcRole = "v2-active"

    // V2 Standby
    RsvpProcRole_v2_standby RsvpProcRole = "v2-standby"

    // V1 Active post big-bang
    RsvpProcRole_v1_active_post_big_bang RsvpProcRole = "v1-active-post-big-bang"

    // V1 Standbyi post big-bang
    RsvpProcRole_v1_standby_post_big_bang RsvpProcRole = "v1-standby-post-big-bang"

    // Count
    RsvpProcRole_count RsvpProcRole = "count"
)

// RsvpSession represents Rsvp session
type RsvpSession string

const (
    // Show IPv4 sessions only
    RsvpSession_ipv4 RsvpSession = "ipv4"

    // Show IPv4 P2P LSP sessions only
    RsvpSession_p2p_lsp_ipv4 RsvpSession = "p2p-lsp-ipv4"

    // Show IPv4 OUNI sessions only
    RsvpSession_ouni_ipv4 RsvpSession = "ouni-ipv4"

    // Show IPv4 P2MP LSP sessions only
    RsvpSession_p2mp_lsp_ipv4 RsvpSession = "p2mp-lsp-ipv4"
)

// RsvpMgmtHelloState represents RSVP Hello instance states
type RsvpMgmtHelloState string

const (
    // No Hello messages ever received from neighbor
    RsvpMgmtHelloState_hello_state_init RsvpMgmtHelloState = "hello-state-init"

    // Receiving expected Hello messages from neighbor
    RsvpMgmtHelloState_hello_state_up RsvpMgmtHelloState = "hello-state-up"

    // Stopped receiving expected Hello messages from
    // neighbor
    RsvpMgmtHelloState_hello_state_down RsvpMgmtHelloState = "hello-state-down"
)

// RsvpMgmtFlowSpec represents RSVP Generic FlowSpec Types
type RsvpMgmtFlowSpec string

const (
    // G709 OTN FlowSpec Type
    RsvpMgmtFlowSpec_g709otn RsvpMgmtFlowSpec = "g709otn"
)

// RsvpMgmtHelloInstanceOwner represents RSVP Hello instance owner
type RsvpMgmtHelloInstanceOwner string

const (
    // MPLS Graceful Restart
    RsvpMgmtHelloInstanceOwner_mpls_graceful_restart RsvpMgmtHelloInstanceOwner = "mpls-graceful-restart"

    // MPLS OUNI
    RsvpMgmtHelloInstanceOwner_mpls_ouni RsvpMgmtHelloInstanceOwner = "mpls-ouni"
)

// RsvpMgmtRroSubobj represents RSVP RRO Types
type RsvpMgmtRroSubobj string

const (
    // IPv4 RRO Type
    RsvpMgmtRroSubobj_ipv4rro_type RsvpMgmtRroSubobj = "ipv4rro-type"

    // Label RRO Type
    RsvpMgmtRroSubobj_label_rro_type RsvpMgmtRroSubobj = "label-rro-type"

    // Unnumbered RRO Type
    RsvpMgmtRroSubobj_unnumbered_rro_type RsvpMgmtRroSubobj = "unnumbered-rro-type"

    // SRLG RRO Type
    RsvpMgmtRroSubobj_srlg_rro_type RsvpMgmtRroSubobj = "srlg-rro-type"
)

// RsvpMgmtSession represents RSVP Session Types
type RsvpMgmtSession string

const (
    // UDP IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_udp_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-udp-ipv4"

    // LSP IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_lsp_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-lsp-ipv4"

    // UNI IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_uni_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-uni-ipv4"

    // P2MP LSP IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_p2mp_lsp_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-p2mp-lsp-ipv4"
)

// RsvpMgmtHelloDownReason represents Reasons why RSVP Hellos went down
type RsvpMgmtHelloDownReason string

const (
    // Not applicable. This means RSVP Hellos are up
    RsvpMgmtHelloDownReason_not_applicable RsvpMgmtHelloDownReason = "not-applicable"

    // Incorrect destination instance in received
    // Hellos
    RsvpMgmtHelloDownReason_wrong_destination_instance RsvpMgmtHelloDownReason = "wrong-destination-instance"

    // Incorrect source instance in received Hellos
    RsvpMgmtHelloDownReason_wrong_source_instance RsvpMgmtHelloDownReason = "wrong-source-instance"

    // Hellos not being received
    RsvpMgmtHelloDownReason_hello_missed RsvpMgmtHelloDownReason = "hello-missed"

    // Interface went down
    RsvpMgmtHelloDownReason_interface_down RsvpMgmtHelloDownReason = "interface-down"

    // Neighbor disabled Hellos
    RsvpMgmtHelloDownReason_neighbor_disabled_hello RsvpMgmtHelloDownReason = "neighbor-disabled-hello"

    // Control channel went down
    RsvpMgmtHelloDownReason_control_channel_down RsvpMgmtHelloDownReason = "control-channel-down"
)

// RsvpMgmtGenericLabel represents RSVP Generic Label Types
type RsvpMgmtGenericLabel string

const (
    // Generalized Label Type
    RsvpMgmtGenericLabel_rsvp_mgmt_label_type_gmpls RsvpMgmtGenericLabel = "rsvp-mgmt-label-type-gmpls"
)

// RsvpMgmtGrApp represents RSVP Graceful Restart application type
type RsvpMgmtGrApp string

const (
    // Application is OUNI
    RsvpMgmtGrApp_ouni RsvpMgmtGrApp = "ouni"

    // Application is GMPLS
    RsvpMgmtGrApp_gmpls RsvpMgmtGrApp = "gmpls"
)

// RsvpMgmtAuthChallengeStatus represents RSVP Authentication Challenge Status
type RsvpMgmtAuthChallengeStatus string

const (
    // Not configured
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_not_cfg RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-not-cfg"

    // Complete
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_completed RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-completed"

    // In Progress
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_in_progress RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-in-progress"

    // Failed
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_failure RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-failure"

    // Not supported
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_not_supported RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-not-supported"
)

// RsvpMgmtAuthKi represents RSVP Authentication KeyInfo Type
type RsvpMgmtAuthKi string

const (
    // None
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_none RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-none"

    // Global
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_global RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-global"

    // Interface
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_interface RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-interface"

    // Neighbor
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_neighbor RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-neighbor"
)

// RsvpTimerState represents RSVP Timer States
type RsvpTimerState string

const (
    // RSVP timer running and sleeping
    RsvpTimerState_rsvp_timer_running_and_sleeping RsvpTimerState = "rsvp-timer-running-and-sleeping"

    // RSVP timer running
    RsvpTimerState_rsvp_timer_running RsvpTimerState = "rsvp-timer-running"

    // RSVP timer not running
    RsvpTimerState_rsvp_timer_not_running RsvpTimerState = "rsvp-timer-not-running"
)

// RsvpSyncStatus represents Rsvp sync status
type RsvpSyncStatus string

const (
    // Not Ready
    RsvpSyncStatus_not_ready RsvpSyncStatus = "not-ready"

    // Ready
    RsvpSyncStatus_ready RsvpSyncStatus = "ready"
)

// RsvpMode represents Rsvp mode
type RsvpMode string

const (
    // Send
    RsvpMode_send RsvpMode = "send"

    // Receive
    RsvpMode_receive RsvpMode = "receive"
)

// RsvpMgmtEroSubobjStatus represents RSVP ERO Status
type RsvpMgmtEroSubobjStatus string

const (
    // ERO is not available in topology
    RsvpMgmtEroSubobjStatus_rsvp_mgmt_ero_status_not_available RsvpMgmtEroSubobjStatus = "rsvp-mgmt-ero-status-not-available"

    // ERO is available in topology
    RsvpMgmtEroSubobjStatus_rsvp_mgmt_ero_status_available RsvpMgmtEroSubobjStatus = "rsvp-mgmt-ero-status-available"

    // ERO doesn't have bw available in topology
    RsvpMgmtEroSubobjStatus_rsvp_mgmt_ero_status_bw_not_available RsvpMgmtEroSubobjStatus = "rsvp-mgmt-ero-status-bw-not-available"
)

// RsvpStandby
// RSVP operational data for standby role
type RsvpStandby struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of brief info about I/F neighbors.
    InterfaceNeighborBriefs RsvpStandby_InterfaceNeighborBriefs

    // Table of summary info about RSVP-enabled controllers.
    ControllerSummaries RsvpStandby_ControllerSummaries

    // Table for Authentication related information.
    AuthenticationBriefs RsvpStandby_AuthenticationBriefs

    // Table of brief info about sessions.
    SessionBriefs RsvpStandby_SessionBriefs

    // Table of detailed info about path state blocks.
    PsbDetaileds RsvpStandby_PsbDetaileds

    // Table of detailed info about RSVP-enabled controllers.
    ControllerDetaileds RsvpStandby_ControllerDetaileds

    // Fast Re-Route Summary State Information.
    FrrSummary RsvpStandby_FrrSummary

    // Table of detailed info about reservation state blocks.
    RsbDetaileds RsvpStandby_RsbDetaileds

    // Table of summary info about RSVP-enabled interfaces.
    InterfaceSummaries RsvpStandby_InterfaceSummaries

    // Table of brief info about hello instances.
    HelloInstanceBriefs RsvpStandby_HelloInstanceBriefs

    // Table for detailed authentication related information.
    AuthenticationDetails RsvpStandby_AuthenticationDetails

    // Table of brief info about reservation state blocks.
    RsbBriefs RsvpStandby_RsbBriefs

    // OpenConfig info.
    OpenConfig RsvpStandby_OpenConfig

    // Counters.
    Counters RsvpStandby_Counters

    // Table of detailed info about RSVP-enabled interfaces.
    InterfaceDetaileds RsvpStandby_InterfaceDetaileds

    // Table of brief info about RSVP-enabled controller.
    ControllerBriefs RsvpStandby_ControllerBriefs

    // Info about graceful-restart.
    GracefulRestart RsvpStandby_GracefulRestart

    // Table of brief info about i/f-based hello instances.
    HelloInterfaceInstanceBriefs RsvpStandby_HelloInterfaceInstanceBriefs

    // Table of detailed info about i/f-based hello instances.
    HelloInterfaceInstanceDetails RsvpStandby_HelloInterfaceInstanceDetails

    // Table of detailed info about I/F neighbors.
    InterfaceNeighborDetails RsvpStandby_InterfaceNeighborDetails

    // RSVP NSR information.
    Nsr RsvpStandby_Nsr

    // RSVP summary information.
    Summary RsvpStandby_Summary

    // Table of detailed info about Fast Re-route states.
    Frrs RsvpStandby_Frrs

    // Table of brief info about requests.
    RequestBriefs RsvpStandby_RequestBriefs

    // Table of detail info about requests.
    RequestDetails RsvpStandby_RequestDetails

    // Table of brief info about RSVP-enabled interfaces.
    InterfaceBriefs RsvpStandby_InterfaceBriefs

    // Table of detailed info about sessions.
    SessionDetaileds RsvpStandby_SessionDetaileds

    // Table of detailed info about hello instances.
    HelloInstanceDetails RsvpStandby_HelloInstanceDetails

    // Table of detailed info about global neighbors.
    GlobalNeighborDetails RsvpStandby_GlobalNeighborDetails

    // Table of brief info about path state blocks.
    PsbBriefs RsvpStandby_PsbBriefs

    // Table of brief info about global neighbors.
    GlobalNeighborBriefs RsvpStandby_GlobalNeighborBriefs
}

func (rsvpStandby *RsvpStandby) GetFilter() yfilter.YFilter { return rsvpStandby.YFilter }

func (rsvpStandby *RsvpStandby) SetFilter(yf yfilter.YFilter) { rsvpStandby.YFilter = yf }

func (rsvpStandby *RsvpStandby) GetGoName(yname string) string {
    if yname == "interface-neighbor-briefs" { return "InterfaceNeighborBriefs" }
    if yname == "controller-summaries" { return "ControllerSummaries" }
    if yname == "authentication-briefs" { return "AuthenticationBriefs" }
    if yname == "session-briefs" { return "SessionBriefs" }
    if yname == "psb-detaileds" { return "PsbDetaileds" }
    if yname == "controller-detaileds" { return "ControllerDetaileds" }
    if yname == "frr-summary" { return "FrrSummary" }
    if yname == "rsb-detaileds" { return "RsbDetaileds" }
    if yname == "interface-summaries" { return "InterfaceSummaries" }
    if yname == "hello-instance-briefs" { return "HelloInstanceBriefs" }
    if yname == "authentication-details" { return "AuthenticationDetails" }
    if yname == "rsb-briefs" { return "RsbBriefs" }
    if yname == "open-config" { return "OpenConfig" }
    if yname == "counters" { return "Counters" }
    if yname == "interface-detaileds" { return "InterfaceDetaileds" }
    if yname == "controller-briefs" { return "ControllerBriefs" }
    if yname == "graceful-restart" { return "GracefulRestart" }
    if yname == "hello-interface-instance-briefs" { return "HelloInterfaceInstanceBriefs" }
    if yname == "hello-interface-instance-details" { return "HelloInterfaceInstanceDetails" }
    if yname == "interface-neighbor-details" { return "InterfaceNeighborDetails" }
    if yname == "nsr" { return "Nsr" }
    if yname == "summary" { return "Summary" }
    if yname == "frrs" { return "Frrs" }
    if yname == "request-briefs" { return "RequestBriefs" }
    if yname == "request-details" { return "RequestDetails" }
    if yname == "interface-briefs" { return "InterfaceBriefs" }
    if yname == "session-detaileds" { return "SessionDetaileds" }
    if yname == "hello-instance-details" { return "HelloInstanceDetails" }
    if yname == "global-neighbor-details" { return "GlobalNeighborDetails" }
    if yname == "psb-briefs" { return "PsbBriefs" }
    if yname == "global-neighbor-briefs" { return "GlobalNeighborBriefs" }
    return ""
}

func (rsvpStandby *RsvpStandby) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby"
}

func (rsvpStandby *RsvpStandby) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-briefs" {
        return &rsvpStandby.InterfaceNeighborBriefs
    }
    if childYangName == "controller-summaries" {
        return &rsvpStandby.ControllerSummaries
    }
    if childYangName == "authentication-briefs" {
        return &rsvpStandby.AuthenticationBriefs
    }
    if childYangName == "session-briefs" {
        return &rsvpStandby.SessionBriefs
    }
    if childYangName == "psb-detaileds" {
        return &rsvpStandby.PsbDetaileds
    }
    if childYangName == "controller-detaileds" {
        return &rsvpStandby.ControllerDetaileds
    }
    if childYangName == "frr-summary" {
        return &rsvpStandby.FrrSummary
    }
    if childYangName == "rsb-detaileds" {
        return &rsvpStandby.RsbDetaileds
    }
    if childYangName == "interface-summaries" {
        return &rsvpStandby.InterfaceSummaries
    }
    if childYangName == "hello-instance-briefs" {
        return &rsvpStandby.HelloInstanceBriefs
    }
    if childYangName == "authentication-details" {
        return &rsvpStandby.AuthenticationDetails
    }
    if childYangName == "rsb-briefs" {
        return &rsvpStandby.RsbBriefs
    }
    if childYangName == "open-config" {
        return &rsvpStandby.OpenConfig
    }
    if childYangName == "counters" {
        return &rsvpStandby.Counters
    }
    if childYangName == "interface-detaileds" {
        return &rsvpStandby.InterfaceDetaileds
    }
    if childYangName == "controller-briefs" {
        return &rsvpStandby.ControllerBriefs
    }
    if childYangName == "graceful-restart" {
        return &rsvpStandby.GracefulRestart
    }
    if childYangName == "hello-interface-instance-briefs" {
        return &rsvpStandby.HelloInterfaceInstanceBriefs
    }
    if childYangName == "hello-interface-instance-details" {
        return &rsvpStandby.HelloInterfaceInstanceDetails
    }
    if childYangName == "interface-neighbor-details" {
        return &rsvpStandby.InterfaceNeighborDetails
    }
    if childYangName == "nsr" {
        return &rsvpStandby.Nsr
    }
    if childYangName == "summary" {
        return &rsvpStandby.Summary
    }
    if childYangName == "frrs" {
        return &rsvpStandby.Frrs
    }
    if childYangName == "request-briefs" {
        return &rsvpStandby.RequestBriefs
    }
    if childYangName == "request-details" {
        return &rsvpStandby.RequestDetails
    }
    if childYangName == "interface-briefs" {
        return &rsvpStandby.InterfaceBriefs
    }
    if childYangName == "session-detaileds" {
        return &rsvpStandby.SessionDetaileds
    }
    if childYangName == "hello-instance-details" {
        return &rsvpStandby.HelloInstanceDetails
    }
    if childYangName == "global-neighbor-details" {
        return &rsvpStandby.GlobalNeighborDetails
    }
    if childYangName == "psb-briefs" {
        return &rsvpStandby.PsbBriefs
    }
    if childYangName == "global-neighbor-briefs" {
        return &rsvpStandby.GlobalNeighborBriefs
    }
    return nil
}

func (rsvpStandby *RsvpStandby) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-neighbor-briefs"] = &rsvpStandby.InterfaceNeighborBriefs
    children["controller-summaries"] = &rsvpStandby.ControllerSummaries
    children["authentication-briefs"] = &rsvpStandby.AuthenticationBriefs
    children["session-briefs"] = &rsvpStandby.SessionBriefs
    children["psb-detaileds"] = &rsvpStandby.PsbDetaileds
    children["controller-detaileds"] = &rsvpStandby.ControllerDetaileds
    children["frr-summary"] = &rsvpStandby.FrrSummary
    children["rsb-detaileds"] = &rsvpStandby.RsbDetaileds
    children["interface-summaries"] = &rsvpStandby.InterfaceSummaries
    children["hello-instance-briefs"] = &rsvpStandby.HelloInstanceBriefs
    children["authentication-details"] = &rsvpStandby.AuthenticationDetails
    children["rsb-briefs"] = &rsvpStandby.RsbBriefs
    children["open-config"] = &rsvpStandby.OpenConfig
    children["counters"] = &rsvpStandby.Counters
    children["interface-detaileds"] = &rsvpStandby.InterfaceDetaileds
    children["controller-briefs"] = &rsvpStandby.ControllerBriefs
    children["graceful-restart"] = &rsvpStandby.GracefulRestart
    children["hello-interface-instance-briefs"] = &rsvpStandby.HelloInterfaceInstanceBriefs
    children["hello-interface-instance-details"] = &rsvpStandby.HelloInterfaceInstanceDetails
    children["interface-neighbor-details"] = &rsvpStandby.InterfaceNeighborDetails
    children["nsr"] = &rsvpStandby.Nsr
    children["summary"] = &rsvpStandby.Summary
    children["frrs"] = &rsvpStandby.Frrs
    children["request-briefs"] = &rsvpStandby.RequestBriefs
    children["request-details"] = &rsvpStandby.RequestDetails
    children["interface-briefs"] = &rsvpStandby.InterfaceBriefs
    children["session-detaileds"] = &rsvpStandby.SessionDetaileds
    children["hello-instance-details"] = &rsvpStandby.HelloInstanceDetails
    children["global-neighbor-details"] = &rsvpStandby.GlobalNeighborDetails
    children["psb-briefs"] = &rsvpStandby.PsbBriefs
    children["global-neighbor-briefs"] = &rsvpStandby.GlobalNeighborBriefs
    return children
}

func (rsvpStandby *RsvpStandby) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rsvpStandby *RsvpStandby) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpStandby *RsvpStandby) GetYangName() string { return "rsvp-standby" }

func (rsvpStandby *RsvpStandby) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpStandby *RsvpStandby) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpStandby *RsvpStandby) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpStandby *RsvpStandby) SetParent(parent types.Entity) { rsvpStandby.parent = parent }

func (rsvpStandby *RsvpStandby) GetParent() types.Entity { return rsvpStandby.parent }

func (rsvpStandby *RsvpStandby) GetParentYangName() string { return "Cisco-IOS-XR-ip-rsvp-oper" }

// RsvpStandby_InterfaceNeighborBriefs
// Table of brief info about I/F neighbors
type RsvpStandby_InterfaceNeighborBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single interface neighbor. The type is slice of
    // RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief.
    InterfaceNeighborBrief []RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetFilter() yfilter.YFilter { return interfaceNeighborBriefs.YFilter }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) SetFilter(yf yfilter.YFilter) { interfaceNeighborBriefs.YFilter = yf }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetGoName(yname string) string {
    if yname == "interface-neighbor-brief" { return "InterfaceNeighborBrief" }
    return ""
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetSegmentPath() string {
    return "interface-neighbor-briefs"
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-brief" {
        for _, c := range interfaceNeighborBriefs.InterfaceNeighborBrief {
            if interfaceNeighborBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief{}
        interfaceNeighborBriefs.InterfaceNeighborBrief = append(interfaceNeighborBriefs.InterfaceNeighborBrief, child)
        return &interfaceNeighborBriefs.InterfaceNeighborBrief[len(interfaceNeighborBriefs.InterfaceNeighborBrief)-1]
    }
    return nil
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborBriefs.InterfaceNeighborBrief {
        children[interfaceNeighborBriefs.InterfaceNeighborBrief[i].GetSegmentPath()] = &interfaceNeighborBriefs.InterfaceNeighborBrief[i]
    }
    return children
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetYangName() string { return "interface-neighbor-briefs" }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) SetParent(parent types.Entity) { interfaceNeighborBriefs.parent = parent }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetParent() types.Entity { return interfaceNeighborBriefs.parent }

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief
// Brief info for a single interface neighbor
type RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Compact list of I/F Neighbors. The type is slice of
    // RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact.
    InterfaceNeighborListCompact []RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetFilter() yfilter.YFilter { return interfaceNeighborBrief.YFilter }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) SetFilter(yf yfilter.YFilter) { interfaceNeighborBrief.YFilter = yf }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "interface-neighbor-list-compact" { return "InterfaceNeighborListCompact" }
    return ""
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetSegmentPath() string {
    return "interface-neighbor-brief" + "[neighbor-address='" + fmt.Sprintf("%v", interfaceNeighborBrief.NeighborAddress) + "']"
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-list-compact" {
        for _, c := range interfaceNeighborBrief.InterfaceNeighborListCompact {
            if interfaceNeighborBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact{}
        interfaceNeighborBrief.InterfaceNeighborListCompact = append(interfaceNeighborBrief.InterfaceNeighborListCompact, child)
        return &interfaceNeighborBrief.InterfaceNeighborListCompact[len(interfaceNeighborBrief.InterfaceNeighborListCompact)-1]
    }
    return nil
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborBrief.InterfaceNeighborListCompact {
        children[interfaceNeighborBrief.InterfaceNeighborListCompact[i].GetSegmentPath()] = &interfaceNeighborBrief.InterfaceNeighborListCompact[i]
    }
    return children
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = interfaceNeighborBrief.NeighborAddress
    leafs["node-address"] = interfaceNeighborBrief.NodeAddress
    return leafs
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetYangName() string { return "interface-neighbor-brief" }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) SetParent(parent types.Entity) { interfaceNeighborBrief.parent = parent }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetParent() types.Entity { return interfaceNeighborBrief.parent }

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetParentYangName() string { return "interface-neighbor-briefs" }

// RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
// Compact list of I/F Neighbors
type RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetFilter() yfilter.YFilter { return interfaceNeighborListCompact.YFilter }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) SetFilter(yf yfilter.YFilter) { interfaceNeighborListCompact.YFilter = yf }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetGoName(yname string) string {
    if yname == "interface-neighbor-address" { return "InterfaceNeighborAddress" }
    if yname == "neighbor-interface-name" { return "NeighborInterfaceName" }
    return ""
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetSegmentPath() string {
    return "interface-neighbor-list-compact"
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-address"] = interfaceNeighborListCompact.InterfaceNeighborAddress
    leafs["neighbor-interface-name"] = interfaceNeighborListCompact.NeighborInterfaceName
    return leafs
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetYangName() string { return "interface-neighbor-list-compact" }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) SetParent(parent types.Entity) { interfaceNeighborListCompact.parent = parent }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetParent() types.Entity { return interfaceNeighborListCompact.parent }

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetParentYangName() string { return "interface-neighbor-brief" }

// RsvpStandby_ControllerSummaries
// Table of summary info about RSVP-enabled
// controllers
type RsvpStandby_ControllerSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled controller. The type is slice of
    // RsvpStandby_ControllerSummaries_ControllerSummary.
    ControllerSummary []RsvpStandby_ControllerSummaries_ControllerSummary
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetFilter() yfilter.YFilter { return controllerSummaries.YFilter }

func (controllerSummaries *RsvpStandby_ControllerSummaries) SetFilter(yf yfilter.YFilter) { controllerSummaries.YFilter = yf }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetGoName(yname string) string {
    if yname == "controller-summary" { return "ControllerSummary" }
    return ""
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetSegmentPath() string {
    return "controller-summaries"
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller-summary" {
        for _, c := range controllerSummaries.ControllerSummary {
            if controllerSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_ControllerSummaries_ControllerSummary{}
        controllerSummaries.ControllerSummary = append(controllerSummaries.ControllerSummary, child)
        return &controllerSummaries.ControllerSummary[len(controllerSummaries.ControllerSummary)-1]
    }
    return nil
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllerSummaries.ControllerSummary {
        children[controllerSummaries.ControllerSummary[i].GetSegmentPath()] = &controllerSummaries.ControllerSummary[i]
    }
    return children
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetYangName() string { return "controller-summaries" }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerSummaries *RsvpStandby_ControllerSummaries) SetParent(parent types.Entity) { controllerSummaries.parent = parent }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetParent() types.Entity { return controllerSummaries.parent }

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_ControllerSummaries_ControllerSummary
// Summary info about an RSVP-enabled controller
type RsvpStandby_ControllerSummaries_ControllerSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetFilter() yfilter.YFilter { return controllerSummary.YFilter }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) SetFilter(yf yfilter.YFilter) { controllerSummary.YFilter = yf }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "paths-in" { return "PathsIn" }
    if yname == "paths-out" { return "PathsOut" }
    if yname == "reservations-in" { return "ReservationsIn" }
    if yname == "reservations-out" { return "ReservationsOut" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetSegmentPath() string {
    return "controller-summary" + "[controller-name='" + fmt.Sprintf("%v", controllerSummary.ControllerName) + "']"
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &controllerSummary.BandwidthInformation
    }
    return nil
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &controllerSummary.BandwidthInformation
    return children
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controllerSummary.ControllerName
    leafs["interface-name-xr"] = controllerSummary.InterfaceNameXr
    leafs["paths-in"] = controllerSummary.PathsIn
    leafs["paths-out"] = controllerSummary.PathsOut
    leafs["reservations-in"] = controllerSummary.ReservationsIn
    leafs["reservations-out"] = controllerSummary.ReservationsOut
    return leafs
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetBundleName() string { return "cisco_ios_xr" }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetYangName() string { return "controller-summary" }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) SetParent(parent types.Entity) { controllerSummary.parent = parent }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetParent() types.Entity { return controllerSummary.parent }

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetParentYangName() string { return "controller-summaries" }

// RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetParentYangName() string { return "controller-summary" }

// RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_AuthenticationBriefs
// Table for Authentication related information
type RsvpStandby_AuthenticationBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // RsvpStandby_AuthenticationBriefs_AuthenticationBrief.
    AuthenticationBrief []RsvpStandby_AuthenticationBriefs_AuthenticationBrief
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetFilter() yfilter.YFilter { return authenticationBriefs.YFilter }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) SetFilter(yf yfilter.YFilter) { authenticationBriefs.YFilter = yf }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetGoName(yname string) string {
    if yname == "authentication-brief" { return "AuthenticationBrief" }
    return ""
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetSegmentPath() string {
    return "authentication-briefs"
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication-brief" {
        for _, c := range authenticationBriefs.AuthenticationBrief {
            if authenticationBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_AuthenticationBriefs_AuthenticationBrief{}
        authenticationBriefs.AuthenticationBrief = append(authenticationBriefs.AuthenticationBrief, child)
        return &authenticationBriefs.AuthenticationBrief[len(authenticationBriefs.AuthenticationBrief)-1]
    }
    return nil
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range authenticationBriefs.AuthenticationBrief {
        children[authenticationBriefs.AuthenticationBrief[i].GetSegmentPath()] = &authenticationBriefs.AuthenticationBrief[i]
    }
    return children
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetYangName() string { return "authentication-briefs" }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) SetParent(parent types.Entity) { authenticationBriefs.parent = parent }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetParent() types.Entity { return authenticationBriefs.parent }

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_AuthenticationBriefs_AuthenticationBrief
// Brief Authentication information
type RsvpStandby_AuthenticationBriefs_AuthenticationBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetFilter() yfilter.YFilter { return authenticationBrief.YFilter }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) SetFilter(yf yfilter.YFilter) { authenticationBrief.YFilter = yf }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "mode-id" { return "ModeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "direction" { return "Direction" }
    if yname == "key-type" { return "KeyType" }
    if yname == "key-source" { return "KeySource" }
    if yname == "key-id" { return "KeyId" }
    if yname == "key-id-valid" { return "KeyIdValid" }
    return ""
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetSegmentPath() string {
    return "authentication-brief" + "[source-address='" + fmt.Sprintf("%v", authenticationBrief.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", authenticationBrief.DestinationAddress) + "']" + "[mode-id='" + fmt.Sprintf("%v", authenticationBrief.ModeId) + "']" + "[interface-name='" + fmt.Sprintf("%v", authenticationBrief.InterfaceName) + "']"
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = authenticationBrief.SourceAddress
    leafs["destination-address"] = authenticationBrief.DestinationAddress
    leafs["mode-id"] = authenticationBrief.ModeId
    leafs["interface-name"] = authenticationBrief.InterfaceName
    leafs["source-address-xr"] = authenticationBrief.SourceAddressXr
    leafs["destination-address-xr"] = authenticationBrief.DestinationAddressXr
    leafs["neighbor-address"] = authenticationBrief.NeighborAddress
    leafs["direction"] = authenticationBrief.Direction
    leafs["key-type"] = authenticationBrief.KeyType
    leafs["key-source"] = authenticationBrief.KeySource
    leafs["key-id"] = authenticationBrief.KeyId
    leafs["key-id-valid"] = authenticationBrief.KeyIdValid
    return leafs
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetYangName() string { return "authentication-brief" }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) SetParent(parent types.Entity) { authenticationBrief.parent = parent }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetParent() types.Entity { return authenticationBrief.parent }

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetParentYangName() string { return "authentication-briefs" }

// RsvpStandby_SessionBriefs
// Table of brief info about sessions
type RsvpStandby_SessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info about session. The type is slice of
    // RsvpStandby_SessionBriefs_SessionBrief.
    SessionBrief []RsvpStandby_SessionBriefs_SessionBrief
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetFilter() yfilter.YFilter { return sessionBriefs.YFilter }

func (sessionBriefs *RsvpStandby_SessionBriefs) SetFilter(yf yfilter.YFilter) { sessionBriefs.YFilter = yf }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetGoName(yname string) string {
    if yname == "session-brief" { return "SessionBrief" }
    return ""
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetSegmentPath() string {
    return "session-briefs"
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-brief" {
        for _, c := range sessionBriefs.SessionBrief {
            if sessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionBriefs_SessionBrief{}
        sessionBriefs.SessionBrief = append(sessionBriefs.SessionBrief, child)
        return &sessionBriefs.SessionBrief[len(sessionBriefs.SessionBrief)-1]
    }
    return nil
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionBriefs.SessionBrief {
        children[sessionBriefs.SessionBrief[i].GetSegmentPath()] = &sessionBriefs.SessionBrief[i]
    }
    return children
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetYangName() string { return "session-briefs" }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionBriefs *RsvpStandby_SessionBriefs) SetParent(parent types.Entity) { sessionBriefs.parent = parent }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetParent() types.Entity { return sessionBriefs.parent }

func (sessionBriefs *RsvpStandby_SessionBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_SessionBriefs_SessionBrief
// Brief info about session
type RsvpStandby_SessionBriefs_SessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session RsvpStandby_SessionBriefs_SessionBrief_Session
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetFilter() yfilter.YFilter { return sessionBrief.YFilter }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) SetFilter(yf yfilter.YFilter) { sessionBrief.YFilter = yf }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ps-bs" { return "PsBs" }
    if yname == "rs-bs" { return "RsBs" }
    if yname == "requests" { return "Requests" }
    if yname == "detail-list-size" { return "DetailListSize" }
    if yname == "session" { return "Session" }
    return ""
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetSegmentPath() string {
    return "session-brief"
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &sessionBrief.Session
    }
    return nil
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &sessionBrief.Session
    return children
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = sessionBrief.DestinationAddress
    leafs["destination-port"] = sessionBrief.DestinationPort
    leafs["protocol"] = sessionBrief.Protocol
    leafs["extended-tunnel-id"] = sessionBrief.ExtendedTunnelId
    leafs["session-type"] = sessionBrief.SessionType
    leafs["p2mp-id"] = sessionBrief.P2MpId
    leafs["vrf-name"] = sessionBrief.VrfName
    leafs["ps-bs"] = sessionBrief.PsBs
    leafs["rs-bs"] = sessionBrief.RsBs
    leafs["requests"] = sessionBrief.Requests
    leafs["detail-list-size"] = sessionBrief.DetailListSize
    return leafs
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetYangName() string { return "session-brief" }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) SetParent(parent types.Entity) { sessionBrief.parent = parent }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetParent() types.Entity { return sessionBrief.parent }

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetParentYangName() string { return "session-briefs" }

// RsvpStandby_SessionBriefs_SessionBrief_Session
// RSVP Session Information
type RsvpStandby_SessionBriefs_SessionBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetParentYangName() string { return "session-brief" }

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbDetaileds
// Table of detailed info about path state blocks
type RsvpStandby_PsbDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single path state block. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed.
    PsbDetailed []RsvpStandby_PsbDetaileds_PsbDetailed
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetFilter() yfilter.YFilter { return psbDetaileds.YFilter }

func (psbDetaileds *RsvpStandby_PsbDetaileds) SetFilter(yf yfilter.YFilter) { psbDetaileds.YFilter = yf }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetGoName(yname string) string {
    if yname == "psb-detailed" { return "PsbDetailed" }
    return ""
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetSegmentPath() string {
    return "psb-detaileds"
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "psb-detailed" {
        for _, c := range psbDetaileds.PsbDetailed {
            if psbDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_PsbDetaileds_PsbDetailed{}
        psbDetaileds.PsbDetailed = append(psbDetaileds.PsbDetailed, child)
        return &psbDetaileds.PsbDetailed[len(psbDetaileds.PsbDetailed)-1]
    }
    return nil
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range psbDetaileds.PsbDetailed {
        children[psbDetaileds.PsbDetailed[i].GetSegmentPath()] = &psbDetaileds.PsbDetailed[i]
    }
    return children
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetYangName() string { return "psb-detaileds" }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbDetaileds *RsvpStandby_PsbDetaileds) SetParent(parent types.Entity) { psbDetaileds.parent = parent }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetParent() types.Entity { return psbDetaileds.parent }

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_PsbDetaileds_PsbDetailed
// Detailed info for a single path state block
type RsvpStandby_PsbDetaileds_PsbDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Path Backup Tunnel. The type is string.
    BackupTunnelName interface{}

    // Incoming ERO validity. The type is bool.
    IsInEroValid interface{}

    // Outgoing ERO validity. The type is bool.
    IsOutEroValid interface{}

    // RSVP Session Information.
    Session RsvpStandby_PsbDetaileds_PsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp

    // RSVP Template.
    Template RsvpStandby_PsbDetaileds_PsbDetailed_Template

    // RSVP Session Attribute.
    SessionAttribute RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec

    // Path Flags.
    PathFlags RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags

    // Path Hop Info.
    Hop RsvpStandby_PsbDetaileds_PsbDetailed_Hop

    // Policy Sources Info.
    PolicySourceInfo RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo

    // RSVP Header Info.
    Header RsvpStandby_PsbDetaileds_PsbDetailed_Header

    // Expiry Time.
    ExpiryTime RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime

    // Policy Flags.
    PolicyFlags RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo

    // DS-TE Class-Type.
    ClassType RsvpStandby_PsbDetaileds_PsbDetailed_ClassType

    // Path Forwarding Contexts. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_Pfc.
    Pfc []RsvpStandby_PsbDetaileds_PsbDetailed_Pfc

    // Incoming Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_InEro.
    InEro []RsvpStandby_PsbDetaileds_PsbDetailed_InEro

    // Outgoing Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_OutEro.
    OutEro []RsvpStandby_PsbDetaileds_PsbDetailed_OutEro
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetFilter() yfilter.YFilter { return psbDetailed.YFilter }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) SetFilter(yf yfilter.YFilter) { psbDetailed.YFilter = yf }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "backup-tunnel-name" { return "BackupTunnelName" }
    if yname == "is-in-ero-valid" { return "IsInEroValid" }
    if yname == "is-out-ero-valid" { return "IsOutEroValid" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "template" { return "Template" }
    if yname == "session-attribute" { return "SessionAttribute" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "path-flags" { return "PathFlags" }
    if yname == "hop" { return "Hop" }
    if yname == "policy-source-info" { return "PolicySourceInfo" }
    if yname == "header" { return "Header" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    if yname == "label-info" { return "LabelInfo" }
    if yname == "class-type" { return "ClassType" }
    if yname == "pfc" { return "Pfc" }
    if yname == "in-ero" { return "InEro" }
    if yname == "out-ero" { return "OutEro" }
    return ""
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetSegmentPath() string {
    return "psb-detailed"
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &psbDetailed.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &psbDetailed.S2LSubLsp
    }
    if childYangName == "template" {
        return &psbDetailed.Template
    }
    if childYangName == "session-attribute" {
        return &psbDetailed.SessionAttribute
    }
    if childYangName == "traffic-spec" {
        return &psbDetailed.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &psbDetailed.GenericTrafficSpec
    }
    if childYangName == "path-flags" {
        return &psbDetailed.PathFlags
    }
    if childYangName == "hop" {
        return &psbDetailed.Hop
    }
    if childYangName == "policy-source-info" {
        return &psbDetailed.PolicySourceInfo
    }
    if childYangName == "header" {
        return &psbDetailed.Header
    }
    if childYangName == "expiry-time" {
        return &psbDetailed.ExpiryTime
    }
    if childYangName == "policy-flags" {
        return &psbDetailed.PolicyFlags
    }
    if childYangName == "policy-query-flags" {
        return &psbDetailed.PolicyQueryFlags
    }
    if childYangName == "label-info" {
        return &psbDetailed.LabelInfo
    }
    if childYangName == "class-type" {
        return &psbDetailed.ClassType
    }
    if childYangName == "pfc" {
        for _, c := range psbDetailed.Pfc {
            if psbDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_PsbDetaileds_PsbDetailed_Pfc{}
        psbDetailed.Pfc = append(psbDetailed.Pfc, child)
        return &psbDetailed.Pfc[len(psbDetailed.Pfc)-1]
    }
    if childYangName == "in-ero" {
        for _, c := range psbDetailed.InEro {
            if psbDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_PsbDetaileds_PsbDetailed_InEro{}
        psbDetailed.InEro = append(psbDetailed.InEro, child)
        return &psbDetailed.InEro[len(psbDetailed.InEro)-1]
    }
    if childYangName == "out-ero" {
        for _, c := range psbDetailed.OutEro {
            if psbDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_PsbDetaileds_PsbDetailed_OutEro{}
        psbDetailed.OutEro = append(psbDetailed.OutEro, child)
        return &psbDetailed.OutEro[len(psbDetailed.OutEro)-1]
    }
    return nil
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &psbDetailed.Session
    children["s2l-sub-lsp"] = &psbDetailed.S2LSubLsp
    children["template"] = &psbDetailed.Template
    children["session-attribute"] = &psbDetailed.SessionAttribute
    children["traffic-spec"] = &psbDetailed.TrafficSpec
    children["generic-traffic-spec"] = &psbDetailed.GenericTrafficSpec
    children["path-flags"] = &psbDetailed.PathFlags
    children["hop"] = &psbDetailed.Hop
    children["policy-source-info"] = &psbDetailed.PolicySourceInfo
    children["header"] = &psbDetailed.Header
    children["expiry-time"] = &psbDetailed.ExpiryTime
    children["policy-flags"] = &psbDetailed.PolicyFlags
    children["policy-query-flags"] = &psbDetailed.PolicyQueryFlags
    children["label-info"] = &psbDetailed.LabelInfo
    children["class-type"] = &psbDetailed.ClassType
    for i := range psbDetailed.Pfc {
        children[psbDetailed.Pfc[i].GetSegmentPath()] = &psbDetailed.Pfc[i]
    }
    for i := range psbDetailed.InEro {
        children[psbDetailed.InEro[i].GetSegmentPath()] = &psbDetailed.InEro[i]
    }
    for i := range psbDetailed.OutEro {
        children[psbDetailed.OutEro[i].GetSegmentPath()] = &psbDetailed.OutEro[i]
    }
    return children
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = psbDetailed.DestinationAddress
    leafs["destination-port"] = psbDetailed.DestinationPort
    leafs["protocol"] = psbDetailed.Protocol
    leafs["extended-tunnel-id"] = psbDetailed.ExtendedTunnelId
    leafs["session-type"] = psbDetailed.SessionType
    leafs["p2mp-id"] = psbDetailed.P2MpId
    leafs["source-address"] = psbDetailed.SourceAddress
    leafs["source-port"] = psbDetailed.SourcePort
    leafs["sub-group-origin"] = psbDetailed.SubGroupOrigin
    leafs["sub-group-id"] = psbDetailed.SubGroupId
    leafs["vrf-name"] = psbDetailed.VrfName
    leafs["input-interface"] = psbDetailed.InputInterface
    leafs["backup-tunnel-name"] = psbDetailed.BackupTunnelName
    leafs["is-in-ero-valid"] = psbDetailed.IsInEroValid
    leafs["is-out-ero-valid"] = psbDetailed.IsOutEroValid
    return leafs
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetYangName() string { return "psb-detailed" }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) SetParent(parent types.Entity) { psbDetailed.parent = parent }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetParent() types.Entity { return psbDetailed.parent }

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetParentYangName() string { return "psb-detaileds" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Session
// RSVP Session Information
type RsvpStandby_PsbDetaileds_PsbDetailed_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession
// RSVP Session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2LSubLsp) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Template
// RSVP Template
type RsvpStandby_PsbDetaileds_PsbDetailed_Template struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetFilter() yfilter.YFilter { return template.YFilter }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) SetFilter(yf yfilter.YFilter) { template.YFilter = yf }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetSegmentPath() string {
    return "template"
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &template.RsvpFilter
    }
    return nil
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &template.RsvpFilter
    return children
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetBundleName() string { return "cisco_ios_xr" }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetYangName() string { return "template" }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) SetParent(parent types.Entity) { template.parent = parent }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetParent() types.Entity { return template.parent }

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter
// RSVP Filter
type RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetParentYangName() string { return "template" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute
// RSVP Session Attribute
type RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetFilter() yfilter.YFilter { return sessionAttribute.YFilter }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) SetFilter(yf yfilter.YFilter) { sessionAttribute.YFilter = yf }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "reservation-priority" { return "ReservationPriority" }
    if yname == "sess-attribute-flags" { return "SessAttributeFlags" }
    return ""
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetSegmentPath() string {
    return "session-attribute"
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sess-attribute-flags" {
        return &sessionAttribute.SessAttributeFlags
    }
    return nil
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sess-attribute-flags"] = &sessionAttribute.SessAttributeFlags
    return children
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = sessionAttribute.SetupPriority
    leafs["reservation-priority"] = sessionAttribute.ReservationPriority
    return leafs
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetYangName() string { return "session-attribute" }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) SetParent(parent types.Entity) { sessionAttribute.parent = parent }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetParent() types.Entity { return sessionAttribute.parent }

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
// Session Attributes
type RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetFilter() yfilter.YFilter { return sessAttributeFlags.YFilter }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) SetFilter(yf yfilter.YFilter) { sessAttributeFlags.YFilter = yf }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetGoName(yname string) string {
    if yname == "is-local-protect" { return "IsLocalProtect" }
    if yname == "is-node-protect" { return "IsNodeProtect" }
    if yname == "is-bandwidth-protect" { return "IsBandwidthProtect" }
    if yname == "is-record-labels" { return "IsRecordLabels" }
    if yname == "is-shared-explicit-requested" { return "IsSharedExplicitRequested" }
    return ""
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetSegmentPath() string {
    return "sess-attribute-flags"
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-protect"] = sessAttributeFlags.IsLocalProtect
    leafs["is-node-protect"] = sessAttributeFlags.IsNodeProtect
    leafs["is-bandwidth-protect"] = sessAttributeFlags.IsBandwidthProtect
    leafs["is-record-labels"] = sessAttributeFlags.IsRecordLabels
    leafs["is-shared-explicit-requested"] = sessAttributeFlags.IsSharedExplicitRequested
    return leafs
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetBundleName() string { return "cisco_ios_xr" }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetYangName() string { return "sess-attribute-flags" }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) SetParent(parent types.Entity) { sessAttributeFlags.parent = parent }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetParent() types.Entity { return sessAttributeFlags.parent }

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetParentYangName() string { return "session-attribute" }

// RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec
// RSVP Traffic Spec Info
type RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags
// Path Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non-RSVP Hop Upstream. The type is bool.
    IsNonRsvpHopUpstream interface{}

    // Local Sender. The type is bool.
    IsLocalSender interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Bidirectional. The type is bool.
    IsBidirectional interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetFilter() yfilter.YFilter { return pathFlags.YFilter }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) SetFilter(yf yfilter.YFilter) { pathFlags.YFilter = yf }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetGoName(yname string) string {
    if yname == "is-non-rsvp-hop-upstream" { return "IsNonRsvpHopUpstream" }
    if yname == "is-local-sender" { return "IsLocalSender" }
    if yname == "is-message-id-valid" { return "IsMessageIdValid" }
    if yname == "is-local-repair" { return "IsLocalRepair" }
    if yname == "is-bidirectional" { return "IsBidirectional" }
    if yname == "is-lockout" { return "IsLockout" }
    return ""
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetSegmentPath() string {
    return "path-flags"
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-non-rsvp-hop-upstream"] = pathFlags.IsNonRsvpHopUpstream
    leafs["is-local-sender"] = pathFlags.IsLocalSender
    leafs["is-message-id-valid"] = pathFlags.IsMessageIdValid
    leafs["is-local-repair"] = pathFlags.IsLocalRepair
    leafs["is-bidirectional"] = pathFlags.IsBidirectional
    leafs["is-lockout"] = pathFlags.IsLockout
    return leafs
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetBundleName() string { return "cisco_ios_xr" }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetYangName() string { return "path-flags" }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) SetParent(parent types.Entity) { pathFlags.parent = parent }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetParent() types.Entity { return pathFlags.parent }

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Hop
// Path Hop Info
type RsvpStandby_PsbDetaileds_PsbDetailed_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetYangName() string { return "hop" }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetParent() types.Entity { return hop.parent }

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo
// Policy Sources Info
type RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetFilter() yfilter.YFilter { return policySourceInfo.YFilter }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) SetFilter(yf yfilter.YFilter) { policySourceInfo.YFilter = yf }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetGoName(yname string) string {
    if yname == "is-te-link" { return "IsTeLink" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-cops" { return "IsCops" }
    if yname == "is-default" { return "IsDefault" }
    if yname == "is-cable" { return "IsCable" }
    return ""
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetSegmentPath() string {
    return "policy-source-info"
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-te-link"] = policySourceInfo.IsTeLink
    leafs["is-local"] = policySourceInfo.IsLocal
    leafs["is-cops"] = policySourceInfo.IsCops
    leafs["is-default"] = policySourceInfo.IsDefault
    leafs["is-cable"] = policySourceInfo.IsCable
    return leafs
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetBundleName() string { return "cisco_ios_xr" }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetYangName() string { return "policy-source-info" }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) SetParent(parent types.Entity) { policySourceInfo.parent = parent }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetParent() types.Entity { return policySourceInfo.parent }

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Header
// RSVP Header Info
type RsvpStandby_PsbDetaileds_PsbDetailed_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetSegmentPath() string {
    return "header"
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = header.RsvpVersion
    leafs["rsvp-header-flags"] = header.RsvpHeaderFlags
    leafs["rsvp-ttl"] = header.RsvpTtl
    leafs["rsvp-message-type"] = header.RsvpMessageType
    leafs["ip-tos"] = header.IpTos
    leafs["ip-ttl"] = header.IpTtl
    leafs["ip-source-address"] = header.IpSourceAddress
    return leafs
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetYangName() string { return "header" }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetParent() types.Entity { return header.parent }

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime
// Expiry Time
type RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags
// Policy Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags
// Policy Query Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo
// Label Information
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetFilter() yfilter.YFilter { return labelInfo.YFilter }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) SetFilter(yf yfilter.YFilter) { labelInfo.YFilter = yf }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "local-downstream-label" { return "LocalDownstreamLabel" }
    if yname == "outgoing-downstream-label" { return "OutgoingDownstreamLabel" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "outgoing-upstream-label" { return "OutgoingUpstreamLabel" }
    if yname == "local-upstream-label" { return "LocalUpstreamLabel" }
    if yname == "recovery-label" { return "RecoveryLabel" }
    if yname == "lsp-wrap-label" { return "LspWrapLabel" }
    if yname == "generic-local-downstream-label" { return "GenericLocalDownstreamLabel" }
    if yname == "generic-outgoing-downstream-label" { return "GenericOutgoingDownstreamLabel" }
    if yname == "generic-merge-point-label" { return "GenericMergePointLabel" }
    if yname == "generic-outgoing-upstream-label" { return "GenericOutgoingUpstreamLabel" }
    if yname == "generic-local-upstream-label" { return "GenericLocalUpstreamLabel" }
    if yname == "generic-recovery-label" { return "GenericRecoveryLabel" }
    return ""
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetSegmentPath() string {
    return "label-info"
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-local-downstream-label" {
        return &labelInfo.GenericLocalDownstreamLabel
    }
    if childYangName == "generic-outgoing-downstream-label" {
        return &labelInfo.GenericOutgoingDownstreamLabel
    }
    if childYangName == "generic-merge-point-label" {
        return &labelInfo.GenericMergePointLabel
    }
    if childYangName == "generic-outgoing-upstream-label" {
        return &labelInfo.GenericOutgoingUpstreamLabel
    }
    if childYangName == "generic-local-upstream-label" {
        return &labelInfo.GenericLocalUpstreamLabel
    }
    if childYangName == "generic-recovery-label" {
        return &labelInfo.GenericRecoveryLabel
    }
    return nil
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-local-downstream-label"] = &labelInfo.GenericLocalDownstreamLabel
    children["generic-outgoing-downstream-label"] = &labelInfo.GenericOutgoingDownstreamLabel
    children["generic-merge-point-label"] = &labelInfo.GenericMergePointLabel
    children["generic-outgoing-upstream-label"] = &labelInfo.GenericOutgoingUpstreamLabel
    children["generic-local-upstream-label"] = &labelInfo.GenericLocalUpstreamLabel
    children["generic-recovery-label"] = &labelInfo.GenericRecoveryLabel
    return children
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = labelInfo.IsValid
    leafs["local-downstream-label"] = labelInfo.LocalDownstreamLabel
    leafs["outgoing-downstream-label"] = labelInfo.OutgoingDownstreamLabel
    leafs["merge-point-label"] = labelInfo.MergePointLabel
    leafs["outgoing-upstream-label"] = labelInfo.OutgoingUpstreamLabel
    leafs["local-upstream-label"] = labelInfo.LocalUpstreamLabel
    leafs["recovery-label"] = labelInfo.RecoveryLabel
    leafs["lsp-wrap-label"] = labelInfo.LspWrapLabel
    return leafs
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetBundleName() string { return "cisco_ios_xr" }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetYangName() string { return "label-info" }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) SetParent(parent types.Entity) { labelInfo.parent = parent }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetParent() types.Entity { return labelInfo.parent }

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetFilter() yfilter.YFilter { return genericLocalDownstreamLabel.YFilter }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalDownstreamLabel.YFilter = yf }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetSegmentPath() string {
    return "generic-local-downstream-label"
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalDownstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalDownstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetYangName() string { return "generic-local-downstream-label" }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetParent(parent types.Entity) { genericLocalDownstreamLabel.parent = parent }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParent() types.Entity { return genericLocalDownstreamLabel.parent }

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-downstream-label" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingDownstreamLabel.YFilter }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingDownstreamLabel.YFilter = yf }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-downstream-label"
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingDownstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingDownstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetYangName() string { return "generic-outgoing-downstream-label" }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetParent(parent types.Entity) { genericOutgoingDownstreamLabel.parent = parent }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParent() types.Entity { return genericOutgoingDownstreamLabel.parent }

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-downstream-label" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetFilter() yfilter.YFilter { return genericMergePointLabel.YFilter }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) SetFilter(yf yfilter.YFilter) { genericMergePointLabel.YFilter = yf }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetSegmentPath() string {
    return "generic-merge-point-label"
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericMergePointLabel.GeneralizedLabel
    }
    return nil
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericMergePointLabel.GeneralizedLabel
    return children
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericMergePointLabel.GenericLabelType
    return leafs
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetYangName() string { return "generic-merge-point-label" }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) SetParent(parent types.Entity) { genericMergePointLabel.parent = parent }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetParent() types.Entity { return genericMergePointLabel.parent }

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParentYangName() string { return "generic-merge-point-label" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingUpstreamLabel.YFilter }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingUpstreamLabel.YFilter = yf }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-upstream-label"
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingUpstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingUpstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetYangName() string { return "generic-outgoing-upstream-label" }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetParent(parent types.Entity) { genericOutgoingUpstreamLabel.parent = parent }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParent() types.Entity { return genericOutgoingUpstreamLabel.parent }

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-upstream-label" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetFilter() yfilter.YFilter { return genericLocalUpstreamLabel.YFilter }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalUpstreamLabel.YFilter = yf }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetSegmentPath() string {
    return "generic-local-upstream-label"
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalUpstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalUpstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetYangName() string { return "generic-local-upstream-label" }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetParent(parent types.Entity) { genericLocalUpstreamLabel.parent = parent }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParent() types.Entity { return genericLocalUpstreamLabel.parent }

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-upstream-label" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetFilter() yfilter.YFilter { return genericRecoveryLabel.YFilter }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) SetFilter(yf yfilter.YFilter) { genericRecoveryLabel.YFilter = yf }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetSegmentPath() string {
    return "generic-recovery-label"
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericRecoveryLabel.GeneralizedLabel
    }
    return nil
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericRecoveryLabel.GeneralizedLabel
    return children
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericRecoveryLabel.GenericLabelType
    return leafs
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetYangName() string { return "generic-recovery-label" }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) SetParent(parent types.Entity) { genericRecoveryLabel.parent = parent }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetParent() types.Entity { return genericRecoveryLabel.parent }

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParentYangName() string { return "generic-recovery-label" }

// RsvpStandby_PsbDetaileds_PsbDetailed_ClassType
// DS-TE Class-Type
type RsvpStandby_PsbDetaileds_PsbDetailed_ClassType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the Class-Type information valid. The type is bool.
    IsClassTypeInfoValid interface{}

    // DS-TE Class-Type. The type is interface{} with range: 0..255.
    ClassType interface{}
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetFilter() yfilter.YFilter { return classType.YFilter }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) SetFilter(yf yfilter.YFilter) { classType.YFilter = yf }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetGoName(yname string) string {
    if yname == "is-class-type-info-valid" { return "IsClassTypeInfoValid" }
    if yname == "class-type" { return "ClassType" }
    return ""
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetSegmentPath() string {
    return "class-type"
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-class-type-info-valid"] = classType.IsClassTypeInfoValid
    leafs["class-type"] = classType.ClassType
    return leafs
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetBundleName() string { return "cisco_ios_xr" }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetYangName() string { return "class-type" }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) SetParent(parent types.Entity) { classType.parent = parent }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetParent() types.Entity { return classType.parent }

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Pfc
// Path Forwarding Contexts
type RsvpStandby_PsbDetaileds_PsbDetailed_Pfc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Output interface. The type is string.
    OutputInterface interface{}

    // Policy Flags.
    PolicyFlags RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetFilter() yfilter.YFilter { return pfc.YFilter }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) SetFilter(yf yfilter.YFilter) { pfc.YFilter = yf }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetGoName(yname string) string {
    if yname == "output-interface" { return "OutputInterface" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    return ""
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetSegmentPath() string {
    return "pfc"
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-flags" {
        return &pfc.PolicyFlags
    }
    if childYangName == "policy-query-flags" {
        return &pfc.PolicyQueryFlags
    }
    return nil
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["policy-flags"] = &pfc.PolicyFlags
    children["policy-query-flags"] = &pfc.PolicyQueryFlags
    return children
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["output-interface"] = pfc.OutputInterface
    return leafs
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetBundleName() string { return "cisco_ios_xr" }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetYangName() string { return "pfc" }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) SetParent(parent types.Entity) { pfc.parent = parent }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetParent() types.Entity { return pfc.parent }

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags
// Policy Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetParentYangName() string { return "pfc" }

// RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
// Policy Query Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetParentYangName() string { return "pfc" }

// RsvpStandby_PsbDetaileds_PsbDetailed_InEro
// Incoming Explicit Route Sub Objects
type RsvpStandby_PsbDetaileds_PsbDetailed_InEro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetFilter() yfilter.YFilter { return inEro.YFilter }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) SetFilter(yf yfilter.YFilter) { inEro.YFilter = yf }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetSegmentPath() string {
    return "in-ero"
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &inEro.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &inEro.UnnumberedEroSubObject
    }
    return nil
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &inEro.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &inEro.UnnumberedEroSubObject
    return children
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = inEro.EroType
    return leafs
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetBundleName() string { return "cisco_ios_xr" }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetYangName() string { return "in-ero" }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) SetParent(parent types.Entity) { inEro.parent = parent }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetParent() types.Entity { return inEro.parent }

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetParentYangName() string { return "in-ero" }

// RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetParentYangName() string { return "in-ero" }

// RsvpStandby_PsbDetaileds_PsbDetailed_OutEro
// Outgoing Explicit Route Sub Objects
type RsvpStandby_PsbDetaileds_PsbDetailed_OutEro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetFilter() yfilter.YFilter { return outEro.YFilter }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) SetFilter(yf yfilter.YFilter) { outEro.YFilter = yf }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetSegmentPath() string {
    return "out-ero"
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &outEro.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &outEro.UnnumberedEroSubObject
    }
    return nil
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &outEro.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &outEro.UnnumberedEroSubObject
    return children
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = outEro.EroType
    return leafs
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetBundleName() string { return "cisco_ios_xr" }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetYangName() string { return "out-ero" }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) SetParent(parent types.Entity) { outEro.parent = parent }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetParent() types.Entity { return outEro.parent }

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetParentYangName() string { return "psb-detailed" }

// RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetParentYangName() string { return "out-ero" }

// RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetParentYangName() string { return "out-ero" }

// RsvpStandby_ControllerDetaileds
// Table of detailed info about RSVP-enabled
// controllers
type RsvpStandby_ControllerDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled controller. The type is slice of
    // RsvpStandby_ControllerDetaileds_ControllerDetailed.
    ControllerDetailed []RsvpStandby_ControllerDetaileds_ControllerDetailed
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetFilter() yfilter.YFilter { return controllerDetaileds.YFilter }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) SetFilter(yf yfilter.YFilter) { controllerDetaileds.YFilter = yf }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetGoName(yname string) string {
    if yname == "controller-detailed" { return "ControllerDetailed" }
    return ""
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetSegmentPath() string {
    return "controller-detaileds"
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller-detailed" {
        for _, c := range controllerDetaileds.ControllerDetailed {
            if controllerDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_ControllerDetaileds_ControllerDetailed{}
        controllerDetaileds.ControllerDetailed = append(controllerDetaileds.ControllerDetailed, child)
        return &controllerDetaileds.ControllerDetailed[len(controllerDetaileds.ControllerDetailed)-1]
    }
    return nil
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllerDetaileds.ControllerDetailed {
        children[controllerDetaileds.ControllerDetailed[i].GetSegmentPath()] = &controllerDetaileds.ControllerDetailed[i]
    }
    return children
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetYangName() string { return "controller-detaileds" }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) SetParent(parent types.Entity) { controllerDetaileds.parent = parent }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetParent() types.Entity { return controllerDetaileds.parent }

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed
// Detailed info about an RSVP-enabled controller
type RsvpStandby_ControllerDetaileds_ControllerDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation

    // Interface flags.
    Flags RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags

    // Neighbor array. The type is slice of
    // RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray.
    NeighborArray []RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetFilter() yfilter.YFilter { return controllerDetailed.YFilter }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) SetFilter(yf yfilter.YFilter) { controllerDetailed.YFilter = yf }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "signalling-ip-tos" { return "SignallingIpTos" }
    if yname == "integrity-send-password" { return "IntegritySendPassword" }
    if yname == "integrity-receive-password" { return "IntegrityReceivePassword" }
    if yname == "integrity-receive-password-optional" { return "IntegrityReceivePasswordOptional" }
    if yname == "refresh-timer-state" { return "RefreshTimerState" }
    if yname == "summary-refresh-timer-state" { return "SummaryRefreshTimerState" }
    if yname == "refresh-interval" { return "RefreshInterval" }
    if yname == "out-of-band-refresh-interval" { return "OutOfBandRefreshInterval" }
    if yname == "summary-refresh-max-size" { return "SummaryRefreshMaxSize" }
    if yname == "bundle-message-max-size" { return "BundleMessageMaxSize" }
    if yname == "expiry-timer-state" { return "ExpiryTimerState" }
    if yname == "expiry-states" { return "ExpiryStates" }
    if yname == "expiry-interval" { return "ExpiryInterval" }
    if yname == "expiry-drops-tolerated" { return "ExpiryDropsTolerated" }
    if yname == "out-of-band-expiry-drops-tolerated" { return "OutOfBandExpiryDropsTolerated" }
    if yname == "ack-hold-time" { return "AckHoldTime" }
    if yname == "ack-max-size" { return "AckMaxSize" }
    if yname == "retransmit-time" { return "RetransmitTime" }
    if yname == "pacing-interval" { return "PacingInterval" }
    if yname == "pacing-message-rate" { return "PacingMessageRate" }
    if yname == "pacing-timer-state" { return "PacingTimerState" }
    if yname == "pacing-messages" { return "PacingMessages" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    if yname == "flags" { return "Flags" }
    if yname == "neighbor-array" { return "NeighborArray" }
    return ""
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetSegmentPath() string {
    return "controller-detailed" + "[controller-name='" + fmt.Sprintf("%v", controllerDetailed.ControllerName) + "']"
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &controllerDetailed.BandwidthInformation
    }
    if childYangName == "flags" {
        return &controllerDetailed.Flags
    }
    if childYangName == "neighbor-array" {
        for _, c := range controllerDetailed.NeighborArray {
            if controllerDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray{}
        controllerDetailed.NeighborArray = append(controllerDetailed.NeighborArray, child)
        return &controllerDetailed.NeighborArray[len(controllerDetailed.NeighborArray)-1]
    }
    return nil
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &controllerDetailed.BandwidthInformation
    children["flags"] = &controllerDetailed.Flags
    for i := range controllerDetailed.NeighborArray {
        children[controllerDetailed.NeighborArray[i].GetSegmentPath()] = &controllerDetailed.NeighborArray[i]
    }
    return children
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controllerDetailed.ControllerName
    leafs["interface-name-xr"] = controllerDetailed.InterfaceNameXr
    leafs["signalling-ip-tos"] = controllerDetailed.SignallingIpTos
    leafs["integrity-send-password"] = controllerDetailed.IntegritySendPassword
    leafs["integrity-receive-password"] = controllerDetailed.IntegrityReceivePassword
    leafs["integrity-receive-password-optional"] = controllerDetailed.IntegrityReceivePasswordOptional
    leafs["refresh-timer-state"] = controllerDetailed.RefreshTimerState
    leafs["summary-refresh-timer-state"] = controllerDetailed.SummaryRefreshTimerState
    leafs["refresh-interval"] = controllerDetailed.RefreshInterval
    leafs["out-of-band-refresh-interval"] = controllerDetailed.OutOfBandRefreshInterval
    leafs["summary-refresh-max-size"] = controllerDetailed.SummaryRefreshMaxSize
    leafs["bundle-message-max-size"] = controllerDetailed.BundleMessageMaxSize
    leafs["expiry-timer-state"] = controllerDetailed.ExpiryTimerState
    leafs["expiry-states"] = controllerDetailed.ExpiryStates
    leafs["expiry-interval"] = controllerDetailed.ExpiryInterval
    leafs["expiry-drops-tolerated"] = controllerDetailed.ExpiryDropsTolerated
    leafs["out-of-band-expiry-drops-tolerated"] = controllerDetailed.OutOfBandExpiryDropsTolerated
    leafs["ack-hold-time"] = controllerDetailed.AckHoldTime
    leafs["ack-max-size"] = controllerDetailed.AckMaxSize
    leafs["retransmit-time"] = controllerDetailed.RetransmitTime
    leafs["pacing-interval"] = controllerDetailed.PacingInterval
    leafs["pacing-message-rate"] = controllerDetailed.PacingMessageRate
    leafs["pacing-timer-state"] = controllerDetailed.PacingTimerState
    leafs["pacing-messages"] = controllerDetailed.PacingMessages
    return leafs
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetYangName() string { return "controller-detailed" }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) SetParent(parent types.Entity) { controllerDetailed.parent = parent }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetParent() types.Entity { return controllerDetailed.parent }

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetParentYangName() string { return "controller-detaileds" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetParentYangName() string { return "controller-detailed" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags
// Interface flags
type RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetGoName(yname string) string {
    if yname == "is-mpls-enabled" { return "IsMplsEnabled" }
    if yname == "is-refresh-reduction-enabled" { return "IsRefreshReductionEnabled" }
    if yname == "is-pacing-enabled" { return "IsPacingEnabled" }
    if yname == "is-refresh-enabled" { return "IsRefreshEnabled" }
    if yname == "is-s-refresh-enabled" { return "IsSRefreshEnabled" }
    if yname == "is-interface-down" { return "IsInterfaceDown" }
    if yname == "is-interface-created" { return "IsInterfaceCreated" }
    if yname == "is-rel-s-refresh-enabled" { return "IsRelSRefreshEnabled" }
    if yname == "is-backup-tunnel" { return "IsBackupTunnel" }
    if yname == "is-rsvp-configured" { return "IsRsvpConfigured" }
    if yname == "is-non-default-vrf" { return "IsNonDefaultVrf" }
    if yname == "is-message-bundling-enabled" { return "IsMessageBundlingEnabled" }
    return ""
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-mpls-enabled"] = flags.IsMplsEnabled
    leafs["is-refresh-reduction-enabled"] = flags.IsRefreshReductionEnabled
    leafs["is-pacing-enabled"] = flags.IsPacingEnabled
    leafs["is-refresh-enabled"] = flags.IsRefreshEnabled
    leafs["is-s-refresh-enabled"] = flags.IsSRefreshEnabled
    leafs["is-interface-down"] = flags.IsInterfaceDown
    leafs["is-interface-created"] = flags.IsInterfaceCreated
    leafs["is-rel-s-refresh-enabled"] = flags.IsRelSRefreshEnabled
    leafs["is-backup-tunnel"] = flags.IsBackupTunnel
    leafs["is-rsvp-configured"] = flags.IsRsvpConfigured
    leafs["is-non-default-vrf"] = flags.IsNonDefaultVrf
    leafs["is-message-bundling-enabled"] = flags.IsMessageBundlingEnabled
    return leafs
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetParentYangName() string { return "controller-detailed" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray
// Neighbor array
type RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetFilter() yfilter.YFilter { return neighborArray.YFilter }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) SetFilter(yf yfilter.YFilter) { neighborArray.YFilter = yf }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetGoName(yname string) string {
    if yname == "is-neighbor-refresh-reduction-capable" { return "IsNeighborRefreshReductionCapable" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "message-ids" { return "MessageIds" }
    if yname == "outgoing-states" { return "OutgoingStates" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "neighbor-message-id" { return "NeighborMessageId" }
    return ""
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetSegmentPath() string {
    return "neighbor-array"
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "expiry-time" {
        return &neighborArray.ExpiryTime
    }
    if childYangName == "neighbor-message-id" {
        for _, c := range neighborArray.NeighborMessageId {
            if neighborArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId{}
        neighborArray.NeighborMessageId = append(neighborArray.NeighborMessageId, child)
        return &neighborArray.NeighborMessageId[len(neighborArray.NeighborMessageId)-1]
    }
    return nil
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["expiry-time"] = &neighborArray.ExpiryTime
    for i := range neighborArray.NeighborMessageId {
        children[neighborArray.NeighborMessageId[i].GetSegmentPath()] = &neighborArray.NeighborMessageId[i]
    }
    return children
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-neighbor-refresh-reduction-capable"] = neighborArray.IsNeighborRefreshReductionCapable
    leafs["neighbor-address"] = neighborArray.NeighborAddress
    leafs["message-ids"] = neighborArray.MessageIds
    leafs["outgoing-states"] = neighborArray.OutgoingStates
    return leafs
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetBundleName() string { return "cisco_ios_xr" }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetYangName() string { return "neighbor-array" }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) SetParent(parent types.Entity) { neighborArray.parent = parent }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetParent() types.Entity { return neighborArray.parent }

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetParentYangName() string { return "controller-detailed" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime
// Expiry time
type RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetParentYangName() string { return "neighbor-array" }

// RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetFilter() yfilter.YFilter { return neighborMessageId.YFilter }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) SetFilter(yf yfilter.YFilter) { neighborMessageId.YFilter = yf }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetGoName(yname string) string {
    if yname == "message-id" { return "MessageId" }
    return ""
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetSegmentPath() string {
    return "neighbor-message-id"
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["message-id"] = neighborMessageId.MessageId
    return leafs
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetYangName() string { return "neighbor-message-id" }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) SetParent(parent types.Entity) { neighborMessageId.parent = parent }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetParent() types.Entity { return neighborMessageId.parent }

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetParentYangName() string { return "neighbor-array" }

// RsvpStandby_FrrSummary
// Fast Re-Route Summary State Information
type RsvpStandby_FrrSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path state counters.
    PathStates RsvpStandby_FrrSummary_PathStates

    // Rerservation state counters.
    ReservationStates RsvpStandby_FrrSummary_ReservationStates
}

func (frrSummary *RsvpStandby_FrrSummary) GetFilter() yfilter.YFilter { return frrSummary.YFilter }

func (frrSummary *RsvpStandby_FrrSummary) SetFilter(yf yfilter.YFilter) { frrSummary.YFilter = yf }

func (frrSummary *RsvpStandby_FrrSummary) GetGoName(yname string) string {
    if yname == "path-states" { return "PathStates" }
    if yname == "reservation-states" { return "ReservationStates" }
    return ""
}

func (frrSummary *RsvpStandby_FrrSummary) GetSegmentPath() string {
    return "frr-summary"
}

func (frrSummary *RsvpStandby_FrrSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-states" {
        return &frrSummary.PathStates
    }
    if childYangName == "reservation-states" {
        return &frrSummary.ReservationStates
    }
    return nil
}

func (frrSummary *RsvpStandby_FrrSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-states"] = &frrSummary.PathStates
    children["reservation-states"] = &frrSummary.ReservationStates
    return children
}

func (frrSummary *RsvpStandby_FrrSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrSummary *RsvpStandby_FrrSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrSummary *RsvpStandby_FrrSummary) GetYangName() string { return "frr-summary" }

func (frrSummary *RsvpStandby_FrrSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrSummary *RsvpStandby_FrrSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrSummary *RsvpStandby_FrrSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrSummary *RsvpStandby_FrrSummary) SetParent(parent types.Entity) { frrSummary.parent = parent }

func (frrSummary *RsvpStandby_FrrSummary) GetParent() types.Entity { return frrSummary.parent }

func (frrSummary *RsvpStandby_FrrSummary) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_FrrSummary_PathStates
// Path state counters
type RsvpStandby_FrrSummary_PathStates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetFilter() yfilter.YFilter { return pathStates.YFilter }

func (pathStates *RsvpStandby_FrrSummary_PathStates) SetFilter(yf yfilter.YFilter) { pathStates.YFilter = yf }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetGoName(yname string) string {
    if yname == "total" { return "Total" }
    if yname == "active-instances" { return "ActiveInstances" }
    if yname == "ready-instances" { return "ReadyInstances" }
    if yname == "active-wait-instances" { return "ActiveWaitInstances" }
    return ""
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetSegmentPath() string {
    return "path-states"
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total"] = pathStates.Total
    leafs["active-instances"] = pathStates.ActiveInstances
    leafs["ready-instances"] = pathStates.ReadyInstances
    leafs["active-wait-instances"] = pathStates.ActiveWaitInstances
    return leafs
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetBundleName() string { return "cisco_ios_xr" }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetYangName() string { return "path-states" }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathStates *RsvpStandby_FrrSummary_PathStates) SetParent(parent types.Entity) { pathStates.parent = parent }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetParent() types.Entity { return pathStates.parent }

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetParentYangName() string { return "frr-summary" }

// RsvpStandby_FrrSummary_ReservationStates
// Rerservation state counters
type RsvpStandby_FrrSummary_ReservationStates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetFilter() yfilter.YFilter { return reservationStates.YFilter }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) SetFilter(yf yfilter.YFilter) { reservationStates.YFilter = yf }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetGoName(yname string) string {
    if yname == "total" { return "Total" }
    if yname == "active-instances" { return "ActiveInstances" }
    if yname == "ready-instances" { return "ReadyInstances" }
    if yname == "active-wait-instances" { return "ActiveWaitInstances" }
    return ""
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetSegmentPath() string {
    return "reservation-states"
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total"] = reservationStates.Total
    leafs["active-instances"] = reservationStates.ActiveInstances
    leafs["ready-instances"] = reservationStates.ReadyInstances
    leafs["active-wait-instances"] = reservationStates.ActiveWaitInstances
    return leafs
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetBundleName() string { return "cisco_ios_xr" }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetYangName() string { return "reservation-states" }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) SetParent(parent types.Entity) { reservationStates.parent = parent }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetParent() types.Entity { return reservationStates.parent }

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetParentYangName() string { return "frr-summary" }

// RsvpStandby_RsbDetaileds
// Table of detailed info about reservation state
// blocks
type RsvpStandby_RsbDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single reservation state block. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed.
    RsbDetailed []RsvpStandby_RsbDetaileds_RsbDetailed
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetFilter() yfilter.YFilter { return rsbDetaileds.YFilter }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) SetFilter(yf yfilter.YFilter) { rsbDetaileds.YFilter = yf }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetGoName(yname string) string {
    if yname == "rsb-detailed" { return "RsbDetailed" }
    return ""
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetSegmentPath() string {
    return "rsb-detaileds"
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsb-detailed" {
        for _, c := range rsbDetaileds.RsbDetailed {
            if rsbDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_RsbDetaileds_RsbDetailed{}
        rsbDetaileds.RsbDetailed = append(rsbDetaileds.RsbDetailed, child)
        return &rsbDetaileds.RsbDetailed[len(rsbDetaileds.RsbDetailed)-1]
    }
    return nil
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rsbDetaileds.RsbDetailed {
        children[rsbDetaileds.RsbDetailed[i].GetSegmentPath()] = &rsbDetaileds.RsbDetailed[i]
    }
    return children
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetYangName() string { return "rsb-detaileds" }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) SetParent(parent types.Entity) { rsbDetaileds.parent = parent }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetParent() types.Entity { return rsbDetaileds.parent }

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_RsbDetaileds_RsbDetailed
// Detailed info for a single reservation state
// block
type RsvpStandby_RsbDetaileds_RsbDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Input Adjusted Interface. The type is string.
    InputAdjustedInterface interface{}

    // Input Physical Interface. The type is string.
    InputPhysicalInterface interface{}

    // Flow Spec Information.
    FlowSpec RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec

    // RSVP Session Information.
    Session RsvpStandby_RsbDetaileds_RsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp

    // RSVP Style.
    Style RsvpStandby_RsbDetaileds_RsbDetailed_Style

    // RSVP Filter.
    Filter RsvpStandby_RsbDetaileds_RsbDetailed_Filter

    // Reservation State Block Flags.
    RsbFlags RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags

    // Hop Infomation.
    Hop RsvpStandby_RsbDetaileds_RsbDetailed_Hop

    // RSVP Policy Sources.
    PolicySources RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources

    // RSVP Header Information.
    Header RsvpStandby_RsbDetaileds_RsbDetailed_Header

    // RSVP Policy Flags.
    PolicyFlags RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags

    // Expiry Time.
    ExpiryTime RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime

    // RSVP Query Flags.
    PolicyQueryFlags RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetFilter() yfilter.YFilter { return rsbDetailed.YFilter }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) SetFilter(yf yfilter.YFilter) { rsbDetailed.YFilter = yf }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-adjusted-interface" { return "InputAdjustedInterface" }
    if yname == "input-physical-interface" { return "InputPhysicalInterface" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "style" { return "Style" }
    if yname == "filter" { return "Filter" }
    if yname == "rsb-flags" { return "RsbFlags" }
    if yname == "hop" { return "Hop" }
    if yname == "policy-sources" { return "PolicySources" }
    if yname == "header" { return "Header" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    if yname == "label-info" { return "LabelInfo" }
    return ""
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetSegmentPath() string {
    return "rsb-detailed"
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-spec" {
        return &rsbDetailed.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rsbDetailed.GenericFlowSpec
    }
    if childYangName == "session" {
        return &rsbDetailed.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &rsbDetailed.S2LSubLsp
    }
    if childYangName == "style" {
        return &rsbDetailed.Style
    }
    if childYangName == "filter" {
        return &rsbDetailed.Filter
    }
    if childYangName == "rsb-flags" {
        return &rsbDetailed.RsbFlags
    }
    if childYangName == "hop" {
        return &rsbDetailed.Hop
    }
    if childYangName == "policy-sources" {
        return &rsbDetailed.PolicySources
    }
    if childYangName == "header" {
        return &rsbDetailed.Header
    }
    if childYangName == "policy-flags" {
        return &rsbDetailed.PolicyFlags
    }
    if childYangName == "expiry-time" {
        return &rsbDetailed.ExpiryTime
    }
    if childYangName == "policy-query-flags" {
        return &rsbDetailed.PolicyQueryFlags
    }
    if childYangName == "label-info" {
        return &rsbDetailed.LabelInfo
    }
    return nil
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-spec"] = &rsbDetailed.FlowSpec
    children["generic-flow-spec"] = &rsbDetailed.GenericFlowSpec
    children["session"] = &rsbDetailed.Session
    children["s2l-sub-lsp"] = &rsbDetailed.S2LSubLsp
    children["style"] = &rsbDetailed.Style
    children["filter"] = &rsbDetailed.Filter
    children["rsb-flags"] = &rsbDetailed.RsbFlags
    children["hop"] = &rsbDetailed.Hop
    children["policy-sources"] = &rsbDetailed.PolicySources
    children["header"] = &rsbDetailed.Header
    children["policy-flags"] = &rsbDetailed.PolicyFlags
    children["expiry-time"] = &rsbDetailed.ExpiryTime
    children["policy-query-flags"] = &rsbDetailed.PolicyQueryFlags
    children["label-info"] = &rsbDetailed.LabelInfo
    return children
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = rsbDetailed.DestinationAddress
    leafs["destination-port"] = rsbDetailed.DestinationPort
    leafs["protocol"] = rsbDetailed.Protocol
    leafs["extended-tunnel-id"] = rsbDetailed.ExtendedTunnelId
    leafs["session-type"] = rsbDetailed.SessionType
    leafs["p2mp-id"] = rsbDetailed.P2MpId
    leafs["source-address"] = rsbDetailed.SourceAddress
    leafs["source-port"] = rsbDetailed.SourcePort
    leafs["sub-group-origin"] = rsbDetailed.SubGroupOrigin
    leafs["sub-group-id"] = rsbDetailed.SubGroupId
    leafs["vrf-name"] = rsbDetailed.VrfName
    leafs["input-adjusted-interface"] = rsbDetailed.InputAdjustedInterface
    leafs["input-physical-interface"] = rsbDetailed.InputPhysicalInterface
    return leafs
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetYangName() string { return "rsb-detailed" }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) SetParent(parent types.Entity) { rsbDetailed.parent = parent }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetParent() types.Entity { return rsbDetailed.parent }

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetParentYangName() string { return "rsb-detaileds" }

// RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec
// Flow Spec Information
type RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec
// Generic Flow Spec Information
type RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Session
// RSVP Session Information
type RsvpStandby_RsbDetaileds_RsbDetailed_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession
// RSVP Session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2LSubLsp) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Style
// RSVP Style
type RsvpStandby_RsbDetaileds_RsbDetailed_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetSegmentPath() string {
    return "style"
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetYangName() string { return "style" }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetParent() types.Entity { return style.parent }

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter
// RSVP Filter
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetYangName() string { return "filter" }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetParent() types.Entity { return filter.parent }

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags
// Reservation State Block Flags
type RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetFilter() yfilter.YFilter { return rsbFlags.YFilter }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) SetFilter(yf yfilter.YFilter) { rsbFlags.YFilter = yf }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetGoName(yname string) string {
    if yname == "is-local-receiver" { return "IsLocalReceiver" }
    if yname == "is-message-id-valid" { return "IsMessageIdValid" }
    if yname == "is-local-repair" { return "IsLocalRepair" }
    if yname == "is-merge-point" { return "IsMergePoint" }
    if yname == "is-lockout" { return "IsLockout" }
    return ""
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetSegmentPath() string {
    return "rsb-flags"
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-receiver"] = rsbFlags.IsLocalReceiver
    leafs["is-message-id-valid"] = rsbFlags.IsMessageIdValid
    leafs["is-local-repair"] = rsbFlags.IsLocalRepair
    leafs["is-merge-point"] = rsbFlags.IsMergePoint
    leafs["is-lockout"] = rsbFlags.IsLockout
    return leafs
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetBundleName() string { return "cisco_ios_xr" }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetYangName() string { return "rsb-flags" }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) SetParent(parent types.Entity) { rsbFlags.parent = parent }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetParent() types.Entity { return rsbFlags.parent }

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Hop
// Hop Infomation
type RsvpStandby_RsbDetaileds_RsbDetailed_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetYangName() string { return "hop" }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetParent() types.Entity { return hop.parent }

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources
// RSVP Policy Sources
type RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetFilter() yfilter.YFilter { return policySources.YFilter }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) SetFilter(yf yfilter.YFilter) { policySources.YFilter = yf }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetGoName(yname string) string {
    if yname == "is-te-link" { return "IsTeLink" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-cops" { return "IsCops" }
    if yname == "is-default" { return "IsDefault" }
    if yname == "is-cable" { return "IsCable" }
    return ""
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetSegmentPath() string {
    return "policy-sources"
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-te-link"] = policySources.IsTeLink
    leafs["is-local"] = policySources.IsLocal
    leafs["is-cops"] = policySources.IsCops
    leafs["is-default"] = policySources.IsDefault
    leafs["is-cable"] = policySources.IsCable
    return leafs
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetBundleName() string { return "cisco_ios_xr" }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetYangName() string { return "policy-sources" }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) SetParent(parent types.Entity) { policySources.parent = parent }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetParent() types.Entity { return policySources.parent }

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_Header
// RSVP Header Information
type RsvpStandby_RsbDetaileds_RsbDetailed_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetSegmentPath() string {
    return "header"
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = header.RsvpVersion
    leafs["rsvp-header-flags"] = header.RsvpHeaderFlags
    leafs["rsvp-ttl"] = header.RsvpTtl
    leafs["rsvp-message-type"] = header.RsvpMessageType
    leafs["ip-tos"] = header.IpTos
    leafs["ip-ttl"] = header.IpTtl
    leafs["ip-source-address"] = header.IpSourceAddress
    return leafs
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetYangName() string { return "header" }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetParent() types.Entity { return header.parent }

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags
// RSVP Policy Flags
type RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime
// Expiry Time
type RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags
// RSVP Query Flags
type RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo
// Label Information
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetFilter() yfilter.YFilter { return labelInfo.YFilter }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) SetFilter(yf yfilter.YFilter) { labelInfo.YFilter = yf }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "local-downstream-label" { return "LocalDownstreamLabel" }
    if yname == "outgoing-downstream-label" { return "OutgoingDownstreamLabel" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "outgoing-upstream-label" { return "OutgoingUpstreamLabel" }
    if yname == "local-upstream-label" { return "LocalUpstreamLabel" }
    if yname == "recovery-label" { return "RecoveryLabel" }
    if yname == "lsp-wrap-label" { return "LspWrapLabel" }
    if yname == "generic-local-downstream-label" { return "GenericLocalDownstreamLabel" }
    if yname == "generic-outgoing-downstream-label" { return "GenericOutgoingDownstreamLabel" }
    if yname == "generic-merge-point-label" { return "GenericMergePointLabel" }
    if yname == "generic-outgoing-upstream-label" { return "GenericOutgoingUpstreamLabel" }
    if yname == "generic-local-upstream-label" { return "GenericLocalUpstreamLabel" }
    if yname == "generic-recovery-label" { return "GenericRecoveryLabel" }
    return ""
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetSegmentPath() string {
    return "label-info"
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-local-downstream-label" {
        return &labelInfo.GenericLocalDownstreamLabel
    }
    if childYangName == "generic-outgoing-downstream-label" {
        return &labelInfo.GenericOutgoingDownstreamLabel
    }
    if childYangName == "generic-merge-point-label" {
        return &labelInfo.GenericMergePointLabel
    }
    if childYangName == "generic-outgoing-upstream-label" {
        return &labelInfo.GenericOutgoingUpstreamLabel
    }
    if childYangName == "generic-local-upstream-label" {
        return &labelInfo.GenericLocalUpstreamLabel
    }
    if childYangName == "generic-recovery-label" {
        return &labelInfo.GenericRecoveryLabel
    }
    return nil
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-local-downstream-label"] = &labelInfo.GenericLocalDownstreamLabel
    children["generic-outgoing-downstream-label"] = &labelInfo.GenericOutgoingDownstreamLabel
    children["generic-merge-point-label"] = &labelInfo.GenericMergePointLabel
    children["generic-outgoing-upstream-label"] = &labelInfo.GenericOutgoingUpstreamLabel
    children["generic-local-upstream-label"] = &labelInfo.GenericLocalUpstreamLabel
    children["generic-recovery-label"] = &labelInfo.GenericRecoveryLabel
    return children
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = labelInfo.IsValid
    leafs["local-downstream-label"] = labelInfo.LocalDownstreamLabel
    leafs["outgoing-downstream-label"] = labelInfo.OutgoingDownstreamLabel
    leafs["merge-point-label"] = labelInfo.MergePointLabel
    leafs["outgoing-upstream-label"] = labelInfo.OutgoingUpstreamLabel
    leafs["local-upstream-label"] = labelInfo.LocalUpstreamLabel
    leafs["recovery-label"] = labelInfo.RecoveryLabel
    leafs["lsp-wrap-label"] = labelInfo.LspWrapLabel
    return leafs
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetBundleName() string { return "cisco_ios_xr" }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetYangName() string { return "label-info" }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) SetParent(parent types.Entity) { labelInfo.parent = parent }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetParent() types.Entity { return labelInfo.parent }

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetParentYangName() string { return "rsb-detailed" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetFilter() yfilter.YFilter { return genericLocalDownstreamLabel.YFilter }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalDownstreamLabel.YFilter = yf }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetSegmentPath() string {
    return "generic-local-downstream-label"
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalDownstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalDownstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetYangName() string { return "generic-local-downstream-label" }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetParent(parent types.Entity) { genericLocalDownstreamLabel.parent = parent }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParent() types.Entity { return genericLocalDownstreamLabel.parent }

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-downstream-label" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingDownstreamLabel.YFilter }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingDownstreamLabel.YFilter = yf }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-downstream-label"
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingDownstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingDownstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetYangName() string { return "generic-outgoing-downstream-label" }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetParent(parent types.Entity) { genericOutgoingDownstreamLabel.parent = parent }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParent() types.Entity { return genericOutgoingDownstreamLabel.parent }

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-downstream-label" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetFilter() yfilter.YFilter { return genericMergePointLabel.YFilter }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) SetFilter(yf yfilter.YFilter) { genericMergePointLabel.YFilter = yf }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetSegmentPath() string {
    return "generic-merge-point-label"
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericMergePointLabel.GeneralizedLabel
    }
    return nil
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericMergePointLabel.GeneralizedLabel
    return children
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericMergePointLabel.GenericLabelType
    return leafs
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetYangName() string { return "generic-merge-point-label" }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) SetParent(parent types.Entity) { genericMergePointLabel.parent = parent }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetParent() types.Entity { return genericMergePointLabel.parent }

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParentYangName() string { return "generic-merge-point-label" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingUpstreamLabel.YFilter }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingUpstreamLabel.YFilter = yf }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-upstream-label"
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingUpstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingUpstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetYangName() string { return "generic-outgoing-upstream-label" }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetParent(parent types.Entity) { genericOutgoingUpstreamLabel.parent = parent }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParent() types.Entity { return genericOutgoingUpstreamLabel.parent }

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-upstream-label" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetFilter() yfilter.YFilter { return genericLocalUpstreamLabel.YFilter }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalUpstreamLabel.YFilter = yf }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetSegmentPath() string {
    return "generic-local-upstream-label"
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalUpstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalUpstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetYangName() string { return "generic-local-upstream-label" }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetParent(parent types.Entity) { genericLocalUpstreamLabel.parent = parent }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParent() types.Entity { return genericLocalUpstreamLabel.parent }

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-upstream-label" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetFilter() yfilter.YFilter { return genericRecoveryLabel.YFilter }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) SetFilter(yf yfilter.YFilter) { genericRecoveryLabel.YFilter = yf }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetSegmentPath() string {
    return "generic-recovery-label"
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericRecoveryLabel.GeneralizedLabel
    }
    return nil
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericRecoveryLabel.GeneralizedLabel
    return children
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericRecoveryLabel.GenericLabelType
    return leafs
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetYangName() string { return "generic-recovery-label" }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) SetParent(parent types.Entity) { genericRecoveryLabel.parent = parent }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetParent() types.Entity { return genericRecoveryLabel.parent }

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetParentYangName() string { return "label-info" }

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParentYangName() string { return "generic-recovery-label" }

// RsvpStandby_InterfaceSummaries
// Table of summary info about RSVP-enabled
// interfaces
type RsvpStandby_InterfaceSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled interface. The type is slice of
    // RsvpStandby_InterfaceSummaries_InterfaceSummary.
    InterfaceSummary []RsvpStandby_InterfaceSummaries_InterfaceSummary
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetFilter() yfilter.YFilter { return interfaceSummaries.YFilter }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) SetFilter(yf yfilter.YFilter) { interfaceSummaries.YFilter = yf }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetGoName(yname string) string {
    if yname == "interface-summary" { return "InterfaceSummary" }
    return ""
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetSegmentPath() string {
    return "interface-summaries"
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-summary" {
        for _, c := range interfaceSummaries.InterfaceSummary {
            if interfaceSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceSummaries_InterfaceSummary{}
        interfaceSummaries.InterfaceSummary = append(interfaceSummaries.InterfaceSummary, child)
        return &interfaceSummaries.InterfaceSummary[len(interfaceSummaries.InterfaceSummary)-1]
    }
    return nil
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceSummaries.InterfaceSummary {
        children[interfaceSummaries.InterfaceSummary[i].GetSegmentPath()] = &interfaceSummaries.InterfaceSummary[i]
    }
    return children
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetYangName() string { return "interface-summaries" }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) SetParent(parent types.Entity) { interfaceSummaries.parent = parent }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetParent() types.Entity { return interfaceSummaries.parent }

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_InterfaceSummaries_InterfaceSummary
// Summary info about an RSVP-enabled interface
type RsvpStandby_InterfaceSummaries_InterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetFilter() yfilter.YFilter { return interfaceSummary.YFilter }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) SetFilter(yf yfilter.YFilter) { interfaceSummary.YFilter = yf }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "paths-in" { return "PathsIn" }
    if yname == "paths-out" { return "PathsOut" }
    if yname == "reservations-in" { return "ReservationsIn" }
    if yname == "reservations-out" { return "ReservationsOut" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetSegmentPath() string {
    return "interface-summary" + "[interface-name='" + fmt.Sprintf("%v", interfaceSummary.InterfaceName) + "']"
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &interfaceSummary.BandwidthInformation
    }
    return nil
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &interfaceSummary.BandwidthInformation
    return children
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceSummary.InterfaceName
    leafs["interface-name-xr"] = interfaceSummary.InterfaceNameXr
    leafs["paths-in"] = interfaceSummary.PathsIn
    leafs["paths-out"] = interfaceSummary.PathsOut
    leafs["reservations-in"] = interfaceSummary.ReservationsIn
    leafs["reservations-out"] = interfaceSummary.ReservationsOut
    return leafs
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetYangName() string { return "interface-summary" }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) SetParent(parent types.Entity) { interfaceSummary.parent = parent }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetParent() types.Entity { return interfaceSummary.parent }

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetParentYangName() string { return "interface-summaries" }

// RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetParentYangName() string { return "interface-summary" }

// RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_HelloInstanceBriefs
// Table of brief info about hello instances
type RsvpStandby_HelloInstanceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single hello instance. The type is slice of
    // RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief.
    HelloInstanceBrief []RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetFilter() yfilter.YFilter { return helloInstanceBriefs.YFilter }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) SetFilter(yf yfilter.YFilter) { helloInstanceBriefs.YFilter = yf }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetGoName(yname string) string {
    if yname == "hello-instance-brief" { return "HelloInstanceBrief" }
    return ""
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetSegmentPath() string {
    return "hello-instance-briefs"
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-instance-brief" {
        for _, c := range helloInstanceBriefs.HelloInstanceBrief {
            if helloInstanceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief{}
        helloInstanceBriefs.HelloInstanceBrief = append(helloInstanceBriefs.HelloInstanceBrief, child)
        return &helloInstanceBriefs.HelloInstanceBrief[len(helloInstanceBriefs.HelloInstanceBrief)-1]
    }
    return nil
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInstanceBriefs.HelloInstanceBrief {
        children[helloInstanceBriefs.HelloInstanceBrief[i].GetSegmentPath()] = &helloInstanceBriefs.HelloInstanceBrief[i]
    }
    return children
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetYangName() string { return "hello-instance-briefs" }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) SetParent(parent types.Entity) { helloInstanceBriefs.parent = parent }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetParent() types.Entity { return helloInstanceBriefs.parent }

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief
// Brief info for a single hello instance
type RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    LostCommunicationTotal interface{}
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetFilter() yfilter.YFilter { return helloInstanceBrief.YFilter }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) SetFilter(yf yfilter.YFilter) { helloInstanceBrief.YFilter = yf }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    if yname == "lost-communication-total" { return "LostCommunicationTotal" }
    return ""
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetSegmentPath() string {
    return "hello-instance-brief" + "[source-address='" + fmt.Sprintf("%v", helloInstanceBrief.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInstanceBrief.DestinationAddress) + "']"
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInstanceBrief.SourceAddress
    leafs["destination-address"] = helloInstanceBrief.DestinationAddress
    leafs["source-address-xr"] = helloInstanceBrief.SourceAddressXr
    leafs["destination-address-xr"] = helloInstanceBrief.DestinationAddressXr
    leafs["neighbor-hello-state"] = helloInstanceBrief.NeighborHelloState
    leafs["instance-type"] = helloInstanceBrief.InstanceType
    leafs["hello-interface"] = helloInstanceBrief.HelloInterface
    leafs["lost-communication-total"] = helloInstanceBrief.LostCommunicationTotal
    return leafs
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetYangName() string { return "hello-instance-brief" }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) SetParent(parent types.Entity) { helloInstanceBrief.parent = parent }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetParent() types.Entity { return helloInstanceBrief.parent }

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetParentYangName() string { return "hello-instance-briefs" }

// RsvpStandby_AuthenticationDetails
// Table for detailed authentication related
// information
type RsvpStandby_AuthenticationDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // RsvpStandby_AuthenticationDetails_AuthenticationDetail.
    AuthenticationDetail []RsvpStandby_AuthenticationDetails_AuthenticationDetail
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetFilter() yfilter.YFilter { return authenticationDetails.YFilter }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) SetFilter(yf yfilter.YFilter) { authenticationDetails.YFilter = yf }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetGoName(yname string) string {
    if yname == "authentication-detail" { return "AuthenticationDetail" }
    return ""
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetSegmentPath() string {
    return "authentication-details"
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication-detail" {
        for _, c := range authenticationDetails.AuthenticationDetail {
            if authenticationDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_AuthenticationDetails_AuthenticationDetail{}
        authenticationDetails.AuthenticationDetail = append(authenticationDetails.AuthenticationDetail, child)
        return &authenticationDetails.AuthenticationDetail[len(authenticationDetails.AuthenticationDetail)-1]
    }
    return nil
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range authenticationDetails.AuthenticationDetail {
        children[authenticationDetails.AuthenticationDetail[i].GetSegmentPath()] = &authenticationDetails.AuthenticationDetail[i]
    }
    return children
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetYangName() string { return "authentication-details" }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) SetParent(parent types.Entity) { authenticationDetails.parent = parent }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetParent() types.Entity { return authenticationDetails.parent }

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail
// Brief Authentication information
type RsvpStandby_AuthenticationDetails_AuthenticationDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Key status. The type is interface{} with range: 0..4294967295.
    KeyStatus interface{}

    // Direction. The type is interface{} with range: 0..4294967295.
    KeyDigestInfo interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    Lifetime interface{}

    // Remaining lifetime (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    LifetimeLeft interface{}

    // Challenge status. The type is RsvpMgmtAuthChallengeStatus.
    ChallengeStatus interface{}

    // Basic authentication data.
    AuthCompact RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact

    // direction info.
    DirectionInfo RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetFilter() yfilter.YFilter { return authenticationDetail.YFilter }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) SetFilter(yf yfilter.YFilter) { authenticationDetail.YFilter = yf }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "mode-id" { return "ModeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "key-status" { return "KeyStatus" }
    if yname == "key-digest-info" { return "KeyDigestInfo" }
    if yname == "lifetime" { return "Lifetime" }
    if yname == "lifetime-left" { return "LifetimeLeft" }
    if yname == "challenge-status" { return "ChallengeStatus" }
    if yname == "auth-compact" { return "AuthCompact" }
    if yname == "direction-info" { return "DirectionInfo" }
    return ""
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetSegmentPath() string {
    return "authentication-detail" + "[source-address='" + fmt.Sprintf("%v", authenticationDetail.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", authenticationDetail.DestinationAddress) + "']" + "[mode-id='" + fmt.Sprintf("%v", authenticationDetail.ModeId) + "']" + "[interface-name='" + fmt.Sprintf("%v", authenticationDetail.InterfaceName) + "']"
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "auth-compact" {
        return &authenticationDetail.AuthCompact
    }
    if childYangName == "direction-info" {
        return &authenticationDetail.DirectionInfo
    }
    return nil
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["auth-compact"] = &authenticationDetail.AuthCompact
    children["direction-info"] = &authenticationDetail.DirectionInfo
    return children
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = authenticationDetail.SourceAddress
    leafs["destination-address"] = authenticationDetail.DestinationAddress
    leafs["mode-id"] = authenticationDetail.ModeId
    leafs["interface-name"] = authenticationDetail.InterfaceName
    leafs["key-status"] = authenticationDetail.KeyStatus
    leafs["key-digest-info"] = authenticationDetail.KeyDigestInfo
    leafs["lifetime"] = authenticationDetail.Lifetime
    leafs["lifetime-left"] = authenticationDetail.LifetimeLeft
    leafs["challenge-status"] = authenticationDetail.ChallengeStatus
    return leafs
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetYangName() string { return "authentication-detail" }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) SetParent(parent types.Entity) { authenticationDetail.parent = parent }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetParent() types.Entity { return authenticationDetail.parent }

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetParentYangName() string { return "authentication-details" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact
// Basic authentication data
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetFilter() yfilter.YFilter { return authCompact.YFilter }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) SetFilter(yf yfilter.YFilter) { authCompact.YFilter = yf }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetGoName(yname string) string {
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "direction" { return "Direction" }
    if yname == "key-type" { return "KeyType" }
    if yname == "key-source" { return "KeySource" }
    if yname == "key-id" { return "KeyId" }
    if yname == "key-id-valid" { return "KeyIdValid" }
    return ""
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetSegmentPath() string {
    return "auth-compact"
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address-xr"] = authCompact.SourceAddressXr
    leafs["destination-address-xr"] = authCompact.DestinationAddressXr
    leafs["neighbor-address"] = authCompact.NeighborAddress
    leafs["direction"] = authCompact.Direction
    leafs["key-type"] = authCompact.KeyType
    leafs["key-source"] = authCompact.KeySource
    leafs["key-id"] = authCompact.KeyId
    leafs["key-id-valid"] = authCompact.KeyIdValid
    return leafs
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetBundleName() string { return "cisco_ios_xr" }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetYangName() string { return "auth-compact" }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) SetParent(parent types.Entity) { authCompact.parent = parent }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetParent() types.Entity { return authCompact.parent }

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetParentYangName() string { return "authentication-detail" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo
// direction info
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AuthDirection. The type is RsvpMgmtAuthDirection.
    AuthDirection interface{}

    // send info.
    SendInfo RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo

    // receive info.
    ReceiveInfo RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetFilter() yfilter.YFilter { return directionInfo.YFilter }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) SetFilter(yf yfilter.YFilter) { directionInfo.YFilter = yf }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetGoName(yname string) string {
    if yname == "auth-direction" { return "AuthDirection" }
    if yname == "send-info" { return "SendInfo" }
    if yname == "receive-info" { return "ReceiveInfo" }
    return ""
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetSegmentPath() string {
    return "direction-info"
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "send-info" {
        return &directionInfo.SendInfo
    }
    if childYangName == "receive-info" {
        return &directionInfo.ReceiveInfo
    }
    return nil
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["send-info"] = &directionInfo.SendInfo
    children["receive-info"] = &directionInfo.ReceiveInfo
    return children
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["auth-direction"] = directionInfo.AuthDirection
    return leafs
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetBundleName() string { return "cisco_ios_xr" }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetYangName() string { return "direction-info" }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) SetParent(parent types.Entity) { directionInfo.parent = parent }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetParent() types.Entity { return directionInfo.parent }

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetParentYangName() string { return "authentication-detail" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo
// send info
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Counters.
    Counters RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetFilter() yfilter.YFilter { return sendInfo.YFilter }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) SetFilter(yf yfilter.YFilter) { sendInfo.YFilter = yf }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetGoName(yname string) string {
    if yname == "sequence" { return "Sequence" }
    if yname == "counters" { return "Counters" }
    return ""
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetSegmentPath() string {
    return "send-info"
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &sendInfo.Counters
    }
    return nil
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &sendInfo.Counters
    return children
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence"] = sendInfo.Sequence
    return leafs
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetBundleName() string { return "cisco_ios_xr" }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetYangName() string { return "send-info" }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) SetParent(parent types.Entity) { sendInfo.parent = parent }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetParent() types.Entity { return sendInfo.parent }

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetParentYangName() string { return "direction-info" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
// Counters
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Messages sent. The type is interface{} with range: 0..4294967295.
    AuthenticationSent interface{}

    // Failures. The type is interface{} with range: 0..4294967295.
    AuthenticationFailures interface{}

    // Challenges received. The type is interface{} with range: 0..4294967295.
    AuthenticationSendChallengesReceived interface{}

    // Challenge responses sent. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationChallengeResponsesSent interface{}
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetGoName(yname string) string {
    if yname == "authentication-sent" { return "AuthenticationSent" }
    if yname == "authentication-failures" { return "AuthenticationFailures" }
    if yname == "authentication-send-challenges-received" { return "AuthenticationSendChallengesReceived" }
    if yname == "authentication-challenge-responses-sent" { return "AuthenticationChallengeResponsesSent" }
    return ""
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authentication-sent"] = counters.AuthenticationSent
    leafs["authentication-failures"] = counters.AuthenticationFailures
    leafs["authentication-send-challenges-received"] = counters.AuthenticationSendChallengesReceived
    leafs["authentication-challenge-responses-sent"] = counters.AuthenticationChallengeResponsesSent
    return leafs
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetYangName() string { return "counters" }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetParent() types.Entity { return counters.parent }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetParentYangName() string { return "send-info" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
// receive info
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Sequence window size. The type is interface{} with range: 0..4294967295.
    SequenceWindowSize interface{}

    // Sequence window count. The type is interface{} with range: 0..4294967295.
    SequenceWindowCount interface{}

    // Sequence window. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    SequenceWindow []interface{}

    // Counters.
    Counters RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetFilter() yfilter.YFilter { return receiveInfo.YFilter }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) SetFilter(yf yfilter.YFilter) { receiveInfo.YFilter = yf }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetGoName(yname string) string {
    if yname == "sequence" { return "Sequence" }
    if yname == "sequence-window-size" { return "SequenceWindowSize" }
    if yname == "sequence-window-count" { return "SequenceWindowCount" }
    if yname == "sequence-window" { return "SequenceWindow" }
    if yname == "counters" { return "Counters" }
    return ""
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetSegmentPath() string {
    return "receive-info"
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &receiveInfo.Counters
    }
    return nil
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &receiveInfo.Counters
    return children
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence"] = receiveInfo.Sequence
    leafs["sequence-window-size"] = receiveInfo.SequenceWindowSize
    leafs["sequence-window-count"] = receiveInfo.SequenceWindowCount
    leafs["sequence-window"] = receiveInfo.SequenceWindow
    return leafs
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetBundleName() string { return "cisco_ios_xr" }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetYangName() string { return "receive-info" }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) SetParent(parent types.Entity) { receiveInfo.parent = parent }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetParent() types.Entity { return receiveInfo.parent }

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetParentYangName() string { return "direction-info" }

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters
// Counters
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Valid messages. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedValidMessages interface{}

    // Challenges sent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesSent interface{}

    // Challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengeResponse interface{}

    // Challenges resent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesResent interface{}

    // Challenge timeouts. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengeTimeouts interface{}

    // Authentication received during challenge. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedDuringChallenge interface{}

    // Authentication received incomplete. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedIncomplete interface{}

    // Authentication received with no integrity. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedNoIntegrity interface{}

    // Authentication received with bad digest. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedBadDigest interface{}

    // Authentication received with wrong digest type. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedWrongDigestType interface{}

    // Authentication received with duplicate sequence number. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberDuplicate interface{}

    // Authentication received with sequence number out of range. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberOutofRange interface{}

    // Incorect challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedWrongChallengesResponse interface{}

    // Duplicate challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengesResponseDuplicate interface{}

    // Challenge responses received late. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedResponseLate interface{}

    // Authentication received with bad mesage format. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedBadMessageFormat interface{}
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetGoName(yname string) string {
    if yname == "authentication-received-valid-messages" { return "AuthenticationReceivedValidMessages" }
    if yname == "authentication-received-challenges-sent" { return "AuthenticationReceivedChallengesSent" }
    if yname == "authentication-received-challenge-response" { return "AuthenticationReceivedChallengeResponse" }
    if yname == "authentication-received-challenges-resent" { return "AuthenticationReceivedChallengesResent" }
    if yname == "authentication-received-challenge-timeouts" { return "AuthenticationReceivedChallengeTimeouts" }
    if yname == "authentication-received-during-challenge" { return "AuthenticationReceivedDuringChallenge" }
    if yname == "authentication-received-incomplete" { return "AuthenticationReceivedIncomplete" }
    if yname == "authentication-received-no-integrity" { return "AuthenticationReceivedNoIntegrity" }
    if yname == "authentication-received-bad-digest" { return "AuthenticationReceivedBadDigest" }
    if yname == "authentication-received-wrong-digest-type" { return "AuthenticationReceivedWrongDigestType" }
    if yname == "authentication-received-sequence-number-duplicate" { return "AuthenticationReceivedSequenceNumberDuplicate" }
    if yname == "authentication-received-sequence-number-outof-range" { return "AuthenticationReceivedSequenceNumberOutofRange" }
    if yname == "authentication-received-wrong-challenges-response" { return "AuthenticationReceivedWrongChallengesResponse" }
    if yname == "authentication-received-challenges-response-duplicate" { return "AuthenticationReceivedChallengesResponseDuplicate" }
    if yname == "authentication-received-response-late" { return "AuthenticationReceivedResponseLate" }
    if yname == "authentication-received-bad-message-format" { return "AuthenticationReceivedBadMessageFormat" }
    return ""
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authentication-received-valid-messages"] = counters.AuthenticationReceivedValidMessages
    leafs["authentication-received-challenges-sent"] = counters.AuthenticationReceivedChallengesSent
    leafs["authentication-received-challenge-response"] = counters.AuthenticationReceivedChallengeResponse
    leafs["authentication-received-challenges-resent"] = counters.AuthenticationReceivedChallengesResent
    leafs["authentication-received-challenge-timeouts"] = counters.AuthenticationReceivedChallengeTimeouts
    leafs["authentication-received-during-challenge"] = counters.AuthenticationReceivedDuringChallenge
    leafs["authentication-received-incomplete"] = counters.AuthenticationReceivedIncomplete
    leafs["authentication-received-no-integrity"] = counters.AuthenticationReceivedNoIntegrity
    leafs["authentication-received-bad-digest"] = counters.AuthenticationReceivedBadDigest
    leafs["authentication-received-wrong-digest-type"] = counters.AuthenticationReceivedWrongDigestType
    leafs["authentication-received-sequence-number-duplicate"] = counters.AuthenticationReceivedSequenceNumberDuplicate
    leafs["authentication-received-sequence-number-outof-range"] = counters.AuthenticationReceivedSequenceNumberOutofRange
    leafs["authentication-received-wrong-challenges-response"] = counters.AuthenticationReceivedWrongChallengesResponse
    leafs["authentication-received-challenges-response-duplicate"] = counters.AuthenticationReceivedChallengesResponseDuplicate
    leafs["authentication-received-response-late"] = counters.AuthenticationReceivedResponseLate
    leafs["authentication-received-bad-message-format"] = counters.AuthenticationReceivedBadMessageFormat
    return leafs
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetYangName() string { return "counters" }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetParent() types.Entity { return counters.parent }

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetParentYangName() string { return "receive-info" }

// RsvpStandby_RsbBriefs
// Table of brief info about reservation state
// blocks
type RsvpStandby_RsbBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single reservation state block. The type is slice of
    // RsvpStandby_RsbBriefs_RsbBrief.
    RsbBrief []RsvpStandby_RsbBriefs_RsbBrief
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetFilter() yfilter.YFilter { return rsbBriefs.YFilter }

func (rsbBriefs *RsvpStandby_RsbBriefs) SetFilter(yf yfilter.YFilter) { rsbBriefs.YFilter = yf }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetGoName(yname string) string {
    if yname == "rsb-brief" { return "RsbBrief" }
    return ""
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetSegmentPath() string {
    return "rsb-briefs"
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsb-brief" {
        for _, c := range rsbBriefs.RsbBrief {
            if rsbBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_RsbBriefs_RsbBrief{}
        rsbBriefs.RsbBrief = append(rsbBriefs.RsbBrief, child)
        return &rsbBriefs.RsbBrief[len(rsbBriefs.RsbBrief)-1]
    }
    return nil
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rsbBriefs.RsbBrief {
        children[rsbBriefs.RsbBrief[i].GetSegmentPath()] = &rsbBriefs.RsbBrief[i]
    }
    return children
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetYangName() string { return "rsb-briefs" }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbBriefs *RsvpStandby_RsbBriefs) SetParent(parent types.Entity) { rsbBriefs.parent = parent }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetParent() types.Entity { return rsbBriefs.parent }

func (rsbBriefs *RsvpStandby_RsbBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_RsbBriefs_RsbBrief
// Brief info for a single reservation state block
type RsvpStandby_RsbBriefs_RsbBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Reservation Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_RsbBriefs_RsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp

    // Flow Spec Information.
    FlowSpec RsvpStandby_RsbBriefs_RsbBrief_FlowSpec

    // Generic Flow Spec Info.
    GenericFlowSpec RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec

    // RSVP Style.
    Style RsvpStandby_RsbBriefs_RsbBrief_Style

    // RSVP Filter.
    Filter RsvpStandby_RsbBriefs_RsbBrief_Filter
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetFilter() yfilter.YFilter { return rsbBrief.YFilter }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) SetFilter(yf yfilter.YFilter) { rsbBrief.YFilter = yf }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "style" { return "Style" }
    if yname == "filter" { return "Filter" }
    return ""
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetSegmentPath() string {
    return "rsb-brief"
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &rsbBrief.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &rsbBrief.S2LSubLsp
    }
    if childYangName == "flow-spec" {
        return &rsbBrief.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rsbBrief.GenericFlowSpec
    }
    if childYangName == "style" {
        return &rsbBrief.Style
    }
    if childYangName == "filter" {
        return &rsbBrief.Filter
    }
    return nil
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &rsbBrief.Session
    children["s2l-sub-lsp"] = &rsbBrief.S2LSubLsp
    children["flow-spec"] = &rsbBrief.FlowSpec
    children["generic-flow-spec"] = &rsbBrief.GenericFlowSpec
    children["style"] = &rsbBrief.Style
    children["filter"] = &rsbBrief.Filter
    return children
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = rsbBrief.DestinationAddress
    leafs["destination-port"] = rsbBrief.DestinationPort
    leafs["protocol"] = rsbBrief.Protocol
    leafs["extended-tunnel-id"] = rsbBrief.ExtendedTunnelId
    leafs["session-type"] = rsbBrief.SessionType
    leafs["p2mp-id"] = rsbBrief.P2MpId
    leafs["source-address"] = rsbBrief.SourceAddress
    leafs["source-port"] = rsbBrief.SourcePort
    leafs["sub-group-origin"] = rsbBrief.SubGroupOrigin
    leafs["sub-group-id"] = rsbBrief.SubGroupId
    leafs["vrf-name"] = rsbBrief.VrfName
    leafs["input-interface"] = rsbBrief.InputInterface
    return leafs
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetBundleName() string { return "cisco_ios_xr" }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetYangName() string { return "rsb-brief" }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) SetParent(parent types.Entity) { rsbBrief.parent = parent }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetParent() types.Entity { return rsbBrief.parent }

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetParentYangName() string { return "rsb-briefs" }

// RsvpStandby_RsbBriefs_RsbBrief_Session
// RSVP Session Information
type RsvpStandby_RsbBriefs_RsbBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetParentYangName() string { return "rsb-brief" }

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2LSubLsp) GetParentYangName() string { return "rsb-brief" }

// RsvpStandby_RsbBriefs_RsbBrief_FlowSpec
// Flow Spec Information
type RsvpStandby_RsbBriefs_RsbBrief_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetParentYangName() string { return "rsb-brief" }

// RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec
// Generic Flow Spec Info
type RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetParentYangName() string { return "rsb-brief" }

// RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// RsvpStandby_RsbBriefs_RsbBrief_Style
// RSVP Style
type RsvpStandby_RsbBriefs_RsbBrief_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetSegmentPath() string {
    return "style"
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetYangName() string { return "style" }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetParent() types.Entity { return style.parent }

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetParentYangName() string { return "rsb-brief" }

// RsvpStandby_RsbBriefs_RsbBrief_Filter
// RSVP Filter
type RsvpStandby_RsbBriefs_RsbBrief_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetYangName() string { return "filter" }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetParent() types.Entity { return filter.parent }

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetParentYangName() string { return "rsb-brief" }

// RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_OpenConfig
// OpenConfig info
type RsvpStandby_OpenConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Platform wide RSVP statistics and counters.
    GlobalCounters RsvpStandby_OpenConfig_GlobalCounters

    // Table of info about RSVP-enabled interface counters for OpenConfig.
    InterfaceCounters RsvpStandby_OpenConfig_InterfaceCounters
}

func (openConfig *RsvpStandby_OpenConfig) GetFilter() yfilter.YFilter { return openConfig.YFilter }

func (openConfig *RsvpStandby_OpenConfig) SetFilter(yf yfilter.YFilter) { openConfig.YFilter = yf }

func (openConfig *RsvpStandby_OpenConfig) GetGoName(yname string) string {
    if yname == "global-counters" { return "GlobalCounters" }
    if yname == "interface-counters" { return "InterfaceCounters" }
    return ""
}

func (openConfig *RsvpStandby_OpenConfig) GetSegmentPath() string {
    return "open-config"
}

func (openConfig *RsvpStandby_OpenConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-counters" {
        return &openConfig.GlobalCounters
    }
    if childYangName == "interface-counters" {
        return &openConfig.InterfaceCounters
    }
    return nil
}

func (openConfig *RsvpStandby_OpenConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-counters"] = &openConfig.GlobalCounters
    children["interface-counters"] = &openConfig.InterfaceCounters
    return children
}

func (openConfig *RsvpStandby_OpenConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (openConfig *RsvpStandby_OpenConfig) GetBundleName() string { return "cisco_ios_xr" }

func (openConfig *RsvpStandby_OpenConfig) GetYangName() string { return "open-config" }

func (openConfig *RsvpStandby_OpenConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (openConfig *RsvpStandby_OpenConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (openConfig *RsvpStandby_OpenConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (openConfig *RsvpStandby_OpenConfig) SetParent(parent types.Entity) { openConfig.parent = parent }

func (openConfig *RsvpStandby_OpenConfig) GetParent() types.Entity { return openConfig.parent }

func (openConfig *RsvpStandby_OpenConfig) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_OpenConfig_GlobalCounters
// Platform wide RSVP statistics and counters
type RsvpStandby_OpenConfig_GlobalCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global count of Path Timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    PathTimeouts interface{}

    // Global count of reservation timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    ReservationTimeouts interface{}

    // Global count of rate limited messages. The type is interface{} with range:
    // 0..18446744073709551615.
    RateLimitedMessages interface{}

    // Global count of path messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    InPathMessages interface{}

    // Global count of path error messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathErrorMessages interface{}

    // Global count of path tear messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathTearMessages interface{}

    // Global count of reservation messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InReservationMessages interface{}

    // Global count of reservation error messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationErrorMessages interface{}

    // Global count of reservation tear messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InReservationTearMessages interface{}

    // Global count of hello messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InHelloMessages interface{}

    // Global count of srefresh messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InSrefreshMessages interface{}

    // Global count of ack messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    InAckMessages interface{}

    // Global count of path messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPathMessages interface{}

    // Global count of path error messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathErrorMessages interface{}

    // Global count of path tear messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathTearMessages interface{}

    // Global count of reservation messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutReservationMessages interface{}

    // Global count of reservation error messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutReservationErrorMessages interface{}

    // Global count of reservation tear messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutReservationTearMessages interface{}

    // Global count of hello messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutHelloMessages interface{}

    // Global count of srefresh messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutSrefreshMessages interface{}

    // Global count of ack messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutAckMessages interface{}
}

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetFilter() yfilter.YFilter { return globalCounters.YFilter }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) SetFilter(yf yfilter.YFilter) { globalCounters.YFilter = yf }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetGoName(yname string) string {
    if yname == "path-timeouts" { return "PathTimeouts" }
    if yname == "reservation-timeouts" { return "ReservationTimeouts" }
    if yname == "rate-limited-messages" { return "RateLimitedMessages" }
    if yname == "in-path-messages" { return "InPathMessages" }
    if yname == "in-path-error-messages" { return "InPathErrorMessages" }
    if yname == "in-path-tear-messages" { return "InPathTearMessages" }
    if yname == "in-reservation-messages" { return "InReservationMessages" }
    if yname == "in-reservation-error-messages" { return "InReservationErrorMessages" }
    if yname == "in-reservation-tear-messages" { return "InReservationTearMessages" }
    if yname == "in-hello-messages" { return "InHelloMessages" }
    if yname == "in-srefresh-messages" { return "InSrefreshMessages" }
    if yname == "in-ack-messages" { return "InAckMessages" }
    if yname == "out-path-messages" { return "OutPathMessages" }
    if yname == "out-path-error-messages" { return "OutPathErrorMessages" }
    if yname == "out-path-tear-messages" { return "OutPathTearMessages" }
    if yname == "out-reservation-messages" { return "OutReservationMessages" }
    if yname == "out-reservation-error-messages" { return "OutReservationErrorMessages" }
    if yname == "out-reservation-tear-messages" { return "OutReservationTearMessages" }
    if yname == "out-hello-messages" { return "OutHelloMessages" }
    if yname == "out-srefresh-messages" { return "OutSrefreshMessages" }
    if yname == "out-ack-messages" { return "OutAckMessages" }
    return ""
}

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetSegmentPath() string {
    return "global-counters"
}

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-timeouts"] = globalCounters.PathTimeouts
    leafs["reservation-timeouts"] = globalCounters.ReservationTimeouts
    leafs["rate-limited-messages"] = globalCounters.RateLimitedMessages
    leafs["in-path-messages"] = globalCounters.InPathMessages
    leafs["in-path-error-messages"] = globalCounters.InPathErrorMessages
    leafs["in-path-tear-messages"] = globalCounters.InPathTearMessages
    leafs["in-reservation-messages"] = globalCounters.InReservationMessages
    leafs["in-reservation-error-messages"] = globalCounters.InReservationErrorMessages
    leafs["in-reservation-tear-messages"] = globalCounters.InReservationTearMessages
    leafs["in-hello-messages"] = globalCounters.InHelloMessages
    leafs["in-srefresh-messages"] = globalCounters.InSrefreshMessages
    leafs["in-ack-messages"] = globalCounters.InAckMessages
    leafs["out-path-messages"] = globalCounters.OutPathMessages
    leafs["out-path-error-messages"] = globalCounters.OutPathErrorMessages
    leafs["out-path-tear-messages"] = globalCounters.OutPathTearMessages
    leafs["out-reservation-messages"] = globalCounters.OutReservationMessages
    leafs["out-reservation-error-messages"] = globalCounters.OutReservationErrorMessages
    leafs["out-reservation-tear-messages"] = globalCounters.OutReservationTearMessages
    leafs["out-hello-messages"] = globalCounters.OutHelloMessages
    leafs["out-srefresh-messages"] = globalCounters.OutSrefreshMessages
    leafs["out-ack-messages"] = globalCounters.OutAckMessages
    return leafs
}

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetBundleName() string { return "cisco_ios_xr" }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetYangName() string { return "global-counters" }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) SetParent(parent types.Entity) { globalCounters.parent = parent }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetParent() types.Entity { return globalCounters.parent }

func (globalCounters *RsvpStandby_OpenConfig_GlobalCounters) GetParentYangName() string { return "open-config" }

// RsvpStandby_OpenConfig_InterfaceCounters
// Table of info about RSVP-enabled interface
// counters for OpenConfig
type RsvpStandby_OpenConfig_InterfaceCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Info about an RSVP-enabled interface counters. The type is slice of
    // RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter.
    InterfaceCounter []RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter
}

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetFilter() yfilter.YFilter { return interfaceCounters.YFilter }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) SetFilter(yf yfilter.YFilter) { interfaceCounters.YFilter = yf }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetGoName(yname string) string {
    if yname == "interface-counter" { return "InterfaceCounter" }
    return ""
}

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetSegmentPath() string {
    return "interface-counters"
}

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-counter" {
        for _, c := range interfaceCounters.InterfaceCounter {
            if interfaceCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter{}
        interfaceCounters.InterfaceCounter = append(interfaceCounters.InterfaceCounter, child)
        return &interfaceCounters.InterfaceCounter[len(interfaceCounters.InterfaceCounter)-1]
    }
    return nil
}

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceCounters.InterfaceCounter {
        children[interfaceCounters.InterfaceCounter[i].GetSegmentPath()] = &interfaceCounters.InterfaceCounter[i]
    }
    return children
}

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetYangName() string { return "interface-counters" }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) SetParent(parent types.Entity) { interfaceCounters.parent = parent }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetParent() types.Entity { return interfaceCounters.parent }

func (interfaceCounters *RsvpStandby_OpenConfig_InterfaceCounters) GetParentYangName() string { return "open-config" }

// RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter
// Info about an RSVP-enabled interface counters
type RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Per interface count of path messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathMessages interface{}

    // Per interface count of path error messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InPathErrorMessages interface{}

    // Per interface count of path tear messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InPathTearMessages interface{}

    // Per interface count of reservation messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationMessages interface{}

    // Per interface count of reservation error messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationErrorMessages interface{}

    // Per interface count of reservation tear messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationTearMessages interface{}

    // Per interface count of hello messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InHelloMessages interface{}

    // Per interface count of srefresh messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InSrefreshMessages interface{}

    // Per interface count of ack messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InAckMessages interface{}

    // Per interface count of path messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathMessages interface{}

    // Per interface count of path error messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutPathErrorMessages interface{}

    // Per interface count of path tear messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutPathTearMessages interface{}

    // Per interface count of reservation messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutReservationMessages interface{}

    // Per interface count of reservation error messages send. The type is
    // interface{} with range: 0..18446744073709551615.
    OutReservationErrorMessages interface{}

    // Per interface count of reservation tear messages send. The type is
    // interface{} with range: 0..18446744073709551615.
    OutReservationTearMessages interface{}

    // Per interface count of hello messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutHelloMessages interface{}

    // Per interface count of srefresh messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutSrefreshMessages interface{}

    // Per interface count of ack messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutAckMessages interface{}
}

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetFilter() yfilter.YFilter { return interfaceCounter.YFilter }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) SetFilter(yf yfilter.YFilter) { interfaceCounter.YFilter = yf }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "in-path-messages" { return "InPathMessages" }
    if yname == "in-path-error-messages" { return "InPathErrorMessages" }
    if yname == "in-path-tear-messages" { return "InPathTearMessages" }
    if yname == "in-reservation-messages" { return "InReservationMessages" }
    if yname == "in-reservation-error-messages" { return "InReservationErrorMessages" }
    if yname == "in-reservation-tear-messages" { return "InReservationTearMessages" }
    if yname == "in-hello-messages" { return "InHelloMessages" }
    if yname == "in-srefresh-messages" { return "InSrefreshMessages" }
    if yname == "in-ack-messages" { return "InAckMessages" }
    if yname == "out-path-messages" { return "OutPathMessages" }
    if yname == "out-path-error-messages" { return "OutPathErrorMessages" }
    if yname == "out-path-tear-messages" { return "OutPathTearMessages" }
    if yname == "out-reservation-messages" { return "OutReservationMessages" }
    if yname == "out-reservation-error-messages" { return "OutReservationErrorMessages" }
    if yname == "out-reservation-tear-messages" { return "OutReservationTearMessages" }
    if yname == "out-hello-messages" { return "OutHelloMessages" }
    if yname == "out-srefresh-messages" { return "OutSrefreshMessages" }
    if yname == "out-ack-messages" { return "OutAckMessages" }
    return ""
}

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetSegmentPath() string {
    return "interface-counter" + "[interface-name='" + fmt.Sprintf("%v", interfaceCounter.InterfaceName) + "']"
}

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceCounter.InterfaceName
    leafs["interface-name-xr"] = interfaceCounter.InterfaceNameXr
    leafs["in-path-messages"] = interfaceCounter.InPathMessages
    leafs["in-path-error-messages"] = interfaceCounter.InPathErrorMessages
    leafs["in-path-tear-messages"] = interfaceCounter.InPathTearMessages
    leafs["in-reservation-messages"] = interfaceCounter.InReservationMessages
    leafs["in-reservation-error-messages"] = interfaceCounter.InReservationErrorMessages
    leafs["in-reservation-tear-messages"] = interfaceCounter.InReservationTearMessages
    leafs["in-hello-messages"] = interfaceCounter.InHelloMessages
    leafs["in-srefresh-messages"] = interfaceCounter.InSrefreshMessages
    leafs["in-ack-messages"] = interfaceCounter.InAckMessages
    leafs["out-path-messages"] = interfaceCounter.OutPathMessages
    leafs["out-path-error-messages"] = interfaceCounter.OutPathErrorMessages
    leafs["out-path-tear-messages"] = interfaceCounter.OutPathTearMessages
    leafs["out-reservation-messages"] = interfaceCounter.OutReservationMessages
    leafs["out-reservation-error-messages"] = interfaceCounter.OutReservationErrorMessages
    leafs["out-reservation-tear-messages"] = interfaceCounter.OutReservationTearMessages
    leafs["out-hello-messages"] = interfaceCounter.OutHelloMessages
    leafs["out-srefresh-messages"] = interfaceCounter.OutSrefreshMessages
    leafs["out-ack-messages"] = interfaceCounter.OutAckMessages
    return leafs
}

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetYangName() string { return "interface-counter" }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) SetParent(parent types.Entity) { interfaceCounter.parent = parent }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetParent() types.Entity { return interfaceCounter.parent }

func (interfaceCounter *RsvpStandby_OpenConfig_InterfaceCounters_InterfaceCounter) GetParentYangName() string { return "interface-counters" }

// RsvpStandby_Counters
// Counters
type RsvpStandby_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of message counters.
    InterfaceMessages RsvpStandby_Counters_InterfaceMessages

    // Summary information for all RSVP message counters.
    MessageSummary RsvpStandby_Counters_MessageSummary

    // Prefix filtering counters.
    PrefixFiltering RsvpStandby_Counters_PrefixFiltering

    // Out of resource counters.
    OutOfResource RsvpStandby_Counters_OutOfResource

    // Event counters.
    InterfaceEvents RsvpStandby_Counters_InterfaceEvents

    // Summary information for all RSVP NSR counters.
    Nsr RsvpStandby_Counters_Nsr

    // Summary information for all RSVP ISSU counters.
    Issu RsvpStandby_Counters_Issu

    // Summary information for all RSVP database counters.
    Database RsvpStandby_Counters_Database

    // Table containing event sync counters.
    EventSyncs RsvpStandby_Counters_EventSyncs
}

func (counters *RsvpStandby_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *RsvpStandby_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *RsvpStandby_Counters) GetGoName(yname string) string {
    if yname == "interface-messages" { return "InterfaceMessages" }
    if yname == "message-summary" { return "MessageSummary" }
    if yname == "prefix-filtering" { return "PrefixFiltering" }
    if yname == "out-of-resource" { return "OutOfResource" }
    if yname == "interface-events" { return "InterfaceEvents" }
    if yname == "nsr" { return "Nsr" }
    if yname == "issu" { return "Issu" }
    if yname == "database" { return "Database" }
    if yname == "event-syncs" { return "EventSyncs" }
    return ""
}

func (counters *RsvpStandby_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *RsvpStandby_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-messages" {
        return &counters.InterfaceMessages
    }
    if childYangName == "message-summary" {
        return &counters.MessageSummary
    }
    if childYangName == "prefix-filtering" {
        return &counters.PrefixFiltering
    }
    if childYangName == "out-of-resource" {
        return &counters.OutOfResource
    }
    if childYangName == "interface-events" {
        return &counters.InterfaceEvents
    }
    if childYangName == "nsr" {
        return &counters.Nsr
    }
    if childYangName == "issu" {
        return &counters.Issu
    }
    if childYangName == "database" {
        return &counters.Database
    }
    if childYangName == "event-syncs" {
        return &counters.EventSyncs
    }
    return nil
}

func (counters *RsvpStandby_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-messages"] = &counters.InterfaceMessages
    children["message-summary"] = &counters.MessageSummary
    children["prefix-filtering"] = &counters.PrefixFiltering
    children["out-of-resource"] = &counters.OutOfResource
    children["interface-events"] = &counters.InterfaceEvents
    children["nsr"] = &counters.Nsr
    children["issu"] = &counters.Issu
    children["database"] = &counters.Database
    children["event-syncs"] = &counters.EventSyncs
    return children
}

func (counters *RsvpStandby_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (counters *RsvpStandby_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *RsvpStandby_Counters) GetYangName() string { return "counters" }

func (counters *RsvpStandby_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *RsvpStandby_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *RsvpStandby_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *RsvpStandby_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *RsvpStandby_Counters) GetParent() types.Entity { return counters.parent }

func (counters *RsvpStandby_Counters) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_Counters_InterfaceMessages
// Table of message counters
type RsvpStandby_Counters_InterfaceMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface message counters. The type is slice of
    // RsvpStandby_Counters_InterfaceMessages_InterfaceMessage.
    InterfaceMessage []RsvpStandby_Counters_InterfaceMessages_InterfaceMessage
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetFilter() yfilter.YFilter { return interfaceMessages.YFilter }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) SetFilter(yf yfilter.YFilter) { interfaceMessages.YFilter = yf }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetGoName(yname string) string {
    if yname == "interface-message" { return "InterfaceMessage" }
    return ""
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetSegmentPath() string {
    return "interface-messages"
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-message" {
        for _, c := range interfaceMessages.InterfaceMessage {
            if interfaceMessages.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Counters_InterfaceMessages_InterfaceMessage{}
        interfaceMessages.InterfaceMessage = append(interfaceMessages.InterfaceMessage, child)
        return &interfaceMessages.InterfaceMessage[len(interfaceMessages.InterfaceMessage)-1]
    }
    return nil
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceMessages.InterfaceMessage {
        children[interfaceMessages.InterfaceMessage[i].GetSegmentPath()] = &interfaceMessages.InterfaceMessage[i]
    }
    return children
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetYangName() string { return "interface-messages" }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) SetParent(parent types.Entity) { interfaceMessages.parent = parent }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetParent() types.Entity { return interfaceMessages.parent }

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage
// Interface message counters
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetFilter() yfilter.YFilter { return interfaceMessage.YFilter }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) SetFilter(yf yfilter.YFilter) { interfaceMessage.YFilter = yf }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "retransmitted-messages" { return "RetransmittedMessages" }
    if yname == "out-of-order-messages" { return "OutOfOrderMessages" }
    if yname == "rate-limited-messages" { return "RateLimitedMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmitted-messages" { return "TransmittedMessages" }
    if yname == "bundle-received-messages" { return "BundleReceivedMessages" }
    if yname == "bundle-transmitted-messages" { return "BundleTransmittedMessages" }
    return ""
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetSegmentPath() string {
    return "interface-message" + "[interface-name='" + fmt.Sprintf("%v", interfaceMessage.InterfaceName) + "']"
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-messages" {
        return &interfaceMessage.ReceivedMessages
    }
    if childYangName == "transmitted-messages" {
        return &interfaceMessage.TransmittedMessages
    }
    if childYangName == "bundle-received-messages" {
        return &interfaceMessage.BundleReceivedMessages
    }
    if childYangName == "bundle-transmitted-messages" {
        return &interfaceMessage.BundleTransmittedMessages
    }
    return nil
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-messages"] = &interfaceMessage.ReceivedMessages
    children["transmitted-messages"] = &interfaceMessage.TransmittedMessages
    children["bundle-received-messages"] = &interfaceMessage.BundleReceivedMessages
    children["bundle-transmitted-messages"] = &interfaceMessage.BundleTransmittedMessages
    return children
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceMessage.InterfaceName
    leafs["retransmitted-messages"] = interfaceMessage.RetransmittedMessages
    leafs["out-of-order-messages"] = interfaceMessage.OutOfOrderMessages
    leafs["rate-limited-messages"] = interfaceMessage.RateLimitedMessages
    return leafs
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetYangName() string { return "interface-message" }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) SetParent(parent types.Entity) { interfaceMessage.parent = parent }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetParent() types.Entity { return interfaceMessage.parent }

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetParentYangName() string { return "interface-messages" }

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages
// Count of messages received
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetFilter() yfilter.YFilter { return receivedMessages.YFilter }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) SetFilter(yf yfilter.YFilter) { receivedMessages.YFilter = yf }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetSegmentPath() string {
    return "received-messages"
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = receivedMessages.Path
    leafs["reservation"] = receivedMessages.Reservation
    leafs["path-error"] = receivedMessages.PathError
    leafs["reservation-error"] = receivedMessages.ReservationError
    leafs["path-tear"] = receivedMessages.PathTear
    leafs["reservation-tear"] = receivedMessages.ReservationTear
    leafs["reservation-confirm"] = receivedMessages.ReservationConfirm
    leafs["bundle"] = receivedMessages.Bundle
    leafs["ack"] = receivedMessages.Ack
    leafs["srefresh"] = receivedMessages.Srefresh
    leafs["hello"] = receivedMessages.Hello
    leafs["challenge"] = receivedMessages.Challenge
    leafs["response"] = receivedMessages.Response
    return leafs
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetYangName() string { return "received-messages" }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) SetParent(parent types.Entity) { receivedMessages.parent = parent }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetParent() types.Entity { return receivedMessages.parent }

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetParentYangName() string { return "interface-message" }

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages
// Count of messages transmitted
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetFilter() yfilter.YFilter { return transmittedMessages.YFilter }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) SetFilter(yf yfilter.YFilter) { transmittedMessages.YFilter = yf }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetSegmentPath() string {
    return "transmitted-messages"
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = transmittedMessages.Path
    leafs["reservation"] = transmittedMessages.Reservation
    leafs["path-error"] = transmittedMessages.PathError
    leafs["reservation-error"] = transmittedMessages.ReservationError
    leafs["path-tear"] = transmittedMessages.PathTear
    leafs["reservation-tear"] = transmittedMessages.ReservationTear
    leafs["reservation-confirm"] = transmittedMessages.ReservationConfirm
    leafs["bundle"] = transmittedMessages.Bundle
    leafs["ack"] = transmittedMessages.Ack
    leafs["srefresh"] = transmittedMessages.Srefresh
    leafs["hello"] = transmittedMessages.Hello
    leafs["challenge"] = transmittedMessages.Challenge
    leafs["response"] = transmittedMessages.Response
    return leafs
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetYangName() string { return "transmitted-messages" }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) SetParent(parent types.Entity) { transmittedMessages.parent = parent }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetParent() types.Entity { return transmittedMessages.parent }

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetParentYangName() string { return "interface-message" }

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages
// Count of Bundle messages received
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetFilter() yfilter.YFilter { return bundleReceivedMessages.YFilter }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) SetFilter(yf yfilter.YFilter) { bundleReceivedMessages.YFilter = yf }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetSegmentPath() string {
    return "bundle-received-messages"
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleReceivedMessages.Path
    leafs["reservation"] = bundleReceivedMessages.Reservation
    leafs["path-error"] = bundleReceivedMessages.PathError
    leafs["reservation-error"] = bundleReceivedMessages.ReservationError
    leafs["path-tear"] = bundleReceivedMessages.PathTear
    leafs["reservation-tear"] = bundleReceivedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleReceivedMessages.ReservationConfirm
    leafs["bundle"] = bundleReceivedMessages.Bundle
    leafs["ack"] = bundleReceivedMessages.Ack
    leafs["srefresh"] = bundleReceivedMessages.Srefresh
    leafs["hello"] = bundleReceivedMessages.Hello
    leafs["challenge"] = bundleReceivedMessages.Challenge
    leafs["response"] = bundleReceivedMessages.Response
    return leafs
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetYangName() string { return "bundle-received-messages" }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) SetParent(parent types.Entity) { bundleReceivedMessages.parent = parent }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetParent() types.Entity { return bundleReceivedMessages.parent }

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetParentYangName() string { return "interface-message" }

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
// Count of Bundle messages transmitted
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetFilter() yfilter.YFilter { return bundleTransmittedMessages.YFilter }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) SetFilter(yf yfilter.YFilter) { bundleTransmittedMessages.YFilter = yf }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetSegmentPath() string {
    return "bundle-transmitted-messages"
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleTransmittedMessages.Path
    leafs["reservation"] = bundleTransmittedMessages.Reservation
    leafs["path-error"] = bundleTransmittedMessages.PathError
    leafs["reservation-error"] = bundleTransmittedMessages.ReservationError
    leafs["path-tear"] = bundleTransmittedMessages.PathTear
    leafs["reservation-tear"] = bundleTransmittedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleTransmittedMessages.ReservationConfirm
    leafs["bundle"] = bundleTransmittedMessages.Bundle
    leafs["ack"] = bundleTransmittedMessages.Ack
    leafs["srefresh"] = bundleTransmittedMessages.Srefresh
    leafs["hello"] = bundleTransmittedMessages.Hello
    leafs["challenge"] = bundleTransmittedMessages.Challenge
    leafs["response"] = bundleTransmittedMessages.Response
    return leafs
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetYangName() string { return "bundle-transmitted-messages" }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) SetParent(parent types.Entity) { bundleTransmittedMessages.parent = parent }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetParent() types.Entity { return bundleTransmittedMessages.parent }

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetParentYangName() string { return "interface-message" }

// RsvpStandby_Counters_MessageSummary
// Summary information for all RSVP message
// counters
type RsvpStandby_Counters_MessageSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages RsvpStandby_Counters_MessageSummary_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages RsvpStandby_Counters_MessageSummary_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages RsvpStandby_Counters_MessageSummary_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetFilter() yfilter.YFilter { return messageSummary.YFilter }

func (messageSummary *RsvpStandby_Counters_MessageSummary) SetFilter(yf yfilter.YFilter) { messageSummary.YFilter = yf }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetGoName(yname string) string {
    if yname == "retransmitted-messages" { return "RetransmittedMessages" }
    if yname == "out-of-order-messages" { return "OutOfOrderMessages" }
    if yname == "rate-limited-messages" { return "RateLimitedMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmitted-messages" { return "TransmittedMessages" }
    if yname == "bundle-received-messages" { return "BundleReceivedMessages" }
    if yname == "bundle-transmitted-messages" { return "BundleTransmittedMessages" }
    return ""
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetSegmentPath() string {
    return "message-summary"
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-messages" {
        return &messageSummary.ReceivedMessages
    }
    if childYangName == "transmitted-messages" {
        return &messageSummary.TransmittedMessages
    }
    if childYangName == "bundle-received-messages" {
        return &messageSummary.BundleReceivedMessages
    }
    if childYangName == "bundle-transmitted-messages" {
        return &messageSummary.BundleTransmittedMessages
    }
    return nil
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-messages"] = &messageSummary.ReceivedMessages
    children["transmitted-messages"] = &messageSummary.TransmittedMessages
    children["bundle-received-messages"] = &messageSummary.BundleReceivedMessages
    children["bundle-transmitted-messages"] = &messageSummary.BundleTransmittedMessages
    return children
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["retransmitted-messages"] = messageSummary.RetransmittedMessages
    leafs["out-of-order-messages"] = messageSummary.OutOfOrderMessages
    leafs["rate-limited-messages"] = messageSummary.RateLimitedMessages
    return leafs
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetBundleName() string { return "cisco_ios_xr" }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetYangName() string { return "message-summary" }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageSummary *RsvpStandby_Counters_MessageSummary) SetParent(parent types.Entity) { messageSummary.parent = parent }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetParent() types.Entity { return messageSummary.parent }

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_MessageSummary_ReceivedMessages
// Count of messages received
type RsvpStandby_Counters_MessageSummary_ReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetFilter() yfilter.YFilter { return receivedMessages.YFilter }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) SetFilter(yf yfilter.YFilter) { receivedMessages.YFilter = yf }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetSegmentPath() string {
    return "received-messages"
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = receivedMessages.Path
    leafs["reservation"] = receivedMessages.Reservation
    leafs["path-error"] = receivedMessages.PathError
    leafs["reservation-error"] = receivedMessages.ReservationError
    leafs["path-tear"] = receivedMessages.PathTear
    leafs["reservation-tear"] = receivedMessages.ReservationTear
    leafs["reservation-confirm"] = receivedMessages.ReservationConfirm
    leafs["bundle"] = receivedMessages.Bundle
    leafs["ack"] = receivedMessages.Ack
    leafs["srefresh"] = receivedMessages.Srefresh
    leafs["hello"] = receivedMessages.Hello
    leafs["challenge"] = receivedMessages.Challenge
    leafs["response"] = receivedMessages.Response
    return leafs
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetYangName() string { return "received-messages" }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) SetParent(parent types.Entity) { receivedMessages.parent = parent }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetParent() types.Entity { return receivedMessages.parent }

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetParentYangName() string { return "message-summary" }

// RsvpStandby_Counters_MessageSummary_TransmittedMessages
// Count of messages transmitted
type RsvpStandby_Counters_MessageSummary_TransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetFilter() yfilter.YFilter { return transmittedMessages.YFilter }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) SetFilter(yf yfilter.YFilter) { transmittedMessages.YFilter = yf }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetSegmentPath() string {
    return "transmitted-messages"
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = transmittedMessages.Path
    leafs["reservation"] = transmittedMessages.Reservation
    leafs["path-error"] = transmittedMessages.PathError
    leafs["reservation-error"] = transmittedMessages.ReservationError
    leafs["path-tear"] = transmittedMessages.PathTear
    leafs["reservation-tear"] = transmittedMessages.ReservationTear
    leafs["reservation-confirm"] = transmittedMessages.ReservationConfirm
    leafs["bundle"] = transmittedMessages.Bundle
    leafs["ack"] = transmittedMessages.Ack
    leafs["srefresh"] = transmittedMessages.Srefresh
    leafs["hello"] = transmittedMessages.Hello
    leafs["challenge"] = transmittedMessages.Challenge
    leafs["response"] = transmittedMessages.Response
    return leafs
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetYangName() string { return "transmitted-messages" }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) SetParent(parent types.Entity) { transmittedMessages.parent = parent }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetParent() types.Entity { return transmittedMessages.parent }

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetParentYangName() string { return "message-summary" }

// RsvpStandby_Counters_MessageSummary_BundleReceivedMessages
// Count of Bundle messages received
type RsvpStandby_Counters_MessageSummary_BundleReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetFilter() yfilter.YFilter { return bundleReceivedMessages.YFilter }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) SetFilter(yf yfilter.YFilter) { bundleReceivedMessages.YFilter = yf }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetSegmentPath() string {
    return "bundle-received-messages"
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleReceivedMessages.Path
    leafs["reservation"] = bundleReceivedMessages.Reservation
    leafs["path-error"] = bundleReceivedMessages.PathError
    leafs["reservation-error"] = bundleReceivedMessages.ReservationError
    leafs["path-tear"] = bundleReceivedMessages.PathTear
    leafs["reservation-tear"] = bundleReceivedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleReceivedMessages.ReservationConfirm
    leafs["bundle"] = bundleReceivedMessages.Bundle
    leafs["ack"] = bundleReceivedMessages.Ack
    leafs["srefresh"] = bundleReceivedMessages.Srefresh
    leafs["hello"] = bundleReceivedMessages.Hello
    leafs["challenge"] = bundleReceivedMessages.Challenge
    leafs["response"] = bundleReceivedMessages.Response
    return leafs
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetYangName() string { return "bundle-received-messages" }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) SetParent(parent types.Entity) { bundleReceivedMessages.parent = parent }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetParent() types.Entity { return bundleReceivedMessages.parent }

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetParentYangName() string { return "message-summary" }

// RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages
// Count of Bundle messages transmitted
type RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetFilter() yfilter.YFilter { return bundleTransmittedMessages.YFilter }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) SetFilter(yf yfilter.YFilter) { bundleTransmittedMessages.YFilter = yf }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetSegmentPath() string {
    return "bundle-transmitted-messages"
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleTransmittedMessages.Path
    leafs["reservation"] = bundleTransmittedMessages.Reservation
    leafs["path-error"] = bundleTransmittedMessages.PathError
    leafs["reservation-error"] = bundleTransmittedMessages.ReservationError
    leafs["path-tear"] = bundleTransmittedMessages.PathTear
    leafs["reservation-tear"] = bundleTransmittedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleTransmittedMessages.ReservationConfirm
    leafs["bundle"] = bundleTransmittedMessages.Bundle
    leafs["ack"] = bundleTransmittedMessages.Ack
    leafs["srefresh"] = bundleTransmittedMessages.Srefresh
    leafs["hello"] = bundleTransmittedMessages.Hello
    leafs["challenge"] = bundleTransmittedMessages.Challenge
    leafs["response"] = bundleTransmittedMessages.Response
    return leafs
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetYangName() string { return "bundle-transmitted-messages" }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) SetParent(parent types.Entity) { bundleTransmittedMessages.parent = parent }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetParent() types.Entity { return bundleTransmittedMessages.parent }

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetParentYangName() string { return "message-summary" }

// RsvpStandby_Counters_PrefixFiltering
// Prefix filtering counters
type RsvpStandby_Counters_PrefixFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AccessList specific prefix filtering counters.
    Accesses RsvpStandby_Counters_PrefixFiltering_Accesses

    // Interface specific prefix filtering counters.
    Interfaces RsvpStandby_Counters_PrefixFiltering_Interfaces
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetFilter() yfilter.YFilter { return prefixFiltering.YFilter }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) SetFilter(yf yfilter.YFilter) { prefixFiltering.YFilter = yf }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetGoName(yname string) string {
    if yname == "accesses" { return "Accesses" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetSegmentPath() string {
    return "prefix-filtering"
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accesses" {
        return &prefixFiltering.Accesses
    }
    if childYangName == "interfaces" {
        return &prefixFiltering.Interfaces
    }
    return nil
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accesses"] = &prefixFiltering.Accesses
    children["interfaces"] = &prefixFiltering.Interfaces
    return children
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetYangName() string { return "prefix-filtering" }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) SetParent(parent types.Entity) { prefixFiltering.parent = parent }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetParent() types.Entity { return prefixFiltering.parent }

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_PrefixFiltering_Accesses
// AccessList specific prefix filtering counters
type RsvpStandby_Counters_PrefixFiltering_Accesses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific AccessList. The type is slice of
    // RsvpStandby_Counters_PrefixFiltering_Accesses_Access.
    Access []RsvpStandby_Counters_PrefixFiltering_Accesses_Access
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetFilter() yfilter.YFilter { return accesses.YFilter }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) SetFilter(yf yfilter.YFilter) { accesses.YFilter = yf }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetGoName(yname string) string {
    if yname == "access" { return "Access" }
    return ""
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetSegmentPath() string {
    return "accesses"
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access" {
        for _, c := range accesses.Access {
            if accesses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Counters_PrefixFiltering_Accesses_Access{}
        accesses.Access = append(accesses.Access, child)
        return &accesses.Access[len(accesses.Access)-1]
    }
    return nil
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accesses.Access {
        children[accesses.Access[i].GetSegmentPath()] = &accesses.Access[i]
    }
    return children
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetBundleName() string { return "cisco_ios_xr" }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetYangName() string { return "accesses" }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) SetParent(parent types.Entity) { accesses.parent = parent }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetParent() types.Entity { return accesses.parent }

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetParentYangName() string { return "prefix-filtering" }

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access
// Prefix filtering counters for a specific
// AccessList
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. AccessList Name. The type is string with length:
    // 1..65.
    AccessListName interface{}

    // Count of messages which got forwarded.
    Forwarded RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded

    // Count of locally destined messages.
    LocallyDestined RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined

    // Count of messages dropped.
    Dropped RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped

    // Count of total messages.
    Total RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetFilter() yfilter.YFilter { return access.YFilter }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) SetFilter(yf yfilter.YFilter) { access.YFilter = yf }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "forwarded" { return "Forwarded" }
    if yname == "locally-destined" { return "LocallyDestined" }
    if yname == "dropped" { return "Dropped" }
    if yname == "total" { return "Total" }
    return ""
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetSegmentPath() string {
    return "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarded" {
        return &access.Forwarded
    }
    if childYangName == "locally-destined" {
        return &access.LocallyDestined
    }
    if childYangName == "dropped" {
        return &access.Dropped
    }
    if childYangName == "total" {
        return &access.Total
    }
    return nil
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarded"] = &access.Forwarded
    children["locally-destined"] = &access.LocallyDestined
    children["dropped"] = &access.Dropped
    children["total"] = &access.Total
    return children
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = access.AccessListName
    return leafs
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetBundleName() string { return "cisco_ios_xr" }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetYangName() string { return "access" }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) SetParent(parent types.Entity) { access.parent = parent }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetParent() types.Entity { return access.parent }

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetParentYangName() string { return "accesses" }

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded
// Count of messages which got forwarded
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetFilter() yfilter.YFilter { return forwarded.YFilter }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) SetFilter(yf yfilter.YFilter) { forwarded.YFilter = yf }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetSegmentPath() string {
    return "forwarded"
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = forwarded.Path
    leafs["path-tear"] = forwarded.PathTear
    leafs["reservation-confirm"] = forwarded.ReservationConfirm
    leafs["total"] = forwarded.Total
    return leafs
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetBundleName() string { return "cisco_ios_xr" }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetYangName() string { return "forwarded" }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) SetParent(parent types.Entity) { forwarded.parent = parent }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetParent() types.Entity { return forwarded.parent }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetParentYangName() string { return "access" }

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined
// Count of locally destined messages
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetFilter() yfilter.YFilter { return locallyDestined.YFilter }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) SetFilter(yf yfilter.YFilter) { locallyDestined.YFilter = yf }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetSegmentPath() string {
    return "locally-destined"
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = locallyDestined.Path
    leafs["path-tear"] = locallyDestined.PathTear
    leafs["reservation-confirm"] = locallyDestined.ReservationConfirm
    leafs["total"] = locallyDestined.Total
    return leafs
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetBundleName() string { return "cisco_ios_xr" }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetYangName() string { return "locally-destined" }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) SetParent(parent types.Entity) { locallyDestined.parent = parent }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetParent() types.Entity { return locallyDestined.parent }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetParentYangName() string { return "access" }

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped
// Count of messages dropped
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetFilter() yfilter.YFilter { return dropped.YFilter }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) SetFilter(yf yfilter.YFilter) { dropped.YFilter = yf }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetSegmentPath() string {
    return "dropped"
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = dropped.Path
    leafs["path-tear"] = dropped.PathTear
    leafs["reservation-confirm"] = dropped.ReservationConfirm
    leafs["total"] = dropped.Total
    return leafs
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetBundleName() string { return "cisco_ios_xr" }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetYangName() string { return "dropped" }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) SetParent(parent types.Entity) { dropped.parent = parent }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetParent() types.Entity { return dropped.parent }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetParentYangName() string { return "access" }

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total
// Count of total messages
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetSegmentPath() string {
    return "total"
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = total.Path
    leafs["path-tear"] = total.PathTear
    leafs["reservation-confirm"] = total.ReservationConfirm
    leafs["total"] = total.Total
    return leafs
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetYangName() string { return "total" }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetParent() types.Entity { return total.parent }

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetParentYangName() string { return "access" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces
// Interface specific prefix filtering counters
type RsvpStandby_Counters_PrefixFiltering_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of prefix filtering counts for all interfaces.
    Summary RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary

    // Table of interface specific prefix filtering counters.
    Interfaces RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &interfaces.Summary
    }
    if childYangName == "interfaces" {
        return &interfaces.Interfaces
    }
    return nil
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &interfaces.Summary
    children["interfaces"] = &interfaces.Interfaces
    return children
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetParentYangName() string { return "prefix-filtering" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary
// Summary of prefix filtering counts for all
// interfaces
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of messages which got forwarded.
    Forwarded RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded

    // Count of locally destined messages.
    LocallyDestined RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined

    // Count of messages dropped.
    Dropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed

    // Count of total messages.
    Total RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetGoName(yname string) string {
    if yname == "forwarded" { return "Forwarded" }
    if yname == "locally-destined" { return "LocallyDestined" }
    if yname == "dropped" { return "Dropped" }
    if yname == "default-action-dropped" { return "DefaultActionDropped" }
    if yname == "default-action-processed" { return "DefaultActionProcessed" }
    if yname == "total" { return "Total" }
    return ""
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarded" {
        return &summary.Forwarded
    }
    if childYangName == "locally-destined" {
        return &summary.LocallyDestined
    }
    if childYangName == "dropped" {
        return &summary.Dropped
    }
    if childYangName == "default-action-dropped" {
        return &summary.DefaultActionDropped
    }
    if childYangName == "default-action-processed" {
        return &summary.DefaultActionProcessed
    }
    if childYangName == "total" {
        return &summary.Total
    }
    return nil
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarded"] = &summary.Forwarded
    children["locally-destined"] = &summary.LocallyDestined
    children["dropped"] = &summary.Dropped
    children["default-action-dropped"] = &summary.DefaultActionDropped
    children["default-action-processed"] = &summary.DefaultActionProcessed
    children["total"] = &summary.Total
    return children
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetYangName() string { return "summary" }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetParent() types.Entity { return summary.parent }

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetParentYangName() string { return "interfaces" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded
// Count of messages which got forwarded
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetFilter() yfilter.YFilter { return forwarded.YFilter }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) SetFilter(yf yfilter.YFilter) { forwarded.YFilter = yf }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetSegmentPath() string {
    return "forwarded"
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = forwarded.Path
    leafs["path-tear"] = forwarded.PathTear
    leafs["reservation-confirm"] = forwarded.ReservationConfirm
    leafs["total"] = forwarded.Total
    return leafs
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetBundleName() string { return "cisco_ios_xr" }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetYangName() string { return "forwarded" }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) SetParent(parent types.Entity) { forwarded.parent = parent }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetParent() types.Entity { return forwarded.parent }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetParentYangName() string { return "summary" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined
// Count of locally destined messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetFilter() yfilter.YFilter { return locallyDestined.YFilter }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) SetFilter(yf yfilter.YFilter) { locallyDestined.YFilter = yf }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetSegmentPath() string {
    return "locally-destined"
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = locallyDestined.Path
    leafs["path-tear"] = locallyDestined.PathTear
    leafs["reservation-confirm"] = locallyDestined.ReservationConfirm
    leafs["total"] = locallyDestined.Total
    return leafs
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetBundleName() string { return "cisco_ios_xr" }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetYangName() string { return "locally-destined" }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) SetParent(parent types.Entity) { locallyDestined.parent = parent }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetParent() types.Entity { return locallyDestined.parent }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetParentYangName() string { return "summary" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped
// Count of messages dropped
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetFilter() yfilter.YFilter { return dropped.YFilter }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) SetFilter(yf yfilter.YFilter) { dropped.YFilter = yf }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetSegmentPath() string {
    return "dropped"
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = dropped.Path
    leafs["path-tear"] = dropped.PathTear
    leafs["reservation-confirm"] = dropped.ReservationConfirm
    leafs["total"] = dropped.Total
    return leafs
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetBundleName() string { return "cisco_ios_xr" }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetYangName() string { return "dropped" }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) SetParent(parent types.Entity) { dropped.parent = parent }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetParent() types.Entity { return dropped.parent }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetParentYangName() string { return "summary" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetFilter() yfilter.YFilter { return defaultActionDropped.YFilter }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) SetFilter(yf yfilter.YFilter) { defaultActionDropped.YFilter = yf }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetSegmentPath() string {
    return "default-action-dropped"
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionDropped.Path
    leafs["path-tear"] = defaultActionDropped.PathTear
    leafs["reservation-confirm"] = defaultActionDropped.ReservationConfirm
    leafs["total"] = defaultActionDropped.Total
    return leafs
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetYangName() string { return "default-action-dropped" }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) SetParent(parent types.Entity) { defaultActionDropped.parent = parent }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetParent() types.Entity { return defaultActionDropped.parent }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetParentYangName() string { return "summary" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetFilter() yfilter.YFilter { return defaultActionProcessed.YFilter }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) SetFilter(yf yfilter.YFilter) { defaultActionProcessed.YFilter = yf }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetSegmentPath() string {
    return "default-action-processed"
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionProcessed.Path
    leafs["path-tear"] = defaultActionProcessed.PathTear
    leafs["reservation-confirm"] = defaultActionProcessed.ReservationConfirm
    leafs["total"] = defaultActionProcessed.Total
    return leafs
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetYangName() string { return "default-action-processed" }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) SetParent(parent types.Entity) { defaultActionProcessed.parent = parent }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetParent() types.Entity { return defaultActionProcessed.parent }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetParentYangName() string { return "summary" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total
// Count of total messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetSegmentPath() string {
    return "total"
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = total.Path
    leafs["path-tear"] = total.PathTear
    leafs["reservation-confirm"] = total.ReservationConfirm
    leafs["total"] = total.Total
    return leafs
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetYangName() string { return "total" }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetParent() types.Entity { return total.parent }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetParentYangName() string { return "summary" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces
// Table of interface specific prefix filtering
// counters
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific interface. The type is slice of
    // RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface.
    Interface []RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetParentYangName() string { return "interfaces" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
// Prefix filtering counters for a specific
// interface
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InterfaceName interface{}

    // Count of messages which got forwarded.
    Forwarded RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded

    // Count of locally destined messages.
    LocallyDestined RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined

    // Count of messages dropped.
    Dropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed

    // Count of total messages.
    Total RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "forwarded" { return "Forwarded" }
    if yname == "locally-destined" { return "LocallyDestined" }
    if yname == "dropped" { return "Dropped" }
    if yname == "default-action-dropped" { return "DefaultActionDropped" }
    if yname == "default-action-processed" { return "DefaultActionProcessed" }
    if yname == "total" { return "Total" }
    return ""
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarded" {
        return &self.Forwarded
    }
    if childYangName == "locally-destined" {
        return &self.LocallyDestined
    }
    if childYangName == "dropped" {
        return &self.Dropped
    }
    if childYangName == "default-action-dropped" {
        return &self.DefaultActionDropped
    }
    if childYangName == "default-action-processed" {
        return &self.DefaultActionProcessed
    }
    if childYangName == "total" {
        return &self.Total
    }
    return nil
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarded"] = &self.Forwarded
    children["locally-destined"] = &self.LocallyDestined
    children["dropped"] = &self.Dropped
    children["default-action-dropped"] = &self.DefaultActionDropped
    children["default-action-processed"] = &self.DefaultActionProcessed
    children["total"] = &self.Total
    return children
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    return leafs
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded
// Count of messages which got forwarded
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetFilter() yfilter.YFilter { return forwarded.YFilter }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) SetFilter(yf yfilter.YFilter) { forwarded.YFilter = yf }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetSegmentPath() string {
    return "forwarded"
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = forwarded.Path
    leafs["path-tear"] = forwarded.PathTear
    leafs["reservation-confirm"] = forwarded.ReservationConfirm
    leafs["total"] = forwarded.Total
    return leafs
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetBundleName() string { return "cisco_ios_xr" }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetYangName() string { return "forwarded" }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) SetParent(parent types.Entity) { forwarded.parent = parent }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetParent() types.Entity { return forwarded.parent }

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetParentYangName() string { return "interface" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined
// Count of locally destined messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetFilter() yfilter.YFilter { return locallyDestined.YFilter }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) SetFilter(yf yfilter.YFilter) { locallyDestined.YFilter = yf }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetSegmentPath() string {
    return "locally-destined"
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = locallyDestined.Path
    leafs["path-tear"] = locallyDestined.PathTear
    leafs["reservation-confirm"] = locallyDestined.ReservationConfirm
    leafs["total"] = locallyDestined.Total
    return leafs
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetBundleName() string { return "cisco_ios_xr" }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetYangName() string { return "locally-destined" }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) SetParent(parent types.Entity) { locallyDestined.parent = parent }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetParent() types.Entity { return locallyDestined.parent }

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetParentYangName() string { return "interface" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped
// Count of messages dropped
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetFilter() yfilter.YFilter { return dropped.YFilter }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) SetFilter(yf yfilter.YFilter) { dropped.YFilter = yf }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetSegmentPath() string {
    return "dropped"
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = dropped.Path
    leafs["path-tear"] = dropped.PathTear
    leafs["reservation-confirm"] = dropped.ReservationConfirm
    leafs["total"] = dropped.Total
    return leafs
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetBundleName() string { return "cisco_ios_xr" }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetYangName() string { return "dropped" }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) SetParent(parent types.Entity) { dropped.parent = parent }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetParent() types.Entity { return dropped.parent }

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetParentYangName() string { return "interface" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetFilter() yfilter.YFilter { return defaultActionDropped.YFilter }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) SetFilter(yf yfilter.YFilter) { defaultActionDropped.YFilter = yf }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetSegmentPath() string {
    return "default-action-dropped"
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionDropped.Path
    leafs["path-tear"] = defaultActionDropped.PathTear
    leafs["reservation-confirm"] = defaultActionDropped.ReservationConfirm
    leafs["total"] = defaultActionDropped.Total
    return leafs
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetYangName() string { return "default-action-dropped" }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) SetParent(parent types.Entity) { defaultActionDropped.parent = parent }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetParent() types.Entity { return defaultActionDropped.parent }

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetParentYangName() string { return "interface" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetFilter() yfilter.YFilter { return defaultActionProcessed.YFilter }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) SetFilter(yf yfilter.YFilter) { defaultActionProcessed.YFilter = yf }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetSegmentPath() string {
    return "default-action-processed"
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionProcessed.Path
    leafs["path-tear"] = defaultActionProcessed.PathTear
    leafs["reservation-confirm"] = defaultActionProcessed.ReservationConfirm
    leafs["total"] = defaultActionProcessed.Total
    return leafs
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetYangName() string { return "default-action-processed" }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) SetParent(parent types.Entity) { defaultActionProcessed.parent = parent }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetParent() types.Entity { return defaultActionProcessed.parent }

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetParentYangName() string { return "interface" }

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
// Count of total messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetSegmentPath() string {
    return "total"
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = total.Path
    leafs["path-tear"] = total.PathTear
    leafs["reservation-confirm"] = total.ReservationConfirm
    leafs["total"] = total.Total
    return leafs
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetYangName() string { return "total" }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetParent() types.Entity { return total.parent }

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetParentYangName() string { return "interface" }

// RsvpStandby_Counters_OutOfResource
// Out of resource counters
type RsvpStandby_Counters_OutOfResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface specific out of resource counters.
    Interfaces RsvpStandby_Counters_OutOfResource_Interfaces
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetFilter() yfilter.YFilter { return outOfResource.YFilter }

func (outOfResource *RsvpStandby_Counters_OutOfResource) SetFilter(yf yfilter.YFilter) { outOfResource.YFilter = yf }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetSegmentPath() string {
    return "out-of-resource"
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &outOfResource.Interfaces
    }
    return nil
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &outOfResource.Interfaces
    return children
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetBundleName() string { return "cisco_ios_xr" }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetYangName() string { return "out-of-resource" }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outOfResource *RsvpStandby_Counters_OutOfResource) SetParent(parent types.Entity) { outOfResource.parent = parent }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetParent() types.Entity { return outOfResource.parent }

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_OutOfResource_Interfaces
// Interface specific out of resource counters
type RsvpStandby_Counters_OutOfResource_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of out of resource counts for all interfaces.
    Summary RsvpStandby_Counters_OutOfResource_Interfaces_Summary

    // Table of interface specific out of resource counters.
    Interfaces RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &interfaces.Summary
    }
    if childYangName == "interfaces" {
        return &interfaces.Interfaces
    }
    return nil
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &interfaces.Summary
    children["interfaces"] = &interfaces.Interfaces
    return children
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetParentYangName() string { return "out-of-resource" }

// RsvpStandby_Counters_OutOfResource_Interfaces_Summary
// Summary of out of resource counts for all
// interfaces
type RsvpStandby_Counters_OutOfResource_Interfaces_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetGoName(yname string) string {
    if yname == "dropped-path-messages" { return "DroppedPathMessages" }
    return ""
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dropped-path-messages"] = summary.DroppedPathMessages
    return leafs
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetYangName() string { return "summary" }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetParent() types.Entity { return summary.parent }

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetParentYangName() string { return "interfaces" }

// RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces
// Table of interface specific out of resource
// counters
type RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Out of resource counters for a specific interface. The type is slice of
    // RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface.
    Interface []RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetParentYangName() string { return "interfaces" }

// RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface
// Out of resource counters for a specific
// interface
type RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InterfaceName interface{}

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "dropped-path-messages" { return "DroppedPathMessages" }
    return ""
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["dropped-path-messages"] = self.DroppedPathMessages
    return leafs
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// RsvpStandby_Counters_InterfaceEvents
// Event counters
type RsvpStandby_Counters_InterfaceEvents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event counters for an interface. The type is slice of
    // RsvpStandby_Counters_InterfaceEvents_InterfaceEvent.
    InterfaceEvent []RsvpStandby_Counters_InterfaceEvents_InterfaceEvent
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetFilter() yfilter.YFilter { return interfaceEvents.YFilter }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) SetFilter(yf yfilter.YFilter) { interfaceEvents.YFilter = yf }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetGoName(yname string) string {
    if yname == "interface-event" { return "InterfaceEvent" }
    return ""
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetSegmentPath() string {
    return "interface-events"
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-event" {
        for _, c := range interfaceEvents.InterfaceEvent {
            if interfaceEvents.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Counters_InterfaceEvents_InterfaceEvent{}
        interfaceEvents.InterfaceEvent = append(interfaceEvents.InterfaceEvent, child)
        return &interfaceEvents.InterfaceEvent[len(interfaceEvents.InterfaceEvent)-1]
    }
    return nil
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceEvents.InterfaceEvent {
        children[interfaceEvents.InterfaceEvent[i].GetSegmentPath()] = &interfaceEvents.InterfaceEvent[i]
    }
    return children
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetYangName() string { return "interface-events" }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) SetParent(parent types.Entity) { interfaceEvents.parent = parent }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetParent() types.Entity { return interfaceEvents.parent }

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_InterfaceEvents_InterfaceEvent
// Event counters for an interface
type RsvpStandby_Counters_InterfaceEvents_InterfaceEvent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetFilter() yfilter.YFilter { return interfaceEvent.YFilter }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) SetFilter(yf yfilter.YFilter) { interfaceEvent.YFilter = yf }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "expired-paths" { return "ExpiredPaths" }
    if yname == "expired-reservations" { return "ExpiredReservations" }
    if yname == "nac-ks" { return "NacKs" }
    return ""
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetSegmentPath() string {
    return "interface-event" + "[interface-name='" + fmt.Sprintf("%v", interfaceEvent.InterfaceName) + "']"
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceEvent.InterfaceName
    leafs["expired-paths"] = interfaceEvent.ExpiredPaths
    leafs["expired-reservations"] = interfaceEvent.ExpiredReservations
    leafs["nac-ks"] = interfaceEvent.NacKs
    return leafs
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetYangName() string { return "interface-event" }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) SetParent(parent types.Entity) { interfaceEvent.parent = parent }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetParent() types.Entity { return interfaceEvent.parent }

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetParentYangName() string { return "interface-events" }

// RsvpStandby_Counters_Nsr
// Summary information for all RSVP NSR counters
type RsvpStandby_Counters_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (nsr *RsvpStandby_Counters_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *RsvpStandby_Counters_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *RsvpStandby_Counters_Nsr) GetGoName(yname string) string {
    if yname == "last-cleared-timestamp" { return "LastClearedTimestamp" }
    if yname == "rsvp-process-role" { return "RsvpProcessRole" }
    if yname == "last-idt-states" { return "LastIdtStates" }
    if yname == "total-states" { return "TotalStates" }
    if yname == "total-deletions" { return "TotalDeletions" }
    if yname == "total-nacks" { return "TotalNacks" }
    if yname == "total-id-ts" { return "TotalIdTs" }
    return ""
}

func (nsr *RsvpStandby_Counters_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *RsvpStandby_Counters_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsr *RsvpStandby_Counters_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsr *RsvpStandby_Counters_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-cleared-timestamp"] = nsr.LastClearedTimestamp
    leafs["rsvp-process-role"] = nsr.RsvpProcessRole
    leafs["last-idt-states"] = nsr.LastIdtStates
    leafs["total-states"] = nsr.TotalStates
    leafs["total-deletions"] = nsr.TotalDeletions
    leafs["total-nacks"] = nsr.TotalNacks
    leafs["total-id-ts"] = nsr.TotalIdTs
    return leafs
}

func (nsr *RsvpStandby_Counters_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *RsvpStandby_Counters_Nsr) GetYangName() string { return "nsr" }

func (nsr *RsvpStandby_Counters_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *RsvpStandby_Counters_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *RsvpStandby_Counters_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *RsvpStandby_Counters_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *RsvpStandby_Counters_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *RsvpStandby_Counters_Nsr) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_Issu
// Summary information for all RSVP ISSU counters
type RsvpStandby_Counters_Issu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (issu *RsvpStandby_Counters_Issu) GetFilter() yfilter.YFilter { return issu.YFilter }

func (issu *RsvpStandby_Counters_Issu) SetFilter(yf yfilter.YFilter) { issu.YFilter = yf }

func (issu *RsvpStandby_Counters_Issu) GetGoName(yname string) string {
    if yname == "last-cleared-timestamp" { return "LastClearedTimestamp" }
    if yname == "rsvp-process-role" { return "RsvpProcessRole" }
    if yname == "last-idt-states" { return "LastIdtStates" }
    if yname == "total-states" { return "TotalStates" }
    if yname == "total-deletions" { return "TotalDeletions" }
    if yname == "total-nacks" { return "TotalNacks" }
    if yname == "total-id-ts" { return "TotalIdTs" }
    return ""
}

func (issu *RsvpStandby_Counters_Issu) GetSegmentPath() string {
    return "issu"
}

func (issu *RsvpStandby_Counters_Issu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (issu *RsvpStandby_Counters_Issu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (issu *RsvpStandby_Counters_Issu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-cleared-timestamp"] = issu.LastClearedTimestamp
    leafs["rsvp-process-role"] = issu.RsvpProcessRole
    leafs["last-idt-states"] = issu.LastIdtStates
    leafs["total-states"] = issu.TotalStates
    leafs["total-deletions"] = issu.TotalDeletions
    leafs["total-nacks"] = issu.TotalNacks
    leafs["total-id-ts"] = issu.TotalIdTs
    return leafs
}

func (issu *RsvpStandby_Counters_Issu) GetBundleName() string { return "cisco_ios_xr" }

func (issu *RsvpStandby_Counters_Issu) GetYangName() string { return "issu" }

func (issu *RsvpStandby_Counters_Issu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issu *RsvpStandby_Counters_Issu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issu *RsvpStandby_Counters_Issu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issu *RsvpStandby_Counters_Issu) SetParent(parent types.Entity) { issu.parent = parent }

func (issu *RsvpStandby_Counters_Issu) GetParent() types.Entity { return issu.parent }

func (issu *RsvpStandby_Counters_Issu) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_Database
// Summary information for all RSVP database
// counters
type RsvpStandby_Counters_Database struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (database *RsvpStandby_Counters_Database) GetFilter() yfilter.YFilter { return database.YFilter }

func (database *RsvpStandby_Counters_Database) SetFilter(yf yfilter.YFilter) { database.YFilter = yf }

func (database *RsvpStandby_Counters_Database) GetGoName(yname string) string {
    if yname == "sessions" { return "Sessions" }
    if yname == "incoming-paths" { return "IncomingPaths" }
    if yname == "outgoing-paths" { return "OutgoingPaths" }
    if yname == "incoming-reservations" { return "IncomingReservations" }
    if yname == "outgoing-reservations" { return "OutgoingReservations" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (database *RsvpStandby_Counters_Database) GetSegmentPath() string {
    return "database"
}

func (database *RsvpStandby_Counters_Database) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (database *RsvpStandby_Counters_Database) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (database *RsvpStandby_Counters_Database) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessions"] = database.Sessions
    leafs["incoming-paths"] = database.IncomingPaths
    leafs["outgoing-paths"] = database.OutgoingPaths
    leafs["incoming-reservations"] = database.IncomingReservations
    leafs["outgoing-reservations"] = database.OutgoingReservations
    leafs["interfaces"] = database.Interfaces
    return leafs
}

func (database *RsvpStandby_Counters_Database) GetBundleName() string { return "cisco_ios_xr" }

func (database *RsvpStandby_Counters_Database) GetYangName() string { return "database" }

func (database *RsvpStandby_Counters_Database) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (database *RsvpStandby_Counters_Database) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (database *RsvpStandby_Counters_Database) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (database *RsvpStandby_Counters_Database) SetParent(parent types.Entity) { database.parent = parent }

func (database *RsvpStandby_Counters_Database) GetParent() types.Entity { return database.parent }

func (database *RsvpStandby_Counters_Database) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_EventSyncs
// Table containing event sync counters
type RsvpStandby_Counters_EventSyncs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event sync counters. The type is slice of
    // RsvpStandby_Counters_EventSyncs_EventSync.
    EventSync []RsvpStandby_Counters_EventSyncs_EventSync
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetFilter() yfilter.YFilter { return eventSyncs.YFilter }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) SetFilter(yf yfilter.YFilter) { eventSyncs.YFilter = yf }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetGoName(yname string) string {
    if yname == "event-sync" { return "EventSync" }
    return ""
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetSegmentPath() string {
    return "event-syncs"
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "event-sync" {
        for _, c := range eventSyncs.EventSync {
            if eventSyncs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Counters_EventSyncs_EventSync{}
        eventSyncs.EventSync = append(eventSyncs.EventSync, child)
        return &eventSyncs.EventSync[len(eventSyncs.EventSync)-1]
    }
    return nil
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventSyncs.EventSync {
        children[eventSyncs.EventSync[i].GetSegmentPath()] = &eventSyncs.EventSync[i]
    }
    return children
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetBundleName() string { return "cisco_ios_xr" }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetYangName() string { return "event-syncs" }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) SetParent(parent types.Entity) { eventSyncs.parent = parent }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetParent() types.Entity { return eventSyncs.parent }

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetParentYangName() string { return "counters" }

// RsvpStandby_Counters_EventSyncs_EventSync
// Event sync counters
type RsvpStandby_Counters_EventSyncs_EventSync struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetFilter() yfilter.YFilter { return eventSync.YFilter }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) SetFilter(yf yfilter.YFilter) { eventSync.YFilter = yf }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "expired-paths" { return "ExpiredPaths" }
    if yname == "expired-reservations" { return "ExpiredReservations" }
    if yname == "nac-ks" { return "NacKs" }
    return ""
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetSegmentPath() string {
    return "event-sync" + "[interface-name='" + fmt.Sprintf("%v", eventSync.InterfaceName) + "']"
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = eventSync.InterfaceName
    leafs["expired-paths"] = eventSync.ExpiredPaths
    leafs["expired-reservations"] = eventSync.ExpiredReservations
    leafs["nac-ks"] = eventSync.NacKs
    return leafs
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetBundleName() string { return "cisco_ios_xr" }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetYangName() string { return "event-sync" }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) SetParent(parent types.Entity) { eventSync.parent = parent }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetParent() types.Entity { return eventSync.parent }

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetParentYangName() string { return "event-syncs" }

// RsvpStandby_InterfaceDetaileds
// Table of detailed info about RSVP-enabled
// interfaces
type RsvpStandby_InterfaceDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled interface. The type is slice of
    // RsvpStandby_InterfaceDetaileds_InterfaceDetailed.
    InterfaceDetailed []RsvpStandby_InterfaceDetaileds_InterfaceDetailed
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetFilter() yfilter.YFilter { return interfaceDetaileds.YFilter }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) SetFilter(yf yfilter.YFilter) { interfaceDetaileds.YFilter = yf }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetGoName(yname string) string {
    if yname == "interface-detailed" { return "InterfaceDetailed" }
    return ""
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetSegmentPath() string {
    return "interface-detaileds"
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-detailed" {
        for _, c := range interfaceDetaileds.InterfaceDetailed {
            if interfaceDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceDetaileds_InterfaceDetailed{}
        interfaceDetaileds.InterfaceDetailed = append(interfaceDetaileds.InterfaceDetailed, child)
        return &interfaceDetaileds.InterfaceDetailed[len(interfaceDetaileds.InterfaceDetailed)-1]
    }
    return nil
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceDetaileds.InterfaceDetailed {
        children[interfaceDetaileds.InterfaceDetailed[i].GetSegmentPath()] = &interfaceDetaileds.InterfaceDetailed[i]
    }
    return children
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetYangName() string { return "interface-detaileds" }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) SetParent(parent types.Entity) { interfaceDetaileds.parent = parent }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetParent() types.Entity { return interfaceDetaileds.parent }

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed
// Detailed info about an RSVP-enabled interface
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation

    // Interface flags.
    Flags RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags

    // Neighbor array. The type is slice of
    // RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray.
    NeighborArray []RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetFilter() yfilter.YFilter { return interfaceDetailed.YFilter }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) SetFilter(yf yfilter.YFilter) { interfaceDetailed.YFilter = yf }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "signalling-ip-tos" { return "SignallingIpTos" }
    if yname == "integrity-send-password" { return "IntegritySendPassword" }
    if yname == "integrity-receive-password" { return "IntegrityReceivePassword" }
    if yname == "integrity-receive-password-optional" { return "IntegrityReceivePasswordOptional" }
    if yname == "refresh-timer-state" { return "RefreshTimerState" }
    if yname == "summary-refresh-timer-state" { return "SummaryRefreshTimerState" }
    if yname == "refresh-interval" { return "RefreshInterval" }
    if yname == "out-of-band-refresh-interval" { return "OutOfBandRefreshInterval" }
    if yname == "summary-refresh-max-size" { return "SummaryRefreshMaxSize" }
    if yname == "bundle-message-max-size" { return "BundleMessageMaxSize" }
    if yname == "expiry-timer-state" { return "ExpiryTimerState" }
    if yname == "expiry-states" { return "ExpiryStates" }
    if yname == "expiry-interval" { return "ExpiryInterval" }
    if yname == "expiry-drops-tolerated" { return "ExpiryDropsTolerated" }
    if yname == "out-of-band-expiry-drops-tolerated" { return "OutOfBandExpiryDropsTolerated" }
    if yname == "ack-hold-time" { return "AckHoldTime" }
    if yname == "ack-max-size" { return "AckMaxSize" }
    if yname == "retransmit-time" { return "RetransmitTime" }
    if yname == "pacing-interval" { return "PacingInterval" }
    if yname == "pacing-message-rate" { return "PacingMessageRate" }
    if yname == "pacing-timer-state" { return "PacingTimerState" }
    if yname == "pacing-messages" { return "PacingMessages" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    if yname == "flags" { return "Flags" }
    if yname == "neighbor-array" { return "NeighborArray" }
    return ""
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetSegmentPath() string {
    return "interface-detailed" + "[interface-name='" + fmt.Sprintf("%v", interfaceDetailed.InterfaceName) + "']"
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &interfaceDetailed.BandwidthInformation
    }
    if childYangName == "flags" {
        return &interfaceDetailed.Flags
    }
    if childYangName == "neighbor-array" {
        for _, c := range interfaceDetailed.NeighborArray {
            if interfaceDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray{}
        interfaceDetailed.NeighborArray = append(interfaceDetailed.NeighborArray, child)
        return &interfaceDetailed.NeighborArray[len(interfaceDetailed.NeighborArray)-1]
    }
    return nil
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &interfaceDetailed.BandwidthInformation
    children["flags"] = &interfaceDetailed.Flags
    for i := range interfaceDetailed.NeighborArray {
        children[interfaceDetailed.NeighborArray[i].GetSegmentPath()] = &interfaceDetailed.NeighborArray[i]
    }
    return children
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceDetailed.InterfaceName
    leafs["interface-name-xr"] = interfaceDetailed.InterfaceNameXr
    leafs["signalling-ip-tos"] = interfaceDetailed.SignallingIpTos
    leafs["integrity-send-password"] = interfaceDetailed.IntegritySendPassword
    leafs["integrity-receive-password"] = interfaceDetailed.IntegrityReceivePassword
    leafs["integrity-receive-password-optional"] = interfaceDetailed.IntegrityReceivePasswordOptional
    leafs["refresh-timer-state"] = interfaceDetailed.RefreshTimerState
    leafs["summary-refresh-timer-state"] = interfaceDetailed.SummaryRefreshTimerState
    leafs["refresh-interval"] = interfaceDetailed.RefreshInterval
    leafs["out-of-band-refresh-interval"] = interfaceDetailed.OutOfBandRefreshInterval
    leafs["summary-refresh-max-size"] = interfaceDetailed.SummaryRefreshMaxSize
    leafs["bundle-message-max-size"] = interfaceDetailed.BundleMessageMaxSize
    leafs["expiry-timer-state"] = interfaceDetailed.ExpiryTimerState
    leafs["expiry-states"] = interfaceDetailed.ExpiryStates
    leafs["expiry-interval"] = interfaceDetailed.ExpiryInterval
    leafs["expiry-drops-tolerated"] = interfaceDetailed.ExpiryDropsTolerated
    leafs["out-of-band-expiry-drops-tolerated"] = interfaceDetailed.OutOfBandExpiryDropsTolerated
    leafs["ack-hold-time"] = interfaceDetailed.AckHoldTime
    leafs["ack-max-size"] = interfaceDetailed.AckMaxSize
    leafs["retransmit-time"] = interfaceDetailed.RetransmitTime
    leafs["pacing-interval"] = interfaceDetailed.PacingInterval
    leafs["pacing-message-rate"] = interfaceDetailed.PacingMessageRate
    leafs["pacing-timer-state"] = interfaceDetailed.PacingTimerState
    leafs["pacing-messages"] = interfaceDetailed.PacingMessages
    return leafs
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetYangName() string { return "interface-detailed" }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) SetParent(parent types.Entity) { interfaceDetailed.parent = parent }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetParent() types.Entity { return interfaceDetailed.parent }

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetParentYangName() string { return "interface-detaileds" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetParentYangName() string { return "interface-detailed" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags
// Interface flags
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetGoName(yname string) string {
    if yname == "is-mpls-enabled" { return "IsMplsEnabled" }
    if yname == "is-refresh-reduction-enabled" { return "IsRefreshReductionEnabled" }
    if yname == "is-pacing-enabled" { return "IsPacingEnabled" }
    if yname == "is-refresh-enabled" { return "IsRefreshEnabled" }
    if yname == "is-s-refresh-enabled" { return "IsSRefreshEnabled" }
    if yname == "is-interface-down" { return "IsInterfaceDown" }
    if yname == "is-interface-created" { return "IsInterfaceCreated" }
    if yname == "is-rel-s-refresh-enabled" { return "IsRelSRefreshEnabled" }
    if yname == "is-backup-tunnel" { return "IsBackupTunnel" }
    if yname == "is-rsvp-configured" { return "IsRsvpConfigured" }
    if yname == "is-non-default-vrf" { return "IsNonDefaultVrf" }
    if yname == "is-message-bundling-enabled" { return "IsMessageBundlingEnabled" }
    return ""
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-mpls-enabled"] = flags.IsMplsEnabled
    leafs["is-refresh-reduction-enabled"] = flags.IsRefreshReductionEnabled
    leafs["is-pacing-enabled"] = flags.IsPacingEnabled
    leafs["is-refresh-enabled"] = flags.IsRefreshEnabled
    leafs["is-s-refresh-enabled"] = flags.IsSRefreshEnabled
    leafs["is-interface-down"] = flags.IsInterfaceDown
    leafs["is-interface-created"] = flags.IsInterfaceCreated
    leafs["is-rel-s-refresh-enabled"] = flags.IsRelSRefreshEnabled
    leafs["is-backup-tunnel"] = flags.IsBackupTunnel
    leafs["is-rsvp-configured"] = flags.IsRsvpConfigured
    leafs["is-non-default-vrf"] = flags.IsNonDefaultVrf
    leafs["is-message-bundling-enabled"] = flags.IsMessageBundlingEnabled
    return leafs
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetParentYangName() string { return "interface-detailed" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray
// Neighbor array
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetFilter() yfilter.YFilter { return neighborArray.YFilter }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) SetFilter(yf yfilter.YFilter) { neighborArray.YFilter = yf }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetGoName(yname string) string {
    if yname == "is-neighbor-refresh-reduction-capable" { return "IsNeighborRefreshReductionCapable" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "message-ids" { return "MessageIds" }
    if yname == "outgoing-states" { return "OutgoingStates" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "neighbor-message-id" { return "NeighborMessageId" }
    return ""
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetSegmentPath() string {
    return "neighbor-array"
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "expiry-time" {
        return &neighborArray.ExpiryTime
    }
    if childYangName == "neighbor-message-id" {
        for _, c := range neighborArray.NeighborMessageId {
            if neighborArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId{}
        neighborArray.NeighborMessageId = append(neighborArray.NeighborMessageId, child)
        return &neighborArray.NeighborMessageId[len(neighborArray.NeighborMessageId)-1]
    }
    return nil
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["expiry-time"] = &neighborArray.ExpiryTime
    for i := range neighborArray.NeighborMessageId {
        children[neighborArray.NeighborMessageId[i].GetSegmentPath()] = &neighborArray.NeighborMessageId[i]
    }
    return children
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-neighbor-refresh-reduction-capable"] = neighborArray.IsNeighborRefreshReductionCapable
    leafs["neighbor-address"] = neighborArray.NeighborAddress
    leafs["message-ids"] = neighborArray.MessageIds
    leafs["outgoing-states"] = neighborArray.OutgoingStates
    return leafs
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetBundleName() string { return "cisco_ios_xr" }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetYangName() string { return "neighbor-array" }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) SetParent(parent types.Entity) { neighborArray.parent = parent }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetParent() types.Entity { return neighborArray.parent }

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetParentYangName() string { return "interface-detailed" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime
// Expiry time
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetParentYangName() string { return "neighbor-array" }

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetFilter() yfilter.YFilter { return neighborMessageId.YFilter }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) SetFilter(yf yfilter.YFilter) { neighborMessageId.YFilter = yf }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetGoName(yname string) string {
    if yname == "message-id" { return "MessageId" }
    return ""
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetSegmentPath() string {
    return "neighbor-message-id"
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["message-id"] = neighborMessageId.MessageId
    return leafs
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetYangName() string { return "neighbor-message-id" }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) SetParent(parent types.Entity) { neighborMessageId.parent = parent }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetParent() types.Entity { return neighborMessageId.parent }

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetParentYangName() string { return "neighbor-array" }

// RsvpStandby_ControllerBriefs
// Table of brief info about RSVP-enabled
// controller
type RsvpStandby_ControllerBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled controller. The type is slice of
    // RsvpStandby_ControllerBriefs_ControllerBrief.
    ControllerBrief []RsvpStandby_ControllerBriefs_ControllerBrief
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetFilter() yfilter.YFilter { return controllerBriefs.YFilter }

func (controllerBriefs *RsvpStandby_ControllerBriefs) SetFilter(yf yfilter.YFilter) { controllerBriefs.YFilter = yf }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetGoName(yname string) string {
    if yname == "controller-brief" { return "ControllerBrief" }
    return ""
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetSegmentPath() string {
    return "controller-briefs"
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller-brief" {
        for _, c := range controllerBriefs.ControllerBrief {
            if controllerBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_ControllerBriefs_ControllerBrief{}
        controllerBriefs.ControllerBrief = append(controllerBriefs.ControllerBrief, child)
        return &controllerBriefs.ControllerBrief[len(controllerBriefs.ControllerBrief)-1]
    }
    return nil
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllerBriefs.ControllerBrief {
        children[controllerBriefs.ControllerBrief[i].GetSegmentPath()] = &controllerBriefs.ControllerBrief[i]
    }
    return children
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetYangName() string { return "controller-briefs" }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerBriefs *RsvpStandby_ControllerBriefs) SetParent(parent types.Entity) { controllerBriefs.parent = parent }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetParent() types.Entity { return controllerBriefs.parent }

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_ControllerBriefs_ControllerBrief
// Brief info about an RSVP-enabled controller
type RsvpStandby_ControllerBriefs_ControllerBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetFilter() yfilter.YFilter { return controllerBrief.YFilter }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) SetFilter(yf yfilter.YFilter) { controllerBrief.YFilter = yf }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetSegmentPath() string {
    return "controller-brief" + "[controller-name='" + fmt.Sprintf("%v", controllerBrief.ControllerName) + "']"
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &controllerBrief.BandwidthInformation
    }
    return nil
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &controllerBrief.BandwidthInformation
    return children
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controllerBrief.ControllerName
    leafs["interface-name-xr"] = controllerBrief.InterfaceNameXr
    return leafs
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetBundleName() string { return "cisco_ios_xr" }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetYangName() string { return "controller-brief" }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) SetParent(parent types.Entity) { controllerBrief.parent = parent }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetParent() types.Entity { return controllerBrief.parent }

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetParentYangName() string { return "controller-briefs" }

// RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetParentYangName() string { return "controller-brief" }

// RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_GracefulRestart
// Info about graceful-restart
type RsvpStandby_GracefulRestart struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether GR is enabled. The type is bool.
    IsGrEnabled interface{}

    // Global neighbor count. The type is interface{} with range: 0..4294967295.
    GlobalNeighbors interface{}

    // Restart time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Recovery time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Whether recovery timer is running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Interval at which hello messages are sent. The type is interface{} with
    // range: 0..4294967295.
    HelloInterval interface{}

    // Max number of hellos missed before hellos declared down. The type is
    // interface{} with range: 0..255.
    MissedHellos interface{}

    // Total number of pending states. The type is interface{} with range:
    // 0..4294967295.
    PendingStates interface{}

    // How much recovery timer remains.
    RecoveryTimeLeft RsvpStandby_GracefulRestart_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime RsvpStandby_GracefulRestart_RecoveryTimerExpTime

    // Local node address. The type is slice of
    // RsvpStandby_GracefulRestart_LocalNodeAddress.
    LocalNodeAddress []RsvpStandby_GracefulRestart_LocalNodeAddress
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetFilter() yfilter.YFilter { return gracefulRestart.YFilter }

func (gracefulRestart *RsvpStandby_GracefulRestart) SetFilter(yf yfilter.YFilter) { gracefulRestart.YFilter = yf }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetGoName(yname string) string {
    if yname == "is-gr-enabled" { return "IsGrEnabled" }
    if yname == "global-neighbors" { return "GlobalNeighbors" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "recovery-time" { return "RecoveryTime" }
    if yname == "is-recovery-timer-running" { return "IsRecoveryTimerRunning" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "missed-hellos" { return "MissedHellos" }
    if yname == "pending-states" { return "PendingStates" }
    if yname == "recovery-time-left" { return "RecoveryTimeLeft" }
    if yname == "recovery-timer-exp-time" { return "RecoveryTimerExpTime" }
    if yname == "local-node-address" { return "LocalNodeAddress" }
    return ""
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetSegmentPath() string {
    return "graceful-restart"
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "recovery-time-left" {
        return &gracefulRestart.RecoveryTimeLeft
    }
    if childYangName == "recovery-timer-exp-time" {
        return &gracefulRestart.RecoveryTimerExpTime
    }
    if childYangName == "local-node-address" {
        for _, c := range gracefulRestart.LocalNodeAddress {
            if gracefulRestart.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GracefulRestart_LocalNodeAddress{}
        gracefulRestart.LocalNodeAddress = append(gracefulRestart.LocalNodeAddress, child)
        return &gracefulRestart.LocalNodeAddress[len(gracefulRestart.LocalNodeAddress)-1]
    }
    return nil
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["recovery-time-left"] = &gracefulRestart.RecoveryTimeLeft
    children["recovery-timer-exp-time"] = &gracefulRestart.RecoveryTimerExpTime
    for i := range gracefulRestart.LocalNodeAddress {
        children[gracefulRestart.LocalNodeAddress[i].GetSegmentPath()] = &gracefulRestart.LocalNodeAddress[i]
    }
    return children
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-gr-enabled"] = gracefulRestart.IsGrEnabled
    leafs["global-neighbors"] = gracefulRestart.GlobalNeighbors
    leafs["restart-time"] = gracefulRestart.RestartTime
    leafs["recovery-time"] = gracefulRestart.RecoveryTime
    leafs["is-recovery-timer-running"] = gracefulRestart.IsRecoveryTimerRunning
    leafs["hello-interval"] = gracefulRestart.HelloInterval
    leafs["missed-hellos"] = gracefulRestart.MissedHellos
    leafs["pending-states"] = gracefulRestart.PendingStates
    return leafs
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetYangName() string { return "graceful-restart" }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulRestart *RsvpStandby_GracefulRestart) SetParent(parent types.Entity) { gracefulRestart.parent = parent }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetParent() types.Entity { return gracefulRestart.parent }

func (gracefulRestart *RsvpStandby_GracefulRestart) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_GracefulRestart_RecoveryTimeLeft
// How much recovery timer remains
type RsvpStandby_GracefulRestart_RecoveryTimeLeft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetFilter() yfilter.YFilter { return recoveryTimeLeft.YFilter }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) SetFilter(yf yfilter.YFilter) { recoveryTimeLeft.YFilter = yf }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetSegmentPath() string {
    return "recovery-time-left"
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimeLeft.Seconds
    leafs["nanoseconds"] = recoveryTimeLeft.Nanoseconds
    return leafs
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetYangName() string { return "recovery-time-left" }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) SetParent(parent types.Entity) { recoveryTimeLeft.parent = parent }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetParent() types.Entity { return recoveryTimeLeft.parent }

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetParentYangName() string { return "graceful-restart" }

// RsvpStandby_GracefulRestart_RecoveryTimerExpTime
// Time at which recovery timer will expire
type RsvpStandby_GracefulRestart_RecoveryTimerExpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetFilter() yfilter.YFilter { return recoveryTimerExpTime.YFilter }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) SetFilter(yf yfilter.YFilter) { recoveryTimerExpTime.YFilter = yf }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetSegmentPath() string {
    return "recovery-timer-exp-time"
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimerExpTime.Seconds
    leafs["nanoseconds"] = recoveryTimerExpTime.Nanoseconds
    return leafs
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetYangName() string { return "recovery-timer-exp-time" }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) SetParent(parent types.Entity) { recoveryTimerExpTime.parent = parent }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetParent() types.Entity { return recoveryTimerExpTime.parent }

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetParentYangName() string { return "graceful-restart" }

// RsvpStandby_GracefulRestart_LocalNodeAddress
// Local node address
type RsvpStandby_GracefulRestart_LocalNodeAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalNodeIpAddress interface{}

    // GR local node-id app type. The type is RsvpMgmtGrApp.
    ApplicationType interface{}
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetFilter() yfilter.YFilter { return localNodeAddress.YFilter }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) SetFilter(yf yfilter.YFilter) { localNodeAddress.YFilter = yf }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetGoName(yname string) string {
    if yname == "local-node-ip-address" { return "LocalNodeIpAddress" }
    if yname == "application-type" { return "ApplicationType" }
    return ""
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetSegmentPath() string {
    return "local-node-address"
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-node-ip-address"] = localNodeAddress.LocalNodeIpAddress
    leafs["application-type"] = localNodeAddress.ApplicationType
    return leafs
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetYangName() string { return "local-node-address" }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) SetParent(parent types.Entity) { localNodeAddress.parent = parent }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetParent() types.Entity { return localNodeAddress.parent }

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetParentYangName() string { return "graceful-restart" }

// RsvpStandby_HelloInterfaceInstanceBriefs
// Table of brief info about i/f-based hello
// instances
type RsvpStandby_HelloInterfaceInstanceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single interface-based hello instance. The type is slice
    // of RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief.
    HelloInterfaceInstanceBrief []RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetFilter() yfilter.YFilter { return helloInterfaceInstanceBriefs.YFilter }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceBriefs.YFilter = yf }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetGoName(yname string) string {
    if yname == "hello-interface-instance-brief" { return "HelloInterfaceInstanceBrief" }
    return ""
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetSegmentPath() string {
    return "hello-interface-instance-briefs"
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-interface-instance-brief" {
        for _, c := range helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief {
            if helloInterfaceInstanceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief{}
        helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief = append(helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief, child)
        return &helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[len(helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief)-1]
    }
    return nil
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief {
        children[helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i].GetSegmentPath()] = &helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i]
    }
    return children
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetYangName() string { return "hello-interface-instance-briefs" }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) SetParent(parent types.Entity) { helloInterfaceInstanceBriefs.parent = parent }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetParent() types.Entity { return helloInterfaceInstanceBriefs.parent }

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
// Brief info for a single interface-based hello
// instance
type RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetFilter() yfilter.YFilter { return helloInterfaceInstanceBrief.YFilter }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceBrief.YFilter = yf }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    return ""
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetSegmentPath() string {
    return "hello-interface-instance-brief" + "[source-address='" + fmt.Sprintf("%v", helloInterfaceInstanceBrief.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInterfaceInstanceBrief.DestinationAddress) + "']"
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInterfaceInstanceBrief.SourceAddress
    leafs["destination-address"] = helloInterfaceInstanceBrief.DestinationAddress
    leafs["source-address-xr"] = helloInterfaceInstanceBrief.SourceAddressXr
    leafs["destination-address-xr"] = helloInterfaceInstanceBrief.DestinationAddressXr
    leafs["instance-type"] = helloInterfaceInstanceBrief.InstanceType
    leafs["hello-interface"] = helloInterfaceInstanceBrief.HelloInterface
    return leafs
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetYangName() string { return "hello-interface-instance-brief" }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) SetParent(parent types.Entity) { helloInterfaceInstanceBrief.parent = parent }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetParent() types.Entity { return helloInterfaceInstanceBrief.parent }

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetParentYangName() string { return "hello-interface-instance-briefs" }

// RsvpStandby_HelloInterfaceInstanceDetails
// Table of detailed info about i/f-based hello
// instances
type RsvpStandby_HelloInterfaceInstanceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single interface-based hello instance. The type is
    // slice of
    // RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail.
    HelloInterfaceInstanceDetail []RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetFilter() yfilter.YFilter { return helloInterfaceInstanceDetails.YFilter }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceDetails.YFilter = yf }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetGoName(yname string) string {
    if yname == "hello-interface-instance-detail" { return "HelloInterfaceInstanceDetail" }
    return ""
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetSegmentPath() string {
    return "hello-interface-instance-details"
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-interface-instance-detail" {
        for _, c := range helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail {
            if helloInterfaceInstanceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail{}
        helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail = append(helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail, child)
        return &helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[len(helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail)-1]
    }
    return nil
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail {
        children[helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i].GetSegmentPath()] = &helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i]
    }
    return children
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetYangName() string { return "hello-interface-instance-details" }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) SetParent(parent types.Entity) { helloInterfaceInstanceDetails.parent = parent }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetParent() types.Entity { return helloInterfaceInstanceDetails.parent }

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
// Detailed info for a single interface-based
// hello instance
type RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Global Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HelloGlobalNeighborId interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Last Ack/msg sent time.
    LastMessageSentTime RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetFilter() yfilter.YFilter { return helloInterfaceInstanceDetail.YFilter }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceDetail.YFilter = yf }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "hello-global-neighbor-id" { return "HelloGlobalNeighborId" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    if yname == "source-instance" { return "SourceInstance" }
    if yname == "destination-instance" { return "DestinationInstance" }
    if yname == "hello-messages-sent" { return "HelloMessagesSent" }
    if yname == "hello-messages-received" { return "HelloMessagesReceived" }
    if yname == "last-message-sent-time" { return "LastMessageSentTime" }
    return ""
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetSegmentPath() string {
    return "hello-interface-instance-detail" + "[source-address='" + fmt.Sprintf("%v", helloInterfaceInstanceDetail.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInterfaceInstanceDetail.DestinationAddress) + "']"
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "last-message-sent-time" {
        return &helloInterfaceInstanceDetail.LastMessageSentTime
    }
    return nil
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["last-message-sent-time"] = &helloInterfaceInstanceDetail.LastMessageSentTime
    return children
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInterfaceInstanceDetail.SourceAddress
    leafs["destination-address"] = helloInterfaceInstanceDetail.DestinationAddress
    leafs["source-address-xr"] = helloInterfaceInstanceDetail.SourceAddressXr
    leafs["destination-address-xr"] = helloInterfaceInstanceDetail.DestinationAddressXr
    leafs["hello-global-neighbor-id"] = helloInterfaceInstanceDetail.HelloGlobalNeighborId
    leafs["instance-type"] = helloInterfaceInstanceDetail.InstanceType
    leafs["hello-interface"] = helloInterfaceInstanceDetail.HelloInterface
    leafs["source-instance"] = helloInterfaceInstanceDetail.SourceInstance
    leafs["destination-instance"] = helloInterfaceInstanceDetail.DestinationInstance
    leafs["hello-messages-sent"] = helloInterfaceInstanceDetail.HelloMessagesSent
    leafs["hello-messages-received"] = helloInterfaceInstanceDetail.HelloMessagesReceived
    return leafs
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetYangName() string { return "hello-interface-instance-detail" }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) SetParent(parent types.Entity) { helloInterfaceInstanceDetail.parent = parent }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetParent() types.Entity { return helloInterfaceInstanceDetail.parent }

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetParentYangName() string { return "hello-interface-instance-details" }

// RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
// Last Ack/msg sent time
type RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetFilter() yfilter.YFilter { return lastMessageSentTime.YFilter }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) SetFilter(yf yfilter.YFilter) { lastMessageSentTime.YFilter = yf }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetSegmentPath() string {
    return "last-message-sent-time"
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lastMessageSentTime.Seconds
    leafs["nanoseconds"] = lastMessageSentTime.Nanoseconds
    return leafs
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetBundleName() string { return "cisco_ios_xr" }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetYangName() string { return "last-message-sent-time" }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) SetParent(parent types.Entity) { lastMessageSentTime.parent = parent }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetParent() types.Entity { return lastMessageSentTime.parent }

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetParentYangName() string { return "hello-interface-instance-detail" }

// RsvpStandby_InterfaceNeighborDetails
// Table of detailed info about I/F neighbors
type RsvpStandby_InterfaceNeighborDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single interface neighbor. The type is slice of
    // RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail.
    InterfaceNeighborDetail []RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetFilter() yfilter.YFilter { return interfaceNeighborDetails.YFilter }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) SetFilter(yf yfilter.YFilter) { interfaceNeighborDetails.YFilter = yf }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetGoName(yname string) string {
    if yname == "interface-neighbor-detail" { return "InterfaceNeighborDetail" }
    return ""
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetSegmentPath() string {
    return "interface-neighbor-details"
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-detail" {
        for _, c := range interfaceNeighborDetails.InterfaceNeighborDetail {
            if interfaceNeighborDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail{}
        interfaceNeighborDetails.InterfaceNeighborDetail = append(interfaceNeighborDetails.InterfaceNeighborDetail, child)
        return &interfaceNeighborDetails.InterfaceNeighborDetail[len(interfaceNeighborDetails.InterfaceNeighborDetail)-1]
    }
    return nil
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborDetails.InterfaceNeighborDetail {
        children[interfaceNeighborDetails.InterfaceNeighborDetail[i].GetSegmentPath()] = &interfaceNeighborDetails.InterfaceNeighborDetail[i]
    }
    return children
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetYangName() string { return "interface-neighbor-details" }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) SetParent(parent types.Entity) { interfaceNeighborDetails.parent = parent }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetParent() types.Entity { return interfaceNeighborDetails.parent }

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail
// Detailed info for a single interface neighbor
type RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Detail list of I/F Neighbors. The type is slice of
    // RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail.
    InterfaceNeighborListDetail []RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetFilter() yfilter.YFilter { return interfaceNeighborDetail.YFilter }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) SetFilter(yf yfilter.YFilter) { interfaceNeighborDetail.YFilter = yf }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "interface-neighbor-list-detail" { return "InterfaceNeighborListDetail" }
    return ""
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetSegmentPath() string {
    return "interface-neighbor-detail" + "[neighbor-address='" + fmt.Sprintf("%v", interfaceNeighborDetail.NeighborAddress) + "']"
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-list-detail" {
        for _, c := range interfaceNeighborDetail.InterfaceNeighborListDetail {
            if interfaceNeighborDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail{}
        interfaceNeighborDetail.InterfaceNeighborListDetail = append(interfaceNeighborDetail.InterfaceNeighborListDetail, child)
        return &interfaceNeighborDetail.InterfaceNeighborListDetail[len(interfaceNeighborDetail.InterfaceNeighborListDetail)-1]
    }
    return nil
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborDetail.InterfaceNeighborListDetail {
        children[interfaceNeighborDetail.InterfaceNeighborListDetail[i].GetSegmentPath()] = &interfaceNeighborDetail.InterfaceNeighborListDetail[i]
    }
    return children
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = interfaceNeighborDetail.NeighborAddress
    leafs["node-address"] = interfaceNeighborDetail.NodeAddress
    return leafs
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetYangName() string { return "interface-neighbor-detail" }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) SetParent(parent types.Entity) { interfaceNeighborDetail.parent = parent }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetParent() types.Entity { return interfaceNeighborDetail.parent }

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetParentYangName() string { return "interface-neighbor-details" }

// RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
// Detail list of I/F Neighbors
type RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Is Neighbor's RR enable. The type is bool.
    IsRrEnabled interface{}

    // Neighbor's epoch value. The type is interface{} with range: 0..4294967295.
    NeighborEpoch interface{}

    // Number of out of order msgs. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Number of retransmitted msgs. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetFilter() yfilter.YFilter { return interfaceNeighborListDetail.YFilter }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) SetFilter(yf yfilter.YFilter) { interfaceNeighborListDetail.YFilter = yf }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetGoName(yname string) string {
    if yname == "interface-neighbor-address" { return "InterfaceNeighborAddress" }
    if yname == "neighbor-interface-name" { return "NeighborInterfaceName" }
    if yname == "is-rr-enabled" { return "IsRrEnabled" }
    if yname == "neighbor-epoch" { return "NeighborEpoch" }
    if yname == "out-of-order-messages" { return "OutOfOrderMessages" }
    if yname == "retransmitted-messages" { return "RetransmittedMessages" }
    return ""
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetSegmentPath() string {
    return "interface-neighbor-list-detail"
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-address"] = interfaceNeighborListDetail.InterfaceNeighborAddress
    leafs["neighbor-interface-name"] = interfaceNeighborListDetail.NeighborInterfaceName
    leafs["is-rr-enabled"] = interfaceNeighborListDetail.IsRrEnabled
    leafs["neighbor-epoch"] = interfaceNeighborListDetail.NeighborEpoch
    leafs["out-of-order-messages"] = interfaceNeighborListDetail.OutOfOrderMessages
    leafs["retransmitted-messages"] = interfaceNeighborListDetail.RetransmittedMessages
    return leafs
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetYangName() string { return "interface-neighbor-list-detail" }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) SetParent(parent types.Entity) { interfaceNeighborListDetail.parent = parent }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetParent() types.Entity { return interfaceNeighborListDetail.parent }

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetParentYangName() string { return "interface-neighbor-detail" }

// RsvpStandby_Nsr
// RSVP NSR information
type RsvpStandby_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP NSR status information.
    Status RsvpStandby_Nsr_Status
}

func (nsr *RsvpStandby_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *RsvpStandby_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *RsvpStandby_Nsr) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    return ""
}

func (nsr *RsvpStandby_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *RsvpStandby_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status" {
        return &nsr.Status
    }
    return nil
}

func (nsr *RsvpStandby_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status"] = &nsr.Status
    return children
}

func (nsr *RsvpStandby_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nsr *RsvpStandby_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *RsvpStandby_Nsr) GetYangName() string { return "nsr" }

func (nsr *RsvpStandby_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *RsvpStandby_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *RsvpStandby_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *RsvpStandby_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *RsvpStandby_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *RsvpStandby_Nsr) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_Nsr_Status
// RSVP NSR status information
type RsvpStandby_Nsr_Status struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus RsvpStandby_Nsr_Status_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus RsvpStandby_Nsr_Status_PreviousIdtStatus
}

func (status *RsvpStandby_Nsr_Status) GetFilter() yfilter.YFilter { return status.YFilter }

func (status *RsvpStandby_Nsr_Status) SetFilter(yf yfilter.YFilter) { status.YFilter = yf }

func (status *RsvpStandby_Nsr_Status) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (status *RsvpStandby_Nsr_Status) GetSegmentPath() string {
    return "status"
}

func (status *RsvpStandby_Nsr_Status) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &status.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &status.PreviousIdtStatus
    }
    return nil
}

func (status *RsvpStandby_Nsr_Status) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &status.IdtStatus
    children["previous-idt-status"] = &status.PreviousIdtStatus
    return children
}

func (status *RsvpStandby_Nsr_Status) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = status.Role
    return leafs
}

func (status *RsvpStandby_Nsr_Status) GetBundleName() string { return "cisco_ios_xr" }

func (status *RsvpStandby_Nsr_Status) GetYangName() string { return "status" }

func (status *RsvpStandby_Nsr_Status) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (status *RsvpStandby_Nsr_Status) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (status *RsvpStandby_Nsr_Status) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (status *RsvpStandby_Nsr_Status) SetParent(parent types.Entity) { status.parent = parent }

func (status *RsvpStandby_Nsr_Status) GetParent() types.Entity { return status.parent }

func (status *RsvpStandby_Nsr_Status) GetParentYangName() string { return "nsr" }

// RsvpStandby_Nsr_Status_IdtStatus
// IDT status
type RsvpStandby_Nsr_Status_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetParentYangName() string { return "status" }

// RsvpStandby_Nsr_Status_PreviousIdtStatus
// Previous IDT status
type RsvpStandby_Nsr_Status_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetParentYangName() string { return "status" }

// RsvpStandby_Summary
// RSVP summary information
type RsvpStandby_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}

    // Total LSPs. The type is interface{} with range: 0..4294967295.
    LsPs interface{}

    // Issu status.
    IssuStatus RsvpStandby_Summary_IssuStatus

    // NSR status.
    NsrStatus RsvpStandby_Summary_NsrStatus

    // All database counters.
    DatabaseCounters RsvpStandby_Summary_DatabaseCounters
}

func (summary *RsvpStandby_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *RsvpStandby_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *RsvpStandby_Summary) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "ls-ps" { return "LsPs" }
    if yname == "issu-status" { return "IssuStatus" }
    if yname == "nsr-status" { return "NsrStatus" }
    if yname == "database-counters" { return "DatabaseCounters" }
    return ""
}

func (summary *RsvpStandby_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *RsvpStandby_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "issu-status" {
        return &summary.IssuStatus
    }
    if childYangName == "nsr-status" {
        return &summary.NsrStatus
    }
    if childYangName == "database-counters" {
        return &summary.DatabaseCounters
    }
    return nil
}

func (summary *RsvpStandby_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["issu-status"] = &summary.IssuStatus
    children["nsr-status"] = &summary.NsrStatus
    children["database-counters"] = &summary.DatabaseCounters
    return children
}

func (summary *RsvpStandby_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interfaces"] = summary.Interfaces
    leafs["ls-ps"] = summary.LsPs
    return leafs
}

func (summary *RsvpStandby_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *RsvpStandby_Summary) GetYangName() string { return "summary" }

func (summary *RsvpStandby_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *RsvpStandby_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *RsvpStandby_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *RsvpStandby_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *RsvpStandby_Summary) GetParent() types.Entity { return summary.parent }

func (summary *RsvpStandby_Summary) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_Summary_IssuStatus
// Issu status
type RsvpStandby_Summary_IssuStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus RsvpStandby_Summary_IssuStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus RsvpStandby_Summary_IssuStatus_PreviousIdtStatus
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetFilter() yfilter.YFilter { return issuStatus.YFilter }

func (issuStatus *RsvpStandby_Summary_IssuStatus) SetFilter(yf yfilter.YFilter) { issuStatus.YFilter = yf }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetSegmentPath() string {
    return "issu-status"
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &issuStatus.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &issuStatus.PreviousIdtStatus
    }
    return nil
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &issuStatus.IdtStatus
    children["previous-idt-status"] = &issuStatus.PreviousIdtStatus
    return children
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = issuStatus.Role
    return leafs
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetBundleName() string { return "cisco_ios_xr" }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetYangName() string { return "issu-status" }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issuStatus *RsvpStandby_Summary_IssuStatus) SetParent(parent types.Entity) { issuStatus.parent = parent }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetParent() types.Entity { return issuStatus.parent }

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetParentYangName() string { return "summary" }

// RsvpStandby_Summary_IssuStatus_IdtStatus
// IDT status
type RsvpStandby_Summary_IssuStatus_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetParentYangName() string { return "issu-status" }

// RsvpStandby_Summary_IssuStatus_PreviousIdtStatus
// Previous IDT status
type RsvpStandby_Summary_IssuStatus_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetParentYangName() string { return "issu-status" }

// RsvpStandby_Summary_NsrStatus
// NSR status
type RsvpStandby_Summary_NsrStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus RsvpStandby_Summary_NsrStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus RsvpStandby_Summary_NsrStatus_PreviousIdtStatus
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetFilter() yfilter.YFilter { return nsrStatus.YFilter }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) SetFilter(yf yfilter.YFilter) { nsrStatus.YFilter = yf }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetSegmentPath() string {
    return "nsr-status"
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &nsrStatus.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &nsrStatus.PreviousIdtStatus
    }
    return nil
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &nsrStatus.IdtStatus
    children["previous-idt-status"] = &nsrStatus.PreviousIdtStatus
    return children
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = nsrStatus.Role
    return leafs
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetYangName() string { return "nsr-status" }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) SetParent(parent types.Entity) { nsrStatus.parent = parent }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetParent() types.Entity { return nsrStatus.parent }

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetParentYangName() string { return "summary" }

// RsvpStandby_Summary_NsrStatus_IdtStatus
// IDT status
type RsvpStandby_Summary_NsrStatus_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetParentYangName() string { return "nsr-status" }

// RsvpStandby_Summary_NsrStatus_PreviousIdtStatus
// Previous IDT status
type RsvpStandby_Summary_NsrStatus_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetParentYangName() string { return "nsr-status" }

// RsvpStandby_Summary_DatabaseCounters
// All database counters
type RsvpStandby_Summary_DatabaseCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetFilter() yfilter.YFilter { return databaseCounters.YFilter }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) SetFilter(yf yfilter.YFilter) { databaseCounters.YFilter = yf }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetGoName(yname string) string {
    if yname == "sessions" { return "Sessions" }
    if yname == "incoming-paths" { return "IncomingPaths" }
    if yname == "outgoing-paths" { return "OutgoingPaths" }
    if yname == "incoming-reservations" { return "IncomingReservations" }
    if yname == "outgoing-reservations" { return "OutgoingReservations" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetSegmentPath() string {
    return "database-counters"
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessions"] = databaseCounters.Sessions
    leafs["incoming-paths"] = databaseCounters.IncomingPaths
    leafs["outgoing-paths"] = databaseCounters.OutgoingPaths
    leafs["incoming-reservations"] = databaseCounters.IncomingReservations
    leafs["outgoing-reservations"] = databaseCounters.OutgoingReservations
    leafs["interfaces"] = databaseCounters.Interfaces
    return leafs
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetBundleName() string { return "cisco_ios_xr" }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetYangName() string { return "database-counters" }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) SetParent(parent types.Entity) { databaseCounters.parent = parent }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetParent() types.Entity { return databaseCounters.parent }

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetParentYangName() string { return "summary" }

// RsvpStandby_Frrs
// Table of detailed info about Fast Re-route
// states
type RsvpStandby_Frrs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single Fast Re-route state. The type is slice of
    // RsvpStandby_Frrs_Frr.
    Frr []RsvpStandby_Frrs_Frr
}

func (frrs *RsvpStandby_Frrs) GetFilter() yfilter.YFilter { return frrs.YFilter }

func (frrs *RsvpStandby_Frrs) SetFilter(yf yfilter.YFilter) { frrs.YFilter = yf }

func (frrs *RsvpStandby_Frrs) GetGoName(yname string) string {
    if yname == "frr" { return "Frr" }
    return ""
}

func (frrs *RsvpStandby_Frrs) GetSegmentPath() string {
    return "frrs"
}

func (frrs *RsvpStandby_Frrs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr" {
        for _, c := range frrs.Frr {
            if frrs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_Frrs_Frr{}
        frrs.Frr = append(frrs.Frr, child)
        return &frrs.Frr[len(frrs.Frr)-1]
    }
    return nil
}

func (frrs *RsvpStandby_Frrs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrs.Frr {
        children[frrs.Frr[i].GetSegmentPath()] = &frrs.Frr[i]
    }
    return children
}

func (frrs *RsvpStandby_Frrs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrs *RsvpStandby_Frrs) GetBundleName() string { return "cisco_ios_xr" }

func (frrs *RsvpStandby_Frrs) GetYangName() string { return "frrs" }

func (frrs *RsvpStandby_Frrs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrs *RsvpStandby_Frrs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrs *RsvpStandby_Frrs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrs *RsvpStandby_Frrs) SetParent(parent types.Entity) { frrs.parent = parent }

func (frrs *RsvpStandby_Frrs) GetParent() types.Entity { return frrs.parent }

func (frrs *RsvpStandby_Frrs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_Frrs_Frr
// Detailed info for a single Fast Re-route state
type RsvpStandby_Frrs_Frr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // RSVP FRR Path States. The type is RsvpMgmtFrrStateEnum.
    PathStatus interface{}

    // RSVP FRR Reservation States. The type is RsvpMgmtFrrStateEnum.
    ReservationStatus interface{}

    // RSVP Session Information.
    Session RsvpStandby_Frrs_Frr_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_Frrs_Frr_S2LSubLsp
}

func (frr *RsvpStandby_Frrs_Frr) GetFilter() yfilter.YFilter { return frr.YFilter }

func (frr *RsvpStandby_Frrs_Frr) SetFilter(yf yfilter.YFilter) { frr.YFilter = yf }

func (frr *RsvpStandby_Frrs_Frr) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "path-status" { return "PathStatus" }
    if yname == "reservation-status" { return "ReservationStatus" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    return ""
}

func (frr *RsvpStandby_Frrs_Frr) GetSegmentPath() string {
    return "frr"
}

func (frr *RsvpStandby_Frrs_Frr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &frr.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &frr.S2LSubLsp
    }
    return nil
}

func (frr *RsvpStandby_Frrs_Frr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &frr.Session
    children["s2l-sub-lsp"] = &frr.S2LSubLsp
    return children
}

func (frr *RsvpStandby_Frrs_Frr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = frr.DestinationAddress
    leafs["destination-port"] = frr.DestinationPort
    leafs["protocol"] = frr.Protocol
    leafs["extended-tunnel-id"] = frr.ExtendedTunnelId
    leafs["session-type"] = frr.SessionType
    leafs["p2mp-id"] = frr.P2MpId
    leafs["source-address"] = frr.SourceAddress
    leafs["source-port"] = frr.SourcePort
    leafs["sub-group-origin"] = frr.SubGroupOrigin
    leafs["sub-group-id"] = frr.SubGroupId
    leafs["vrf-name"] = frr.VrfName
    leafs["path-status"] = frr.PathStatus
    leafs["reservation-status"] = frr.ReservationStatus
    return leafs
}

func (frr *RsvpStandby_Frrs_Frr) GetBundleName() string { return "cisco_ios_xr" }

func (frr *RsvpStandby_Frrs_Frr) GetYangName() string { return "frr" }

func (frr *RsvpStandby_Frrs_Frr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frr *RsvpStandby_Frrs_Frr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frr *RsvpStandby_Frrs_Frr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frr *RsvpStandby_Frrs_Frr) SetParent(parent types.Entity) { frr.parent = parent }

func (frr *RsvpStandby_Frrs_Frr) GetParent() types.Entity { return frr.parent }

func (frr *RsvpStandby_Frrs_Frr) GetParentYangName() string { return "frrs" }

// RsvpStandby_Frrs_Frr_Session
// RSVP Session Information
type RsvpStandby_Frrs_Frr_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_Frrs_Frr_Session_RsvpSession
}

func (session *RsvpStandby_Frrs_Frr_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_Frrs_Frr_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_Frrs_Frr_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_Frrs_Frr_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_Frrs_Frr_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_Frrs_Frr_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_Frrs_Frr_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_Frrs_Frr_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_Frrs_Frr_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_Frrs_Frr_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_Frrs_Frr_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_Frrs_Frr_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_Frrs_Frr_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_Frrs_Frr_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_Frrs_Frr_Session) GetParentYangName() string { return "frr" }

// RsvpStandby_Frrs_Frr_Session_RsvpSession
// RSVP Session
type RsvpStandby_Frrs_Frr_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_Frrs_Frr_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_Frrs_Frr_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_Frrs_Frr_S2LSubLsp) GetParentYangName() string { return "frr" }

// RsvpStandby_RequestBriefs
// Table of brief info about requests
type RsvpStandby_RequestBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a request. The type is slice of
    // RsvpStandby_RequestBriefs_RequestBrief.
    RequestBrief []RsvpStandby_RequestBriefs_RequestBrief
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetFilter() yfilter.YFilter { return requestBriefs.YFilter }

func (requestBriefs *RsvpStandby_RequestBriefs) SetFilter(yf yfilter.YFilter) { requestBriefs.YFilter = yf }

func (requestBriefs *RsvpStandby_RequestBriefs) GetGoName(yname string) string {
    if yname == "request-brief" { return "RequestBrief" }
    return ""
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetSegmentPath() string {
    return "request-briefs"
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request-brief" {
        for _, c := range requestBriefs.RequestBrief {
            if requestBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_RequestBriefs_RequestBrief{}
        requestBriefs.RequestBrief = append(requestBriefs.RequestBrief, child)
        return &requestBriefs.RequestBrief[len(requestBriefs.RequestBrief)-1]
    }
    return nil
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestBriefs.RequestBrief {
        children[requestBriefs.RequestBrief[i].GetSegmentPath()] = &requestBriefs.RequestBrief[i]
    }
    return children
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (requestBriefs *RsvpStandby_RequestBriefs) GetYangName() string { return "request-briefs" }

func (requestBriefs *RsvpStandby_RequestBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestBriefs *RsvpStandby_RequestBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestBriefs *RsvpStandby_RequestBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestBriefs *RsvpStandby_RequestBriefs) SetParent(parent types.Entity) { requestBriefs.parent = parent }

func (requestBriefs *RsvpStandby_RequestBriefs) GetParent() types.Entity { return requestBriefs.parent }

func (requestBriefs *RsvpStandby_RequestBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_RequestBriefs_RequestBrief
// Brief info for a request
type RsvpStandby_RequestBriefs_RequestBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_RequestBriefs_RequestBrief_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp

    // Flow Spec Information.
    FlowSpec RsvpStandby_RequestBriefs_RequestBrief_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec

    // RSVP Filter.
    Filter RsvpStandby_RequestBriefs_RequestBrief_Filter

    // RSVP Style.
    Style RsvpStandby_RequestBriefs_RequestBrief_Style
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetFilter() yfilter.YFilter { return requestBrief.YFilter }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) SetFilter(yf yfilter.YFilter) { requestBrief.YFilter = yf }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "output-interface" { return "OutputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "filter" { return "Filter" }
    if yname == "style" { return "Style" }
    return ""
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetSegmentPath() string {
    return "request-brief"
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &requestBrief.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &requestBrief.S2LSubLsp
    }
    if childYangName == "flow-spec" {
        return &requestBrief.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &requestBrief.GenericFlowSpec
    }
    if childYangName == "filter" {
        return &requestBrief.Filter
    }
    if childYangName == "style" {
        return &requestBrief.Style
    }
    return nil
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &requestBrief.Session
    children["s2l-sub-lsp"] = &requestBrief.S2LSubLsp
    children["flow-spec"] = &requestBrief.FlowSpec
    children["generic-flow-spec"] = &requestBrief.GenericFlowSpec
    children["filter"] = &requestBrief.Filter
    children["style"] = &requestBrief.Style
    return children
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = requestBrief.DestinationAddress
    leafs["destination-port"] = requestBrief.DestinationPort
    leafs["protocol"] = requestBrief.Protocol
    leafs["extended-tunnel-id"] = requestBrief.ExtendedTunnelId
    leafs["session-type"] = requestBrief.SessionType
    leafs["p2mp-id"] = requestBrief.P2MpId
    leafs["source-address"] = requestBrief.SourceAddress
    leafs["source-port"] = requestBrief.SourcePort
    leafs["sub-group-origin"] = requestBrief.SubGroupOrigin
    leafs["sub-group-id"] = requestBrief.SubGroupId
    leafs["vrf-name"] = requestBrief.VrfName
    leafs["output-interface"] = requestBrief.OutputInterface
    return leafs
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetBundleName() string { return "cisco_ios_xr" }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetYangName() string { return "request-brief" }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) SetParent(parent types.Entity) { requestBrief.parent = parent }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetParent() types.Entity { return requestBrief.parent }

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetParentYangName() string { return "request-briefs" }

// RsvpStandby_RequestBriefs_RequestBrief_Session
// RSVP Session Information
type RsvpStandby_RequestBriefs_RequestBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetParentYangName() string { return "request-brief" }

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2LSubLsp) GetParentYangName() string { return "request-brief" }

// RsvpStandby_RequestBriefs_RequestBrief_FlowSpec
// Flow Spec Information
type RsvpStandby_RequestBriefs_RequestBrief_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetParentYangName() string { return "request-brief" }

// RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec
// Generic Flow Spec Information
type RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetParentYangName() string { return "request-brief" }

// RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// RsvpStandby_RequestBriefs_RequestBrief_Filter
// RSVP Filter
type RsvpStandby_RequestBriefs_RequestBrief_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetYangName() string { return "filter" }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetParent() types.Entity { return filter.parent }

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetParentYangName() string { return "request-brief" }

// RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RequestBriefs_RequestBrief_Style
// RSVP Style
type RsvpStandby_RequestBriefs_RequestBrief_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetSegmentPath() string {
    return "style"
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetYangName() string { return "style" }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetParent() types.Entity { return style.parent }

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetParentYangName() string { return "request-brief" }

// RsvpStandby_RequestDetails
// Table of detail info about requests
type RsvpStandby_RequestDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail info for a request. The type is slice of
    // RsvpStandby_RequestDetails_RequestDetail.
    RequestDetail []RsvpStandby_RequestDetails_RequestDetail
}

func (requestDetails *RsvpStandby_RequestDetails) GetFilter() yfilter.YFilter { return requestDetails.YFilter }

func (requestDetails *RsvpStandby_RequestDetails) SetFilter(yf yfilter.YFilter) { requestDetails.YFilter = yf }

func (requestDetails *RsvpStandby_RequestDetails) GetGoName(yname string) string {
    if yname == "request-detail" { return "RequestDetail" }
    return ""
}

func (requestDetails *RsvpStandby_RequestDetails) GetSegmentPath() string {
    return "request-details"
}

func (requestDetails *RsvpStandby_RequestDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request-detail" {
        for _, c := range requestDetails.RequestDetail {
            if requestDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_RequestDetails_RequestDetail{}
        requestDetails.RequestDetail = append(requestDetails.RequestDetail, child)
        return &requestDetails.RequestDetail[len(requestDetails.RequestDetail)-1]
    }
    return nil
}

func (requestDetails *RsvpStandby_RequestDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestDetails.RequestDetail {
        children[requestDetails.RequestDetail[i].GetSegmentPath()] = &requestDetails.RequestDetail[i]
    }
    return children
}

func (requestDetails *RsvpStandby_RequestDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestDetails *RsvpStandby_RequestDetails) GetBundleName() string { return "cisco_ios_xr" }

func (requestDetails *RsvpStandby_RequestDetails) GetYangName() string { return "request-details" }

func (requestDetails *RsvpStandby_RequestDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestDetails *RsvpStandby_RequestDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestDetails *RsvpStandby_RequestDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestDetails *RsvpStandby_RequestDetails) SetParent(parent types.Entity) { requestDetails.parent = parent }

func (requestDetails *RsvpStandby_RequestDetails) GetParent() types.Entity { return requestDetails.parent }

func (requestDetails *RsvpStandby_RequestDetails) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_RequestDetails_RequestDetail
// Detail info for a request
type RsvpStandby_RequestDetails_RequestDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_RequestDetails_RequestDetail_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp

    // Flow Spec Information.
    FlowSpec RsvpStandby_RequestDetails_RequestDetail_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec

    // RSVP Filter.
    Filter RsvpStandby_RequestDetails_RequestDetail_Filter

    // RSVP Style.
    Style RsvpStandby_RequestDetails_RequestDetail_Style

    // Request flags.
    ReqFlags RsvpStandby_RequestDetails_RequestDetail_ReqFlags

    // Hop Infomation.
    Hop RsvpStandby_RequestDetails_RequestDetail_Hop

    // RSVP Header Information.
    Header RsvpStandby_RequestDetails_RequestDetail_Header

    // RSVP Policy Sources.
    PolicySources RsvpStandby_RequestDetails_RequestDetail_PolicySources

    // RSVP Policy Flags.
    PolicyFlags RsvpStandby_RequestDetails_RequestDetail_PolicyFlags

    // RSVP Query Flags.
    PolicyQueryFlags RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags

    // List of RSB keys. The type is slice of
    // RsvpStandby_RequestDetails_RequestDetail_PsbKey.
    PsbKey []RsvpStandby_RequestDetails_RequestDetail_PsbKey

    // List of RSB keys. The type is slice of
    // RsvpStandby_RequestDetails_RequestDetail_RsbKey.
    RsbKey []RsvpStandby_RequestDetails_RequestDetail_RsbKey
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetFilter() yfilter.YFilter { return requestDetail.YFilter }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) SetFilter(yf yfilter.YFilter) { requestDetail.YFilter = yf }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "output-interface" { return "OutputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "filter" { return "Filter" }
    if yname == "style" { return "Style" }
    if yname == "req-flags" { return "ReqFlags" }
    if yname == "hop" { return "Hop" }
    if yname == "header" { return "Header" }
    if yname == "policy-sources" { return "PolicySources" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    if yname == "psb-key" { return "PsbKey" }
    if yname == "rsb-key" { return "RsbKey" }
    return ""
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetSegmentPath() string {
    return "request-detail"
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &requestDetail.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &requestDetail.S2LSubLsp
    }
    if childYangName == "flow-spec" {
        return &requestDetail.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &requestDetail.GenericFlowSpec
    }
    if childYangName == "filter" {
        return &requestDetail.Filter
    }
    if childYangName == "style" {
        return &requestDetail.Style
    }
    if childYangName == "req-flags" {
        return &requestDetail.ReqFlags
    }
    if childYangName == "hop" {
        return &requestDetail.Hop
    }
    if childYangName == "header" {
        return &requestDetail.Header
    }
    if childYangName == "policy-sources" {
        return &requestDetail.PolicySources
    }
    if childYangName == "policy-flags" {
        return &requestDetail.PolicyFlags
    }
    if childYangName == "policy-query-flags" {
        return &requestDetail.PolicyQueryFlags
    }
    if childYangName == "psb-key" {
        for _, c := range requestDetail.PsbKey {
            if requestDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_RequestDetails_RequestDetail_PsbKey{}
        requestDetail.PsbKey = append(requestDetail.PsbKey, child)
        return &requestDetail.PsbKey[len(requestDetail.PsbKey)-1]
    }
    if childYangName == "rsb-key" {
        for _, c := range requestDetail.RsbKey {
            if requestDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_RequestDetails_RequestDetail_RsbKey{}
        requestDetail.RsbKey = append(requestDetail.RsbKey, child)
        return &requestDetail.RsbKey[len(requestDetail.RsbKey)-1]
    }
    return nil
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &requestDetail.Session
    children["s2l-sub-lsp"] = &requestDetail.S2LSubLsp
    children["flow-spec"] = &requestDetail.FlowSpec
    children["generic-flow-spec"] = &requestDetail.GenericFlowSpec
    children["filter"] = &requestDetail.Filter
    children["style"] = &requestDetail.Style
    children["req-flags"] = &requestDetail.ReqFlags
    children["hop"] = &requestDetail.Hop
    children["header"] = &requestDetail.Header
    children["policy-sources"] = &requestDetail.PolicySources
    children["policy-flags"] = &requestDetail.PolicyFlags
    children["policy-query-flags"] = &requestDetail.PolicyQueryFlags
    for i := range requestDetail.PsbKey {
        children[requestDetail.PsbKey[i].GetSegmentPath()] = &requestDetail.PsbKey[i]
    }
    for i := range requestDetail.RsbKey {
        children[requestDetail.RsbKey[i].GetSegmentPath()] = &requestDetail.RsbKey[i]
    }
    return children
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = requestDetail.DestinationAddress
    leafs["destination-port"] = requestDetail.DestinationPort
    leafs["protocol"] = requestDetail.Protocol
    leafs["extended-tunnel-id"] = requestDetail.ExtendedTunnelId
    leafs["session-type"] = requestDetail.SessionType
    leafs["p2mp-id"] = requestDetail.P2MpId
    leafs["source-address"] = requestDetail.SourceAddress
    leafs["source-port"] = requestDetail.SourcePort
    leafs["sub-group-origin"] = requestDetail.SubGroupOrigin
    leafs["sub-group-id"] = requestDetail.SubGroupId
    leafs["vrf-name"] = requestDetail.VrfName
    leafs["output-interface"] = requestDetail.OutputInterface
    return leafs
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetBundleName() string { return "cisco_ios_xr" }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetYangName() string { return "request-detail" }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) SetParent(parent types.Entity) { requestDetail.parent = parent }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetParent() types.Entity { return requestDetail.parent }

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetParentYangName() string { return "request-details" }

// RsvpStandby_RequestDetails_RequestDetail_Session
// RSVP Session Information
type RsvpStandby_RequestDetails_RequestDetail_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession
// RSVP Session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2LSubLsp) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_FlowSpec
// Flow Spec Information
type RsvpStandby_RequestDetails_RequestDetail_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec
// Generic Flow Spec Information
type RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// RsvpStandby_RequestDetails_RequestDetail_Filter
// RSVP Filter
type RsvpStandby_RequestDetails_RequestDetail_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetYangName() string { return "filter" }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetParent() types.Entity { return filter.parent }

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_RequestDetails_RequestDetail_Style
// RSVP Style
type RsvpStandby_RequestDetails_RequestDetail_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetSegmentPath() string {
    return "style"
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetYangName() string { return "style" }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetParent() types.Entity { return style.parent }

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_ReqFlags
// Request flags
type RsvpStandby_RequestDetails_RequestDetail_ReqFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // Is neighbor refreshing. The type is bool.
    IsRefreshing interface{}

    // Send Confirm message. The type is bool.
    IsSendConfirm interface{}

    // Is ACK message outstanding. The type is bool.
    IsAckOutstanding interface{}

    // Is MessageID allocated. The type is bool.
    IsMessageIdAllocated interface{}

    // A NACK message was received. The type is bool.
    IsNackReceived interface{}

    // Retransmit the message. The type is bool.
    IsRetransmit interface{}

    // Message is paced. The type is bool.
    IsPaced interface{}

    // The Path message contains Label Request. The type is bool.
    IsLabelRequestInPath interface{}

    // The Path message contains RRO. The type is bool.
    IsRroInPath interface{}

    // Path has Session-Attr object with Record Labels set. The type is bool.
    IsRecordLabelInPath interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetFilter() yfilter.YFilter { return reqFlags.YFilter }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) SetFilter(yf yfilter.YFilter) { reqFlags.YFilter = yf }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetGoName(yname string) string {
    if yname == "is-local-receiver" { return "IsLocalReceiver" }
    if yname == "is-refreshing" { return "IsRefreshing" }
    if yname == "is-send-confirm" { return "IsSendConfirm" }
    if yname == "is-ack-outstanding" { return "IsAckOutstanding" }
    if yname == "is-message-id-allocated" { return "IsMessageIdAllocated" }
    if yname == "is-nack-received" { return "IsNackReceived" }
    if yname == "is-retransmit" { return "IsRetransmit" }
    if yname == "is-paced" { return "IsPaced" }
    if yname == "is-label-request-in-path" { return "IsLabelRequestInPath" }
    if yname == "is-rro-in-path" { return "IsRroInPath" }
    if yname == "is-record-label-in-path" { return "IsRecordLabelInPath" }
    if yname == "is-merge-point" { return "IsMergePoint" }
    return ""
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetSegmentPath() string {
    return "req-flags"
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-receiver"] = reqFlags.IsLocalReceiver
    leafs["is-refreshing"] = reqFlags.IsRefreshing
    leafs["is-send-confirm"] = reqFlags.IsSendConfirm
    leafs["is-ack-outstanding"] = reqFlags.IsAckOutstanding
    leafs["is-message-id-allocated"] = reqFlags.IsMessageIdAllocated
    leafs["is-nack-received"] = reqFlags.IsNackReceived
    leafs["is-retransmit"] = reqFlags.IsRetransmit
    leafs["is-paced"] = reqFlags.IsPaced
    leafs["is-label-request-in-path"] = reqFlags.IsLabelRequestInPath
    leafs["is-rro-in-path"] = reqFlags.IsRroInPath
    leafs["is-record-label-in-path"] = reqFlags.IsRecordLabelInPath
    leafs["is-merge-point"] = reqFlags.IsMergePoint
    return leafs
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetBundleName() string { return "cisco_ios_xr" }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetYangName() string { return "req-flags" }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) SetParent(parent types.Entity) { reqFlags.parent = parent }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetParent() types.Entity { return reqFlags.parent }

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_Hop
// Hop Infomation
type RsvpStandby_RequestDetails_RequestDetail_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetYangName() string { return "hop" }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetParent() types.Entity { return hop.parent }

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_Header
// RSVP Header Information
type RsvpStandby_RequestDetails_RequestDetail_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetSegmentPath() string {
    return "header"
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = header.RsvpVersion
    leafs["rsvp-header-flags"] = header.RsvpHeaderFlags
    leafs["rsvp-ttl"] = header.RsvpTtl
    leafs["rsvp-message-type"] = header.RsvpMessageType
    leafs["ip-tos"] = header.IpTos
    leafs["ip-ttl"] = header.IpTtl
    leafs["ip-source-address"] = header.IpSourceAddress
    return leafs
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetYangName() string { return "header" }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetParent() types.Entity { return header.parent }

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_PolicySources
// RSVP Policy Sources
type RsvpStandby_RequestDetails_RequestDetail_PolicySources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetFilter() yfilter.YFilter { return policySources.YFilter }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) SetFilter(yf yfilter.YFilter) { policySources.YFilter = yf }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetGoName(yname string) string {
    if yname == "is-te-link" { return "IsTeLink" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-cops" { return "IsCops" }
    if yname == "is-default" { return "IsDefault" }
    if yname == "is-cable" { return "IsCable" }
    return ""
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetSegmentPath() string {
    return "policy-sources"
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-te-link"] = policySources.IsTeLink
    leafs["is-local"] = policySources.IsLocal
    leafs["is-cops"] = policySources.IsCops
    leafs["is-default"] = policySources.IsDefault
    leafs["is-cable"] = policySources.IsCable
    return leafs
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetBundleName() string { return "cisco_ios_xr" }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetYangName() string { return "policy-sources" }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) SetParent(parent types.Entity) { policySources.parent = parent }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetParent() types.Entity { return policySources.parent }

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_PolicyFlags
// RSVP Policy Flags
type RsvpStandby_RequestDetails_RequestDetail_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags
// RSVP Query Flags
type RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_PsbKey
// List of RSB keys
type RsvpStandby_RequestDetails_RequestDetail_PsbKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetFilter() yfilter.YFilter { return psbKey.YFilter }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) SetFilter(yf yfilter.YFilter) { psbKey.YFilter = yf }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port-or-tunnel-id" { return "DestinationPortOrTunnelId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port-or-lsp-id" { return "SourcePortOrLspId" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrfid" { return "Vrfid" }
    return ""
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetSegmentPath() string {
    return "psb-key"
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = psbKey.P2MpId
    leafs["destination-address"] = psbKey.DestinationAddress
    leafs["destination-port-or-tunnel-id"] = psbKey.DestinationPortOrTunnelId
    leafs["protocol"] = psbKey.Protocol
    leafs["extended-tunnel-id"] = psbKey.ExtendedTunnelId
    leafs["session-type"] = psbKey.SessionType
    leafs["source-address"] = psbKey.SourceAddress
    leafs["source-port-or-lsp-id"] = psbKey.SourcePortOrLspId
    leafs["p2mp-sub-group-origin"] = psbKey.P2MpSubGroupOrigin
    leafs["sub-group-id"] = psbKey.SubGroupId
    leafs["vrfid"] = psbKey.Vrfid
    return leafs
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetBundleName() string { return "cisco_ios_xr" }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetYangName() string { return "psb-key" }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) SetParent(parent types.Entity) { psbKey.parent = parent }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetParent() types.Entity { return psbKey.parent }

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetParentYangName() string { return "request-detail" }

// RsvpStandby_RequestDetails_RequestDetail_RsbKey
// List of RSB keys
type RsvpStandby_RequestDetails_RequestDetail_RsbKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetFilter() yfilter.YFilter { return rsbKey.YFilter }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) SetFilter(yf yfilter.YFilter) { rsbKey.YFilter = yf }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port-or-tunnel-id" { return "DestinationPortOrTunnelId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port-or-lsp-id" { return "SourcePortOrLspId" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrfid" { return "Vrfid" }
    return ""
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetSegmentPath() string {
    return "rsb-key"
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = rsbKey.P2MpId
    leafs["destination-address"] = rsbKey.DestinationAddress
    leafs["destination-port-or-tunnel-id"] = rsbKey.DestinationPortOrTunnelId
    leafs["protocol"] = rsbKey.Protocol
    leafs["extended-tunnel-id"] = rsbKey.ExtendedTunnelId
    leafs["session-type"] = rsbKey.SessionType
    leafs["source-address"] = rsbKey.SourceAddress
    leafs["source-port-or-lsp-id"] = rsbKey.SourcePortOrLspId
    leafs["p2mp-sub-group-origin"] = rsbKey.P2MpSubGroupOrigin
    leafs["sub-group-id"] = rsbKey.SubGroupId
    leafs["vrfid"] = rsbKey.Vrfid
    return leafs
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetBundleName() string { return "cisco_ios_xr" }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetYangName() string { return "rsb-key" }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) SetParent(parent types.Entity) { rsbKey.parent = parent }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetParent() types.Entity { return rsbKey.parent }

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetParentYangName() string { return "request-detail" }

// RsvpStandby_InterfaceBriefs
// Table of brief info about RSVP-enabled
// interfaces
type RsvpStandby_InterfaceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled interface. The type is slice of
    // RsvpStandby_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []RsvpStandby_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetFilter() yfilter.YFilter { return interfaceBriefs.YFilter }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) SetFilter(yf yfilter.YFilter) { interfaceBriefs.YFilter = yf }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetGoName(yname string) string {
    if yname == "interface-brief" { return "InterfaceBrief" }
    return ""
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetSegmentPath() string {
    return "interface-briefs"
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-brief" {
        for _, c := range interfaceBriefs.InterfaceBrief {
            if interfaceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_InterfaceBriefs_InterfaceBrief{}
        interfaceBriefs.InterfaceBrief = append(interfaceBriefs.InterfaceBrief, child)
        return &interfaceBriefs.InterfaceBrief[len(interfaceBriefs.InterfaceBrief)-1]
    }
    return nil
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceBriefs.InterfaceBrief {
        children[interfaceBriefs.InterfaceBrief[i].GetSegmentPath()] = &interfaceBriefs.InterfaceBrief[i]
    }
    return children
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetYangName() string { return "interface-briefs" }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) SetParent(parent types.Entity) { interfaceBriefs.parent = parent }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetParent() types.Entity { return interfaceBriefs.parent }

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_InterfaceBriefs_InterfaceBrief
// Brief info about an RSVP-enabled interface
type RsvpStandby_InterfaceBriefs_InterfaceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetFilter() yfilter.YFilter { return interfaceBrief.YFilter }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) SetFilter(yf yfilter.YFilter) { interfaceBrief.YFilter = yf }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetSegmentPath() string {
    return "interface-brief" + "[interface-name='" + fmt.Sprintf("%v", interfaceBrief.InterfaceName) + "']"
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &interfaceBrief.BandwidthInformation
    }
    return nil
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &interfaceBrief.BandwidthInformation
    return children
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceBrief.InterfaceName
    leafs["interface-name-xr"] = interfaceBrief.InterfaceNameXr
    return leafs
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetYangName() string { return "interface-brief" }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) SetParent(parent types.Entity) { interfaceBrief.parent = parent }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetParent() types.Entity { return interfaceBrief.parent }

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetParentYangName() string { return "interface-briefs" }

// RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetParentYangName() string { return "interface-brief" }

// RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// RsvpStandby_SessionDetaileds
// Table of detailed info about sessions
type RsvpStandby_SessionDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info about session. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed.
    SessionDetailed []RsvpStandby_SessionDetaileds_SessionDetailed
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetFilter() yfilter.YFilter { return sessionDetaileds.YFilter }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) SetFilter(yf yfilter.YFilter) { sessionDetaileds.YFilter = yf }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetGoName(yname string) string {
    if yname == "session-detailed" { return "SessionDetailed" }
    return ""
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetSegmentPath() string {
    return "session-detaileds"
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-detailed" {
        for _, c := range sessionDetaileds.SessionDetailed {
            if sessionDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed{}
        sessionDetaileds.SessionDetailed = append(sessionDetaileds.SessionDetailed, child)
        return &sessionDetaileds.SessionDetailed[len(sessionDetaileds.SessionDetailed)-1]
    }
    return nil
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionDetaileds.SessionDetailed {
        children[sessionDetaileds.SessionDetailed[i].GetSegmentPath()] = &sessionDetaileds.SessionDetailed[i]
    }
    return children
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetYangName() string { return "session-detaileds" }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) SetParent(parent types.Entity) { sessionDetaileds.parent = parent }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetParent() types.Entity { return sessionDetaileds.parent }

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_SessionDetaileds_SessionDetailed
// Detailed info about session
type RsvpStandby_SessionDetaileds_SessionDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Compact session data.
    Compact RsvpStandby_SessionDetaileds_SessionDetailed_Compact

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp

    // Path and Reservation Info. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo.
    PsbRsbInfo []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetFilter() yfilter.YFilter { return sessionDetailed.YFilter }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) SetFilter(yf yfilter.YFilter) { sessionDetailed.YFilter = yf }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "compact" { return "Compact" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "psb-rsb-info" { return "PsbRsbInfo" }
    return ""
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetSegmentPath() string {
    return "session-detailed"
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "compact" {
        return &sessionDetailed.Compact
    }
    if childYangName == "s2l-sub-lsp" {
        return &sessionDetailed.S2LSubLsp
    }
    if childYangName == "psb-rsb-info" {
        for _, c := range sessionDetailed.PsbRsbInfo {
            if sessionDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo{}
        sessionDetailed.PsbRsbInfo = append(sessionDetailed.PsbRsbInfo, child)
        return &sessionDetailed.PsbRsbInfo[len(sessionDetailed.PsbRsbInfo)-1]
    }
    return nil
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["compact"] = &sessionDetailed.Compact
    children["s2l-sub-lsp"] = &sessionDetailed.S2LSubLsp
    for i := range sessionDetailed.PsbRsbInfo {
        children[sessionDetailed.PsbRsbInfo[i].GetSegmentPath()] = &sessionDetailed.PsbRsbInfo[i]
    }
    return children
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = sessionDetailed.DestinationAddress
    leafs["destination-port"] = sessionDetailed.DestinationPort
    leafs["protocol"] = sessionDetailed.Protocol
    leafs["extended-tunnel-id"] = sessionDetailed.ExtendedTunnelId
    leafs["session-type"] = sessionDetailed.SessionType
    leafs["p2mp-id"] = sessionDetailed.P2MpId
    leafs["vrf-name"] = sessionDetailed.VrfName
    return leafs
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetYangName() string { return "session-detailed" }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) SetParent(parent types.Entity) { sessionDetailed.parent = parent }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetParent() types.Entity { return sessionDetailed.parent }

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetParentYangName() string { return "session-detaileds" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact
// Compact session data
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetFilter() yfilter.YFilter { return compact.YFilter }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) SetFilter(yf yfilter.YFilter) { compact.YFilter = yf }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetGoName(yname string) string {
    if yname == "ps-bs" { return "PsBs" }
    if yname == "rs-bs" { return "RsBs" }
    if yname == "requests" { return "Requests" }
    if yname == "detail-list-size" { return "DetailListSize" }
    if yname == "session" { return "Session" }
    return ""
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetSegmentPath() string {
    return "compact"
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &compact.Session
    }
    return nil
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &compact.Session
    return children
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ps-bs"] = compact.PsBs
    leafs["rs-bs"] = compact.RsBs
    leafs["requests"] = compact.Requests
    leafs["detail-list-size"] = compact.DetailListSize
    return leafs
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetBundleName() string { return "cisco_ios_xr" }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetYangName() string { return "compact" }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) SetParent(parent types.Entity) { compact.parent = parent }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetParent() types.Entity { return compact.parent }

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetParentYangName() string { return "session-detailed" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session
// RSVP Session Information
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetParentYangName() string { return "compact" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
// RSVP Session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2LSubLsp) GetParentYangName() string { return "session-detailed" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo
// Path and Reservation Info
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Info. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo.
    PsbInfo []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo

    // Reservation Info. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo.
    RsbInfo []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetFilter() yfilter.YFilter { return psbRsbInfo.YFilter }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) SetFilter(yf yfilter.YFilter) { psbRsbInfo.YFilter = yf }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetGoName(yname string) string {
    if yname == "psb-info" { return "PsbInfo" }
    if yname == "rsb-info" { return "RsbInfo" }
    return ""
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetSegmentPath() string {
    return "psb-rsb-info"
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "psb-info" {
        for _, c := range psbRsbInfo.PsbInfo {
            if psbRsbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo{}
        psbRsbInfo.PsbInfo = append(psbRsbInfo.PsbInfo, child)
        return &psbRsbInfo.PsbInfo[len(psbRsbInfo.PsbInfo)-1]
    }
    if childYangName == "rsb-info" {
        for _, c := range psbRsbInfo.RsbInfo {
            if psbRsbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo{}
        psbRsbInfo.RsbInfo = append(psbRsbInfo.RsbInfo, child)
        return &psbRsbInfo.RsbInfo[len(psbRsbInfo.RsbInfo)-1]
    }
    return nil
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range psbRsbInfo.PsbInfo {
        children[psbRsbInfo.PsbInfo[i].GetSegmentPath()] = &psbRsbInfo.PsbInfo[i]
    }
    for i := range psbRsbInfo.RsbInfo {
        children[psbRsbInfo.RsbInfo[i].GetSegmentPath()] = &psbRsbInfo.RsbInfo[i]
    }
    return children
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetBundleName() string { return "cisco_ios_xr" }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetYangName() string { return "psb-rsb-info" }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) SetParent(parent types.Entity) { psbRsbInfo.parent = parent }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetParent() types.Entity { return psbRsbInfo.parent }

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetParentYangName() string { return "session-detailed" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo
// Path Info
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    LspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Interface on which inbound message was received. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InInterface interface{}

    // Label for inbound traffic. The type is interface{} with range:
    // 0..4294967295.
    InLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Address validity. The type is bool.
    IsBadAddress interface{}

    // IP address of Path's incoming interface. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IncomingInterfaceAddress interface{}

    // ERO validity. The type is bool.
    IsEroValid interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // Traffic Spec validity. The type is bool.
    IsTrafficSpecValid interface{}

    // Tunnel name. The type is string.
    TunnelName interface{}

    // Generic Label for inbound traffic.
    GenericInLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel

    // Traffic Spec object.
    TrafficSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec

    // Generic Traffic Spec object.
    GenericTrafficSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec

    // Association object.
    Association RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association

    // Protection object.
    Protection RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection

    // Reverse LSP object.
    ReverseLsp RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp

    // Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero.
    Ero []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero

    // Record Route Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro.
    Rro []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetFilter() yfilter.YFilter { return psbInfo.YFilter }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) SetFilter(yf yfilter.YFilter) { psbInfo.YFilter = yf }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "in-interface" { return "InInterface" }
    if yname == "in-label" { return "InLabel" }
    if yname == "lsp-wrap-label" { return "LspWrapLabel" }
    if yname == "is-bad-address" { return "IsBadAddress" }
    if yname == "incoming-interface-address" { return "IncomingInterfaceAddress" }
    if yname == "is-ero-valid" { return "IsEroValid" }
    if yname == "is-rro-valid" { return "IsRroValid" }
    if yname == "is-traffic-spec-valid" { return "IsTrafficSpecValid" }
    if yname == "tunnel-name" { return "TunnelName" }
    if yname == "generic-in-label" { return "GenericInLabel" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "association" { return "Association" }
    if yname == "protection" { return "Protection" }
    if yname == "reverse-lsp" { return "ReverseLsp" }
    if yname == "ero" { return "Ero" }
    if yname == "rro" { return "Rro" }
    return ""
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetSegmentPath() string {
    return "psb-info"
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-in-label" {
        return &psbInfo.GenericInLabel
    }
    if childYangName == "traffic-spec" {
        return &psbInfo.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &psbInfo.GenericTrafficSpec
    }
    if childYangName == "association" {
        return &psbInfo.Association
    }
    if childYangName == "protection" {
        return &psbInfo.Protection
    }
    if childYangName == "reverse-lsp" {
        return &psbInfo.ReverseLsp
    }
    if childYangName == "ero" {
        for _, c := range psbInfo.Ero {
            if psbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero{}
        psbInfo.Ero = append(psbInfo.Ero, child)
        return &psbInfo.Ero[len(psbInfo.Ero)-1]
    }
    if childYangName == "rro" {
        for _, c := range psbInfo.Rro {
            if psbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro{}
        psbInfo.Rro = append(psbInfo.Rro, child)
        return &psbInfo.Rro[len(psbInfo.Rro)-1]
    }
    return nil
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-in-label"] = &psbInfo.GenericInLabel
    children["traffic-spec"] = &psbInfo.TrafficSpec
    children["generic-traffic-spec"] = &psbInfo.GenericTrafficSpec
    children["association"] = &psbInfo.Association
    children["protection"] = &psbInfo.Protection
    children["reverse-lsp"] = &psbInfo.ReverseLsp
    for i := range psbInfo.Ero {
        children[psbInfo.Ero[i].GetSegmentPath()] = &psbInfo.Ero[i]
    }
    for i := range psbInfo.Rro {
        children[psbInfo.Rro[i].GetSegmentPath()] = &psbInfo.Rro[i]
    }
    return children
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = psbInfo.IsValid
    leafs["destination-address"] = psbInfo.DestinationAddress
    leafs["lsp-id"] = psbInfo.LspId
    leafs["p2mp-sub-group-origin"] = psbInfo.P2MpSubGroupOrigin
    leafs["sub-group-id"] = psbInfo.SubGroupId
    leafs["in-interface"] = psbInfo.InInterface
    leafs["in-label"] = psbInfo.InLabel
    leafs["lsp-wrap-label"] = psbInfo.LspWrapLabel
    leafs["is-bad-address"] = psbInfo.IsBadAddress
    leafs["incoming-interface-address"] = psbInfo.IncomingInterfaceAddress
    leafs["is-ero-valid"] = psbInfo.IsEroValid
    leafs["is-rro-valid"] = psbInfo.IsRroValid
    leafs["is-traffic-spec-valid"] = psbInfo.IsTrafficSpecValid
    leafs["tunnel-name"] = psbInfo.TunnelName
    return leafs
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetBundleName() string { return "cisco_ios_xr" }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetYangName() string { return "psb-info" }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) SetParent(parent types.Entity) { psbInfo.parent = parent }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetParent() types.Entity { return psbInfo.parent }

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetParentYangName() string { return "psb-rsb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel
// Generic Label for inbound traffic
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetFilter() yfilter.YFilter { return genericInLabel.YFilter }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) SetFilter(yf yfilter.YFilter) { genericInLabel.YFilter = yf }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetSegmentPath() string {
    return "generic-in-label"
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericInLabel.GeneralizedLabel
    }
    return nil
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericInLabel.GeneralizedLabel
    return children
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericInLabel.GenericLabelType
    return leafs
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetYangName() string { return "generic-in-label" }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) SetParent(parent types.Entity) { genericInLabel.parent = parent }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetParent() types.Entity { return genericInLabel.parent }

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetParentYangName() string { return "generic-in-label" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec
// Traffic Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec
// Generic Traffic Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association
// Association object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AssociationType. The type is RsvpMgmtAssociation.
    AssociationType interface{}

    // IPV4 ASSOCIATION Object.
    Ipv4 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4

    // IPV6 ASSOCIATION Object.
    Ipv6 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6

    // EXTENDED IPV4 ASSOCIATION Object.
    ExtendedIpv4 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4

    // EXTENDED IPV6 ASSOCIATION Object.
    ExtendedIpv6 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetFilter() yfilter.YFilter { return association.YFilter }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) SetFilter(yf yfilter.YFilter) { association.YFilter = yf }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetGoName(yname string) string {
    if yname == "association-type" { return "AssociationType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    if yname == "extended-ipv4" { return "ExtendedIpv4" }
    if yname == "extended-ipv6" { return "ExtendedIpv6" }
    return ""
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetSegmentPath() string {
    return "association"
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &association.Ipv4
    }
    if childYangName == "ipv6" {
        return &association.Ipv6
    }
    if childYangName == "extended-ipv4" {
        return &association.ExtendedIpv4
    }
    if childYangName == "extended-ipv6" {
        return &association.ExtendedIpv6
    }
    return nil
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &association.Ipv4
    children["ipv6"] = &association.Ipv6
    children["extended-ipv4"] = &association.ExtendedIpv4
    children["extended-ipv6"] = &association.ExtendedIpv6
    return children
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["association-type"] = association.AssociationType
    return leafs
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetBundleName() string { return "cisco_ios_xr" }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetYangName() string { return "association" }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) SetParent(parent types.Entity) { association.parent = parent }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetParent() types.Entity { return association.parent }

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4
// IPV4 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    return ""
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = ipv4.Type
    leafs["id"] = ipv4.Id
    leafs["source"] = ipv4.Source
    return leafs
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetParentYangName() string { return "association" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6
// IPV6 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Source interface{}
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    return ""
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = ipv6.Type
    leafs["id"] = ipv6.Id
    leafs["source"] = ipv6.Source
    return leafs
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetParentYangName() string { return "association" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4
// EXTENDED IPV4 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedId []interface{}
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetFilter() yfilter.YFilter { return extendedIpv4.YFilter }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) SetFilter(yf yfilter.YFilter) { extendedIpv4.YFilter = yf }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    if yname == "global-source" { return "GlobalSource" }
    if yname == "extended-id" { return "ExtendedId" }
    return ""
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetSegmentPath() string {
    return "extended-ipv4"
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extendedIpv4.Type
    leafs["id"] = extendedIpv4.Id
    leafs["source"] = extendedIpv4.Source
    leafs["global-source"] = extendedIpv4.GlobalSource
    leafs["extended-id"] = extendedIpv4.ExtendedId
    return leafs
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetYangName() string { return "extended-ipv4" }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) SetParent(parent types.Entity) { extendedIpv4.parent = parent }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetParent() types.Entity { return extendedIpv4.parent }

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetParentYangName() string { return "association" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
// EXTENDED IPV6 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedId []interface{}
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetFilter() yfilter.YFilter { return extendedIpv6.YFilter }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) SetFilter(yf yfilter.YFilter) { extendedIpv6.YFilter = yf }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    if yname == "global-source" { return "GlobalSource" }
    if yname == "extended-id" { return "ExtendedId" }
    return ""
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetSegmentPath() string {
    return "extended-ipv6"
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extendedIpv6.Type
    leafs["id"] = extendedIpv6.Id
    leafs["source"] = extendedIpv6.Source
    leafs["global-source"] = extendedIpv6.GlobalSource
    leafs["extended-id"] = extendedIpv6.ExtendedId
    return leafs
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetYangName() string { return "extended-ipv6" }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) SetParent(parent types.Entity) { extendedIpv6.parent = parent }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetParent() types.Entity { return extendedIpv6.parent }

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetParentYangName() string { return "association" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection
// Protection object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Secondary Bit. The type is bool.
    S interface{}

    // Protecting Bit. The type is bool.
    P interface{}

    // Notification Bit. The type is bool.
    N interface{}

    // Operational Bit. The type is bool.
    O interface{}

    // PROTECTION Object LSP Flags.
    LspFlags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags

    // PROTECTION Object Link Flags.
    LinkFlags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetFilter() yfilter.YFilter { return protection.YFilter }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) SetFilter(yf yfilter.YFilter) { protection.YFilter = yf }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetGoName(yname string) string {
    if yname == "s" { return "S" }
    if yname == "p" { return "P" }
    if yname == "n" { return "N" }
    if yname == "o" { return "O" }
    if yname == "lsp-flags" { return "LspFlags" }
    if yname == "link-flags" { return "LinkFlags" }
    return ""
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetSegmentPath() string {
    return "protection"
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-flags" {
        return &protection.LspFlags
    }
    if childYangName == "link-flags" {
        return &protection.LinkFlags
    }
    return nil
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-flags"] = &protection.LspFlags
    children["link-flags"] = &protection.LinkFlags
    return children
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s"] = protection.S
    leafs["p"] = protection.P
    leafs["n"] = protection.N
    leafs["o"] = protection.O
    return leafs
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetBundleName() string { return "cisco_ios_xr" }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetYangName() string { return "protection" }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) SetParent(parent types.Entity) { protection.parent = parent }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetParent() types.Entity { return protection.parent }

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags
// PROTECTION Object LSP Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Full Rerouting. The type is bool.
    Rerouting interface{}

    // Rerouting Without Extra-Traffic. The type is bool.
    ReroutingNoEt interface{}

    // 1:N Protection with Extra-Traffic. The type is bool.
    OneToNProtectionEt interface{}

    // 1+1 Unidirectional Protection. The type is bool.
    OnePlusOneUni interface{}

    // 1+1 Bidirectional Protection. The type is bool.
    OnePlusOneBi interface{}
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetFilter() yfilter.YFilter { return lspFlags.YFilter }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) SetFilter(yf yfilter.YFilter) { lspFlags.YFilter = yf }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetGoName(yname string) string {
    if yname == "rerouting" { return "Rerouting" }
    if yname == "rerouting-no-et" { return "ReroutingNoEt" }
    if yname == "one-to-n-protection-et" { return "OneToNProtectionEt" }
    if yname == "one-plus-one-uni" { return "OnePlusOneUni" }
    if yname == "one-plus-one-bi" { return "OnePlusOneBi" }
    return ""
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetSegmentPath() string {
    return "lsp-flags"
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rerouting"] = lspFlags.Rerouting
    leafs["rerouting-no-et"] = lspFlags.ReroutingNoEt
    leafs["one-to-n-protection-et"] = lspFlags.OneToNProtectionEt
    leafs["one-plus-one-uni"] = lspFlags.OnePlusOneUni
    leafs["one-plus-one-bi"] = lspFlags.OnePlusOneBi
    return leafs
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetBundleName() string { return "cisco_ios_xr" }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetYangName() string { return "lsp-flags" }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) SetParent(parent types.Entity) { lspFlags.parent = parent }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetParent() types.Entity { return lspFlags.parent }

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetParentYangName() string { return "protection" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
// PROTECTION Object Link Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Indicates Enhanced Protection Scheme. The type is bool.
    Enhanced interface{}

    // Dedicated 1+1 Protection. The type is bool.
    Ded1Plus1 interface{}

    // Dedicated 1:1 Protection. The type is bool.
    Ded1To1 interface{}

    // Shared Link Layer Protection. The type is bool.
    Shared interface{}

    // LSP should not use any Link Layer Protection. The type is bool.
    Unprotected interface{}

    // LSP should use Links that are protecting other (primary) traffic. The type
    // is bool.
    ExtraTraffic interface{}

    // Reserved Bit 1. The type is bool.
    ReservedBit1 interface{}

    // Reserved Bit 2. The type is bool.
    ReservedBit2 interface{}
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetFilter() yfilter.YFilter { return linkFlags.YFilter }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) SetFilter(yf yfilter.YFilter) { linkFlags.YFilter = yf }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetGoName(yname string) string {
    if yname == "enhanced" { return "Enhanced" }
    if yname == "ded1-plus1" { return "Ded1Plus1" }
    if yname == "ded1-to1" { return "Ded1To1" }
    if yname == "shared" { return "Shared" }
    if yname == "unprotected" { return "Unprotected" }
    if yname == "extra-traffic" { return "ExtraTraffic" }
    if yname == "reserved-bit1" { return "ReservedBit1" }
    if yname == "reserved-bit2" { return "ReservedBit2" }
    return ""
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetSegmentPath() string {
    return "link-flags"
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enhanced"] = linkFlags.Enhanced
    leafs["ded1-plus1"] = linkFlags.Ded1Plus1
    leafs["ded1-to1"] = linkFlags.Ded1To1
    leafs["shared"] = linkFlags.Shared
    leafs["unprotected"] = linkFlags.Unprotected
    leafs["extra-traffic"] = linkFlags.ExtraTraffic
    leafs["reserved-bit1"] = linkFlags.ReservedBit1
    leafs["reserved-bit2"] = linkFlags.ReservedBit2
    return leafs
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetBundleName() string { return "cisco_ios_xr" }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetYangName() string { return "link-flags" }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) SetParent(parent types.Entity) { linkFlags.parent = parent }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetParent() types.Entity { return linkFlags.parent }

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetParentYangName() string { return "protection" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp
// Reverse LSP object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic Traffic Spec object.
    GenericTrafficSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec

    // Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero.
    Ero []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero

    // Unsupported REVERSE_LSP Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject.
    UnsupSubObject []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetFilter() yfilter.YFilter { return reverseLsp.YFilter }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) SetFilter(yf yfilter.YFilter) { reverseLsp.YFilter = yf }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetGoName(yname string) string {
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "ero" { return "Ero" }
    if yname == "unsup-sub-object" { return "UnsupSubObject" }
    return ""
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetSegmentPath() string {
    return "reverse-lsp"
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-traffic-spec" {
        return &reverseLsp.GenericTrafficSpec
    }
    if childYangName == "ero" {
        for _, c := range reverseLsp.Ero {
            if reverseLsp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero{}
        reverseLsp.Ero = append(reverseLsp.Ero, child)
        return &reverseLsp.Ero[len(reverseLsp.Ero)-1]
    }
    if childYangName == "unsup-sub-object" {
        for _, c := range reverseLsp.UnsupSubObject {
            if reverseLsp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject{}
        reverseLsp.UnsupSubObject = append(reverseLsp.UnsupSubObject, child)
        return &reverseLsp.UnsupSubObject[len(reverseLsp.UnsupSubObject)-1]
    }
    return nil
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-traffic-spec"] = &reverseLsp.GenericTrafficSpec
    for i := range reverseLsp.Ero {
        children[reverseLsp.Ero[i].GetSegmentPath()] = &reverseLsp.Ero[i]
    }
    for i := range reverseLsp.UnsupSubObject {
        children[reverseLsp.UnsupSubObject[i].GetSegmentPath()] = &reverseLsp.UnsupSubObject[i]
    }
    return children
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetBundleName() string { return "cisco_ios_xr" }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetYangName() string { return "reverse-lsp" }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) SetParent(parent types.Entity) { reverseLsp.parent = parent }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetParent() types.Entity { return reverseLsp.parent }

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec
// Generic Traffic Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetParentYangName() string { return "reverse-lsp" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero
// Explicit Route Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetFilter() yfilter.YFilter { return ero.YFilter }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) SetFilter(yf yfilter.YFilter) { ero.YFilter = yf }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetSegmentPath() string {
    return "ero"
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &ero.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &ero.UnnumberedEroSubObject
    }
    return nil
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &ero.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &ero.UnnumberedEroSubObject
    return children
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = ero.EroType
    return leafs
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetBundleName() string { return "cisco_ios_xr" }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetYangName() string { return "ero" }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) SetParent(parent types.Entity) { ero.parent = parent }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetParent() types.Entity { return ero.parent }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetParentYangName() string { return "reverse-lsp" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetParentYangName() string { return "ero" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetParentYangName() string { return "ero" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
// Unsupported REVERSE_LSP Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // rsvp mgmt rev lsp unsupported subobj. The type is slice of interface{} with
    // range: 0..255.
    RsvpMgmtRevLspUnsupportedSubobj []interface{}
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetFilter() yfilter.YFilter { return unsupSubObject.YFilter }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) SetFilter(yf yfilter.YFilter) { unsupSubObject.YFilter = yf }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetGoName(yname string) string {
    if yname == "rsvp-mgmt-rev-lsp-unsupported-subobj" { return "RsvpMgmtRevLspUnsupportedSubobj" }
    return ""
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetSegmentPath() string {
    return "unsup-sub-object"
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-mgmt-rev-lsp-unsupported-subobj"] = unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj
    return leafs
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetYangName() string { return "unsup-sub-object" }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) SetParent(parent types.Entity) { unsupSubObject.parent = parent }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetParent() types.Entity { return unsupSubObject.parent }

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetParentYangName() string { return "reverse-lsp" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero
// Explicit Route Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetFilter() yfilter.YFilter { return ero.YFilter }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) SetFilter(yf yfilter.YFilter) { ero.YFilter = yf }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetSegmentPath() string {
    return "ero"
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &ero.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &ero.UnnumberedEroSubObject
    }
    return nil
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &ero.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &ero.UnnumberedEroSubObject
    return children
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = ero.EroType
    return leafs
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetBundleName() string { return "cisco_ios_xr" }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetYangName() string { return "ero" }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) SetParent(parent types.Entity) { ero.parent = parent }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetParent() types.Entity { return ero.parent }

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetParentYangName() string { return "ero" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetParentYangName() string { return "ero" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
// Record Route Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4RroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetFilter() yfilter.YFilter { return rro.YFilter }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) SetFilter(yf yfilter.YFilter) { rro.YFilter = yf }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetGoName(yname string) string {
    if yname == "rro-type" { return "RroType" }
    if yname == "ipv4rro-sub-object" { return "Ipv4RroSubObject" }
    if yname == "label-rro-sub-object" { return "LabelRroSubObject" }
    if yname == "unnumbered-rro-sub-object" { return "UnnumberedRroSubObject" }
    if yname == "srlg-rro-sub-object" { return "SrlgRroSubObject" }
    return ""
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetSegmentPath() string {
    return "rro"
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4rro-sub-object" {
        return &rro.Ipv4RroSubObject
    }
    if childYangName == "label-rro-sub-object" {
        return &rro.LabelRroSubObject
    }
    if childYangName == "unnumbered-rro-sub-object" {
        return &rro.UnnumberedRroSubObject
    }
    if childYangName == "srlg-rro-sub-object" {
        return &rro.SrlgRroSubObject
    }
    return nil
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4rro-sub-object"] = &rro.Ipv4RroSubObject
    children["label-rro-sub-object"] = &rro.LabelRroSubObject
    children["unnumbered-rro-sub-object"] = &rro.UnnumberedRroSubObject
    children["srlg-rro-sub-object"] = &rro.SrlgRroSubObject
    return children
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-type"] = rro.RroType
    return leafs
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetBundleName() string { return "cisco_ios_xr" }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetYangName() string { return "rro" }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) SetParent(parent types.Entity) { rro.parent = parent }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetParent() types.Entity { return rro.parent }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetParentYangName() string { return "psb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject
// IPV4 RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetFilter() yfilter.YFilter { return ipv4RroSubObject.YFilter }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) SetFilter(yf yfilter.YFilter) { ipv4RroSubObject.YFilter = yf }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetGoName(yname string) string {
    if yname == "rro-address" { return "RroAddress" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetSegmentPath() string {
    return "ipv4rro-sub-object"
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &ipv4RroSubObject.Flags
    }
    return nil
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &ipv4RroSubObject.Flags
    return children
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-address"] = ipv4RroSubObject.RroAddress
    return leafs
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetYangName() string { return "ipv4rro-sub-object" }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) SetParent(parent types.Entity) { ipv4RroSubObject.parent = parent }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetParent() types.Entity { return ipv4RroSubObject.parent }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags
// The RRO IPV4 Subobject Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetParentYangName() string { return "ipv4rro-sub-object" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Variable Length Label. The type is slice of interface{}
    // with range: 0..4294967295.
    VariableLengthLabel []interface{}

    // The RRO Subobject Label Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetFilter() yfilter.YFilter { return labelRroSubObject.YFilter }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) SetFilter(yf yfilter.YFilter) { labelRroSubObject.YFilter = yf }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "is-label-variable-length" { return "IsLabelVariableLength" }
    if yname == "variable-length-label" { return "VariableLengthLabel" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetSegmentPath() string {
    return "label-rro-sub-object"
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &labelRroSubObject.Flags
    }
    return nil
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &labelRroSubObject.Flags
    return children
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelRroSubObject.Label
    leafs["is-label-variable-length"] = labelRroSubObject.IsLabelVariableLength
    leafs["variable-length-label"] = labelRroSubObject.VariableLengthLabel
    return leafs
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetYangName() string { return "label-rro-sub-object" }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) SetParent(parent types.Entity) { labelRroSubObject.parent = parent }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetParent() types.Entity { return labelRroSubObject.parent }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-global-label" { return "IsGlobalLabel" }
    return ""
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-global-label"] = flags.IsGlobalLabel
    return leafs
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetParentYangName() string { return "label-rro-sub-object" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetFilter() yfilter.YFilter { return unnumberedRroSubObject.YFilter }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedRroSubObject.YFilter = yf }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetGoName(yname string) string {
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-id" { return "InterfaceId" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetSegmentPath() string {
    return "unnumbered-rro-sub-object"
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &unnumberedRroSubObject.Flags
    }
    return nil
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &unnumberedRroSubObject.Flags
    return children
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-address"] = unnumberedRroSubObject.InterfaceAddress
    leafs["interface-id"] = unnumberedRroSubObject.InterfaceId
    return leafs
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetYangName() string { return "unnumbered-rro-sub-object" }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) SetParent(parent types.Entity) { unnumberedRroSubObject.parent = parent }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetParent() types.Entity { return unnumberedRroSubObject.parent }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParentYangName() string { return "unnumbered-rro-sub-object" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlGs []interface{}
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetFilter() yfilter.YFilter { return srlgRroSubObject.YFilter }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) SetFilter(yf yfilter.YFilter) { srlgRroSubObject.YFilter = yf }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetGoName(yname string) string {
    if yname == "srl-gs" { return "SrlGs" }
    return ""
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetSegmentPath() string {
    return "srlg-rro-sub-object"
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srl-gs"] = srlgRroSubObject.SrlGs
    return leafs
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetYangName() string { return "srlg-rro-sub-object" }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) SetParent(parent types.Entity) { srlgRroSubObject.parent = parent }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetParent() types.Entity { return srlgRroSubObject.parent }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
// Reservation Info
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Interface on which outbound message was sent. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Label for outbound traffic. The type is interface{} with range:
    // 0..4294967295.
    OutLabel interface{}

    // Backup tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup label. The type is interface{} with range: 0..4294967295.
    BackupLabel interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // FlowSpec validity. The type is bool.
    IsFlowSpecValid interface{}

    // Generic Label for outbound traffic.
    GenericOutLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel

    // Flow spec object.
    FlowSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec

    // Generic Flow Spec object.
    GenericFlowSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec

    // Record route object. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro.
    Rro []RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetFilter() yfilter.YFilter { return rsbInfo.YFilter }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) SetFilter(yf yfilter.YFilter) { rsbInfo.YFilter = yf }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label" { return "BackupLabel" }
    if yname == "is-rro-valid" { return "IsRroValid" }
    if yname == "is-flow-spec-valid" { return "IsFlowSpecValid" }
    if yname == "generic-out-label" { return "GenericOutLabel" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "rro" { return "Rro" }
    return ""
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetSegmentPath() string {
    return "rsb-info"
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-out-label" {
        return &rsbInfo.GenericOutLabel
    }
    if childYangName == "flow-spec" {
        return &rsbInfo.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rsbInfo.GenericFlowSpec
    }
    if childYangName == "rro" {
        for _, c := range rsbInfo.Rro {
            if rsbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro{}
        rsbInfo.Rro = append(rsbInfo.Rro, child)
        return &rsbInfo.Rro[len(rsbInfo.Rro)-1]
    }
    return nil
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-out-label"] = &rsbInfo.GenericOutLabel
    children["flow-spec"] = &rsbInfo.FlowSpec
    children["generic-flow-spec"] = &rsbInfo.GenericFlowSpec
    for i := range rsbInfo.Rro {
        children[rsbInfo.Rro[i].GetSegmentPath()] = &rsbInfo.Rro[i]
    }
    return children
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = rsbInfo.IsValid
    leafs["destination-address"] = rsbInfo.DestinationAddress
    leafs["out-interface"] = rsbInfo.OutInterface
    leafs["out-label"] = rsbInfo.OutLabel
    leafs["backup-interface"] = rsbInfo.BackupInterface
    leafs["backup-label"] = rsbInfo.BackupLabel
    leafs["is-rro-valid"] = rsbInfo.IsRroValid
    leafs["is-flow-spec-valid"] = rsbInfo.IsFlowSpecValid
    return leafs
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetYangName() string { return "rsb-info" }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) SetParent(parent types.Entity) { rsbInfo.parent = parent }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetParent() types.Entity { return rsbInfo.parent }

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetParentYangName() string { return "psb-rsb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel
// Generic Label for outbound traffic
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetFilter() yfilter.YFilter { return genericOutLabel.YFilter }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) SetFilter(yf yfilter.YFilter) { genericOutLabel.YFilter = yf }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetSegmentPath() string {
    return "generic-out-label"
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutLabel.GeneralizedLabel
    return children
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutLabel.GenericLabelType
    return leafs
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetYangName() string { return "generic-out-label" }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) SetParent(parent types.Entity) { genericOutLabel.parent = parent }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetParent() types.Entity { return genericOutLabel.parent }

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetParentYangName() string { return "rsb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetParentYangName() string { return "generic-out-label" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec
// Flow spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetParentYangName() string { return "rsb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec
// Generic Flow Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetParentYangName() string { return "rsb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
// Record route object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4RroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetFilter() yfilter.YFilter { return rro.YFilter }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) SetFilter(yf yfilter.YFilter) { rro.YFilter = yf }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetGoName(yname string) string {
    if yname == "rro-type" { return "RroType" }
    if yname == "ipv4rro-sub-object" { return "Ipv4RroSubObject" }
    if yname == "label-rro-sub-object" { return "LabelRroSubObject" }
    if yname == "unnumbered-rro-sub-object" { return "UnnumberedRroSubObject" }
    if yname == "srlg-rro-sub-object" { return "SrlgRroSubObject" }
    return ""
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetSegmentPath() string {
    return "rro"
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4rro-sub-object" {
        return &rro.Ipv4RroSubObject
    }
    if childYangName == "label-rro-sub-object" {
        return &rro.LabelRroSubObject
    }
    if childYangName == "unnumbered-rro-sub-object" {
        return &rro.UnnumberedRroSubObject
    }
    if childYangName == "srlg-rro-sub-object" {
        return &rro.SrlgRroSubObject
    }
    return nil
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4rro-sub-object"] = &rro.Ipv4RroSubObject
    children["label-rro-sub-object"] = &rro.LabelRroSubObject
    children["unnumbered-rro-sub-object"] = &rro.UnnumberedRroSubObject
    children["srlg-rro-sub-object"] = &rro.SrlgRroSubObject
    return children
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-type"] = rro.RroType
    return leafs
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetBundleName() string { return "cisco_ios_xr" }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetYangName() string { return "rro" }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) SetParent(parent types.Entity) { rro.parent = parent }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetParent() types.Entity { return rro.parent }

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetParentYangName() string { return "rsb-info" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject
// IPV4 RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetFilter() yfilter.YFilter { return ipv4RroSubObject.YFilter }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) SetFilter(yf yfilter.YFilter) { ipv4RroSubObject.YFilter = yf }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetGoName(yname string) string {
    if yname == "rro-address" { return "RroAddress" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetSegmentPath() string {
    return "ipv4rro-sub-object"
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &ipv4RroSubObject.Flags
    }
    return nil
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &ipv4RroSubObject.Flags
    return children
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-address"] = ipv4RroSubObject.RroAddress
    return leafs
}

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetYangName() string { return "ipv4rro-sub-object" }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) SetParent(parent types.Entity) { ipv4RroSubObject.parent = parent }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetParent() types.Entity { return ipv4RroSubObject.parent }

func (ipv4RroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags
// The RRO IPV4 Subobject Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetParentYangName() string { return "ipv4rro-sub-object" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Variable Length Label. The type is slice of interface{}
    // with range: 0..4294967295.
    VariableLengthLabel []interface{}

    // The RRO Subobject Label Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetFilter() yfilter.YFilter { return labelRroSubObject.YFilter }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) SetFilter(yf yfilter.YFilter) { labelRroSubObject.YFilter = yf }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "is-label-variable-length" { return "IsLabelVariableLength" }
    if yname == "variable-length-label" { return "VariableLengthLabel" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetSegmentPath() string {
    return "label-rro-sub-object"
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &labelRroSubObject.Flags
    }
    return nil
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &labelRroSubObject.Flags
    return children
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelRroSubObject.Label
    leafs["is-label-variable-length"] = labelRroSubObject.IsLabelVariableLength
    leafs["variable-length-label"] = labelRroSubObject.VariableLengthLabel
    return leafs
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetYangName() string { return "label-rro-sub-object" }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) SetParent(parent types.Entity) { labelRroSubObject.parent = parent }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetParent() types.Entity { return labelRroSubObject.parent }

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-global-label" { return "IsGlobalLabel" }
    return ""
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-global-label"] = flags.IsGlobalLabel
    return leafs
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetParentYangName() string { return "label-rro-sub-object" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetFilter() yfilter.YFilter { return unnumberedRroSubObject.YFilter }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedRroSubObject.YFilter = yf }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetGoName(yname string) string {
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-id" { return "InterfaceId" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetSegmentPath() string {
    return "unnumbered-rro-sub-object"
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &unnumberedRroSubObject.Flags
    }
    return nil
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &unnumberedRroSubObject.Flags
    return children
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-address"] = unnumberedRroSubObject.InterfaceAddress
    leafs["interface-id"] = unnumberedRroSubObject.InterfaceId
    return leafs
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetYangName() string { return "unnumbered-rro-sub-object" }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) SetParent(parent types.Entity) { unnumberedRroSubObject.parent = parent }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetParent() types.Entity { return unnumberedRroSubObject.parent }

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParentYangName() string { return "unnumbered-rro-sub-object" }

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlGs []interface{}
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetFilter() yfilter.YFilter { return srlgRroSubObject.YFilter }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) SetFilter(yf yfilter.YFilter) { srlgRroSubObject.YFilter = yf }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetGoName(yname string) string {
    if yname == "srl-gs" { return "SrlGs" }
    return ""
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetSegmentPath() string {
    return "srlg-rro-sub-object"
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srl-gs"] = srlgRroSubObject.SrlGs
    return leafs
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetYangName() string { return "srlg-rro-sub-object" }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) SetParent(parent types.Entity) { srlgRroSubObject.parent = parent }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetParent() types.Entity { return srlgRroSubObject.parent }

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetParentYangName() string { return "rro" }

// RsvpStandby_HelloInstanceDetails
// Table of detailed info about hello instances
type RsvpStandby_HelloInstanceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single hello instance. The type is slice of
    // RsvpStandby_HelloInstanceDetails_HelloInstanceDetail.
    HelloInstanceDetail []RsvpStandby_HelloInstanceDetails_HelloInstanceDetail
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetFilter() yfilter.YFilter { return helloInstanceDetails.YFilter }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) SetFilter(yf yfilter.YFilter) { helloInstanceDetails.YFilter = yf }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetGoName(yname string) string {
    if yname == "hello-instance-detail" { return "HelloInstanceDetail" }
    return ""
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetSegmentPath() string {
    return "hello-instance-details"
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-instance-detail" {
        for _, c := range helloInstanceDetails.HelloInstanceDetail {
            if helloInstanceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_HelloInstanceDetails_HelloInstanceDetail{}
        helloInstanceDetails.HelloInstanceDetail = append(helloInstanceDetails.HelloInstanceDetail, child)
        return &helloInstanceDetails.HelloInstanceDetail[len(helloInstanceDetails.HelloInstanceDetail)-1]
    }
    return nil
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInstanceDetails.HelloInstanceDetail {
        children[helloInstanceDetails.HelloInstanceDetail[i].GetSegmentPath()] = &helloInstanceDetails.HelloInstanceDetail[i]
    }
    return children
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetYangName() string { return "hello-instance-details" }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) SetParent(parent types.Entity) { helloInstanceDetails.parent = parent }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetParent() types.Entity { return helloInstanceDetails.parent }

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_HelloInstanceDetails_HelloInstanceDetail
// Detailed info for a single hello instance
type RsvpStandby_HelloInstanceDetails_HelloInstanceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Hello instance owner. The type is RsvpMgmtHelloInstanceOwner.
    HelloInstanceOwner interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}

    // Hello Interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Number of missed Hello allowed. The type is interface{} with range:
    // 0..4294967295.
    MissedAcksAllowed interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    CommunicationLostReason interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    TotalCommunicationLost interface{}

    // Lost Comm. Hello missed count. The type is interface{} with range:
    // 0..65535.
    CommunicationLostHelloMissed interface{}

    // Count of lost comm. due to wrong Source Inst. The type is interface{} with
    // range: 0..65535.
    CommunicationLostWrongSourceInst interface{}

    // Count of lost comm. due to wrong Destination Inst. The type is interface{}
    // with range: 0..65535.
    CommunicationLostWrongDestinationInst interface{}

    // Count of lost comm. due to interface down. The type is interface{} with
    // range: 0..65535.
    CommunicationLostInterfaceDown interface{}

    // Count of lost comm. due to nbor disabling Hellos. The type is interface{}
    // with range: 0..65535.
    CommunicationLostNeighborDisabledHello interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Count of Hello Requests suppessed. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloRequestSuppressed interface{}

    // Hello up time.
    UpTime RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime

    // Time when communication was lost.
    CommunicationLostTime RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetFilter() yfilter.YFilter { return helloInstanceDetail.YFilter }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) SetFilter(yf yfilter.YFilter) { helloInstanceDetail.YFilter = yf }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "hello-instance-owner" { return "HelloInstanceOwner" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "missed-acks-allowed" { return "MissedAcksAllowed" }
    if yname == "source-instance" { return "SourceInstance" }
    if yname == "destination-instance" { return "DestinationInstance" }
    if yname == "communication-lost-reason" { return "CommunicationLostReason" }
    if yname == "total-communication-lost" { return "TotalCommunicationLost" }
    if yname == "communication-lost-hello-missed" { return "CommunicationLostHelloMissed" }
    if yname == "communication-lost-wrong-source-inst" { return "CommunicationLostWrongSourceInst" }
    if yname == "communication-lost-wrong-destination-inst" { return "CommunicationLostWrongDestinationInst" }
    if yname == "communication-lost-interface-down" { return "CommunicationLostInterfaceDown" }
    if yname == "communication-lost-neighbor-disabled-hello" { return "CommunicationLostNeighborDisabledHello" }
    if yname == "hello-messages-sent" { return "HelloMessagesSent" }
    if yname == "hello-messages-received" { return "HelloMessagesReceived" }
    if yname == "hello-request-suppressed" { return "HelloRequestSuppressed" }
    if yname == "up-time" { return "UpTime" }
    if yname == "communication-lost-time" { return "CommunicationLostTime" }
    return ""
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetSegmentPath() string {
    return "hello-instance-detail" + "[source-address='" + fmt.Sprintf("%v", helloInstanceDetail.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInstanceDetail.DestinationAddress) + "']"
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "up-time" {
        return &helloInstanceDetail.UpTime
    }
    if childYangName == "communication-lost-time" {
        return &helloInstanceDetail.CommunicationLostTime
    }
    return nil
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["up-time"] = &helloInstanceDetail.UpTime
    children["communication-lost-time"] = &helloInstanceDetail.CommunicationLostTime
    return children
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInstanceDetail.SourceAddress
    leafs["destination-address"] = helloInstanceDetail.DestinationAddress
    leafs["source-address-xr"] = helloInstanceDetail.SourceAddressXr
    leafs["destination-address-xr"] = helloInstanceDetail.DestinationAddressXr
    leafs["hello-instance-owner"] = helloInstanceDetail.HelloInstanceOwner
    leafs["neighbor-hello-state"] = helloInstanceDetail.NeighborHelloState
    leafs["instance-type"] = helloInstanceDetail.InstanceType
    leafs["hello-interface"] = helloInstanceDetail.HelloInterface
    leafs["hello-interval"] = helloInstanceDetail.HelloInterval
    leafs["missed-acks-allowed"] = helloInstanceDetail.MissedAcksAllowed
    leafs["source-instance"] = helloInstanceDetail.SourceInstance
    leafs["destination-instance"] = helloInstanceDetail.DestinationInstance
    leafs["communication-lost-reason"] = helloInstanceDetail.CommunicationLostReason
    leafs["total-communication-lost"] = helloInstanceDetail.TotalCommunicationLost
    leafs["communication-lost-hello-missed"] = helloInstanceDetail.CommunicationLostHelloMissed
    leafs["communication-lost-wrong-source-inst"] = helloInstanceDetail.CommunicationLostWrongSourceInst
    leafs["communication-lost-wrong-destination-inst"] = helloInstanceDetail.CommunicationLostWrongDestinationInst
    leafs["communication-lost-interface-down"] = helloInstanceDetail.CommunicationLostInterfaceDown
    leafs["communication-lost-neighbor-disabled-hello"] = helloInstanceDetail.CommunicationLostNeighborDisabledHello
    leafs["hello-messages-sent"] = helloInstanceDetail.HelloMessagesSent
    leafs["hello-messages-received"] = helloInstanceDetail.HelloMessagesReceived
    leafs["hello-request-suppressed"] = helloInstanceDetail.HelloRequestSuppressed
    return leafs
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetYangName() string { return "hello-instance-detail" }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) SetParent(parent types.Entity) { helloInstanceDetail.parent = parent }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetParent() types.Entity { return helloInstanceDetail.parent }

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetParentYangName() string { return "hello-instance-details" }

// RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime
// Hello up time
type RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetFilter() yfilter.YFilter { return upTime.YFilter }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) SetFilter(yf yfilter.YFilter) { upTime.YFilter = yf }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetSegmentPath() string {
    return "up-time"
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = upTime.Seconds
    leafs["nanoseconds"] = upTime.Nanoseconds
    return leafs
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetBundleName() string { return "cisco_ios_xr" }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetYangName() string { return "up-time" }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) SetParent(parent types.Entity) { upTime.parent = parent }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetParent() types.Entity { return upTime.parent }

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetParentYangName() string { return "hello-instance-detail" }

// RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
// Time when communication was lost
type RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetFilter() yfilter.YFilter { return communicationLostTime.YFilter }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) SetFilter(yf yfilter.YFilter) { communicationLostTime.YFilter = yf }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetSegmentPath() string {
    return "communication-lost-time"
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = communicationLostTime.Seconds
    leafs["nanoseconds"] = communicationLostTime.Nanoseconds
    return leafs
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetBundleName() string { return "cisco_ios_xr" }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetYangName() string { return "communication-lost-time" }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) SetParent(parent types.Entity) { communicationLostTime.parent = parent }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetParent() types.Entity { return communicationLostTime.parent }

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetParentYangName() string { return "hello-instance-detail" }

// RsvpStandby_GlobalNeighborDetails
// Table of detailed info about global neighbors
type RsvpStandby_GlobalNeighborDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail info for a single global neighbor. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail.
    GlobalNeighborDetail []RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetFilter() yfilter.YFilter { return globalNeighborDetails.YFilter }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) SetFilter(yf yfilter.YFilter) { globalNeighborDetails.YFilter = yf }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetGoName(yname string) string {
    if yname == "global-neighbor-detail" { return "GlobalNeighborDetail" }
    return ""
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetSegmentPath() string {
    return "global-neighbor-details"
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-detail" {
        for _, c := range globalNeighborDetails.GlobalNeighborDetail {
            if globalNeighborDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail{}
        globalNeighborDetails.GlobalNeighborDetail = append(globalNeighborDetails.GlobalNeighborDetail, child)
        return &globalNeighborDetails.GlobalNeighborDetail[len(globalNeighborDetails.GlobalNeighborDetail)-1]
    }
    return nil
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalNeighborDetails.GlobalNeighborDetail {
        children[globalNeighborDetails.GlobalNeighborDetail[i].GetSegmentPath()] = &globalNeighborDetails.GlobalNeighborDetail[i]
    }
    return children
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetYangName() string { return "global-neighbor-details" }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) SetParent(parent types.Entity) { globalNeighborDetails.parent = parent }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetParent() types.Entity { return globalNeighborDetails.parent }

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail
// Detail info for a single global neighbor
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Current restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // GR Restart Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Is GR restart timer running. The type is bool.
    IsRestartTimerRunning interface{}

    // GR Recovery Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Is RSVP recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Hello Interval (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    HelloInterval interface{}

    // Hello missed count. The type is interface{} with range: 0..255.
    MissedHellos interface{}

    // Number of pending states for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    PendingStates interface{}

    // Local node address. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalNodeAddress []interface{}

    // Interface Neighbor List. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighbor []interface{}

    // Neighbor's hello state. The type is slice of RsvpMgmtHelloState.
    NeighborHelloState []interface{}

    // Reason why communication was lost. The type is slice of
    // RsvpMgmtHelloDownReason.
    LostCommunicationReason []interface{}

    // Total number of times communication got lost. The type is slice of
    // interface{} with range: 0..65535.
    LostCommunicationTotal []interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags

    // How much restart time remains.
    RestartTimeLeft RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft

    // When will restart timer expire.
    RestartTimerExpiryTime RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime

    // How much recovery timer remains.
    RecoveryTimeLeft RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime

    // Hello up time. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime.
    UpTime []RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime

    // Time when communication was lost. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime.
    LostCommunicationTime []RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetFilter() yfilter.YFilter { return globalNeighborDetail.YFilter }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) SetFilter(yf yfilter.YFilter) { globalNeighborDetail.YFilter = yf }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "is-gr-enabled" { return "IsGrEnabled" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "restart-state" { return "RestartState" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "is-restart-timer-running" { return "IsRestartTimerRunning" }
    if yname == "recovery-time" { return "RecoveryTime" }
    if yname == "is-recovery-timer-running" { return "IsRecoveryTimerRunning" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "missed-hellos" { return "MissedHellos" }
    if yname == "pending-states" { return "PendingStates" }
    if yname == "local-node-address" { return "LocalNodeAddress" }
    if yname == "interface-neighbor" { return "InterfaceNeighbor" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "lost-communication-reason" { return "LostCommunicationReason" }
    if yname == "lost-communication-total" { return "LostCommunicationTotal" }
    if yname == "global-neighbor-flags" { return "GlobalNeighborFlags" }
    if yname == "restart-time-left" { return "RestartTimeLeft" }
    if yname == "restart-timer-expiry-time" { return "RestartTimerExpiryTime" }
    if yname == "recovery-time-left" { return "RecoveryTimeLeft" }
    if yname == "recovery-timer-exp-time" { return "RecoveryTimerExpTime" }
    if yname == "up-time" { return "UpTime" }
    if yname == "lost-communication-time" { return "LostCommunicationTime" }
    return ""
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetSegmentPath() string {
    return "global-neighbor-detail" + "[neighbor-address='" + fmt.Sprintf("%v", globalNeighborDetail.NeighborAddress) + "']"
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-flags" {
        return &globalNeighborDetail.GlobalNeighborFlags
    }
    if childYangName == "restart-time-left" {
        return &globalNeighborDetail.RestartTimeLeft
    }
    if childYangName == "restart-timer-expiry-time" {
        return &globalNeighborDetail.RestartTimerExpiryTime
    }
    if childYangName == "recovery-time-left" {
        return &globalNeighborDetail.RecoveryTimeLeft
    }
    if childYangName == "recovery-timer-exp-time" {
        return &globalNeighborDetail.RecoveryTimerExpTime
    }
    if childYangName == "up-time" {
        for _, c := range globalNeighborDetail.UpTime {
            if globalNeighborDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime{}
        globalNeighborDetail.UpTime = append(globalNeighborDetail.UpTime, child)
        return &globalNeighborDetail.UpTime[len(globalNeighborDetail.UpTime)-1]
    }
    if childYangName == "lost-communication-time" {
        for _, c := range globalNeighborDetail.LostCommunicationTime {
            if globalNeighborDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime{}
        globalNeighborDetail.LostCommunicationTime = append(globalNeighborDetail.LostCommunicationTime, child)
        return &globalNeighborDetail.LostCommunicationTime[len(globalNeighborDetail.LostCommunicationTime)-1]
    }
    return nil
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-neighbor-flags"] = &globalNeighborDetail.GlobalNeighborFlags
    children["restart-time-left"] = &globalNeighborDetail.RestartTimeLeft
    children["restart-timer-expiry-time"] = &globalNeighborDetail.RestartTimerExpiryTime
    children["recovery-time-left"] = &globalNeighborDetail.RecoveryTimeLeft
    children["recovery-timer-exp-time"] = &globalNeighborDetail.RecoveryTimerExpTime
    for i := range globalNeighborDetail.UpTime {
        children[globalNeighborDetail.UpTime[i].GetSegmentPath()] = &globalNeighborDetail.UpTime[i]
    }
    for i := range globalNeighborDetail.LostCommunicationTime {
        children[globalNeighborDetail.LostCommunicationTime[i].GetSegmentPath()] = &globalNeighborDetail.LostCommunicationTime[i]
    }
    return children
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = globalNeighborDetail.NeighborAddress
    leafs["is-gr-enabled"] = globalNeighborDetail.IsGrEnabled
    leafs["node-address"] = globalNeighborDetail.NodeAddress
    leafs["restart-state"] = globalNeighborDetail.RestartState
    leafs["restart-time"] = globalNeighborDetail.RestartTime
    leafs["is-restart-timer-running"] = globalNeighborDetail.IsRestartTimerRunning
    leafs["recovery-time"] = globalNeighborDetail.RecoveryTime
    leafs["is-recovery-timer-running"] = globalNeighborDetail.IsRecoveryTimerRunning
    leafs["hello-interval"] = globalNeighborDetail.HelloInterval
    leafs["missed-hellos"] = globalNeighborDetail.MissedHellos
    leafs["pending-states"] = globalNeighborDetail.PendingStates
    leafs["local-node-address"] = globalNeighborDetail.LocalNodeAddress
    leafs["interface-neighbor"] = globalNeighborDetail.InterfaceNeighbor
    leafs["neighbor-hello-state"] = globalNeighborDetail.NeighborHelloState
    leafs["lost-communication-reason"] = globalNeighborDetail.LostCommunicationReason
    leafs["lost-communication-total"] = globalNeighborDetail.LostCommunicationTotal
    return leafs
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetYangName() string { return "global-neighbor-detail" }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) SetParent(parent types.Entity) { globalNeighborDetail.parent = parent }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetParent() types.Entity { return globalNeighborDetail.parent }

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetParentYangName() string { return "global-neighbor-details" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags
// Global Neighbor Flags
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetFilter() yfilter.YFilter { return globalNeighborFlags.YFilter }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) SetFilter(yf yfilter.YFilter) { globalNeighborFlags.YFilter = yf }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetGoName(yname string) string {
    if yname == "is-application-ouni" { return "IsApplicationOuni" }
    if yname == "is-application-mpls" { return "IsApplicationMpls" }
    return ""
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetSegmentPath() string {
    return "global-neighbor-flags"
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-application-ouni"] = globalNeighborFlags.IsApplicationOuni
    leafs["is-application-mpls"] = globalNeighborFlags.IsApplicationMpls
    return leafs
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetYangName() string { return "global-neighbor-flags" }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) SetParent(parent types.Entity) { globalNeighborFlags.parent = parent }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetParent() types.Entity { return globalNeighborFlags.parent }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft
// How much restart time remains
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetFilter() yfilter.YFilter { return restartTimeLeft.YFilter }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) SetFilter(yf yfilter.YFilter) { restartTimeLeft.YFilter = yf }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetSegmentPath() string {
    return "restart-time-left"
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = restartTimeLeft.Seconds
    leafs["nanoseconds"] = restartTimeLeft.Nanoseconds
    return leafs
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetBundleName() string { return "cisco_ios_xr" }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetYangName() string { return "restart-time-left" }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) SetParent(parent types.Entity) { restartTimeLeft.parent = parent }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetParent() types.Entity { return restartTimeLeft.parent }

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime
// When will restart timer expire
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetFilter() yfilter.YFilter { return restartTimerExpiryTime.YFilter }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) SetFilter(yf yfilter.YFilter) { restartTimerExpiryTime.YFilter = yf }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetSegmentPath() string {
    return "restart-timer-expiry-time"
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = restartTimerExpiryTime.Seconds
    leafs["nanoseconds"] = restartTimerExpiryTime.Nanoseconds
    return leafs
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetYangName() string { return "restart-timer-expiry-time" }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) SetParent(parent types.Entity) { restartTimerExpiryTime.parent = parent }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetParent() types.Entity { return restartTimerExpiryTime.parent }

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft
// How much recovery timer remains
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetFilter() yfilter.YFilter { return recoveryTimeLeft.YFilter }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) SetFilter(yf yfilter.YFilter) { recoveryTimeLeft.YFilter = yf }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetSegmentPath() string {
    return "recovery-time-left"
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimeLeft.Seconds
    leafs["nanoseconds"] = recoveryTimeLeft.Nanoseconds
    return leafs
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetYangName() string { return "recovery-time-left" }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) SetParent(parent types.Entity) { recoveryTimeLeft.parent = parent }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetParent() types.Entity { return recoveryTimeLeft.parent }

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime
// Time at which recovery timer will expire
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetFilter() yfilter.YFilter { return recoveryTimerExpTime.YFilter }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) SetFilter(yf yfilter.YFilter) { recoveryTimerExpTime.YFilter = yf }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetSegmentPath() string {
    return "recovery-timer-exp-time"
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimerExpTime.Seconds
    leafs["nanoseconds"] = recoveryTimerExpTime.Nanoseconds
    return leafs
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetYangName() string { return "recovery-timer-exp-time" }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) SetParent(parent types.Entity) { recoveryTimerExpTime.parent = parent }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetParent() types.Entity { return recoveryTimerExpTime.parent }

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime
// Hello up time
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetFilter() yfilter.YFilter { return upTime.YFilter }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) SetFilter(yf yfilter.YFilter) { upTime.YFilter = yf }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetSegmentPath() string {
    return "up-time"
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = upTime.Seconds
    leafs["nanoseconds"] = upTime.Nanoseconds
    return leafs
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetBundleName() string { return "cisco_ios_xr" }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetYangName() string { return "up-time" }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) SetParent(parent types.Entity) { upTime.parent = parent }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetParent() types.Entity { return upTime.parent }

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
// Time when communication was lost
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetFilter() yfilter.YFilter { return lostCommunicationTime.YFilter }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) SetFilter(yf yfilter.YFilter) { lostCommunicationTime.YFilter = yf }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetSegmentPath() string {
    return "lost-communication-time"
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lostCommunicationTime.Seconds
    leafs["nanoseconds"] = lostCommunicationTime.Nanoseconds
    return leafs
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetBundleName() string { return "cisco_ios_xr" }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetYangName() string { return "lost-communication-time" }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) SetParent(parent types.Entity) { lostCommunicationTime.parent = parent }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetParent() types.Entity { return lostCommunicationTime.parent }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetParentYangName() string { return "global-neighbor-detail" }

// RsvpStandby_PsbBriefs
// Table of brief info about path state blocks
type RsvpStandby_PsbBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single path state block. The type is slice of
    // RsvpStandby_PsbBriefs_PsbBrief.
    PsbBrief []RsvpStandby_PsbBriefs_PsbBrief
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetFilter() yfilter.YFilter { return psbBriefs.YFilter }

func (psbBriefs *RsvpStandby_PsbBriefs) SetFilter(yf yfilter.YFilter) { psbBriefs.YFilter = yf }

func (psbBriefs *RsvpStandby_PsbBriefs) GetGoName(yname string) string {
    if yname == "psb-brief" { return "PsbBrief" }
    return ""
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetSegmentPath() string {
    return "psb-briefs"
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "psb-brief" {
        for _, c := range psbBriefs.PsbBrief {
            if psbBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_PsbBriefs_PsbBrief{}
        psbBriefs.PsbBrief = append(psbBriefs.PsbBrief, child)
        return &psbBriefs.PsbBrief[len(psbBriefs.PsbBrief)-1]
    }
    return nil
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range psbBriefs.PsbBrief {
        children[psbBriefs.PsbBrief[i].GetSegmentPath()] = &psbBriefs.PsbBrief[i]
    }
    return children
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (psbBriefs *RsvpStandby_PsbBriefs) GetYangName() string { return "psb-briefs" }

func (psbBriefs *RsvpStandby_PsbBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbBriefs *RsvpStandby_PsbBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbBriefs *RsvpStandby_PsbBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbBriefs *RsvpStandby_PsbBriefs) SetParent(parent types.Entity) { psbBriefs.parent = parent }

func (psbBriefs *RsvpStandby_PsbBriefs) GetParent() types.Entity { return psbBriefs.parent }

func (psbBriefs *RsvpStandby_PsbBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_PsbBriefs_PsbBrief
// Brief info for a single path state block
type RsvpStandby_PsbBriefs_PsbBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_PsbBriefs_PsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp

    // RSVP Template.
    Template RsvpStandby_PsbBriefs_PsbBrief_Template

    // RSVP Session Attribute.
    SessionAttribute RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetFilter() yfilter.YFilter { return psbBrief.YFilter }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) SetFilter(yf yfilter.YFilter) { psbBrief.YFilter = yf }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "template" { return "Template" }
    if yname == "session-attribute" { return "SessionAttribute" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    return ""
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetSegmentPath() string {
    return "psb-brief"
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &psbBrief.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &psbBrief.S2LSubLsp
    }
    if childYangName == "template" {
        return &psbBrief.Template
    }
    if childYangName == "session-attribute" {
        return &psbBrief.SessionAttribute
    }
    if childYangName == "traffic-spec" {
        return &psbBrief.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &psbBrief.GenericTrafficSpec
    }
    return nil
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &psbBrief.Session
    children["s2l-sub-lsp"] = &psbBrief.S2LSubLsp
    children["template"] = &psbBrief.Template
    children["session-attribute"] = &psbBrief.SessionAttribute
    children["traffic-spec"] = &psbBrief.TrafficSpec
    children["generic-traffic-spec"] = &psbBrief.GenericTrafficSpec
    return children
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = psbBrief.DestinationAddress
    leafs["destination-port"] = psbBrief.DestinationPort
    leafs["protocol"] = psbBrief.Protocol
    leafs["extended-tunnel-id"] = psbBrief.ExtendedTunnelId
    leafs["session-type"] = psbBrief.SessionType
    leafs["p2mp-id"] = psbBrief.P2MpId
    leafs["source-address"] = psbBrief.SourceAddress
    leafs["source-port"] = psbBrief.SourcePort
    leafs["sub-group-origin"] = psbBrief.SubGroupOrigin
    leafs["sub-group-id"] = psbBrief.SubGroupId
    leafs["vrf-name"] = psbBrief.VrfName
    leafs["input-interface"] = psbBrief.InputInterface
    return leafs
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetBundleName() string { return "cisco_ios_xr" }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetYangName() string { return "psb-brief" }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) SetParent(parent types.Entity) { psbBrief.parent = parent }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetParent() types.Entity { return psbBrief.parent }

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetParentYangName() string { return "psb-briefs" }

// RsvpStandby_PsbBriefs_PsbBrief_Session
// RSVP Session Information
type RsvpStandby_PsbBriefs_PsbBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetYangName() string { return "session" }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetParent() types.Entity { return session.parent }

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetParentYangName() string { return "psb-brief" }

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2LSubLsp) GetParentYangName() string { return "psb-brief" }

// RsvpStandby_PsbBriefs_PsbBrief_Template
// RSVP Template
type RsvpStandby_PsbBriefs_PsbBrief_Template struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetFilter() yfilter.YFilter { return template.YFilter }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) SetFilter(yf yfilter.YFilter) { template.YFilter = yf }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetSegmentPath() string {
    return "template"
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &template.RsvpFilter
    }
    return nil
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &template.RsvpFilter
    return children
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetBundleName() string { return "cisco_ios_xr" }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetYangName() string { return "template" }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) SetParent(parent types.Entity) { template.parent = parent }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetParent() types.Entity { return template.parent }

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetParentYangName() string { return "psb-brief" }

// RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter
// RSVP Filter
type RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetParentYangName() string { return "template" }

// RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute
// RSVP Session Attribute
type RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetFilter() yfilter.YFilter { return sessionAttribute.YFilter }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) SetFilter(yf yfilter.YFilter) { sessionAttribute.YFilter = yf }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "reservation-priority" { return "ReservationPriority" }
    if yname == "sess-attribute-flags" { return "SessAttributeFlags" }
    return ""
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetSegmentPath() string {
    return "session-attribute"
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sess-attribute-flags" {
        return &sessionAttribute.SessAttributeFlags
    }
    return nil
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sess-attribute-flags"] = &sessionAttribute.SessAttributeFlags
    return children
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = sessionAttribute.SetupPriority
    leafs["reservation-priority"] = sessionAttribute.ReservationPriority
    return leafs
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetYangName() string { return "session-attribute" }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) SetParent(parent types.Entity) { sessionAttribute.parent = parent }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetParent() types.Entity { return sessionAttribute.parent }

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetParentYangName() string { return "psb-brief" }

// RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
// Session Attributes
type RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetFilter() yfilter.YFilter { return sessAttributeFlags.YFilter }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) SetFilter(yf yfilter.YFilter) { sessAttributeFlags.YFilter = yf }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetGoName(yname string) string {
    if yname == "is-local-protect" { return "IsLocalProtect" }
    if yname == "is-node-protect" { return "IsNodeProtect" }
    if yname == "is-bandwidth-protect" { return "IsBandwidthProtect" }
    if yname == "is-record-labels" { return "IsRecordLabels" }
    if yname == "is-shared-explicit-requested" { return "IsSharedExplicitRequested" }
    return ""
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetSegmentPath() string {
    return "sess-attribute-flags"
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-protect"] = sessAttributeFlags.IsLocalProtect
    leafs["is-node-protect"] = sessAttributeFlags.IsNodeProtect
    leafs["is-bandwidth-protect"] = sessAttributeFlags.IsBandwidthProtect
    leafs["is-record-labels"] = sessAttributeFlags.IsRecordLabels
    leafs["is-shared-explicit-requested"] = sessAttributeFlags.IsSharedExplicitRequested
    return leafs
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetBundleName() string { return "cisco_ios_xr" }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetYangName() string { return "sess-attribute-flags" }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) SetParent(parent types.Entity) { sessAttributeFlags.parent = parent }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetParent() types.Entity { return sessAttributeFlags.parent }

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetParentYangName() string { return "session-attribute" }

// RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec
// RSVP Traffic Spec Info
type RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetParentYangName() string { return "psb-brief" }

// RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetParentYangName() string { return "psb-brief" }

// RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// RsvpStandby_GlobalNeighborBriefs
// Table of brief info about global neighbors
type RsvpStandby_GlobalNeighborBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single global neighbor. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief.
    GlobalNeighborBrief []RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetFilter() yfilter.YFilter { return globalNeighborBriefs.YFilter }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) SetFilter(yf yfilter.YFilter) { globalNeighborBriefs.YFilter = yf }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetGoName(yname string) string {
    if yname == "global-neighbor-brief" { return "GlobalNeighborBrief" }
    return ""
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetSegmentPath() string {
    return "global-neighbor-briefs"
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-brief" {
        for _, c := range globalNeighborBriefs.GlobalNeighborBrief {
            if globalNeighborBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief{}
        globalNeighborBriefs.GlobalNeighborBrief = append(globalNeighborBriefs.GlobalNeighborBrief, child)
        return &globalNeighborBriefs.GlobalNeighborBrief[len(globalNeighborBriefs.GlobalNeighborBrief)-1]
    }
    return nil
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalNeighborBriefs.GlobalNeighborBrief {
        children[globalNeighborBriefs.GlobalNeighborBrief[i].GetSegmentPath()] = &globalNeighborBriefs.GlobalNeighborBrief[i]
    }
    return children
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetYangName() string { return "global-neighbor-briefs" }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) SetParent(parent types.Entity) { globalNeighborBriefs.parent = parent }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetParent() types.Entity { return globalNeighborBriefs.parent }

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetParentYangName() string { return "rsvp-standby" }

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief
// Brief info for a single global neighbor
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // Local node address. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalNodeAddress []interface{}

    // Neighbor Hello state. The type is slice of RsvpMgmtHelloState.
    NeighborHelloState []interface{}

    // Reason why communication was lost. The type is slice of
    // RsvpMgmtHelloDownReason.
    LostCommunicationReason []interface{}

    // Total number of times communication got lost. The type is slice of
    // interface{} with range: 0..65535.
    LostCommunicationTotal []interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags

    // Time hellos have been up. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime.
    UpTime []RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime

    // Time when communication was lost. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime.
    LostCommunicationTime []RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetFilter() yfilter.YFilter { return globalNeighborBrief.YFilter }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) SetFilter(yf yfilter.YFilter) { globalNeighborBrief.YFilter = yf }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "is-gr-enabled" { return "IsGrEnabled" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "restart-state" { return "RestartState" }
    if yname == "local-node-address" { return "LocalNodeAddress" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "lost-communication-reason" { return "LostCommunicationReason" }
    if yname == "lost-communication-total" { return "LostCommunicationTotal" }
    if yname == "global-neighbor-flags" { return "GlobalNeighborFlags" }
    if yname == "up-time" { return "UpTime" }
    if yname == "lost-communication-time" { return "LostCommunicationTime" }
    return ""
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetSegmentPath() string {
    return "global-neighbor-brief" + "[neighbor-address='" + fmt.Sprintf("%v", globalNeighborBrief.NeighborAddress) + "']"
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-flags" {
        return &globalNeighborBrief.GlobalNeighborFlags
    }
    if childYangName == "up-time" {
        for _, c := range globalNeighborBrief.UpTime {
            if globalNeighborBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime{}
        globalNeighborBrief.UpTime = append(globalNeighborBrief.UpTime, child)
        return &globalNeighborBrief.UpTime[len(globalNeighborBrief.UpTime)-1]
    }
    if childYangName == "lost-communication-time" {
        for _, c := range globalNeighborBrief.LostCommunicationTime {
            if globalNeighborBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime{}
        globalNeighborBrief.LostCommunicationTime = append(globalNeighborBrief.LostCommunicationTime, child)
        return &globalNeighborBrief.LostCommunicationTime[len(globalNeighborBrief.LostCommunicationTime)-1]
    }
    return nil
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-neighbor-flags"] = &globalNeighborBrief.GlobalNeighborFlags
    for i := range globalNeighborBrief.UpTime {
        children[globalNeighborBrief.UpTime[i].GetSegmentPath()] = &globalNeighborBrief.UpTime[i]
    }
    for i := range globalNeighborBrief.LostCommunicationTime {
        children[globalNeighborBrief.LostCommunicationTime[i].GetSegmentPath()] = &globalNeighborBrief.LostCommunicationTime[i]
    }
    return children
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = globalNeighborBrief.NeighborAddress
    leafs["is-gr-enabled"] = globalNeighborBrief.IsGrEnabled
    leafs["node-address"] = globalNeighborBrief.NodeAddress
    leafs["restart-state"] = globalNeighborBrief.RestartState
    leafs["local-node-address"] = globalNeighborBrief.LocalNodeAddress
    leafs["neighbor-hello-state"] = globalNeighborBrief.NeighborHelloState
    leafs["lost-communication-reason"] = globalNeighborBrief.LostCommunicationReason
    leafs["lost-communication-total"] = globalNeighborBrief.LostCommunicationTotal
    return leafs
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetYangName() string { return "global-neighbor-brief" }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) SetParent(parent types.Entity) { globalNeighborBrief.parent = parent }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetParent() types.Entity { return globalNeighborBrief.parent }

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetParentYangName() string { return "global-neighbor-briefs" }

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags
// Global Neighbor Flags
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetFilter() yfilter.YFilter { return globalNeighborFlags.YFilter }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) SetFilter(yf yfilter.YFilter) { globalNeighborFlags.YFilter = yf }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetGoName(yname string) string {
    if yname == "is-application-ouni" { return "IsApplicationOuni" }
    if yname == "is-application-mpls" { return "IsApplicationMpls" }
    return ""
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetSegmentPath() string {
    return "global-neighbor-flags"
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-application-ouni"] = globalNeighborFlags.IsApplicationOuni
    leafs["is-application-mpls"] = globalNeighborFlags.IsApplicationMpls
    return leafs
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetYangName() string { return "global-neighbor-flags" }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) SetParent(parent types.Entity) { globalNeighborFlags.parent = parent }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetParent() types.Entity { return globalNeighborFlags.parent }

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetParentYangName() string { return "global-neighbor-brief" }

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime
// Time hellos have been up
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetFilter() yfilter.YFilter { return upTime.YFilter }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) SetFilter(yf yfilter.YFilter) { upTime.YFilter = yf }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetSegmentPath() string {
    return "up-time"
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = upTime.Seconds
    leafs["nanoseconds"] = upTime.Nanoseconds
    return leafs
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetBundleName() string { return "cisco_ios_xr" }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetYangName() string { return "up-time" }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) SetParent(parent types.Entity) { upTime.parent = parent }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetParent() types.Entity { return upTime.parent }

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetParentYangName() string { return "global-neighbor-brief" }

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
// Time when communication was lost
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetFilter() yfilter.YFilter { return lostCommunicationTime.YFilter }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) SetFilter(yf yfilter.YFilter) { lostCommunicationTime.YFilter = yf }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetSegmentPath() string {
    return "lost-communication-time"
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lostCommunicationTime.Seconds
    leafs["nanoseconds"] = lostCommunicationTime.Nanoseconds
    return leafs
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetBundleName() string { return "cisco_ios_xr" }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetYangName() string { return "lost-communication-time" }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) SetParent(parent types.Entity) { lostCommunicationTime.parent = parent }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetParent() types.Entity { return lostCommunicationTime.parent }

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetParentYangName() string { return "global-neighbor-brief" }

// Rsvp
// rsvp
type Rsvp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP ISSU information.
    Issu Rsvp_Issu

    // All B/W Pool info.
    BwPoolInfo Rsvp_BwPoolInfo

    // Table of detailed PXSB info.
    PxsbDetails Rsvp_PxsbDetails

    // Table of detailed RXSB info.
    RxsbDetails Rsvp_RxsbDetails

    // Table of brief info about I/F neighbors.
    InterfaceNeighborBriefs Rsvp_InterfaceNeighborBriefs

    // Table of summary info about RSVP-enabled controllers.
    ControllerSummaries Rsvp_ControllerSummaries

    // Table for Authentication related information.
    AuthenticationBriefs Rsvp_AuthenticationBriefs

    // Table of brief info about sessions.
    SessionBriefs Rsvp_SessionBriefs

    // Table of detailed info about path state blocks.
    PsbDetaileds Rsvp_PsbDetaileds

    // Table of detailed info about RSVP-enabled controllers.
    ControllerDetaileds Rsvp_ControllerDetaileds

    // Fast Re-Route Summary State Information.
    FrrSummary Rsvp_FrrSummary

    // Table of detailed info about reservation state blocks.
    RsbDetaileds Rsvp_RsbDetaileds

    // Table of summary info about RSVP-enabled interfaces.
    InterfaceSummaries Rsvp_InterfaceSummaries

    // Table of brief info about hello instances.
    HelloInstanceBriefs Rsvp_HelloInstanceBriefs

    // Table for detailed authentication related information.
    AuthenticationDetails Rsvp_AuthenticationDetails

    // Table of brief info about reservation state blocks.
    RsbBriefs Rsvp_RsbBriefs

    // OpenConfig info.
    OpenConfig Rsvp_OpenConfig

    // Counters.
    Counters Rsvp_Counters

    // Table of detailed info about RSVP-enabled interfaces.
    InterfaceDetaileds Rsvp_InterfaceDetaileds

    // Table of brief info about RSVP-enabled controller.
    ControllerBriefs Rsvp_ControllerBriefs

    // Info about graceful-restart.
    GracefulRestart Rsvp_GracefulRestart

    // Table of brief info about i/f-based hello instances.
    HelloInterfaceInstanceBriefs Rsvp_HelloInterfaceInstanceBriefs

    // Table of detailed info about i/f-based hello instances.
    HelloInterfaceInstanceDetails Rsvp_HelloInterfaceInstanceDetails

    // Table of detailed info about I/F neighbors.
    InterfaceNeighborDetails Rsvp_InterfaceNeighborDetails

    // RSVP NSR information.
    Nsr Rsvp_Nsr

    // RSVP summary information.
    Summary Rsvp_Summary

    // Table of detailed info about Fast Re-route states.
    Frrs Rsvp_Frrs

    // Table of brief info about requests.
    RequestBriefs Rsvp_RequestBriefs

    // Table of detail info about requests.
    RequestDetails Rsvp_RequestDetails

    // Table of brief info about RSVP-enabled interfaces.
    InterfaceBriefs Rsvp_InterfaceBriefs

    // Table of detailed info about sessions.
    SessionDetaileds Rsvp_SessionDetaileds

    // Table of detailed info about hello instances.
    HelloInstanceDetails Rsvp_HelloInstanceDetails

    // Table of detailed info about global neighbors.
    GlobalNeighborDetails Rsvp_GlobalNeighborDetails

    // Table of brief info about path state blocks.
    PsbBriefs Rsvp_PsbBriefs

    // Table of brief info about global neighbors.
    GlobalNeighborBriefs Rsvp_GlobalNeighborBriefs
}

func (rsvp *Rsvp) GetFilter() yfilter.YFilter { return rsvp.YFilter }

func (rsvp *Rsvp) SetFilter(yf yfilter.YFilter) { rsvp.YFilter = yf }

func (rsvp *Rsvp) GetGoName(yname string) string {
    if yname == "issu" { return "Issu" }
    if yname == "bw-pool-info" { return "BwPoolInfo" }
    if yname == "pxsb-details" { return "PxsbDetails" }
    if yname == "rxsb-details" { return "RxsbDetails" }
    if yname == "interface-neighbor-briefs" { return "InterfaceNeighborBriefs" }
    if yname == "controller-summaries" { return "ControllerSummaries" }
    if yname == "authentication-briefs" { return "AuthenticationBriefs" }
    if yname == "session-briefs" { return "SessionBriefs" }
    if yname == "psb-detaileds" { return "PsbDetaileds" }
    if yname == "controller-detaileds" { return "ControllerDetaileds" }
    if yname == "frr-summary" { return "FrrSummary" }
    if yname == "rsb-detaileds" { return "RsbDetaileds" }
    if yname == "interface-summaries" { return "InterfaceSummaries" }
    if yname == "hello-instance-briefs" { return "HelloInstanceBriefs" }
    if yname == "authentication-details" { return "AuthenticationDetails" }
    if yname == "rsb-briefs" { return "RsbBriefs" }
    if yname == "open-config" { return "OpenConfig" }
    if yname == "counters" { return "Counters" }
    if yname == "interface-detaileds" { return "InterfaceDetaileds" }
    if yname == "controller-briefs" { return "ControllerBriefs" }
    if yname == "graceful-restart" { return "GracefulRestart" }
    if yname == "hello-interface-instance-briefs" { return "HelloInterfaceInstanceBriefs" }
    if yname == "hello-interface-instance-details" { return "HelloInterfaceInstanceDetails" }
    if yname == "interface-neighbor-details" { return "InterfaceNeighborDetails" }
    if yname == "nsr" { return "Nsr" }
    if yname == "summary" { return "Summary" }
    if yname == "frrs" { return "Frrs" }
    if yname == "request-briefs" { return "RequestBriefs" }
    if yname == "request-details" { return "RequestDetails" }
    if yname == "interface-briefs" { return "InterfaceBriefs" }
    if yname == "session-detaileds" { return "SessionDetaileds" }
    if yname == "hello-instance-details" { return "HelloInstanceDetails" }
    if yname == "global-neighbor-details" { return "GlobalNeighborDetails" }
    if yname == "psb-briefs" { return "PsbBriefs" }
    if yname == "global-neighbor-briefs" { return "GlobalNeighborBriefs" }
    return ""
}

func (rsvp *Rsvp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ip-rsvp-oper:rsvp"
}

func (rsvp *Rsvp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "issu" {
        return &rsvp.Issu
    }
    if childYangName == "bw-pool-info" {
        return &rsvp.BwPoolInfo
    }
    if childYangName == "pxsb-details" {
        return &rsvp.PxsbDetails
    }
    if childYangName == "rxsb-details" {
        return &rsvp.RxsbDetails
    }
    if childYangName == "interface-neighbor-briefs" {
        return &rsvp.InterfaceNeighborBriefs
    }
    if childYangName == "controller-summaries" {
        return &rsvp.ControllerSummaries
    }
    if childYangName == "authentication-briefs" {
        return &rsvp.AuthenticationBriefs
    }
    if childYangName == "session-briefs" {
        return &rsvp.SessionBriefs
    }
    if childYangName == "psb-detaileds" {
        return &rsvp.PsbDetaileds
    }
    if childYangName == "controller-detaileds" {
        return &rsvp.ControllerDetaileds
    }
    if childYangName == "frr-summary" {
        return &rsvp.FrrSummary
    }
    if childYangName == "rsb-detaileds" {
        return &rsvp.RsbDetaileds
    }
    if childYangName == "interface-summaries" {
        return &rsvp.InterfaceSummaries
    }
    if childYangName == "hello-instance-briefs" {
        return &rsvp.HelloInstanceBriefs
    }
    if childYangName == "authentication-details" {
        return &rsvp.AuthenticationDetails
    }
    if childYangName == "rsb-briefs" {
        return &rsvp.RsbBriefs
    }
    if childYangName == "open-config" {
        return &rsvp.OpenConfig
    }
    if childYangName == "counters" {
        return &rsvp.Counters
    }
    if childYangName == "interface-detaileds" {
        return &rsvp.InterfaceDetaileds
    }
    if childYangName == "controller-briefs" {
        return &rsvp.ControllerBriefs
    }
    if childYangName == "graceful-restart" {
        return &rsvp.GracefulRestart
    }
    if childYangName == "hello-interface-instance-briefs" {
        return &rsvp.HelloInterfaceInstanceBriefs
    }
    if childYangName == "hello-interface-instance-details" {
        return &rsvp.HelloInterfaceInstanceDetails
    }
    if childYangName == "interface-neighbor-details" {
        return &rsvp.InterfaceNeighborDetails
    }
    if childYangName == "nsr" {
        return &rsvp.Nsr
    }
    if childYangName == "summary" {
        return &rsvp.Summary
    }
    if childYangName == "frrs" {
        return &rsvp.Frrs
    }
    if childYangName == "request-briefs" {
        return &rsvp.RequestBriefs
    }
    if childYangName == "request-details" {
        return &rsvp.RequestDetails
    }
    if childYangName == "interface-briefs" {
        return &rsvp.InterfaceBriefs
    }
    if childYangName == "session-detaileds" {
        return &rsvp.SessionDetaileds
    }
    if childYangName == "hello-instance-details" {
        return &rsvp.HelloInstanceDetails
    }
    if childYangName == "global-neighbor-details" {
        return &rsvp.GlobalNeighborDetails
    }
    if childYangName == "psb-briefs" {
        return &rsvp.PsbBriefs
    }
    if childYangName == "global-neighbor-briefs" {
        return &rsvp.GlobalNeighborBriefs
    }
    return nil
}

func (rsvp *Rsvp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["issu"] = &rsvp.Issu
    children["bw-pool-info"] = &rsvp.BwPoolInfo
    children["pxsb-details"] = &rsvp.PxsbDetails
    children["rxsb-details"] = &rsvp.RxsbDetails
    children["interface-neighbor-briefs"] = &rsvp.InterfaceNeighborBriefs
    children["controller-summaries"] = &rsvp.ControllerSummaries
    children["authentication-briefs"] = &rsvp.AuthenticationBriefs
    children["session-briefs"] = &rsvp.SessionBriefs
    children["psb-detaileds"] = &rsvp.PsbDetaileds
    children["controller-detaileds"] = &rsvp.ControllerDetaileds
    children["frr-summary"] = &rsvp.FrrSummary
    children["rsb-detaileds"] = &rsvp.RsbDetaileds
    children["interface-summaries"] = &rsvp.InterfaceSummaries
    children["hello-instance-briefs"] = &rsvp.HelloInstanceBriefs
    children["authentication-details"] = &rsvp.AuthenticationDetails
    children["rsb-briefs"] = &rsvp.RsbBriefs
    children["open-config"] = &rsvp.OpenConfig
    children["counters"] = &rsvp.Counters
    children["interface-detaileds"] = &rsvp.InterfaceDetaileds
    children["controller-briefs"] = &rsvp.ControllerBriefs
    children["graceful-restart"] = &rsvp.GracefulRestart
    children["hello-interface-instance-briefs"] = &rsvp.HelloInterfaceInstanceBriefs
    children["hello-interface-instance-details"] = &rsvp.HelloInterfaceInstanceDetails
    children["interface-neighbor-details"] = &rsvp.InterfaceNeighborDetails
    children["nsr"] = &rsvp.Nsr
    children["summary"] = &rsvp.Summary
    children["frrs"] = &rsvp.Frrs
    children["request-briefs"] = &rsvp.RequestBriefs
    children["request-details"] = &rsvp.RequestDetails
    children["interface-briefs"] = &rsvp.InterfaceBriefs
    children["session-detaileds"] = &rsvp.SessionDetaileds
    children["hello-instance-details"] = &rsvp.HelloInstanceDetails
    children["global-neighbor-details"] = &rsvp.GlobalNeighborDetails
    children["psb-briefs"] = &rsvp.PsbBriefs
    children["global-neighbor-briefs"] = &rsvp.GlobalNeighborBriefs
    return children
}

func (rsvp *Rsvp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rsvp *Rsvp) GetBundleName() string { return "cisco_ios_xr" }

func (rsvp *Rsvp) GetYangName() string { return "rsvp" }

func (rsvp *Rsvp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvp *Rsvp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvp *Rsvp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvp *Rsvp) SetParent(parent types.Entity) { rsvp.parent = parent }

func (rsvp *Rsvp) GetParent() types.Entity { return rsvp.parent }

func (rsvp *Rsvp) GetParentYangName() string { return "Cisco-IOS-XR-ip-rsvp-oper" }

// Rsvp_Issu
// RSVP ISSU information
type Rsvp_Issu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP ISSU status information.
    Status Rsvp_Issu_Status
}

func (issu *Rsvp_Issu) GetFilter() yfilter.YFilter { return issu.YFilter }

func (issu *Rsvp_Issu) SetFilter(yf yfilter.YFilter) { issu.YFilter = yf }

func (issu *Rsvp_Issu) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    return ""
}

func (issu *Rsvp_Issu) GetSegmentPath() string {
    return "issu"
}

func (issu *Rsvp_Issu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status" {
        return &issu.Status
    }
    return nil
}

func (issu *Rsvp_Issu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status"] = &issu.Status
    return children
}

func (issu *Rsvp_Issu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (issu *Rsvp_Issu) GetBundleName() string { return "cisco_ios_xr" }

func (issu *Rsvp_Issu) GetYangName() string { return "issu" }

func (issu *Rsvp_Issu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issu *Rsvp_Issu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issu *Rsvp_Issu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issu *Rsvp_Issu) SetParent(parent types.Entity) { issu.parent = parent }

func (issu *Rsvp_Issu) GetParent() types.Entity { return issu.parent }

func (issu *Rsvp_Issu) GetParentYangName() string { return "rsvp" }

// Rsvp_Issu_Status
// RSVP ISSU status information
type Rsvp_Issu_Status struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Issu_Status_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Issu_Status_PreviousIdtStatus
}

func (status *Rsvp_Issu_Status) GetFilter() yfilter.YFilter { return status.YFilter }

func (status *Rsvp_Issu_Status) SetFilter(yf yfilter.YFilter) { status.YFilter = yf }

func (status *Rsvp_Issu_Status) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (status *Rsvp_Issu_Status) GetSegmentPath() string {
    return "status"
}

func (status *Rsvp_Issu_Status) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &status.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &status.PreviousIdtStatus
    }
    return nil
}

func (status *Rsvp_Issu_Status) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &status.IdtStatus
    children["previous-idt-status"] = &status.PreviousIdtStatus
    return children
}

func (status *Rsvp_Issu_Status) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = status.Role
    return leafs
}

func (status *Rsvp_Issu_Status) GetBundleName() string { return "cisco_ios_xr" }

func (status *Rsvp_Issu_Status) GetYangName() string { return "status" }

func (status *Rsvp_Issu_Status) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (status *Rsvp_Issu_Status) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (status *Rsvp_Issu_Status) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (status *Rsvp_Issu_Status) SetParent(parent types.Entity) { status.parent = parent }

func (status *Rsvp_Issu_Status) GetParent() types.Entity { return status.parent }

func (status *Rsvp_Issu_Status) GetParentYangName() string { return "issu" }

// Rsvp_Issu_Status_IdtStatus
// IDT status
type Rsvp_Issu_Status_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetParentYangName() string { return "status" }

// Rsvp_Issu_Status_PreviousIdtStatus
// Previous IDT status
type Rsvp_Issu_Status_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetParentYangName() string { return "status" }

// Rsvp_BwPoolInfo
// All B/W Pool info
type Rsvp_BwPoolInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maxium reservable I/F percent B/W. The type is interface{} with range:
    // 0..4294967295. Units are percentage.
    MaxResPoolPercent interface{}

    // BC0 I/F percent B/W. The type is interface{} with range: 0..4294967295.
    // Units are percentage.
    Bc0Percent interface{}

    // BC1 I/F percent B/W. The type is interface{} with range: 0..4294967295.
    // Units are percentage.
    Bc1Percent interface{}

    // Is maximum reservable default I/F percent configured. The type is bool.
    IsMaxResPoolPercentConfigured interface{}

    // Is BC0 default I/F percent configured. The type is bool.
    IsBc0PercentConfigured interface{}

    // Is BC1 default I/F percent configured. The type is bool.
    IsBc1PercentConfigured interface{}

    // Bandwith configuration model currently in use (MAM/RDM). The type is
    // IgpteLibBwModel.
    BandwidthConfigurationModel interface{}
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetFilter() yfilter.YFilter { return bwPoolInfo.YFilter }

func (bwPoolInfo *Rsvp_BwPoolInfo) SetFilter(yf yfilter.YFilter) { bwPoolInfo.YFilter = yf }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetGoName(yname string) string {
    if yname == "max-res-pool-percent" { return "MaxResPoolPercent" }
    if yname == "bc0-percent" { return "Bc0Percent" }
    if yname == "bc1-percent" { return "Bc1Percent" }
    if yname == "is-max-res-pool-percent-configured" { return "IsMaxResPoolPercentConfigured" }
    if yname == "is-bc0-percent-configured" { return "IsBc0PercentConfigured" }
    if yname == "is-bc1-percent-configured" { return "IsBc1PercentConfigured" }
    if yname == "bandwidth-configuration-model" { return "BandwidthConfigurationModel" }
    return ""
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetSegmentPath() string {
    return "bw-pool-info"
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-res-pool-percent"] = bwPoolInfo.MaxResPoolPercent
    leafs["bc0-percent"] = bwPoolInfo.Bc0Percent
    leafs["bc1-percent"] = bwPoolInfo.Bc1Percent
    leafs["is-max-res-pool-percent-configured"] = bwPoolInfo.IsMaxResPoolPercentConfigured
    leafs["is-bc0-percent-configured"] = bwPoolInfo.IsBc0PercentConfigured
    leafs["is-bc1-percent-configured"] = bwPoolInfo.IsBc1PercentConfigured
    leafs["bandwidth-configuration-model"] = bwPoolInfo.BandwidthConfigurationModel
    return leafs
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetBundleName() string { return "cisco_ios_xr" }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetYangName() string { return "bw-pool-info" }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bwPoolInfo *Rsvp_BwPoolInfo) SetParent(parent types.Entity) { bwPoolInfo.parent = parent }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetParent() types.Entity { return bwPoolInfo.parent }

func (bwPoolInfo *Rsvp_BwPoolInfo) GetParentYangName() string { return "rsvp" }

// Rsvp_PxsbDetails
// Table of detailed PXSB info
type Rsvp_PxsbDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed PXSB info. The type is slice of Rsvp_PxsbDetails_PxsbDetail.
    PxsbDetail []Rsvp_PxsbDetails_PxsbDetail
}

func (pxsbDetails *Rsvp_PxsbDetails) GetFilter() yfilter.YFilter { return pxsbDetails.YFilter }

func (pxsbDetails *Rsvp_PxsbDetails) SetFilter(yf yfilter.YFilter) { pxsbDetails.YFilter = yf }

func (pxsbDetails *Rsvp_PxsbDetails) GetGoName(yname string) string {
    if yname == "pxsb-detail" { return "PxsbDetail" }
    return ""
}

func (pxsbDetails *Rsvp_PxsbDetails) GetSegmentPath() string {
    return "pxsb-details"
}

func (pxsbDetails *Rsvp_PxsbDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pxsb-detail" {
        for _, c := range pxsbDetails.PxsbDetail {
            if pxsbDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_PxsbDetails_PxsbDetail{}
        pxsbDetails.PxsbDetail = append(pxsbDetails.PxsbDetail, child)
        return &pxsbDetails.PxsbDetail[len(pxsbDetails.PxsbDetail)-1]
    }
    return nil
}

func (pxsbDetails *Rsvp_PxsbDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range pxsbDetails.PxsbDetail {
        children[pxsbDetails.PxsbDetail[i].GetSegmentPath()] = &pxsbDetails.PxsbDetail[i]
    }
    return children
}

func (pxsbDetails *Rsvp_PxsbDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (pxsbDetails *Rsvp_PxsbDetails) GetBundleName() string { return "cisco_ios_xr" }

func (pxsbDetails *Rsvp_PxsbDetails) GetYangName() string { return "pxsb-details" }

func (pxsbDetails *Rsvp_PxsbDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pxsbDetails *Rsvp_PxsbDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pxsbDetails *Rsvp_PxsbDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pxsbDetails *Rsvp_PxsbDetails) SetParent(parent types.Entity) { pxsbDetails.parent = parent }

func (pxsbDetails *Rsvp_PxsbDetails) GetParent() types.Entity { return pxsbDetails.parent }

func (pxsbDetails *Rsvp_PxsbDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_PxsbDetails_PxsbDetail
// Detailed PXSB info
type Rsvp_PxsbDetails_PxsbDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Dynamic State Handle. The type is interface{} with range: 0..4294967295.
    DynamicState interface{}

    // RSVP Session Information.
    Session Rsvp_PxsbDetails_PxsbDetail_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp

    // RSVP Template.
    Template Rsvp_PxsbDetails_PxsbDetail_Template

    // RSVP Traffic Spec Info.
    TrafficSpec Rsvp_PxsbDetails_PxsbDetail_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec

    // Path Hop Info.
    Hop Rsvp_PxsbDetails_PxsbDetail_Hop

    // RSVP Header.
    RsvpHeader Rsvp_PxsbDetails_PxsbDetail_RsvpHeader
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetFilter() yfilter.YFilter { return pxsbDetail.YFilter }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) SetFilter(yf yfilter.YFilter) { pxsbDetail.YFilter = yf }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "dynamic-state" { return "DynamicState" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "template" { return "Template" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "hop" { return "Hop" }
    if yname == "rsvp-header" { return "RsvpHeader" }
    return ""
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetSegmentPath() string {
    return "pxsb-detail"
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &pxsbDetail.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &pxsbDetail.S2LSubLsp
    }
    if childYangName == "template" {
        return &pxsbDetail.Template
    }
    if childYangName == "traffic-spec" {
        return &pxsbDetail.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &pxsbDetail.GenericTrafficSpec
    }
    if childYangName == "hop" {
        return &pxsbDetail.Hop
    }
    if childYangName == "rsvp-header" {
        return &pxsbDetail.RsvpHeader
    }
    return nil
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &pxsbDetail.Session
    children["s2l-sub-lsp"] = &pxsbDetail.S2LSubLsp
    children["template"] = &pxsbDetail.Template
    children["traffic-spec"] = &pxsbDetail.TrafficSpec
    children["generic-traffic-spec"] = &pxsbDetail.GenericTrafficSpec
    children["hop"] = &pxsbDetail.Hop
    children["rsvp-header"] = &pxsbDetail.RsvpHeader
    return children
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = pxsbDetail.DestinationAddress
    leafs["destination-port"] = pxsbDetail.DestinationPort
    leafs["protocol"] = pxsbDetail.Protocol
    leafs["extended-tunnel-id"] = pxsbDetail.ExtendedTunnelId
    leafs["session-type"] = pxsbDetail.SessionType
    leafs["p2mp-id"] = pxsbDetail.P2MpId
    leafs["source-address"] = pxsbDetail.SourceAddress
    leafs["source-port"] = pxsbDetail.SourcePort
    leafs["sub-group-origin"] = pxsbDetail.SubGroupOrigin
    leafs["sub-group-id"] = pxsbDetail.SubGroupId
    leafs["vrf-name"] = pxsbDetail.VrfName
    leafs["input-interface"] = pxsbDetail.InputInterface
    leafs["dynamic-state"] = pxsbDetail.DynamicState
    return leafs
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetBundleName() string { return "cisco_ios_xr" }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetYangName() string { return "pxsb-detail" }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) SetParent(parent types.Entity) { pxsbDetail.parent = parent }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetParent() types.Entity { return pxsbDetail.parent }

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetParentYangName() string { return "pxsb-details" }

// Rsvp_PxsbDetails_PxsbDetail_Session
// RSVP Session Information
type Rsvp_PxsbDetails_PxsbDetail_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetYangName() string { return "session" }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession
// RSVP Session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2LSubLsp) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_PxsbDetails_PxsbDetail_Template
// RSVP Template
type Rsvp_PxsbDetails_PxsbDetail_Template struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetFilter() yfilter.YFilter { return template.YFilter }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) SetFilter(yf yfilter.YFilter) { template.YFilter = yf }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetSegmentPath() string {
    return "template"
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &template.RsvpFilter
    }
    return nil
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &template.RsvpFilter
    return children
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetBundleName() string { return "cisco_ios_xr" }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetYangName() string { return "template" }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) SetParent(parent types.Entity) { template.parent = parent }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetParent() types.Entity { return template.parent }

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter
// RSVP Filter
type Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetParentYangName() string { return "template" }

// Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_PxsbDetails_PxsbDetail_TrafficSpec
// RSVP Traffic Spec Info
type Rsvp_PxsbDetails_PxsbDetail_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_PxsbDetails_PxsbDetail_Hop
// Path Hop Info
type Rsvp_PxsbDetails_PxsbDetail_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetYangName() string { return "hop" }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetParent() types.Entity { return hop.parent }

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_PxsbDetails_PxsbDetail_RsvpHeader
// RSVP Header
type Rsvp_PxsbDetails_PxsbDetail_RsvpHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetFilter() yfilter.YFilter { return rsvpHeader.YFilter }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) SetFilter(yf yfilter.YFilter) { rsvpHeader.YFilter = yf }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetSegmentPath() string {
    return "rsvp-header"
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = rsvpHeader.RsvpVersion
    leafs["rsvp-header-flags"] = rsvpHeader.RsvpHeaderFlags
    leafs["rsvp-ttl"] = rsvpHeader.RsvpTtl
    leafs["rsvp-message-type"] = rsvpHeader.RsvpMessageType
    leafs["ip-tos"] = rsvpHeader.IpTos
    leafs["ip-ttl"] = rsvpHeader.IpTtl
    leafs["ip-source-address"] = rsvpHeader.IpSourceAddress
    return leafs
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetYangName() string { return "rsvp-header" }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) SetParent(parent types.Entity) { rsvpHeader.parent = parent }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetParent() types.Entity { return rsvpHeader.parent }

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetParentYangName() string { return "pxsb-detail" }

// Rsvp_RxsbDetails
// Table of detailed RXSB info
type Rsvp_RxsbDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed RXSB info. The type is slice of Rsvp_RxsbDetails_RxsbDetail.
    RxsbDetail []Rsvp_RxsbDetails_RxsbDetail
}

func (rxsbDetails *Rsvp_RxsbDetails) GetFilter() yfilter.YFilter { return rxsbDetails.YFilter }

func (rxsbDetails *Rsvp_RxsbDetails) SetFilter(yf yfilter.YFilter) { rxsbDetails.YFilter = yf }

func (rxsbDetails *Rsvp_RxsbDetails) GetGoName(yname string) string {
    if yname == "rxsb-detail" { return "RxsbDetail" }
    return ""
}

func (rxsbDetails *Rsvp_RxsbDetails) GetSegmentPath() string {
    return "rxsb-details"
}

func (rxsbDetails *Rsvp_RxsbDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rxsb-detail" {
        for _, c := range rxsbDetails.RxsbDetail {
            if rxsbDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RxsbDetails_RxsbDetail{}
        rxsbDetails.RxsbDetail = append(rxsbDetails.RxsbDetail, child)
        return &rxsbDetails.RxsbDetail[len(rxsbDetails.RxsbDetail)-1]
    }
    return nil
}

func (rxsbDetails *Rsvp_RxsbDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rxsbDetails.RxsbDetail {
        children[rxsbDetails.RxsbDetail[i].GetSegmentPath()] = &rxsbDetails.RxsbDetail[i]
    }
    return children
}

func (rxsbDetails *Rsvp_RxsbDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rxsbDetails *Rsvp_RxsbDetails) GetBundleName() string { return "cisco_ios_xr" }

func (rxsbDetails *Rsvp_RxsbDetails) GetYangName() string { return "rxsb-details" }

func (rxsbDetails *Rsvp_RxsbDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rxsbDetails *Rsvp_RxsbDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rxsbDetails *Rsvp_RxsbDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rxsbDetails *Rsvp_RxsbDetails) SetParent(parent types.Entity) { rxsbDetails.parent = parent }

func (rxsbDetails *Rsvp_RxsbDetails) GetParent() types.Entity { return rxsbDetails.parent }

func (rxsbDetails *Rsvp_RxsbDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_RxsbDetails_RxsbDetail
// Detailed RXSB info
type Rsvp_RxsbDetails_RxsbDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Dynamic State Handle. The type is interface{} with range: 0..4294967295.
    DynamicState interface{}

    // RSVP Session Information.
    Session Rsvp_RxsbDetails_RxsbDetail_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp

    // RSVP Style.
    Style Rsvp_RxsbDetails_RxsbDetail_Style

    // RSVP Filter.
    Filter Rsvp_RxsbDetails_RxsbDetail_Filter

    // Flow Spec Information.
    FlowSpec Rsvp_RxsbDetails_RxsbDetail_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec

    // Path Hop Info.
    Hop Rsvp_RxsbDetails_RxsbDetail_Hop

    // RSVP Header.
    RsvpHeader Rsvp_RxsbDetails_RxsbDetail_RsvpHeader
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetFilter() yfilter.YFilter { return rxsbDetail.YFilter }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) SetFilter(yf yfilter.YFilter) { rxsbDetail.YFilter = yf }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "dynamic-state" { return "DynamicState" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "style" { return "Style" }
    if yname == "filter" { return "Filter" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "hop" { return "Hop" }
    if yname == "rsvp-header" { return "RsvpHeader" }
    return ""
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetSegmentPath() string {
    return "rxsb-detail"
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &rxsbDetail.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &rxsbDetail.S2LSubLsp
    }
    if childYangName == "style" {
        return &rxsbDetail.Style
    }
    if childYangName == "filter" {
        return &rxsbDetail.Filter
    }
    if childYangName == "flow-spec" {
        return &rxsbDetail.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rxsbDetail.GenericFlowSpec
    }
    if childYangName == "hop" {
        return &rxsbDetail.Hop
    }
    if childYangName == "rsvp-header" {
        return &rxsbDetail.RsvpHeader
    }
    return nil
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &rxsbDetail.Session
    children["s2l-sub-lsp"] = &rxsbDetail.S2LSubLsp
    children["style"] = &rxsbDetail.Style
    children["filter"] = &rxsbDetail.Filter
    children["flow-spec"] = &rxsbDetail.FlowSpec
    children["generic-flow-spec"] = &rxsbDetail.GenericFlowSpec
    children["hop"] = &rxsbDetail.Hop
    children["rsvp-header"] = &rxsbDetail.RsvpHeader
    return children
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = rxsbDetail.DestinationAddress
    leafs["destination-port"] = rxsbDetail.DestinationPort
    leafs["protocol"] = rxsbDetail.Protocol
    leafs["extended-tunnel-id"] = rxsbDetail.ExtendedTunnelId
    leafs["session-type"] = rxsbDetail.SessionType
    leafs["p2mp-id"] = rxsbDetail.P2MpId
    leafs["source-address"] = rxsbDetail.SourceAddress
    leafs["source-port"] = rxsbDetail.SourcePort
    leafs["sub-group-origin"] = rxsbDetail.SubGroupOrigin
    leafs["sub-group-id"] = rxsbDetail.SubGroupId
    leafs["vrf-name"] = rxsbDetail.VrfName
    leafs["input-interface"] = rxsbDetail.InputInterface
    leafs["dynamic-state"] = rxsbDetail.DynamicState
    return leafs
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetBundleName() string { return "cisco_ios_xr" }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetYangName() string { return "rxsb-detail" }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) SetParent(parent types.Entity) { rxsbDetail.parent = parent }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetParent() types.Entity { return rxsbDetail.parent }

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetParentYangName() string { return "rxsb-details" }

// Rsvp_RxsbDetails_RxsbDetail_Session
// RSVP Session Information
type Rsvp_RxsbDetails_RxsbDetail_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetYangName() string { return "session" }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession
// RSVP Session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2LSubLsp) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_Style
// RSVP Style
type Rsvp_RxsbDetails_RxsbDetail_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetSegmentPath() string {
    return "style"
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetYangName() string { return "style" }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetParent() types.Entity { return style.parent }

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_Filter
// RSVP Filter
type Rsvp_RxsbDetails_RxsbDetail_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetYangName() string { return "filter" }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetParent() types.Entity { return filter.parent }

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RxsbDetails_RxsbDetail_FlowSpec
// Flow Spec Information
type Rsvp_RxsbDetails_RxsbDetail_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// Rsvp_RxsbDetails_RxsbDetail_Hop
// Path Hop Info
type Rsvp_RxsbDetails_RxsbDetail_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetYangName() string { return "hop" }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetParent() types.Entity { return hop.parent }

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_RxsbDetails_RxsbDetail_RsvpHeader
// RSVP Header
type Rsvp_RxsbDetails_RxsbDetail_RsvpHeader struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetFilter() yfilter.YFilter { return rsvpHeader.YFilter }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) SetFilter(yf yfilter.YFilter) { rsvpHeader.YFilter = yf }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetSegmentPath() string {
    return "rsvp-header"
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = rsvpHeader.RsvpVersion
    leafs["rsvp-header-flags"] = rsvpHeader.RsvpHeaderFlags
    leafs["rsvp-ttl"] = rsvpHeader.RsvpTtl
    leafs["rsvp-message-type"] = rsvpHeader.RsvpMessageType
    leafs["ip-tos"] = rsvpHeader.IpTos
    leafs["ip-ttl"] = rsvpHeader.IpTtl
    leafs["ip-source-address"] = rsvpHeader.IpSourceAddress
    return leafs
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetYangName() string { return "rsvp-header" }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) SetParent(parent types.Entity) { rsvpHeader.parent = parent }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetParent() types.Entity { return rsvpHeader.parent }

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetParentYangName() string { return "rxsb-detail" }

// Rsvp_InterfaceNeighborBriefs
// Table of brief info about I/F neighbors
type Rsvp_InterfaceNeighborBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single interface neighbor. The type is slice of
    // Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief.
    InterfaceNeighborBrief []Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetFilter() yfilter.YFilter { return interfaceNeighborBriefs.YFilter }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) SetFilter(yf yfilter.YFilter) { interfaceNeighborBriefs.YFilter = yf }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetGoName(yname string) string {
    if yname == "interface-neighbor-brief" { return "InterfaceNeighborBrief" }
    return ""
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetSegmentPath() string {
    return "interface-neighbor-briefs"
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-brief" {
        for _, c := range interfaceNeighborBriefs.InterfaceNeighborBrief {
            if interfaceNeighborBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief{}
        interfaceNeighborBriefs.InterfaceNeighborBrief = append(interfaceNeighborBriefs.InterfaceNeighborBrief, child)
        return &interfaceNeighborBriefs.InterfaceNeighborBrief[len(interfaceNeighborBriefs.InterfaceNeighborBrief)-1]
    }
    return nil
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborBriefs.InterfaceNeighborBrief {
        children[interfaceNeighborBriefs.InterfaceNeighborBrief[i].GetSegmentPath()] = &interfaceNeighborBriefs.InterfaceNeighborBrief[i]
    }
    return children
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetYangName() string { return "interface-neighbor-briefs" }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) SetParent(parent types.Entity) { interfaceNeighborBriefs.parent = parent }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetParent() types.Entity { return interfaceNeighborBriefs.parent }

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief
// Brief info for a single interface neighbor
type Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Compact list of I/F Neighbors. The type is slice of
    // Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact.
    InterfaceNeighborListCompact []Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetFilter() yfilter.YFilter { return interfaceNeighborBrief.YFilter }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) SetFilter(yf yfilter.YFilter) { interfaceNeighborBrief.YFilter = yf }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "interface-neighbor-list-compact" { return "InterfaceNeighborListCompact" }
    return ""
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetSegmentPath() string {
    return "interface-neighbor-brief" + "[neighbor-address='" + fmt.Sprintf("%v", interfaceNeighborBrief.NeighborAddress) + "']"
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-list-compact" {
        for _, c := range interfaceNeighborBrief.InterfaceNeighborListCompact {
            if interfaceNeighborBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact{}
        interfaceNeighborBrief.InterfaceNeighborListCompact = append(interfaceNeighborBrief.InterfaceNeighborListCompact, child)
        return &interfaceNeighborBrief.InterfaceNeighborListCompact[len(interfaceNeighborBrief.InterfaceNeighborListCompact)-1]
    }
    return nil
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborBrief.InterfaceNeighborListCompact {
        children[interfaceNeighborBrief.InterfaceNeighborListCompact[i].GetSegmentPath()] = &interfaceNeighborBrief.InterfaceNeighborListCompact[i]
    }
    return children
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = interfaceNeighborBrief.NeighborAddress
    leafs["node-address"] = interfaceNeighborBrief.NodeAddress
    return leafs
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetYangName() string { return "interface-neighbor-brief" }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) SetParent(parent types.Entity) { interfaceNeighborBrief.parent = parent }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetParent() types.Entity { return interfaceNeighborBrief.parent }

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetParentYangName() string { return "interface-neighbor-briefs" }

// Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
// Compact list of I/F Neighbors
type Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetFilter() yfilter.YFilter { return interfaceNeighborListCompact.YFilter }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) SetFilter(yf yfilter.YFilter) { interfaceNeighborListCompact.YFilter = yf }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetGoName(yname string) string {
    if yname == "interface-neighbor-address" { return "InterfaceNeighborAddress" }
    if yname == "neighbor-interface-name" { return "NeighborInterfaceName" }
    return ""
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetSegmentPath() string {
    return "interface-neighbor-list-compact"
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-address"] = interfaceNeighborListCompact.InterfaceNeighborAddress
    leafs["neighbor-interface-name"] = interfaceNeighborListCompact.NeighborInterfaceName
    return leafs
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetYangName() string { return "interface-neighbor-list-compact" }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) SetParent(parent types.Entity) { interfaceNeighborListCompact.parent = parent }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetParent() types.Entity { return interfaceNeighborListCompact.parent }

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetParentYangName() string { return "interface-neighbor-brief" }

// Rsvp_ControllerSummaries
// Table of summary info about RSVP-enabled
// controllers
type Rsvp_ControllerSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled controller. The type is slice of
    // Rsvp_ControllerSummaries_ControllerSummary.
    ControllerSummary []Rsvp_ControllerSummaries_ControllerSummary
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetFilter() yfilter.YFilter { return controllerSummaries.YFilter }

func (controllerSummaries *Rsvp_ControllerSummaries) SetFilter(yf yfilter.YFilter) { controllerSummaries.YFilter = yf }

func (controllerSummaries *Rsvp_ControllerSummaries) GetGoName(yname string) string {
    if yname == "controller-summary" { return "ControllerSummary" }
    return ""
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetSegmentPath() string {
    return "controller-summaries"
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller-summary" {
        for _, c := range controllerSummaries.ControllerSummary {
            if controllerSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_ControllerSummaries_ControllerSummary{}
        controllerSummaries.ControllerSummary = append(controllerSummaries.ControllerSummary, child)
        return &controllerSummaries.ControllerSummary[len(controllerSummaries.ControllerSummary)-1]
    }
    return nil
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllerSummaries.ControllerSummary {
        children[controllerSummaries.ControllerSummary[i].GetSegmentPath()] = &controllerSummaries.ControllerSummary[i]
    }
    return children
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (controllerSummaries *Rsvp_ControllerSummaries) GetYangName() string { return "controller-summaries" }

func (controllerSummaries *Rsvp_ControllerSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerSummaries *Rsvp_ControllerSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerSummaries *Rsvp_ControllerSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerSummaries *Rsvp_ControllerSummaries) SetParent(parent types.Entity) { controllerSummaries.parent = parent }

func (controllerSummaries *Rsvp_ControllerSummaries) GetParent() types.Entity { return controllerSummaries.parent }

func (controllerSummaries *Rsvp_ControllerSummaries) GetParentYangName() string { return "rsvp" }

// Rsvp_ControllerSummaries_ControllerSummary
// Summary info about an RSVP-enabled controller
type Rsvp_ControllerSummaries_ControllerSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetFilter() yfilter.YFilter { return controllerSummary.YFilter }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) SetFilter(yf yfilter.YFilter) { controllerSummary.YFilter = yf }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "paths-in" { return "PathsIn" }
    if yname == "paths-out" { return "PathsOut" }
    if yname == "reservations-in" { return "ReservationsIn" }
    if yname == "reservations-out" { return "ReservationsOut" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetSegmentPath() string {
    return "controller-summary" + "[controller-name='" + fmt.Sprintf("%v", controllerSummary.ControllerName) + "']"
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &controllerSummary.BandwidthInformation
    }
    return nil
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &controllerSummary.BandwidthInformation
    return children
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controllerSummary.ControllerName
    leafs["interface-name-xr"] = controllerSummary.InterfaceNameXr
    leafs["paths-in"] = controllerSummary.PathsIn
    leafs["paths-out"] = controllerSummary.PathsOut
    leafs["reservations-in"] = controllerSummary.ReservationsIn
    leafs["reservations-out"] = controllerSummary.ReservationsOut
    return leafs
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetBundleName() string { return "cisco_ios_xr" }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetYangName() string { return "controller-summary" }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) SetParent(parent types.Entity) { controllerSummary.parent = parent }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetParent() types.Entity { return controllerSummary.parent }

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetParentYangName() string { return "controller-summaries" }

// Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation
// Interface bandwidth information
type Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetParentYangName() string { return "controller-summary" }

// Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_AuthenticationBriefs
// Table for Authentication related information
type Rsvp_AuthenticationBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // Rsvp_AuthenticationBriefs_AuthenticationBrief.
    AuthenticationBrief []Rsvp_AuthenticationBriefs_AuthenticationBrief
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetFilter() yfilter.YFilter { return authenticationBriefs.YFilter }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) SetFilter(yf yfilter.YFilter) { authenticationBriefs.YFilter = yf }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetGoName(yname string) string {
    if yname == "authentication-brief" { return "AuthenticationBrief" }
    return ""
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetSegmentPath() string {
    return "authentication-briefs"
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication-brief" {
        for _, c := range authenticationBriefs.AuthenticationBrief {
            if authenticationBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_AuthenticationBriefs_AuthenticationBrief{}
        authenticationBriefs.AuthenticationBrief = append(authenticationBriefs.AuthenticationBrief, child)
        return &authenticationBriefs.AuthenticationBrief[len(authenticationBriefs.AuthenticationBrief)-1]
    }
    return nil
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range authenticationBriefs.AuthenticationBrief {
        children[authenticationBriefs.AuthenticationBrief[i].GetSegmentPath()] = &authenticationBriefs.AuthenticationBrief[i]
    }
    return children
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetYangName() string { return "authentication-briefs" }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) SetParent(parent types.Entity) { authenticationBriefs.parent = parent }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetParent() types.Entity { return authenticationBriefs.parent }

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_AuthenticationBriefs_AuthenticationBrief
// Brief Authentication information
type Rsvp_AuthenticationBriefs_AuthenticationBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetFilter() yfilter.YFilter { return authenticationBrief.YFilter }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) SetFilter(yf yfilter.YFilter) { authenticationBrief.YFilter = yf }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "mode-id" { return "ModeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "direction" { return "Direction" }
    if yname == "key-type" { return "KeyType" }
    if yname == "key-source" { return "KeySource" }
    if yname == "key-id" { return "KeyId" }
    if yname == "key-id-valid" { return "KeyIdValid" }
    return ""
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetSegmentPath() string {
    return "authentication-brief" + "[source-address='" + fmt.Sprintf("%v", authenticationBrief.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", authenticationBrief.DestinationAddress) + "']" + "[mode-id='" + fmt.Sprintf("%v", authenticationBrief.ModeId) + "']" + "[interface-name='" + fmt.Sprintf("%v", authenticationBrief.InterfaceName) + "']"
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = authenticationBrief.SourceAddress
    leafs["destination-address"] = authenticationBrief.DestinationAddress
    leafs["mode-id"] = authenticationBrief.ModeId
    leafs["interface-name"] = authenticationBrief.InterfaceName
    leafs["source-address-xr"] = authenticationBrief.SourceAddressXr
    leafs["destination-address-xr"] = authenticationBrief.DestinationAddressXr
    leafs["neighbor-address"] = authenticationBrief.NeighborAddress
    leafs["direction"] = authenticationBrief.Direction
    leafs["key-type"] = authenticationBrief.KeyType
    leafs["key-source"] = authenticationBrief.KeySource
    leafs["key-id"] = authenticationBrief.KeyId
    leafs["key-id-valid"] = authenticationBrief.KeyIdValid
    return leafs
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetYangName() string { return "authentication-brief" }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) SetParent(parent types.Entity) { authenticationBrief.parent = parent }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetParent() types.Entity { return authenticationBrief.parent }

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetParentYangName() string { return "authentication-briefs" }

// Rsvp_SessionBriefs
// Table of brief info about sessions
type Rsvp_SessionBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info about session. The type is slice of
    // Rsvp_SessionBriefs_SessionBrief.
    SessionBrief []Rsvp_SessionBriefs_SessionBrief
}

func (sessionBriefs *Rsvp_SessionBriefs) GetFilter() yfilter.YFilter { return sessionBriefs.YFilter }

func (sessionBriefs *Rsvp_SessionBriefs) SetFilter(yf yfilter.YFilter) { sessionBriefs.YFilter = yf }

func (sessionBriefs *Rsvp_SessionBriefs) GetGoName(yname string) string {
    if yname == "session-brief" { return "SessionBrief" }
    return ""
}

func (sessionBriefs *Rsvp_SessionBriefs) GetSegmentPath() string {
    return "session-briefs"
}

func (sessionBriefs *Rsvp_SessionBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-brief" {
        for _, c := range sessionBriefs.SessionBrief {
            if sessionBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionBriefs_SessionBrief{}
        sessionBriefs.SessionBrief = append(sessionBriefs.SessionBrief, child)
        return &sessionBriefs.SessionBrief[len(sessionBriefs.SessionBrief)-1]
    }
    return nil
}

func (sessionBriefs *Rsvp_SessionBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionBriefs.SessionBrief {
        children[sessionBriefs.SessionBrief[i].GetSegmentPath()] = &sessionBriefs.SessionBrief[i]
    }
    return children
}

func (sessionBriefs *Rsvp_SessionBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionBriefs *Rsvp_SessionBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (sessionBriefs *Rsvp_SessionBriefs) GetYangName() string { return "session-briefs" }

func (sessionBriefs *Rsvp_SessionBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionBriefs *Rsvp_SessionBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionBriefs *Rsvp_SessionBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionBriefs *Rsvp_SessionBriefs) SetParent(parent types.Entity) { sessionBriefs.parent = parent }

func (sessionBriefs *Rsvp_SessionBriefs) GetParent() types.Entity { return sessionBriefs.parent }

func (sessionBriefs *Rsvp_SessionBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_SessionBriefs_SessionBrief
// Brief info about session
type Rsvp_SessionBriefs_SessionBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session Rsvp_SessionBriefs_SessionBrief_Session
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetFilter() yfilter.YFilter { return sessionBrief.YFilter }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) SetFilter(yf yfilter.YFilter) { sessionBrief.YFilter = yf }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "ps-bs" { return "PsBs" }
    if yname == "rs-bs" { return "RsBs" }
    if yname == "requests" { return "Requests" }
    if yname == "detail-list-size" { return "DetailListSize" }
    if yname == "session" { return "Session" }
    return ""
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetSegmentPath() string {
    return "session-brief"
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &sessionBrief.Session
    }
    return nil
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &sessionBrief.Session
    return children
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = sessionBrief.DestinationAddress
    leafs["destination-port"] = sessionBrief.DestinationPort
    leafs["protocol"] = sessionBrief.Protocol
    leafs["extended-tunnel-id"] = sessionBrief.ExtendedTunnelId
    leafs["session-type"] = sessionBrief.SessionType
    leafs["p2mp-id"] = sessionBrief.P2MpId
    leafs["vrf-name"] = sessionBrief.VrfName
    leafs["ps-bs"] = sessionBrief.PsBs
    leafs["rs-bs"] = sessionBrief.RsBs
    leafs["requests"] = sessionBrief.Requests
    leafs["detail-list-size"] = sessionBrief.DetailListSize
    return leafs
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetBundleName() string { return "cisco_ios_xr" }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetYangName() string { return "session-brief" }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) SetParent(parent types.Entity) { sessionBrief.parent = parent }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetParent() types.Entity { return sessionBrief.parent }

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetParentYangName() string { return "session-briefs" }

// Rsvp_SessionBriefs_SessionBrief_Session
// RSVP Session Information
type Rsvp_SessionBriefs_SessionBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetYangName() string { return "session" }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetParentYangName() string { return "session-brief" }

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession
// RSVP Session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbDetaileds
// Table of detailed info about path state blocks
type Rsvp_PsbDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single path state block. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed.
    PsbDetailed []Rsvp_PsbDetaileds_PsbDetailed
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetFilter() yfilter.YFilter { return psbDetaileds.YFilter }

func (psbDetaileds *Rsvp_PsbDetaileds) SetFilter(yf yfilter.YFilter) { psbDetaileds.YFilter = yf }

func (psbDetaileds *Rsvp_PsbDetaileds) GetGoName(yname string) string {
    if yname == "psb-detailed" { return "PsbDetailed" }
    return ""
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetSegmentPath() string {
    return "psb-detaileds"
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "psb-detailed" {
        for _, c := range psbDetaileds.PsbDetailed {
            if psbDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_PsbDetaileds_PsbDetailed{}
        psbDetaileds.PsbDetailed = append(psbDetaileds.PsbDetailed, child)
        return &psbDetaileds.PsbDetailed[len(psbDetaileds.PsbDetailed)-1]
    }
    return nil
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range psbDetaileds.PsbDetailed {
        children[psbDetaileds.PsbDetailed[i].GetSegmentPath()] = &psbDetaileds.PsbDetailed[i]
    }
    return children
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (psbDetaileds *Rsvp_PsbDetaileds) GetYangName() string { return "psb-detaileds" }

func (psbDetaileds *Rsvp_PsbDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbDetaileds *Rsvp_PsbDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbDetaileds *Rsvp_PsbDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbDetaileds *Rsvp_PsbDetaileds) SetParent(parent types.Entity) { psbDetaileds.parent = parent }

func (psbDetaileds *Rsvp_PsbDetaileds) GetParent() types.Entity { return psbDetaileds.parent }

func (psbDetaileds *Rsvp_PsbDetaileds) GetParentYangName() string { return "rsvp" }

// Rsvp_PsbDetaileds_PsbDetailed
// Detailed info for a single path state block
type Rsvp_PsbDetaileds_PsbDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Path Backup Tunnel. The type is string.
    BackupTunnelName interface{}

    // Incoming ERO validity. The type is bool.
    IsInEroValid interface{}

    // Outgoing ERO validity. The type is bool.
    IsOutEroValid interface{}

    // RSVP Session Information.
    Session Rsvp_PsbDetaileds_PsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp

    // RSVP Template.
    Template Rsvp_PsbDetaileds_PsbDetailed_Template

    // RSVP Session Attribute.
    SessionAttribute Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec

    // Path Flags.
    PathFlags Rsvp_PsbDetaileds_PsbDetailed_PathFlags

    // Path Hop Info.
    Hop Rsvp_PsbDetaileds_PsbDetailed_Hop

    // Policy Sources Info.
    PolicySourceInfo Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo

    // RSVP Header Info.
    Header Rsvp_PsbDetaileds_PsbDetailed_Header

    // Expiry Time.
    ExpiryTime Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime

    // Policy Flags.
    PolicyFlags Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo Rsvp_PsbDetaileds_PsbDetailed_LabelInfo

    // DS-TE Class-Type.
    ClassType Rsvp_PsbDetaileds_PsbDetailed_ClassType

    // Path Forwarding Contexts. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_Pfc.
    Pfc []Rsvp_PsbDetaileds_PsbDetailed_Pfc

    // Incoming Explicit Route Sub Objects. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_InEro.
    InEro []Rsvp_PsbDetaileds_PsbDetailed_InEro

    // Outgoing Explicit Route Sub Objects. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_OutEro.
    OutEro []Rsvp_PsbDetaileds_PsbDetailed_OutEro
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetFilter() yfilter.YFilter { return psbDetailed.YFilter }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) SetFilter(yf yfilter.YFilter) { psbDetailed.YFilter = yf }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "backup-tunnel-name" { return "BackupTunnelName" }
    if yname == "is-in-ero-valid" { return "IsInEroValid" }
    if yname == "is-out-ero-valid" { return "IsOutEroValid" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "template" { return "Template" }
    if yname == "session-attribute" { return "SessionAttribute" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "path-flags" { return "PathFlags" }
    if yname == "hop" { return "Hop" }
    if yname == "policy-source-info" { return "PolicySourceInfo" }
    if yname == "header" { return "Header" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    if yname == "label-info" { return "LabelInfo" }
    if yname == "class-type" { return "ClassType" }
    if yname == "pfc" { return "Pfc" }
    if yname == "in-ero" { return "InEro" }
    if yname == "out-ero" { return "OutEro" }
    return ""
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetSegmentPath() string {
    return "psb-detailed"
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &psbDetailed.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &psbDetailed.S2LSubLsp
    }
    if childYangName == "template" {
        return &psbDetailed.Template
    }
    if childYangName == "session-attribute" {
        return &psbDetailed.SessionAttribute
    }
    if childYangName == "traffic-spec" {
        return &psbDetailed.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &psbDetailed.GenericTrafficSpec
    }
    if childYangName == "path-flags" {
        return &psbDetailed.PathFlags
    }
    if childYangName == "hop" {
        return &psbDetailed.Hop
    }
    if childYangName == "policy-source-info" {
        return &psbDetailed.PolicySourceInfo
    }
    if childYangName == "header" {
        return &psbDetailed.Header
    }
    if childYangName == "expiry-time" {
        return &psbDetailed.ExpiryTime
    }
    if childYangName == "policy-flags" {
        return &psbDetailed.PolicyFlags
    }
    if childYangName == "policy-query-flags" {
        return &psbDetailed.PolicyQueryFlags
    }
    if childYangName == "label-info" {
        return &psbDetailed.LabelInfo
    }
    if childYangName == "class-type" {
        return &psbDetailed.ClassType
    }
    if childYangName == "pfc" {
        for _, c := range psbDetailed.Pfc {
            if psbDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_PsbDetaileds_PsbDetailed_Pfc{}
        psbDetailed.Pfc = append(psbDetailed.Pfc, child)
        return &psbDetailed.Pfc[len(psbDetailed.Pfc)-1]
    }
    if childYangName == "in-ero" {
        for _, c := range psbDetailed.InEro {
            if psbDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_PsbDetaileds_PsbDetailed_InEro{}
        psbDetailed.InEro = append(psbDetailed.InEro, child)
        return &psbDetailed.InEro[len(psbDetailed.InEro)-1]
    }
    if childYangName == "out-ero" {
        for _, c := range psbDetailed.OutEro {
            if psbDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_PsbDetaileds_PsbDetailed_OutEro{}
        psbDetailed.OutEro = append(psbDetailed.OutEro, child)
        return &psbDetailed.OutEro[len(psbDetailed.OutEro)-1]
    }
    return nil
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &psbDetailed.Session
    children["s2l-sub-lsp"] = &psbDetailed.S2LSubLsp
    children["template"] = &psbDetailed.Template
    children["session-attribute"] = &psbDetailed.SessionAttribute
    children["traffic-spec"] = &psbDetailed.TrafficSpec
    children["generic-traffic-spec"] = &psbDetailed.GenericTrafficSpec
    children["path-flags"] = &psbDetailed.PathFlags
    children["hop"] = &psbDetailed.Hop
    children["policy-source-info"] = &psbDetailed.PolicySourceInfo
    children["header"] = &psbDetailed.Header
    children["expiry-time"] = &psbDetailed.ExpiryTime
    children["policy-flags"] = &psbDetailed.PolicyFlags
    children["policy-query-flags"] = &psbDetailed.PolicyQueryFlags
    children["label-info"] = &psbDetailed.LabelInfo
    children["class-type"] = &psbDetailed.ClassType
    for i := range psbDetailed.Pfc {
        children[psbDetailed.Pfc[i].GetSegmentPath()] = &psbDetailed.Pfc[i]
    }
    for i := range psbDetailed.InEro {
        children[psbDetailed.InEro[i].GetSegmentPath()] = &psbDetailed.InEro[i]
    }
    for i := range psbDetailed.OutEro {
        children[psbDetailed.OutEro[i].GetSegmentPath()] = &psbDetailed.OutEro[i]
    }
    return children
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = psbDetailed.DestinationAddress
    leafs["destination-port"] = psbDetailed.DestinationPort
    leafs["protocol"] = psbDetailed.Protocol
    leafs["extended-tunnel-id"] = psbDetailed.ExtendedTunnelId
    leafs["session-type"] = psbDetailed.SessionType
    leafs["p2mp-id"] = psbDetailed.P2MpId
    leafs["source-address"] = psbDetailed.SourceAddress
    leafs["source-port"] = psbDetailed.SourcePort
    leafs["sub-group-origin"] = psbDetailed.SubGroupOrigin
    leafs["sub-group-id"] = psbDetailed.SubGroupId
    leafs["vrf-name"] = psbDetailed.VrfName
    leafs["input-interface"] = psbDetailed.InputInterface
    leafs["backup-tunnel-name"] = psbDetailed.BackupTunnelName
    leafs["is-in-ero-valid"] = psbDetailed.IsInEroValid
    leafs["is-out-ero-valid"] = psbDetailed.IsOutEroValid
    return leafs
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetYangName() string { return "psb-detailed" }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) SetParent(parent types.Entity) { psbDetailed.parent = parent }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetParent() types.Entity { return psbDetailed.parent }

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetParentYangName() string { return "psb-detaileds" }

// Rsvp_PsbDetaileds_PsbDetailed_Session
// RSVP Session Information
type Rsvp_PsbDetaileds_PsbDetailed_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetYangName() string { return "session" }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession
// RSVP Session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2LSubLsp) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Template
// RSVP Template
type Rsvp_PsbDetaileds_PsbDetailed_Template struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetFilter() yfilter.YFilter { return template.YFilter }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) SetFilter(yf yfilter.YFilter) { template.YFilter = yf }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetSegmentPath() string {
    return "template"
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &template.RsvpFilter
    }
    return nil
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &template.RsvpFilter
    return children
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetBundleName() string { return "cisco_ios_xr" }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetYangName() string { return "template" }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) SetParent(parent types.Entity) { template.parent = parent }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetParent() types.Entity { return template.parent }

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter
// RSVP Filter
type Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetParentYangName() string { return "template" }

// Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute
// RSVP Session Attribute
type Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetFilter() yfilter.YFilter { return sessionAttribute.YFilter }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) SetFilter(yf yfilter.YFilter) { sessionAttribute.YFilter = yf }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "reservation-priority" { return "ReservationPriority" }
    if yname == "sess-attribute-flags" { return "SessAttributeFlags" }
    return ""
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetSegmentPath() string {
    return "session-attribute"
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sess-attribute-flags" {
        return &sessionAttribute.SessAttributeFlags
    }
    return nil
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sess-attribute-flags"] = &sessionAttribute.SessAttributeFlags
    return children
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = sessionAttribute.SetupPriority
    leafs["reservation-priority"] = sessionAttribute.ReservationPriority
    return leafs
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetYangName() string { return "session-attribute" }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) SetParent(parent types.Entity) { sessionAttribute.parent = parent }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetParent() types.Entity { return sessionAttribute.parent }

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
// Session Attributes
type Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetFilter() yfilter.YFilter { return sessAttributeFlags.YFilter }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) SetFilter(yf yfilter.YFilter) { sessAttributeFlags.YFilter = yf }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetGoName(yname string) string {
    if yname == "is-local-protect" { return "IsLocalProtect" }
    if yname == "is-node-protect" { return "IsNodeProtect" }
    if yname == "is-bandwidth-protect" { return "IsBandwidthProtect" }
    if yname == "is-record-labels" { return "IsRecordLabels" }
    if yname == "is-shared-explicit-requested" { return "IsSharedExplicitRequested" }
    return ""
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetSegmentPath() string {
    return "sess-attribute-flags"
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-protect"] = sessAttributeFlags.IsLocalProtect
    leafs["is-node-protect"] = sessAttributeFlags.IsNodeProtect
    leafs["is-bandwidth-protect"] = sessAttributeFlags.IsBandwidthProtect
    leafs["is-record-labels"] = sessAttributeFlags.IsRecordLabels
    leafs["is-shared-explicit-requested"] = sessAttributeFlags.IsSharedExplicitRequested
    return leafs
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetBundleName() string { return "cisco_ios_xr" }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetYangName() string { return "sess-attribute-flags" }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) SetParent(parent types.Entity) { sessAttributeFlags.parent = parent }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetParent() types.Entity { return sessAttributeFlags.parent }

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetParentYangName() string { return "session-attribute" }

// Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec
// RSVP Traffic Spec Info
type Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_PsbDetaileds_PsbDetailed_PathFlags
// Path Flags
type Rsvp_PsbDetaileds_PsbDetailed_PathFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Non-RSVP Hop Upstream. The type is bool.
    IsNonRsvpHopUpstream interface{}

    // Local Sender. The type is bool.
    IsLocalSender interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Bidirectional. The type is bool.
    IsBidirectional interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetFilter() yfilter.YFilter { return pathFlags.YFilter }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) SetFilter(yf yfilter.YFilter) { pathFlags.YFilter = yf }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetGoName(yname string) string {
    if yname == "is-non-rsvp-hop-upstream" { return "IsNonRsvpHopUpstream" }
    if yname == "is-local-sender" { return "IsLocalSender" }
    if yname == "is-message-id-valid" { return "IsMessageIdValid" }
    if yname == "is-local-repair" { return "IsLocalRepair" }
    if yname == "is-bidirectional" { return "IsBidirectional" }
    if yname == "is-lockout" { return "IsLockout" }
    return ""
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetSegmentPath() string {
    return "path-flags"
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-non-rsvp-hop-upstream"] = pathFlags.IsNonRsvpHopUpstream
    leafs["is-local-sender"] = pathFlags.IsLocalSender
    leafs["is-message-id-valid"] = pathFlags.IsMessageIdValid
    leafs["is-local-repair"] = pathFlags.IsLocalRepair
    leafs["is-bidirectional"] = pathFlags.IsBidirectional
    leafs["is-lockout"] = pathFlags.IsLockout
    return leafs
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetBundleName() string { return "cisco_ios_xr" }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetYangName() string { return "path-flags" }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) SetParent(parent types.Entity) { pathFlags.parent = parent }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetParent() types.Entity { return pathFlags.parent }

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Hop
// Path Hop Info
type Rsvp_PsbDetaileds_PsbDetailed_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetYangName() string { return "hop" }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetParent() types.Entity { return hop.parent }

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo
// Policy Sources Info
type Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetFilter() yfilter.YFilter { return policySourceInfo.YFilter }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) SetFilter(yf yfilter.YFilter) { policySourceInfo.YFilter = yf }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetGoName(yname string) string {
    if yname == "is-te-link" { return "IsTeLink" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-cops" { return "IsCops" }
    if yname == "is-default" { return "IsDefault" }
    if yname == "is-cable" { return "IsCable" }
    return ""
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetSegmentPath() string {
    return "policy-source-info"
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-te-link"] = policySourceInfo.IsTeLink
    leafs["is-local"] = policySourceInfo.IsLocal
    leafs["is-cops"] = policySourceInfo.IsCops
    leafs["is-default"] = policySourceInfo.IsDefault
    leafs["is-cable"] = policySourceInfo.IsCable
    return leafs
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetBundleName() string { return "cisco_ios_xr" }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetYangName() string { return "policy-source-info" }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) SetParent(parent types.Entity) { policySourceInfo.parent = parent }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetParent() types.Entity { return policySourceInfo.parent }

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Header
// RSVP Header Info
type Rsvp_PsbDetaileds_PsbDetailed_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetSegmentPath() string {
    return "header"
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = header.RsvpVersion
    leafs["rsvp-header-flags"] = header.RsvpHeaderFlags
    leafs["rsvp-ttl"] = header.RsvpTtl
    leafs["rsvp-message-type"] = header.RsvpMessageType
    leafs["ip-tos"] = header.IpTos
    leafs["ip-ttl"] = header.IpTtl
    leafs["ip-source-address"] = header.IpSourceAddress
    return leafs
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetYangName() string { return "header" }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetParent() types.Entity { return header.parent }

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime
// Expiry Time
type Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags
// Policy Flags
type Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags
// Policy Query Flags
type Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo
// Label Information
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetFilter() yfilter.YFilter { return labelInfo.YFilter }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) SetFilter(yf yfilter.YFilter) { labelInfo.YFilter = yf }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "local-downstream-label" { return "LocalDownstreamLabel" }
    if yname == "outgoing-downstream-label" { return "OutgoingDownstreamLabel" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "outgoing-upstream-label" { return "OutgoingUpstreamLabel" }
    if yname == "local-upstream-label" { return "LocalUpstreamLabel" }
    if yname == "recovery-label" { return "RecoveryLabel" }
    if yname == "lsp-wrap-label" { return "LspWrapLabel" }
    if yname == "generic-local-downstream-label" { return "GenericLocalDownstreamLabel" }
    if yname == "generic-outgoing-downstream-label" { return "GenericOutgoingDownstreamLabel" }
    if yname == "generic-merge-point-label" { return "GenericMergePointLabel" }
    if yname == "generic-outgoing-upstream-label" { return "GenericOutgoingUpstreamLabel" }
    if yname == "generic-local-upstream-label" { return "GenericLocalUpstreamLabel" }
    if yname == "generic-recovery-label" { return "GenericRecoveryLabel" }
    return ""
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetSegmentPath() string {
    return "label-info"
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-local-downstream-label" {
        return &labelInfo.GenericLocalDownstreamLabel
    }
    if childYangName == "generic-outgoing-downstream-label" {
        return &labelInfo.GenericOutgoingDownstreamLabel
    }
    if childYangName == "generic-merge-point-label" {
        return &labelInfo.GenericMergePointLabel
    }
    if childYangName == "generic-outgoing-upstream-label" {
        return &labelInfo.GenericOutgoingUpstreamLabel
    }
    if childYangName == "generic-local-upstream-label" {
        return &labelInfo.GenericLocalUpstreamLabel
    }
    if childYangName == "generic-recovery-label" {
        return &labelInfo.GenericRecoveryLabel
    }
    return nil
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-local-downstream-label"] = &labelInfo.GenericLocalDownstreamLabel
    children["generic-outgoing-downstream-label"] = &labelInfo.GenericOutgoingDownstreamLabel
    children["generic-merge-point-label"] = &labelInfo.GenericMergePointLabel
    children["generic-outgoing-upstream-label"] = &labelInfo.GenericOutgoingUpstreamLabel
    children["generic-local-upstream-label"] = &labelInfo.GenericLocalUpstreamLabel
    children["generic-recovery-label"] = &labelInfo.GenericRecoveryLabel
    return children
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = labelInfo.IsValid
    leafs["local-downstream-label"] = labelInfo.LocalDownstreamLabel
    leafs["outgoing-downstream-label"] = labelInfo.OutgoingDownstreamLabel
    leafs["merge-point-label"] = labelInfo.MergePointLabel
    leafs["outgoing-upstream-label"] = labelInfo.OutgoingUpstreamLabel
    leafs["local-upstream-label"] = labelInfo.LocalUpstreamLabel
    leafs["recovery-label"] = labelInfo.RecoveryLabel
    leafs["lsp-wrap-label"] = labelInfo.LspWrapLabel
    return leafs
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetBundleName() string { return "cisco_ios_xr" }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetYangName() string { return "label-info" }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) SetParent(parent types.Entity) { labelInfo.parent = parent }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetParent() types.Entity { return labelInfo.parent }

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetFilter() yfilter.YFilter { return genericLocalDownstreamLabel.YFilter }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalDownstreamLabel.YFilter = yf }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetSegmentPath() string {
    return "generic-local-downstream-label"
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalDownstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalDownstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetYangName() string { return "generic-local-downstream-label" }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetParent(parent types.Entity) { genericLocalDownstreamLabel.parent = parent }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParent() types.Entity { return genericLocalDownstreamLabel.parent }

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-downstream-label" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingDownstreamLabel.YFilter }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingDownstreamLabel.YFilter = yf }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-downstream-label"
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingDownstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingDownstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetYangName() string { return "generic-outgoing-downstream-label" }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetParent(parent types.Entity) { genericOutgoingDownstreamLabel.parent = parent }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParent() types.Entity { return genericOutgoingDownstreamLabel.parent }

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-downstream-label" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetFilter() yfilter.YFilter { return genericMergePointLabel.YFilter }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) SetFilter(yf yfilter.YFilter) { genericMergePointLabel.YFilter = yf }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetSegmentPath() string {
    return "generic-merge-point-label"
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericMergePointLabel.GeneralizedLabel
    }
    return nil
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericMergePointLabel.GeneralizedLabel
    return children
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericMergePointLabel.GenericLabelType
    return leafs
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetYangName() string { return "generic-merge-point-label" }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) SetParent(parent types.Entity) { genericMergePointLabel.parent = parent }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetParent() types.Entity { return genericMergePointLabel.parent }

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetParentYangName() string { return "label-info" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParentYangName() string { return "generic-merge-point-label" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingUpstreamLabel.YFilter }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingUpstreamLabel.YFilter = yf }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-upstream-label"
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingUpstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingUpstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetYangName() string { return "generic-outgoing-upstream-label" }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetParent(parent types.Entity) { genericOutgoingUpstreamLabel.parent = parent }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParent() types.Entity { return genericOutgoingUpstreamLabel.parent }

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-upstream-label" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetFilter() yfilter.YFilter { return genericLocalUpstreamLabel.YFilter }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalUpstreamLabel.YFilter = yf }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetSegmentPath() string {
    return "generic-local-upstream-label"
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalUpstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalUpstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetYangName() string { return "generic-local-upstream-label" }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetParent(parent types.Entity) { genericLocalUpstreamLabel.parent = parent }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParent() types.Entity { return genericLocalUpstreamLabel.parent }

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-upstream-label" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetFilter() yfilter.YFilter { return genericRecoveryLabel.YFilter }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) SetFilter(yf yfilter.YFilter) { genericRecoveryLabel.YFilter = yf }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetSegmentPath() string {
    return "generic-recovery-label"
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericRecoveryLabel.GeneralizedLabel
    }
    return nil
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericRecoveryLabel.GeneralizedLabel
    return children
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericRecoveryLabel.GenericLabelType
    return leafs
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetYangName() string { return "generic-recovery-label" }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) SetParent(parent types.Entity) { genericRecoveryLabel.parent = parent }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetParent() types.Entity { return genericRecoveryLabel.parent }

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetParentYangName() string { return "label-info" }

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParentYangName() string { return "generic-recovery-label" }

// Rsvp_PsbDetaileds_PsbDetailed_ClassType
// DS-TE Class-Type
type Rsvp_PsbDetaileds_PsbDetailed_ClassType struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the Class-Type information valid. The type is bool.
    IsClassTypeInfoValid interface{}

    // DS-TE Class-Type. The type is interface{} with range: 0..255.
    ClassType interface{}
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetFilter() yfilter.YFilter { return classType.YFilter }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) SetFilter(yf yfilter.YFilter) { classType.YFilter = yf }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetGoName(yname string) string {
    if yname == "is-class-type-info-valid" { return "IsClassTypeInfoValid" }
    if yname == "class-type" { return "ClassType" }
    return ""
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetSegmentPath() string {
    return "class-type"
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-class-type-info-valid"] = classType.IsClassTypeInfoValid
    leafs["class-type"] = classType.ClassType
    return leafs
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetBundleName() string { return "cisco_ios_xr" }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetYangName() string { return "class-type" }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) SetParent(parent types.Entity) { classType.parent = parent }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetParent() types.Entity { return classType.parent }

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Pfc
// Path Forwarding Contexts
type Rsvp_PsbDetaileds_PsbDetailed_Pfc struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Output interface. The type is string.
    OutputInterface interface{}

    // Policy Flags.
    PolicyFlags Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetFilter() yfilter.YFilter { return pfc.YFilter }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) SetFilter(yf yfilter.YFilter) { pfc.YFilter = yf }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetGoName(yname string) string {
    if yname == "output-interface" { return "OutputInterface" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    return ""
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetSegmentPath() string {
    return "pfc"
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "policy-flags" {
        return &pfc.PolicyFlags
    }
    if childYangName == "policy-query-flags" {
        return &pfc.PolicyQueryFlags
    }
    return nil
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["policy-flags"] = &pfc.PolicyFlags
    children["policy-query-flags"] = &pfc.PolicyQueryFlags
    return children
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["output-interface"] = pfc.OutputInterface
    return leafs
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetBundleName() string { return "cisco_ios_xr" }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetYangName() string { return "pfc" }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) SetParent(parent types.Entity) { pfc.parent = parent }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetParent() types.Entity { return pfc.parent }

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags
// Policy Flags
type Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetParentYangName() string { return "pfc" }

// Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
// Policy Query Flags
type Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetParentYangName() string { return "pfc" }

// Rsvp_PsbDetaileds_PsbDetailed_InEro
// Incoming Explicit Route Sub Objects
type Rsvp_PsbDetaileds_PsbDetailed_InEro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetFilter() yfilter.YFilter { return inEro.YFilter }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) SetFilter(yf yfilter.YFilter) { inEro.YFilter = yf }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetSegmentPath() string {
    return "in-ero"
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &inEro.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &inEro.UnnumberedEroSubObject
    }
    return nil
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &inEro.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &inEro.UnnumberedEroSubObject
    return children
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = inEro.EroType
    return leafs
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetBundleName() string { return "cisco_ios_xr" }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetYangName() string { return "in-ero" }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) SetParent(parent types.Entity) { inEro.parent = parent }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetParent() types.Entity { return inEro.parent }

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject
// IPV4 ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4EroSubObject) GetParentYangName() string { return "in-ero" }

// Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetParentYangName() string { return "in-ero" }

// Rsvp_PsbDetaileds_PsbDetailed_OutEro
// Outgoing Explicit Route Sub Objects
type Rsvp_PsbDetaileds_PsbDetailed_OutEro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetFilter() yfilter.YFilter { return outEro.YFilter }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) SetFilter(yf yfilter.YFilter) { outEro.YFilter = yf }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetSegmentPath() string {
    return "out-ero"
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &outEro.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &outEro.UnnumberedEroSubObject
    }
    return nil
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &outEro.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &outEro.UnnumberedEroSubObject
    return children
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = outEro.EroType
    return leafs
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetBundleName() string { return "cisco_ios_xr" }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetYangName() string { return "out-ero" }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) SetParent(parent types.Entity) { outEro.parent = parent }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetParent() types.Entity { return outEro.parent }

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetParentYangName() string { return "psb-detailed" }

// Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject
// IPV4 ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4EroSubObject) GetParentYangName() string { return "out-ero" }

// Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetParentYangName() string { return "out-ero" }

// Rsvp_ControllerDetaileds
// Table of detailed info about RSVP-enabled
// controllers
type Rsvp_ControllerDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled controller. The type is slice of
    // Rsvp_ControllerDetaileds_ControllerDetailed.
    ControllerDetailed []Rsvp_ControllerDetaileds_ControllerDetailed
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetFilter() yfilter.YFilter { return controllerDetaileds.YFilter }

func (controllerDetaileds *Rsvp_ControllerDetaileds) SetFilter(yf yfilter.YFilter) { controllerDetaileds.YFilter = yf }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetGoName(yname string) string {
    if yname == "controller-detailed" { return "ControllerDetailed" }
    return ""
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetSegmentPath() string {
    return "controller-detaileds"
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller-detailed" {
        for _, c := range controllerDetaileds.ControllerDetailed {
            if controllerDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_ControllerDetaileds_ControllerDetailed{}
        controllerDetaileds.ControllerDetailed = append(controllerDetaileds.ControllerDetailed, child)
        return &controllerDetaileds.ControllerDetailed[len(controllerDetaileds.ControllerDetailed)-1]
    }
    return nil
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllerDetaileds.ControllerDetailed {
        children[controllerDetaileds.ControllerDetailed[i].GetSegmentPath()] = &controllerDetaileds.ControllerDetailed[i]
    }
    return children
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetYangName() string { return "controller-detaileds" }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerDetaileds *Rsvp_ControllerDetaileds) SetParent(parent types.Entity) { controllerDetaileds.parent = parent }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetParent() types.Entity { return controllerDetaileds.parent }

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetParentYangName() string { return "rsvp" }

// Rsvp_ControllerDetaileds_ControllerDetailed
// Detailed info about an RSVP-enabled controller
type Rsvp_ControllerDetaileds_ControllerDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation

    // Interface flags.
    Flags Rsvp_ControllerDetaileds_ControllerDetailed_Flags

    // Neighbor array. The type is slice of
    // Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray.
    NeighborArray []Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetFilter() yfilter.YFilter { return controllerDetailed.YFilter }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) SetFilter(yf yfilter.YFilter) { controllerDetailed.YFilter = yf }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "signalling-ip-tos" { return "SignallingIpTos" }
    if yname == "integrity-send-password" { return "IntegritySendPassword" }
    if yname == "integrity-receive-password" { return "IntegrityReceivePassword" }
    if yname == "integrity-receive-password-optional" { return "IntegrityReceivePasswordOptional" }
    if yname == "refresh-timer-state" { return "RefreshTimerState" }
    if yname == "summary-refresh-timer-state" { return "SummaryRefreshTimerState" }
    if yname == "refresh-interval" { return "RefreshInterval" }
    if yname == "out-of-band-refresh-interval" { return "OutOfBandRefreshInterval" }
    if yname == "summary-refresh-max-size" { return "SummaryRefreshMaxSize" }
    if yname == "bundle-message-max-size" { return "BundleMessageMaxSize" }
    if yname == "expiry-timer-state" { return "ExpiryTimerState" }
    if yname == "expiry-states" { return "ExpiryStates" }
    if yname == "expiry-interval" { return "ExpiryInterval" }
    if yname == "expiry-drops-tolerated" { return "ExpiryDropsTolerated" }
    if yname == "out-of-band-expiry-drops-tolerated" { return "OutOfBandExpiryDropsTolerated" }
    if yname == "ack-hold-time" { return "AckHoldTime" }
    if yname == "ack-max-size" { return "AckMaxSize" }
    if yname == "retransmit-time" { return "RetransmitTime" }
    if yname == "pacing-interval" { return "PacingInterval" }
    if yname == "pacing-message-rate" { return "PacingMessageRate" }
    if yname == "pacing-timer-state" { return "PacingTimerState" }
    if yname == "pacing-messages" { return "PacingMessages" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    if yname == "flags" { return "Flags" }
    if yname == "neighbor-array" { return "NeighborArray" }
    return ""
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetSegmentPath() string {
    return "controller-detailed" + "[controller-name='" + fmt.Sprintf("%v", controllerDetailed.ControllerName) + "']"
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &controllerDetailed.BandwidthInformation
    }
    if childYangName == "flags" {
        return &controllerDetailed.Flags
    }
    if childYangName == "neighbor-array" {
        for _, c := range controllerDetailed.NeighborArray {
            if controllerDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray{}
        controllerDetailed.NeighborArray = append(controllerDetailed.NeighborArray, child)
        return &controllerDetailed.NeighborArray[len(controllerDetailed.NeighborArray)-1]
    }
    return nil
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &controllerDetailed.BandwidthInformation
    children["flags"] = &controllerDetailed.Flags
    for i := range controllerDetailed.NeighborArray {
        children[controllerDetailed.NeighborArray[i].GetSegmentPath()] = &controllerDetailed.NeighborArray[i]
    }
    return children
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controllerDetailed.ControllerName
    leafs["interface-name-xr"] = controllerDetailed.InterfaceNameXr
    leafs["signalling-ip-tos"] = controllerDetailed.SignallingIpTos
    leafs["integrity-send-password"] = controllerDetailed.IntegritySendPassword
    leafs["integrity-receive-password"] = controllerDetailed.IntegrityReceivePassword
    leafs["integrity-receive-password-optional"] = controllerDetailed.IntegrityReceivePasswordOptional
    leafs["refresh-timer-state"] = controllerDetailed.RefreshTimerState
    leafs["summary-refresh-timer-state"] = controllerDetailed.SummaryRefreshTimerState
    leafs["refresh-interval"] = controllerDetailed.RefreshInterval
    leafs["out-of-band-refresh-interval"] = controllerDetailed.OutOfBandRefreshInterval
    leafs["summary-refresh-max-size"] = controllerDetailed.SummaryRefreshMaxSize
    leafs["bundle-message-max-size"] = controllerDetailed.BundleMessageMaxSize
    leafs["expiry-timer-state"] = controllerDetailed.ExpiryTimerState
    leafs["expiry-states"] = controllerDetailed.ExpiryStates
    leafs["expiry-interval"] = controllerDetailed.ExpiryInterval
    leafs["expiry-drops-tolerated"] = controllerDetailed.ExpiryDropsTolerated
    leafs["out-of-band-expiry-drops-tolerated"] = controllerDetailed.OutOfBandExpiryDropsTolerated
    leafs["ack-hold-time"] = controllerDetailed.AckHoldTime
    leafs["ack-max-size"] = controllerDetailed.AckMaxSize
    leafs["retransmit-time"] = controllerDetailed.RetransmitTime
    leafs["pacing-interval"] = controllerDetailed.PacingInterval
    leafs["pacing-message-rate"] = controllerDetailed.PacingMessageRate
    leafs["pacing-timer-state"] = controllerDetailed.PacingTimerState
    leafs["pacing-messages"] = controllerDetailed.PacingMessages
    return leafs
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetYangName() string { return "controller-detailed" }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) SetParent(parent types.Entity) { controllerDetailed.parent = parent }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetParent() types.Entity { return controllerDetailed.parent }

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetParentYangName() string { return "controller-detaileds" }

// Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation
// Interface bandwidth information
type Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetParentYangName() string { return "controller-detailed" }

// Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_ControllerDetaileds_ControllerDetailed_Flags
// Interface flags
type Rsvp_ControllerDetaileds_ControllerDetailed_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetGoName(yname string) string {
    if yname == "is-mpls-enabled" { return "IsMplsEnabled" }
    if yname == "is-refresh-reduction-enabled" { return "IsRefreshReductionEnabled" }
    if yname == "is-pacing-enabled" { return "IsPacingEnabled" }
    if yname == "is-refresh-enabled" { return "IsRefreshEnabled" }
    if yname == "is-s-refresh-enabled" { return "IsSRefreshEnabled" }
    if yname == "is-interface-down" { return "IsInterfaceDown" }
    if yname == "is-interface-created" { return "IsInterfaceCreated" }
    if yname == "is-rel-s-refresh-enabled" { return "IsRelSRefreshEnabled" }
    if yname == "is-backup-tunnel" { return "IsBackupTunnel" }
    if yname == "is-rsvp-configured" { return "IsRsvpConfigured" }
    if yname == "is-non-default-vrf" { return "IsNonDefaultVrf" }
    if yname == "is-message-bundling-enabled" { return "IsMessageBundlingEnabled" }
    return ""
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-mpls-enabled"] = flags.IsMplsEnabled
    leafs["is-refresh-reduction-enabled"] = flags.IsRefreshReductionEnabled
    leafs["is-pacing-enabled"] = flags.IsPacingEnabled
    leafs["is-refresh-enabled"] = flags.IsRefreshEnabled
    leafs["is-s-refresh-enabled"] = flags.IsSRefreshEnabled
    leafs["is-interface-down"] = flags.IsInterfaceDown
    leafs["is-interface-created"] = flags.IsInterfaceCreated
    leafs["is-rel-s-refresh-enabled"] = flags.IsRelSRefreshEnabled
    leafs["is-backup-tunnel"] = flags.IsBackupTunnel
    leafs["is-rsvp-configured"] = flags.IsRsvpConfigured
    leafs["is-non-default-vrf"] = flags.IsNonDefaultVrf
    leafs["is-message-bundling-enabled"] = flags.IsMessageBundlingEnabled
    return leafs
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetParentYangName() string { return "controller-detailed" }

// Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray
// Neighbor array
type Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetFilter() yfilter.YFilter { return neighborArray.YFilter }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) SetFilter(yf yfilter.YFilter) { neighborArray.YFilter = yf }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetGoName(yname string) string {
    if yname == "is-neighbor-refresh-reduction-capable" { return "IsNeighborRefreshReductionCapable" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "message-ids" { return "MessageIds" }
    if yname == "outgoing-states" { return "OutgoingStates" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "neighbor-message-id" { return "NeighborMessageId" }
    return ""
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetSegmentPath() string {
    return "neighbor-array"
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "expiry-time" {
        return &neighborArray.ExpiryTime
    }
    if childYangName == "neighbor-message-id" {
        for _, c := range neighborArray.NeighborMessageId {
            if neighborArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId{}
        neighborArray.NeighborMessageId = append(neighborArray.NeighborMessageId, child)
        return &neighborArray.NeighborMessageId[len(neighborArray.NeighborMessageId)-1]
    }
    return nil
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["expiry-time"] = &neighborArray.ExpiryTime
    for i := range neighborArray.NeighborMessageId {
        children[neighborArray.NeighborMessageId[i].GetSegmentPath()] = &neighborArray.NeighborMessageId[i]
    }
    return children
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-neighbor-refresh-reduction-capable"] = neighborArray.IsNeighborRefreshReductionCapable
    leafs["neighbor-address"] = neighborArray.NeighborAddress
    leafs["message-ids"] = neighborArray.MessageIds
    leafs["outgoing-states"] = neighborArray.OutgoingStates
    return leafs
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetBundleName() string { return "cisco_ios_xr" }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetYangName() string { return "neighbor-array" }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) SetParent(parent types.Entity) { neighborArray.parent = parent }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetParent() types.Entity { return neighborArray.parent }

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetParentYangName() string { return "controller-detailed" }

// Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime
// Expiry time
type Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetParentYangName() string { return "neighbor-array" }

// Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetFilter() yfilter.YFilter { return neighborMessageId.YFilter }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) SetFilter(yf yfilter.YFilter) { neighborMessageId.YFilter = yf }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetGoName(yname string) string {
    if yname == "message-id" { return "MessageId" }
    return ""
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetSegmentPath() string {
    return "neighbor-message-id"
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["message-id"] = neighborMessageId.MessageId
    return leafs
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetYangName() string { return "neighbor-message-id" }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) SetParent(parent types.Entity) { neighborMessageId.parent = parent }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetParent() types.Entity { return neighborMessageId.parent }

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetParentYangName() string { return "neighbor-array" }

// Rsvp_FrrSummary
// Fast Re-Route Summary State Information
type Rsvp_FrrSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path state counters.
    PathStates Rsvp_FrrSummary_PathStates

    // Rerservation state counters.
    ReservationStates Rsvp_FrrSummary_ReservationStates
}

func (frrSummary *Rsvp_FrrSummary) GetFilter() yfilter.YFilter { return frrSummary.YFilter }

func (frrSummary *Rsvp_FrrSummary) SetFilter(yf yfilter.YFilter) { frrSummary.YFilter = yf }

func (frrSummary *Rsvp_FrrSummary) GetGoName(yname string) string {
    if yname == "path-states" { return "PathStates" }
    if yname == "reservation-states" { return "ReservationStates" }
    return ""
}

func (frrSummary *Rsvp_FrrSummary) GetSegmentPath() string {
    return "frr-summary"
}

func (frrSummary *Rsvp_FrrSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "path-states" {
        return &frrSummary.PathStates
    }
    if childYangName == "reservation-states" {
        return &frrSummary.ReservationStates
    }
    return nil
}

func (frrSummary *Rsvp_FrrSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["path-states"] = &frrSummary.PathStates
    children["reservation-states"] = &frrSummary.ReservationStates
    return children
}

func (frrSummary *Rsvp_FrrSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrSummary *Rsvp_FrrSummary) GetBundleName() string { return "cisco_ios_xr" }

func (frrSummary *Rsvp_FrrSummary) GetYangName() string { return "frr-summary" }

func (frrSummary *Rsvp_FrrSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrSummary *Rsvp_FrrSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrSummary *Rsvp_FrrSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrSummary *Rsvp_FrrSummary) SetParent(parent types.Entity) { frrSummary.parent = parent }

func (frrSummary *Rsvp_FrrSummary) GetParent() types.Entity { return frrSummary.parent }

func (frrSummary *Rsvp_FrrSummary) GetParentYangName() string { return "rsvp" }

// Rsvp_FrrSummary_PathStates
// Path state counters
type Rsvp_FrrSummary_PathStates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetFilter() yfilter.YFilter { return pathStates.YFilter }

func (pathStates *Rsvp_FrrSummary_PathStates) SetFilter(yf yfilter.YFilter) { pathStates.YFilter = yf }

func (pathStates *Rsvp_FrrSummary_PathStates) GetGoName(yname string) string {
    if yname == "total" { return "Total" }
    if yname == "active-instances" { return "ActiveInstances" }
    if yname == "ready-instances" { return "ReadyInstances" }
    if yname == "active-wait-instances" { return "ActiveWaitInstances" }
    return ""
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetSegmentPath() string {
    return "path-states"
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total"] = pathStates.Total
    leafs["active-instances"] = pathStates.ActiveInstances
    leafs["ready-instances"] = pathStates.ReadyInstances
    leafs["active-wait-instances"] = pathStates.ActiveWaitInstances
    return leafs
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetBundleName() string { return "cisco_ios_xr" }

func (pathStates *Rsvp_FrrSummary_PathStates) GetYangName() string { return "path-states" }

func (pathStates *Rsvp_FrrSummary_PathStates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (pathStates *Rsvp_FrrSummary_PathStates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (pathStates *Rsvp_FrrSummary_PathStates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (pathStates *Rsvp_FrrSummary_PathStates) SetParent(parent types.Entity) { pathStates.parent = parent }

func (pathStates *Rsvp_FrrSummary_PathStates) GetParent() types.Entity { return pathStates.parent }

func (pathStates *Rsvp_FrrSummary_PathStates) GetParentYangName() string { return "frr-summary" }

// Rsvp_FrrSummary_ReservationStates
// Rerservation state counters
type Rsvp_FrrSummary_ReservationStates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetFilter() yfilter.YFilter { return reservationStates.YFilter }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) SetFilter(yf yfilter.YFilter) { reservationStates.YFilter = yf }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetGoName(yname string) string {
    if yname == "total" { return "Total" }
    if yname == "active-instances" { return "ActiveInstances" }
    if yname == "ready-instances" { return "ReadyInstances" }
    if yname == "active-wait-instances" { return "ActiveWaitInstances" }
    return ""
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetSegmentPath() string {
    return "reservation-states"
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["total"] = reservationStates.Total
    leafs["active-instances"] = reservationStates.ActiveInstances
    leafs["ready-instances"] = reservationStates.ReadyInstances
    leafs["active-wait-instances"] = reservationStates.ActiveWaitInstances
    return leafs
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetBundleName() string { return "cisco_ios_xr" }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetYangName() string { return "reservation-states" }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) SetParent(parent types.Entity) { reservationStates.parent = parent }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetParent() types.Entity { return reservationStates.parent }

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetParentYangName() string { return "frr-summary" }

// Rsvp_RsbDetaileds
// Table of detailed info about reservation state
// blocks
type Rsvp_RsbDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single reservation state block. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed.
    RsbDetailed []Rsvp_RsbDetaileds_RsbDetailed
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetFilter() yfilter.YFilter { return rsbDetaileds.YFilter }

func (rsbDetaileds *Rsvp_RsbDetaileds) SetFilter(yf yfilter.YFilter) { rsbDetaileds.YFilter = yf }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetGoName(yname string) string {
    if yname == "rsb-detailed" { return "RsbDetailed" }
    return ""
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetSegmentPath() string {
    return "rsb-detaileds"
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsb-detailed" {
        for _, c := range rsbDetaileds.RsbDetailed {
            if rsbDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RsbDetaileds_RsbDetailed{}
        rsbDetaileds.RsbDetailed = append(rsbDetaileds.RsbDetailed, child)
        return &rsbDetaileds.RsbDetailed[len(rsbDetaileds.RsbDetailed)-1]
    }
    return nil
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rsbDetaileds.RsbDetailed {
        children[rsbDetaileds.RsbDetailed[i].GetSegmentPath()] = &rsbDetaileds.RsbDetailed[i]
    }
    return children
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetYangName() string { return "rsb-detaileds" }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbDetaileds *Rsvp_RsbDetaileds) SetParent(parent types.Entity) { rsbDetaileds.parent = parent }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetParent() types.Entity { return rsbDetaileds.parent }

func (rsbDetaileds *Rsvp_RsbDetaileds) GetParentYangName() string { return "rsvp" }

// Rsvp_RsbDetaileds_RsbDetailed
// Detailed info for a single reservation state
// block
type Rsvp_RsbDetaileds_RsbDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Input Adjusted Interface. The type is string.
    InputAdjustedInterface interface{}

    // Input Physical Interface. The type is string.
    InputPhysicalInterface interface{}

    // Flow Spec Information.
    FlowSpec Rsvp_RsbDetaileds_RsbDetailed_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec

    // RSVP Session Information.
    Session Rsvp_RsbDetaileds_RsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp

    // RSVP Style.
    Style Rsvp_RsbDetaileds_RsbDetailed_Style

    // RSVP Filter.
    Filter Rsvp_RsbDetaileds_RsbDetailed_Filter

    // Reservation State Block Flags.
    RsbFlags Rsvp_RsbDetaileds_RsbDetailed_RsbFlags

    // Hop Infomation.
    Hop Rsvp_RsbDetaileds_RsbDetailed_Hop

    // RSVP Policy Sources.
    PolicySources Rsvp_RsbDetaileds_RsbDetailed_PolicySources

    // RSVP Header Information.
    Header Rsvp_RsbDetaileds_RsbDetailed_Header

    // RSVP Policy Flags.
    PolicyFlags Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags

    // Expiry Time.
    ExpiryTime Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime

    // RSVP Query Flags.
    PolicyQueryFlags Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo Rsvp_RsbDetaileds_RsbDetailed_LabelInfo
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetFilter() yfilter.YFilter { return rsbDetailed.YFilter }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) SetFilter(yf yfilter.YFilter) { rsbDetailed.YFilter = yf }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-adjusted-interface" { return "InputAdjustedInterface" }
    if yname == "input-physical-interface" { return "InputPhysicalInterface" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "style" { return "Style" }
    if yname == "filter" { return "Filter" }
    if yname == "rsb-flags" { return "RsbFlags" }
    if yname == "hop" { return "Hop" }
    if yname == "policy-sources" { return "PolicySources" }
    if yname == "header" { return "Header" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    if yname == "label-info" { return "LabelInfo" }
    return ""
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetSegmentPath() string {
    return "rsb-detailed"
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flow-spec" {
        return &rsbDetailed.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rsbDetailed.GenericFlowSpec
    }
    if childYangName == "session" {
        return &rsbDetailed.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &rsbDetailed.S2LSubLsp
    }
    if childYangName == "style" {
        return &rsbDetailed.Style
    }
    if childYangName == "filter" {
        return &rsbDetailed.Filter
    }
    if childYangName == "rsb-flags" {
        return &rsbDetailed.RsbFlags
    }
    if childYangName == "hop" {
        return &rsbDetailed.Hop
    }
    if childYangName == "policy-sources" {
        return &rsbDetailed.PolicySources
    }
    if childYangName == "header" {
        return &rsbDetailed.Header
    }
    if childYangName == "policy-flags" {
        return &rsbDetailed.PolicyFlags
    }
    if childYangName == "expiry-time" {
        return &rsbDetailed.ExpiryTime
    }
    if childYangName == "policy-query-flags" {
        return &rsbDetailed.PolicyQueryFlags
    }
    if childYangName == "label-info" {
        return &rsbDetailed.LabelInfo
    }
    return nil
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flow-spec"] = &rsbDetailed.FlowSpec
    children["generic-flow-spec"] = &rsbDetailed.GenericFlowSpec
    children["session"] = &rsbDetailed.Session
    children["s2l-sub-lsp"] = &rsbDetailed.S2LSubLsp
    children["style"] = &rsbDetailed.Style
    children["filter"] = &rsbDetailed.Filter
    children["rsb-flags"] = &rsbDetailed.RsbFlags
    children["hop"] = &rsbDetailed.Hop
    children["policy-sources"] = &rsbDetailed.PolicySources
    children["header"] = &rsbDetailed.Header
    children["policy-flags"] = &rsbDetailed.PolicyFlags
    children["expiry-time"] = &rsbDetailed.ExpiryTime
    children["policy-query-flags"] = &rsbDetailed.PolicyQueryFlags
    children["label-info"] = &rsbDetailed.LabelInfo
    return children
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = rsbDetailed.DestinationAddress
    leafs["destination-port"] = rsbDetailed.DestinationPort
    leafs["protocol"] = rsbDetailed.Protocol
    leafs["extended-tunnel-id"] = rsbDetailed.ExtendedTunnelId
    leafs["session-type"] = rsbDetailed.SessionType
    leafs["p2mp-id"] = rsbDetailed.P2MpId
    leafs["source-address"] = rsbDetailed.SourceAddress
    leafs["source-port"] = rsbDetailed.SourcePort
    leafs["sub-group-origin"] = rsbDetailed.SubGroupOrigin
    leafs["sub-group-id"] = rsbDetailed.SubGroupId
    leafs["vrf-name"] = rsbDetailed.VrfName
    leafs["input-adjusted-interface"] = rsbDetailed.InputAdjustedInterface
    leafs["input-physical-interface"] = rsbDetailed.InputPhysicalInterface
    return leafs
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetYangName() string { return "rsb-detailed" }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) SetParent(parent types.Entity) { rsbDetailed.parent = parent }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetParent() types.Entity { return rsbDetailed.parent }

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetParentYangName() string { return "rsb-detaileds" }

// Rsvp_RsbDetaileds_RsbDetailed_FlowSpec
// Flow Spec Information
type Rsvp_RsbDetaileds_RsbDetailed_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// Rsvp_RsbDetaileds_RsbDetailed_Session
// RSVP Session Information
type Rsvp_RsbDetaileds_RsbDetailed_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetYangName() string { return "session" }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession
// RSVP Session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2LSubLsp) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_Style
// RSVP Style
type Rsvp_RsbDetaileds_RsbDetailed_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetSegmentPath() string {
    return "style"
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetYangName() string { return "style" }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetParent() types.Entity { return style.parent }

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_Filter
// RSVP Filter
type Rsvp_RsbDetaileds_RsbDetailed_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetYangName() string { return "filter" }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetParent() types.Entity { return filter.parent }

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RsbDetaileds_RsbDetailed_RsbFlags
// Reservation State Block Flags
type Rsvp_RsbDetaileds_RsbDetailed_RsbFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetFilter() yfilter.YFilter { return rsbFlags.YFilter }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) SetFilter(yf yfilter.YFilter) { rsbFlags.YFilter = yf }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetGoName(yname string) string {
    if yname == "is-local-receiver" { return "IsLocalReceiver" }
    if yname == "is-message-id-valid" { return "IsMessageIdValid" }
    if yname == "is-local-repair" { return "IsLocalRepair" }
    if yname == "is-merge-point" { return "IsMergePoint" }
    if yname == "is-lockout" { return "IsLockout" }
    return ""
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetSegmentPath() string {
    return "rsb-flags"
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-receiver"] = rsbFlags.IsLocalReceiver
    leafs["is-message-id-valid"] = rsbFlags.IsMessageIdValid
    leafs["is-local-repair"] = rsbFlags.IsLocalRepair
    leafs["is-merge-point"] = rsbFlags.IsMergePoint
    leafs["is-lockout"] = rsbFlags.IsLockout
    return leafs
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetBundleName() string { return "cisco_ios_xr" }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetYangName() string { return "rsb-flags" }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) SetParent(parent types.Entity) { rsbFlags.parent = parent }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetParent() types.Entity { return rsbFlags.parent }

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_Hop
// Hop Infomation
type Rsvp_RsbDetaileds_RsbDetailed_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetYangName() string { return "hop" }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetParent() types.Entity { return hop.parent }

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_PolicySources
// RSVP Policy Sources
type Rsvp_RsbDetaileds_RsbDetailed_PolicySources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetFilter() yfilter.YFilter { return policySources.YFilter }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) SetFilter(yf yfilter.YFilter) { policySources.YFilter = yf }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetGoName(yname string) string {
    if yname == "is-te-link" { return "IsTeLink" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-cops" { return "IsCops" }
    if yname == "is-default" { return "IsDefault" }
    if yname == "is-cable" { return "IsCable" }
    return ""
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetSegmentPath() string {
    return "policy-sources"
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-te-link"] = policySources.IsTeLink
    leafs["is-local"] = policySources.IsLocal
    leafs["is-cops"] = policySources.IsCops
    leafs["is-default"] = policySources.IsDefault
    leafs["is-cable"] = policySources.IsCable
    return leafs
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetBundleName() string { return "cisco_ios_xr" }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetYangName() string { return "policy-sources" }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) SetParent(parent types.Entity) { policySources.parent = parent }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetParent() types.Entity { return policySources.parent }

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_Header
// RSVP Header Information
type Rsvp_RsbDetaileds_RsbDetailed_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetSegmentPath() string {
    return "header"
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = header.RsvpVersion
    leafs["rsvp-header-flags"] = header.RsvpHeaderFlags
    leafs["rsvp-ttl"] = header.RsvpTtl
    leafs["rsvp-message-type"] = header.RsvpMessageType
    leafs["ip-tos"] = header.IpTos
    leafs["ip-ttl"] = header.IpTtl
    leafs["ip-source-address"] = header.IpSourceAddress
    return leafs
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetYangName() string { return "header" }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetParent() types.Entity { return header.parent }

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags
// RSVP Policy Flags
type Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime
// Expiry Time
type Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags
// RSVP Query Flags
type Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo
// Label Information
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetFilter() yfilter.YFilter { return labelInfo.YFilter }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) SetFilter(yf yfilter.YFilter) { labelInfo.YFilter = yf }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "local-downstream-label" { return "LocalDownstreamLabel" }
    if yname == "outgoing-downstream-label" { return "OutgoingDownstreamLabel" }
    if yname == "merge-point-label" { return "MergePointLabel" }
    if yname == "outgoing-upstream-label" { return "OutgoingUpstreamLabel" }
    if yname == "local-upstream-label" { return "LocalUpstreamLabel" }
    if yname == "recovery-label" { return "RecoveryLabel" }
    if yname == "lsp-wrap-label" { return "LspWrapLabel" }
    if yname == "generic-local-downstream-label" { return "GenericLocalDownstreamLabel" }
    if yname == "generic-outgoing-downstream-label" { return "GenericOutgoingDownstreamLabel" }
    if yname == "generic-merge-point-label" { return "GenericMergePointLabel" }
    if yname == "generic-outgoing-upstream-label" { return "GenericOutgoingUpstreamLabel" }
    if yname == "generic-local-upstream-label" { return "GenericLocalUpstreamLabel" }
    if yname == "generic-recovery-label" { return "GenericRecoveryLabel" }
    return ""
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetSegmentPath() string {
    return "label-info"
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-local-downstream-label" {
        return &labelInfo.GenericLocalDownstreamLabel
    }
    if childYangName == "generic-outgoing-downstream-label" {
        return &labelInfo.GenericOutgoingDownstreamLabel
    }
    if childYangName == "generic-merge-point-label" {
        return &labelInfo.GenericMergePointLabel
    }
    if childYangName == "generic-outgoing-upstream-label" {
        return &labelInfo.GenericOutgoingUpstreamLabel
    }
    if childYangName == "generic-local-upstream-label" {
        return &labelInfo.GenericLocalUpstreamLabel
    }
    if childYangName == "generic-recovery-label" {
        return &labelInfo.GenericRecoveryLabel
    }
    return nil
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-local-downstream-label"] = &labelInfo.GenericLocalDownstreamLabel
    children["generic-outgoing-downstream-label"] = &labelInfo.GenericOutgoingDownstreamLabel
    children["generic-merge-point-label"] = &labelInfo.GenericMergePointLabel
    children["generic-outgoing-upstream-label"] = &labelInfo.GenericOutgoingUpstreamLabel
    children["generic-local-upstream-label"] = &labelInfo.GenericLocalUpstreamLabel
    children["generic-recovery-label"] = &labelInfo.GenericRecoveryLabel
    return children
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = labelInfo.IsValid
    leafs["local-downstream-label"] = labelInfo.LocalDownstreamLabel
    leafs["outgoing-downstream-label"] = labelInfo.OutgoingDownstreamLabel
    leafs["merge-point-label"] = labelInfo.MergePointLabel
    leafs["outgoing-upstream-label"] = labelInfo.OutgoingUpstreamLabel
    leafs["local-upstream-label"] = labelInfo.LocalUpstreamLabel
    leafs["recovery-label"] = labelInfo.RecoveryLabel
    leafs["lsp-wrap-label"] = labelInfo.LspWrapLabel
    return leafs
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetBundleName() string { return "cisco_ios_xr" }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetYangName() string { return "label-info" }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) SetParent(parent types.Entity) { labelInfo.parent = parent }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetParent() types.Entity { return labelInfo.parent }

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetParentYangName() string { return "rsb-detailed" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetFilter() yfilter.YFilter { return genericLocalDownstreamLabel.YFilter }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalDownstreamLabel.YFilter = yf }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetSegmentPath() string {
    return "generic-local-downstream-label"
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalDownstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalDownstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetYangName() string { return "generic-local-downstream-label" }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) SetParent(parent types.Entity) { genericLocalDownstreamLabel.parent = parent }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParent() types.Entity { return genericLocalDownstreamLabel.parent }

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-downstream-label" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingDownstreamLabel.YFilter }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingDownstreamLabel.YFilter = yf }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-downstream-label"
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingDownstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingDownstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingDownstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetYangName() string { return "generic-outgoing-downstream-label" }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) SetParent(parent types.Entity) { genericOutgoingDownstreamLabel.parent = parent }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParent() types.Entity { return genericOutgoingDownstreamLabel.parent }

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-downstream-label" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetFilter() yfilter.YFilter { return genericMergePointLabel.YFilter }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) SetFilter(yf yfilter.YFilter) { genericMergePointLabel.YFilter = yf }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetSegmentPath() string {
    return "generic-merge-point-label"
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericMergePointLabel.GeneralizedLabel
    }
    return nil
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericMergePointLabel.GeneralizedLabel
    return children
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericMergePointLabel.GenericLabelType
    return leafs
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetYangName() string { return "generic-merge-point-label" }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) SetParent(parent types.Entity) { genericMergePointLabel.parent = parent }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetParent() types.Entity { return genericMergePointLabel.parent }

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetParentYangName() string { return "label-info" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetParentYangName() string { return "generic-merge-point-label" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetFilter() yfilter.YFilter { return genericOutgoingUpstreamLabel.YFilter }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericOutgoingUpstreamLabel.YFilter = yf }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetSegmentPath() string {
    return "generic-outgoing-upstream-label"
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutgoingUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutgoingUpstreamLabel.GeneralizedLabel
    return children
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutgoingUpstreamLabel.GenericLabelType
    return leafs
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetYangName() string { return "generic-outgoing-upstream-label" }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) SetParent(parent types.Entity) { genericOutgoingUpstreamLabel.parent = parent }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParent() types.Entity { return genericOutgoingUpstreamLabel.parent }

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-outgoing-upstream-label" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetFilter() yfilter.YFilter { return genericLocalUpstreamLabel.YFilter }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetFilter(yf yfilter.YFilter) { genericLocalUpstreamLabel.YFilter = yf }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetSegmentPath() string {
    return "generic-local-upstream-label"
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericLocalUpstreamLabel.GeneralizedLabel
    }
    return nil
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericLocalUpstreamLabel.GeneralizedLabel
    return children
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericLocalUpstreamLabel.GenericLabelType
    return leafs
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetYangName() string { return "generic-local-upstream-label" }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) SetParent(parent types.Entity) { genericLocalUpstreamLabel.parent = parent }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParent() types.Entity { return genericLocalUpstreamLabel.parent }

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetParentYangName() string { return "label-info" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetParentYangName() string { return "generic-local-upstream-label" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetFilter() yfilter.YFilter { return genericRecoveryLabel.YFilter }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) SetFilter(yf yfilter.YFilter) { genericRecoveryLabel.YFilter = yf }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetSegmentPath() string {
    return "generic-recovery-label"
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericRecoveryLabel.GeneralizedLabel
    }
    return nil
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericRecoveryLabel.GeneralizedLabel
    return children
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericRecoveryLabel.GenericLabelType
    return leafs
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetYangName() string { return "generic-recovery-label" }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) SetParent(parent types.Entity) { genericRecoveryLabel.parent = parent }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetParent() types.Entity { return genericRecoveryLabel.parent }

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetParentYangName() string { return "label-info" }

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetParentYangName() string { return "generic-recovery-label" }

// Rsvp_InterfaceSummaries
// Table of summary info about RSVP-enabled
// interfaces
type Rsvp_InterfaceSummaries struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled interface. The type is slice of
    // Rsvp_InterfaceSummaries_InterfaceSummary.
    InterfaceSummary []Rsvp_InterfaceSummaries_InterfaceSummary
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetFilter() yfilter.YFilter { return interfaceSummaries.YFilter }

func (interfaceSummaries *Rsvp_InterfaceSummaries) SetFilter(yf yfilter.YFilter) { interfaceSummaries.YFilter = yf }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetGoName(yname string) string {
    if yname == "interface-summary" { return "InterfaceSummary" }
    return ""
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetSegmentPath() string {
    return "interface-summaries"
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-summary" {
        for _, c := range interfaceSummaries.InterfaceSummary {
            if interfaceSummaries.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceSummaries_InterfaceSummary{}
        interfaceSummaries.InterfaceSummary = append(interfaceSummaries.InterfaceSummary, child)
        return &interfaceSummaries.InterfaceSummary[len(interfaceSummaries.InterfaceSummary)-1]
    }
    return nil
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceSummaries.InterfaceSummary {
        children[interfaceSummaries.InterfaceSummary[i].GetSegmentPath()] = &interfaceSummaries.InterfaceSummary[i]
    }
    return children
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetYangName() string { return "interface-summaries" }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSummaries *Rsvp_InterfaceSummaries) SetParent(parent types.Entity) { interfaceSummaries.parent = parent }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetParent() types.Entity { return interfaceSummaries.parent }

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetParentYangName() string { return "rsvp" }

// Rsvp_InterfaceSummaries_InterfaceSummary
// Summary info about an RSVP-enabled interface
type Rsvp_InterfaceSummaries_InterfaceSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetFilter() yfilter.YFilter { return interfaceSummary.YFilter }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) SetFilter(yf yfilter.YFilter) { interfaceSummary.YFilter = yf }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "paths-in" { return "PathsIn" }
    if yname == "paths-out" { return "PathsOut" }
    if yname == "reservations-in" { return "ReservationsIn" }
    if yname == "reservations-out" { return "ReservationsOut" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetSegmentPath() string {
    return "interface-summary" + "[interface-name='" + fmt.Sprintf("%v", interfaceSummary.InterfaceName) + "']"
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &interfaceSummary.BandwidthInformation
    }
    return nil
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &interfaceSummary.BandwidthInformation
    return children
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceSummary.InterfaceName
    leafs["interface-name-xr"] = interfaceSummary.InterfaceNameXr
    leafs["paths-in"] = interfaceSummary.PathsIn
    leafs["paths-out"] = interfaceSummary.PathsOut
    leafs["reservations-in"] = interfaceSummary.ReservationsIn
    leafs["reservations-out"] = interfaceSummary.ReservationsOut
    return leafs
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetYangName() string { return "interface-summary" }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) SetParent(parent types.Entity) { interfaceSummary.parent = parent }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetParent() types.Entity { return interfaceSummary.parent }

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetParentYangName() string { return "interface-summaries" }

// Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation
// Interface bandwidth information
type Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetParentYangName() string { return "interface-summary" }

// Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_HelloInstanceBriefs
// Table of brief info about hello instances
type Rsvp_HelloInstanceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single hello instance. The type is slice of
    // Rsvp_HelloInstanceBriefs_HelloInstanceBrief.
    HelloInstanceBrief []Rsvp_HelloInstanceBriefs_HelloInstanceBrief
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetFilter() yfilter.YFilter { return helloInstanceBriefs.YFilter }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) SetFilter(yf yfilter.YFilter) { helloInstanceBriefs.YFilter = yf }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetGoName(yname string) string {
    if yname == "hello-instance-brief" { return "HelloInstanceBrief" }
    return ""
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetSegmentPath() string {
    return "hello-instance-briefs"
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-instance-brief" {
        for _, c := range helloInstanceBriefs.HelloInstanceBrief {
            if helloInstanceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_HelloInstanceBriefs_HelloInstanceBrief{}
        helloInstanceBriefs.HelloInstanceBrief = append(helloInstanceBriefs.HelloInstanceBrief, child)
        return &helloInstanceBriefs.HelloInstanceBrief[len(helloInstanceBriefs.HelloInstanceBrief)-1]
    }
    return nil
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInstanceBriefs.HelloInstanceBrief {
        children[helloInstanceBriefs.HelloInstanceBrief[i].GetSegmentPath()] = &helloInstanceBriefs.HelloInstanceBrief[i]
    }
    return children
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetYangName() string { return "hello-instance-briefs" }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) SetParent(parent types.Entity) { helloInstanceBriefs.parent = parent }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetParent() types.Entity { return helloInstanceBriefs.parent }

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_HelloInstanceBriefs_HelloInstanceBrief
// Brief info for a single hello instance
type Rsvp_HelloInstanceBriefs_HelloInstanceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    LostCommunicationTotal interface{}
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetFilter() yfilter.YFilter { return helloInstanceBrief.YFilter }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) SetFilter(yf yfilter.YFilter) { helloInstanceBrief.YFilter = yf }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    if yname == "lost-communication-total" { return "LostCommunicationTotal" }
    return ""
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetSegmentPath() string {
    return "hello-instance-brief" + "[source-address='" + fmt.Sprintf("%v", helloInstanceBrief.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInstanceBrief.DestinationAddress) + "']"
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInstanceBrief.SourceAddress
    leafs["destination-address"] = helloInstanceBrief.DestinationAddress
    leafs["source-address-xr"] = helloInstanceBrief.SourceAddressXr
    leafs["destination-address-xr"] = helloInstanceBrief.DestinationAddressXr
    leafs["neighbor-hello-state"] = helloInstanceBrief.NeighborHelloState
    leafs["instance-type"] = helloInstanceBrief.InstanceType
    leafs["hello-interface"] = helloInstanceBrief.HelloInterface
    leafs["lost-communication-total"] = helloInstanceBrief.LostCommunicationTotal
    return leafs
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetYangName() string { return "hello-instance-brief" }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) SetParent(parent types.Entity) { helloInstanceBrief.parent = parent }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetParent() types.Entity { return helloInstanceBrief.parent }

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetParentYangName() string { return "hello-instance-briefs" }

// Rsvp_AuthenticationDetails
// Table for detailed authentication related
// information
type Rsvp_AuthenticationDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // Rsvp_AuthenticationDetails_AuthenticationDetail.
    AuthenticationDetail []Rsvp_AuthenticationDetails_AuthenticationDetail
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetFilter() yfilter.YFilter { return authenticationDetails.YFilter }

func (authenticationDetails *Rsvp_AuthenticationDetails) SetFilter(yf yfilter.YFilter) { authenticationDetails.YFilter = yf }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetGoName(yname string) string {
    if yname == "authentication-detail" { return "AuthenticationDetail" }
    return ""
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetSegmentPath() string {
    return "authentication-details"
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "authentication-detail" {
        for _, c := range authenticationDetails.AuthenticationDetail {
            if authenticationDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_AuthenticationDetails_AuthenticationDetail{}
        authenticationDetails.AuthenticationDetail = append(authenticationDetails.AuthenticationDetail, child)
        return &authenticationDetails.AuthenticationDetail[len(authenticationDetails.AuthenticationDetail)-1]
    }
    return nil
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range authenticationDetails.AuthenticationDetail {
        children[authenticationDetails.AuthenticationDetail[i].GetSegmentPath()] = &authenticationDetails.AuthenticationDetail[i]
    }
    return children
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetYangName() string { return "authentication-details" }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationDetails *Rsvp_AuthenticationDetails) SetParent(parent types.Entity) { authenticationDetails.parent = parent }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetParent() types.Entity { return authenticationDetails.parent }

func (authenticationDetails *Rsvp_AuthenticationDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_AuthenticationDetails_AuthenticationDetail
// Brief Authentication information
type Rsvp_AuthenticationDetails_AuthenticationDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Key status. The type is interface{} with range: 0..4294967295.
    KeyStatus interface{}

    // Direction. The type is interface{} with range: 0..4294967295.
    KeyDigestInfo interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    Lifetime interface{}

    // Remaining lifetime (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    LifetimeLeft interface{}

    // Challenge status. The type is RsvpMgmtAuthChallengeStatus.
    ChallengeStatus interface{}

    // Basic authentication data.
    AuthCompact Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact

    // direction info.
    DirectionInfo Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetFilter() yfilter.YFilter { return authenticationDetail.YFilter }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) SetFilter(yf yfilter.YFilter) { authenticationDetail.YFilter = yf }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "mode-id" { return "ModeId" }
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "key-status" { return "KeyStatus" }
    if yname == "key-digest-info" { return "KeyDigestInfo" }
    if yname == "lifetime" { return "Lifetime" }
    if yname == "lifetime-left" { return "LifetimeLeft" }
    if yname == "challenge-status" { return "ChallengeStatus" }
    if yname == "auth-compact" { return "AuthCompact" }
    if yname == "direction-info" { return "DirectionInfo" }
    return ""
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetSegmentPath() string {
    return "authentication-detail" + "[source-address='" + fmt.Sprintf("%v", authenticationDetail.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", authenticationDetail.DestinationAddress) + "']" + "[mode-id='" + fmt.Sprintf("%v", authenticationDetail.ModeId) + "']" + "[interface-name='" + fmt.Sprintf("%v", authenticationDetail.InterfaceName) + "']"
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "auth-compact" {
        return &authenticationDetail.AuthCompact
    }
    if childYangName == "direction-info" {
        return &authenticationDetail.DirectionInfo
    }
    return nil
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["auth-compact"] = &authenticationDetail.AuthCompact
    children["direction-info"] = &authenticationDetail.DirectionInfo
    return children
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = authenticationDetail.SourceAddress
    leafs["destination-address"] = authenticationDetail.DestinationAddress
    leafs["mode-id"] = authenticationDetail.ModeId
    leafs["interface-name"] = authenticationDetail.InterfaceName
    leafs["key-status"] = authenticationDetail.KeyStatus
    leafs["key-digest-info"] = authenticationDetail.KeyDigestInfo
    leafs["lifetime"] = authenticationDetail.Lifetime
    leafs["lifetime-left"] = authenticationDetail.LifetimeLeft
    leafs["challenge-status"] = authenticationDetail.ChallengeStatus
    return leafs
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetBundleName() string { return "cisco_ios_xr" }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetYangName() string { return "authentication-detail" }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) SetParent(parent types.Entity) { authenticationDetail.parent = parent }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetParent() types.Entity { return authenticationDetail.parent }

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetParentYangName() string { return "authentication-details" }

// Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact
// Basic authentication data
type Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetFilter() yfilter.YFilter { return authCompact.YFilter }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) SetFilter(yf yfilter.YFilter) { authCompact.YFilter = yf }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetGoName(yname string) string {
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "direction" { return "Direction" }
    if yname == "key-type" { return "KeyType" }
    if yname == "key-source" { return "KeySource" }
    if yname == "key-id" { return "KeyId" }
    if yname == "key-id-valid" { return "KeyIdValid" }
    return ""
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetSegmentPath() string {
    return "auth-compact"
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address-xr"] = authCompact.SourceAddressXr
    leafs["destination-address-xr"] = authCompact.DestinationAddressXr
    leafs["neighbor-address"] = authCompact.NeighborAddress
    leafs["direction"] = authCompact.Direction
    leafs["key-type"] = authCompact.KeyType
    leafs["key-source"] = authCompact.KeySource
    leafs["key-id"] = authCompact.KeyId
    leafs["key-id-valid"] = authCompact.KeyIdValid
    return leafs
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetBundleName() string { return "cisco_ios_xr" }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetYangName() string { return "auth-compact" }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) SetParent(parent types.Entity) { authCompact.parent = parent }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetParent() types.Entity { return authCompact.parent }

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetParentYangName() string { return "authentication-detail" }

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo
// direction info
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AuthDirection. The type is RsvpMgmtAuthDirection.
    AuthDirection interface{}

    // send info.
    SendInfo Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo

    // receive info.
    ReceiveInfo Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetFilter() yfilter.YFilter { return directionInfo.YFilter }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) SetFilter(yf yfilter.YFilter) { directionInfo.YFilter = yf }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetGoName(yname string) string {
    if yname == "auth-direction" { return "AuthDirection" }
    if yname == "send-info" { return "SendInfo" }
    if yname == "receive-info" { return "ReceiveInfo" }
    return ""
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetSegmentPath() string {
    return "direction-info"
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "send-info" {
        return &directionInfo.SendInfo
    }
    if childYangName == "receive-info" {
        return &directionInfo.ReceiveInfo
    }
    return nil
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["send-info"] = &directionInfo.SendInfo
    children["receive-info"] = &directionInfo.ReceiveInfo
    return children
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["auth-direction"] = directionInfo.AuthDirection
    return leafs
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetBundleName() string { return "cisco_ios_xr" }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetYangName() string { return "direction-info" }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) SetParent(parent types.Entity) { directionInfo.parent = parent }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetParent() types.Entity { return directionInfo.parent }

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetParentYangName() string { return "authentication-detail" }

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo
// send info
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Counters.
    Counters Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetFilter() yfilter.YFilter { return sendInfo.YFilter }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) SetFilter(yf yfilter.YFilter) { sendInfo.YFilter = yf }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetGoName(yname string) string {
    if yname == "sequence" { return "Sequence" }
    if yname == "counters" { return "Counters" }
    return ""
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetSegmentPath() string {
    return "send-info"
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &sendInfo.Counters
    }
    return nil
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &sendInfo.Counters
    return children
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence"] = sendInfo.Sequence
    return leafs
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetBundleName() string { return "cisco_ios_xr" }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetYangName() string { return "send-info" }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) SetParent(parent types.Entity) { sendInfo.parent = parent }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetParent() types.Entity { return sendInfo.parent }

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetParentYangName() string { return "direction-info" }

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
// Counters
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Messages sent. The type is interface{} with range: 0..4294967295.
    AuthenticationSent interface{}

    // Failures. The type is interface{} with range: 0..4294967295.
    AuthenticationFailures interface{}

    // Challenges received. The type is interface{} with range: 0..4294967295.
    AuthenticationSendChallengesReceived interface{}

    // Challenge responses sent. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationChallengeResponsesSent interface{}
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetGoName(yname string) string {
    if yname == "authentication-sent" { return "AuthenticationSent" }
    if yname == "authentication-failures" { return "AuthenticationFailures" }
    if yname == "authentication-send-challenges-received" { return "AuthenticationSendChallengesReceived" }
    if yname == "authentication-challenge-responses-sent" { return "AuthenticationChallengeResponsesSent" }
    return ""
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authentication-sent"] = counters.AuthenticationSent
    leafs["authentication-failures"] = counters.AuthenticationFailures
    leafs["authentication-send-challenges-received"] = counters.AuthenticationSendChallengesReceived
    leafs["authentication-challenge-responses-sent"] = counters.AuthenticationChallengeResponsesSent
    return leafs
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetYangName() string { return "counters" }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetParent() types.Entity { return counters.parent }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetParentYangName() string { return "send-info" }

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
// receive info
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Sequence window size. The type is interface{} with range: 0..4294967295.
    SequenceWindowSize interface{}

    // Sequence window count. The type is interface{} with range: 0..4294967295.
    SequenceWindowCount interface{}

    // Sequence window. The type is slice of interface{} with range:
    // 0..18446744073709551615.
    SequenceWindow []interface{}

    // Counters.
    Counters Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetFilter() yfilter.YFilter { return receiveInfo.YFilter }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) SetFilter(yf yfilter.YFilter) { receiveInfo.YFilter = yf }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetGoName(yname string) string {
    if yname == "sequence" { return "Sequence" }
    if yname == "sequence-window-size" { return "SequenceWindowSize" }
    if yname == "sequence-window-count" { return "SequenceWindowCount" }
    if yname == "sequence-window" { return "SequenceWindow" }
    if yname == "counters" { return "Counters" }
    return ""
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetSegmentPath() string {
    return "receive-info"
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "counters" {
        return &receiveInfo.Counters
    }
    return nil
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["counters"] = &receiveInfo.Counters
    return children
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sequence"] = receiveInfo.Sequence
    leafs["sequence-window-size"] = receiveInfo.SequenceWindowSize
    leafs["sequence-window-count"] = receiveInfo.SequenceWindowCount
    leafs["sequence-window"] = receiveInfo.SequenceWindow
    return leafs
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetBundleName() string { return "cisco_ios_xr" }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetYangName() string { return "receive-info" }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) SetParent(parent types.Entity) { receiveInfo.parent = parent }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetParent() types.Entity { return receiveInfo.parent }

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetParentYangName() string { return "direction-info" }

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters
// Counters
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Valid messages. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedValidMessages interface{}

    // Challenges sent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesSent interface{}

    // Challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengeResponse interface{}

    // Challenges resent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesResent interface{}

    // Challenge timeouts. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengeTimeouts interface{}

    // Authentication received during challenge. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedDuringChallenge interface{}

    // Authentication received incomplete. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedIncomplete interface{}

    // Authentication received with no integrity. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedNoIntegrity interface{}

    // Authentication received with bad digest. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedBadDigest interface{}

    // Authentication received with wrong digest type. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedWrongDigestType interface{}

    // Authentication received with duplicate sequence number. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberDuplicate interface{}

    // Authentication received with sequence number out of range. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberOutofRange interface{}

    // Incorect challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedWrongChallengesResponse interface{}

    // Duplicate challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengesResponseDuplicate interface{}

    // Challenge responses received late. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedResponseLate interface{}

    // Authentication received with bad mesage format. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedBadMessageFormat interface{}
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetGoName(yname string) string {
    if yname == "authentication-received-valid-messages" { return "AuthenticationReceivedValidMessages" }
    if yname == "authentication-received-challenges-sent" { return "AuthenticationReceivedChallengesSent" }
    if yname == "authentication-received-challenge-response" { return "AuthenticationReceivedChallengeResponse" }
    if yname == "authentication-received-challenges-resent" { return "AuthenticationReceivedChallengesResent" }
    if yname == "authentication-received-challenge-timeouts" { return "AuthenticationReceivedChallengeTimeouts" }
    if yname == "authentication-received-during-challenge" { return "AuthenticationReceivedDuringChallenge" }
    if yname == "authentication-received-incomplete" { return "AuthenticationReceivedIncomplete" }
    if yname == "authentication-received-no-integrity" { return "AuthenticationReceivedNoIntegrity" }
    if yname == "authentication-received-bad-digest" { return "AuthenticationReceivedBadDigest" }
    if yname == "authentication-received-wrong-digest-type" { return "AuthenticationReceivedWrongDigestType" }
    if yname == "authentication-received-sequence-number-duplicate" { return "AuthenticationReceivedSequenceNumberDuplicate" }
    if yname == "authentication-received-sequence-number-outof-range" { return "AuthenticationReceivedSequenceNumberOutofRange" }
    if yname == "authentication-received-wrong-challenges-response" { return "AuthenticationReceivedWrongChallengesResponse" }
    if yname == "authentication-received-challenges-response-duplicate" { return "AuthenticationReceivedChallengesResponseDuplicate" }
    if yname == "authentication-received-response-late" { return "AuthenticationReceivedResponseLate" }
    if yname == "authentication-received-bad-message-format" { return "AuthenticationReceivedBadMessageFormat" }
    return ""
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["authentication-received-valid-messages"] = counters.AuthenticationReceivedValidMessages
    leafs["authentication-received-challenges-sent"] = counters.AuthenticationReceivedChallengesSent
    leafs["authentication-received-challenge-response"] = counters.AuthenticationReceivedChallengeResponse
    leafs["authentication-received-challenges-resent"] = counters.AuthenticationReceivedChallengesResent
    leafs["authentication-received-challenge-timeouts"] = counters.AuthenticationReceivedChallengeTimeouts
    leafs["authentication-received-during-challenge"] = counters.AuthenticationReceivedDuringChallenge
    leafs["authentication-received-incomplete"] = counters.AuthenticationReceivedIncomplete
    leafs["authentication-received-no-integrity"] = counters.AuthenticationReceivedNoIntegrity
    leafs["authentication-received-bad-digest"] = counters.AuthenticationReceivedBadDigest
    leafs["authentication-received-wrong-digest-type"] = counters.AuthenticationReceivedWrongDigestType
    leafs["authentication-received-sequence-number-duplicate"] = counters.AuthenticationReceivedSequenceNumberDuplicate
    leafs["authentication-received-sequence-number-outof-range"] = counters.AuthenticationReceivedSequenceNumberOutofRange
    leafs["authentication-received-wrong-challenges-response"] = counters.AuthenticationReceivedWrongChallengesResponse
    leafs["authentication-received-challenges-response-duplicate"] = counters.AuthenticationReceivedChallengesResponseDuplicate
    leafs["authentication-received-response-late"] = counters.AuthenticationReceivedResponseLate
    leafs["authentication-received-bad-message-format"] = counters.AuthenticationReceivedBadMessageFormat
    return leafs
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetYangName() string { return "counters" }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetParent() types.Entity { return counters.parent }

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetParentYangName() string { return "receive-info" }

// Rsvp_RsbBriefs
// Table of brief info about reservation state
// blocks
type Rsvp_RsbBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single reservation state block. The type is slice of
    // Rsvp_RsbBriefs_RsbBrief.
    RsbBrief []Rsvp_RsbBriefs_RsbBrief
}

func (rsbBriefs *Rsvp_RsbBriefs) GetFilter() yfilter.YFilter { return rsbBriefs.YFilter }

func (rsbBriefs *Rsvp_RsbBriefs) SetFilter(yf yfilter.YFilter) { rsbBriefs.YFilter = yf }

func (rsbBriefs *Rsvp_RsbBriefs) GetGoName(yname string) string {
    if yname == "rsb-brief" { return "RsbBrief" }
    return ""
}

func (rsbBriefs *Rsvp_RsbBriefs) GetSegmentPath() string {
    return "rsb-briefs"
}

func (rsbBriefs *Rsvp_RsbBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsb-brief" {
        for _, c := range rsbBriefs.RsbBrief {
            if rsbBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RsbBriefs_RsbBrief{}
        rsbBriefs.RsbBrief = append(rsbBriefs.RsbBrief, child)
        return &rsbBriefs.RsbBrief[len(rsbBriefs.RsbBrief)-1]
    }
    return nil
}

func (rsbBriefs *Rsvp_RsbBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rsbBriefs.RsbBrief {
        children[rsbBriefs.RsbBrief[i].GetSegmentPath()] = &rsbBriefs.RsbBrief[i]
    }
    return children
}

func (rsbBriefs *Rsvp_RsbBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rsbBriefs *Rsvp_RsbBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (rsbBriefs *Rsvp_RsbBriefs) GetYangName() string { return "rsb-briefs" }

func (rsbBriefs *Rsvp_RsbBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbBriefs *Rsvp_RsbBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbBriefs *Rsvp_RsbBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbBriefs *Rsvp_RsbBriefs) SetParent(parent types.Entity) { rsbBriefs.parent = parent }

func (rsbBriefs *Rsvp_RsbBriefs) GetParent() types.Entity { return rsbBriefs.parent }

func (rsbBriefs *Rsvp_RsbBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_RsbBriefs_RsbBrief
// Brief info for a single reservation state block
type Rsvp_RsbBriefs_RsbBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Reservation Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_RsbBriefs_RsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_RsbBriefs_RsbBrief_S2LSubLsp

    // Flow Spec Information.
    FlowSpec Rsvp_RsbBriefs_RsbBrief_FlowSpec

    // Generic Flow Spec Info.
    GenericFlowSpec Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec

    // RSVP Style.
    Style Rsvp_RsbBriefs_RsbBrief_Style

    // RSVP Filter.
    Filter Rsvp_RsbBriefs_RsbBrief_Filter
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetFilter() yfilter.YFilter { return rsbBrief.YFilter }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) SetFilter(yf yfilter.YFilter) { rsbBrief.YFilter = yf }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "style" { return "Style" }
    if yname == "filter" { return "Filter" }
    return ""
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetSegmentPath() string {
    return "rsb-brief"
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &rsbBrief.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &rsbBrief.S2LSubLsp
    }
    if childYangName == "flow-spec" {
        return &rsbBrief.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rsbBrief.GenericFlowSpec
    }
    if childYangName == "style" {
        return &rsbBrief.Style
    }
    if childYangName == "filter" {
        return &rsbBrief.Filter
    }
    return nil
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &rsbBrief.Session
    children["s2l-sub-lsp"] = &rsbBrief.S2LSubLsp
    children["flow-spec"] = &rsbBrief.FlowSpec
    children["generic-flow-spec"] = &rsbBrief.GenericFlowSpec
    children["style"] = &rsbBrief.Style
    children["filter"] = &rsbBrief.Filter
    return children
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = rsbBrief.DestinationAddress
    leafs["destination-port"] = rsbBrief.DestinationPort
    leafs["protocol"] = rsbBrief.Protocol
    leafs["extended-tunnel-id"] = rsbBrief.ExtendedTunnelId
    leafs["session-type"] = rsbBrief.SessionType
    leafs["p2mp-id"] = rsbBrief.P2MpId
    leafs["source-address"] = rsbBrief.SourceAddress
    leafs["source-port"] = rsbBrief.SourcePort
    leafs["sub-group-origin"] = rsbBrief.SubGroupOrigin
    leafs["sub-group-id"] = rsbBrief.SubGroupId
    leafs["vrf-name"] = rsbBrief.VrfName
    leafs["input-interface"] = rsbBrief.InputInterface
    return leafs
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetBundleName() string { return "cisco_ios_xr" }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetYangName() string { return "rsb-brief" }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) SetParent(parent types.Entity) { rsbBrief.parent = parent }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetParent() types.Entity { return rsbBrief.parent }

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetParentYangName() string { return "rsb-briefs" }

// Rsvp_RsbBriefs_RsbBrief_Session
// RSVP Session Information
type Rsvp_RsbBriefs_RsbBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetYangName() string { return "session" }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetParentYangName() string { return "rsb-brief" }

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession
// RSVP Session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RsbBriefs_RsbBrief_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RsbBriefs_RsbBrief_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_RsbBriefs_RsbBrief_S2LSubLsp) GetParentYangName() string { return "rsb-brief" }

// Rsvp_RsbBriefs_RsbBrief_FlowSpec
// Flow Spec Information
type Rsvp_RsbBriefs_RsbBrief_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetParentYangName() string { return "rsb-brief" }

// Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec
// Generic Flow Spec Info
type Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetParentYangName() string { return "rsb-brief" }

// Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// Rsvp_RsbBriefs_RsbBrief_Style
// RSVP Style
type Rsvp_RsbBriefs_RsbBrief_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetSegmentPath() string {
    return "style"
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetYangName() string { return "style" }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetParent() types.Entity { return style.parent }

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetParentYangName() string { return "rsb-brief" }

// Rsvp_RsbBriefs_RsbBrief_Filter
// RSVP Filter
type Rsvp_RsbBriefs_RsbBrief_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetYangName() string { return "filter" }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetParent() types.Entity { return filter.parent }

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetParentYangName() string { return "rsb-brief" }

// Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_OpenConfig
// OpenConfig info
type Rsvp_OpenConfig struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Platform wide RSVP statistics and counters.
    GlobalCounters Rsvp_OpenConfig_GlobalCounters

    // Table of info about RSVP-enabled interface counters for OpenConfig.
    InterfaceCounters Rsvp_OpenConfig_InterfaceCounters
}

func (openConfig *Rsvp_OpenConfig) GetFilter() yfilter.YFilter { return openConfig.YFilter }

func (openConfig *Rsvp_OpenConfig) SetFilter(yf yfilter.YFilter) { openConfig.YFilter = yf }

func (openConfig *Rsvp_OpenConfig) GetGoName(yname string) string {
    if yname == "global-counters" { return "GlobalCounters" }
    if yname == "interface-counters" { return "InterfaceCounters" }
    return ""
}

func (openConfig *Rsvp_OpenConfig) GetSegmentPath() string {
    return "open-config"
}

func (openConfig *Rsvp_OpenConfig) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-counters" {
        return &openConfig.GlobalCounters
    }
    if childYangName == "interface-counters" {
        return &openConfig.InterfaceCounters
    }
    return nil
}

func (openConfig *Rsvp_OpenConfig) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-counters"] = &openConfig.GlobalCounters
    children["interface-counters"] = &openConfig.InterfaceCounters
    return children
}

func (openConfig *Rsvp_OpenConfig) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (openConfig *Rsvp_OpenConfig) GetBundleName() string { return "cisco_ios_xr" }

func (openConfig *Rsvp_OpenConfig) GetYangName() string { return "open-config" }

func (openConfig *Rsvp_OpenConfig) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (openConfig *Rsvp_OpenConfig) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (openConfig *Rsvp_OpenConfig) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (openConfig *Rsvp_OpenConfig) SetParent(parent types.Entity) { openConfig.parent = parent }

func (openConfig *Rsvp_OpenConfig) GetParent() types.Entity { return openConfig.parent }

func (openConfig *Rsvp_OpenConfig) GetParentYangName() string { return "rsvp" }

// Rsvp_OpenConfig_GlobalCounters
// Platform wide RSVP statistics and counters
type Rsvp_OpenConfig_GlobalCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global count of Path Timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    PathTimeouts interface{}

    // Global count of reservation timeouts. The type is interface{} with range:
    // 0..18446744073709551615.
    ReservationTimeouts interface{}

    // Global count of rate limited messages. The type is interface{} with range:
    // 0..18446744073709551615.
    RateLimitedMessages interface{}

    // Global count of path messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    InPathMessages interface{}

    // Global count of path error messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathErrorMessages interface{}

    // Global count of path tear messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathTearMessages interface{}

    // Global count of reservation messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InReservationMessages interface{}

    // Global count of reservation error messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationErrorMessages interface{}

    // Global count of reservation tear messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InReservationTearMessages interface{}

    // Global count of hello messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InHelloMessages interface{}

    // Global count of srefresh messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InSrefreshMessages interface{}

    // Global count of ack messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    InAckMessages interface{}

    // Global count of path messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutPathMessages interface{}

    // Global count of path error messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathErrorMessages interface{}

    // Global count of path tear messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathTearMessages interface{}

    // Global count of reservation messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutReservationMessages interface{}

    // Global count of reservation error messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutReservationErrorMessages interface{}

    // Global count of reservation tear messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutReservationTearMessages interface{}

    // Global count of hello messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutHelloMessages interface{}

    // Global count of srefresh messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutSrefreshMessages interface{}

    // Global count of ack messages send. The type is interface{} with range:
    // 0..18446744073709551615.
    OutAckMessages interface{}
}

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetFilter() yfilter.YFilter { return globalCounters.YFilter }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) SetFilter(yf yfilter.YFilter) { globalCounters.YFilter = yf }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetGoName(yname string) string {
    if yname == "path-timeouts" { return "PathTimeouts" }
    if yname == "reservation-timeouts" { return "ReservationTimeouts" }
    if yname == "rate-limited-messages" { return "RateLimitedMessages" }
    if yname == "in-path-messages" { return "InPathMessages" }
    if yname == "in-path-error-messages" { return "InPathErrorMessages" }
    if yname == "in-path-tear-messages" { return "InPathTearMessages" }
    if yname == "in-reservation-messages" { return "InReservationMessages" }
    if yname == "in-reservation-error-messages" { return "InReservationErrorMessages" }
    if yname == "in-reservation-tear-messages" { return "InReservationTearMessages" }
    if yname == "in-hello-messages" { return "InHelloMessages" }
    if yname == "in-srefresh-messages" { return "InSrefreshMessages" }
    if yname == "in-ack-messages" { return "InAckMessages" }
    if yname == "out-path-messages" { return "OutPathMessages" }
    if yname == "out-path-error-messages" { return "OutPathErrorMessages" }
    if yname == "out-path-tear-messages" { return "OutPathTearMessages" }
    if yname == "out-reservation-messages" { return "OutReservationMessages" }
    if yname == "out-reservation-error-messages" { return "OutReservationErrorMessages" }
    if yname == "out-reservation-tear-messages" { return "OutReservationTearMessages" }
    if yname == "out-hello-messages" { return "OutHelloMessages" }
    if yname == "out-srefresh-messages" { return "OutSrefreshMessages" }
    if yname == "out-ack-messages" { return "OutAckMessages" }
    return ""
}

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetSegmentPath() string {
    return "global-counters"
}

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path-timeouts"] = globalCounters.PathTimeouts
    leafs["reservation-timeouts"] = globalCounters.ReservationTimeouts
    leafs["rate-limited-messages"] = globalCounters.RateLimitedMessages
    leafs["in-path-messages"] = globalCounters.InPathMessages
    leafs["in-path-error-messages"] = globalCounters.InPathErrorMessages
    leafs["in-path-tear-messages"] = globalCounters.InPathTearMessages
    leafs["in-reservation-messages"] = globalCounters.InReservationMessages
    leafs["in-reservation-error-messages"] = globalCounters.InReservationErrorMessages
    leafs["in-reservation-tear-messages"] = globalCounters.InReservationTearMessages
    leafs["in-hello-messages"] = globalCounters.InHelloMessages
    leafs["in-srefresh-messages"] = globalCounters.InSrefreshMessages
    leafs["in-ack-messages"] = globalCounters.InAckMessages
    leafs["out-path-messages"] = globalCounters.OutPathMessages
    leafs["out-path-error-messages"] = globalCounters.OutPathErrorMessages
    leafs["out-path-tear-messages"] = globalCounters.OutPathTearMessages
    leafs["out-reservation-messages"] = globalCounters.OutReservationMessages
    leafs["out-reservation-error-messages"] = globalCounters.OutReservationErrorMessages
    leafs["out-reservation-tear-messages"] = globalCounters.OutReservationTearMessages
    leafs["out-hello-messages"] = globalCounters.OutHelloMessages
    leafs["out-srefresh-messages"] = globalCounters.OutSrefreshMessages
    leafs["out-ack-messages"] = globalCounters.OutAckMessages
    return leafs
}

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetBundleName() string { return "cisco_ios_xr" }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetYangName() string { return "global-counters" }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) SetParent(parent types.Entity) { globalCounters.parent = parent }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetParent() types.Entity { return globalCounters.parent }

func (globalCounters *Rsvp_OpenConfig_GlobalCounters) GetParentYangName() string { return "open-config" }

// Rsvp_OpenConfig_InterfaceCounters
// Table of info about RSVP-enabled interface
// counters for OpenConfig
type Rsvp_OpenConfig_InterfaceCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Info about an RSVP-enabled interface counters. The type is slice of
    // Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter.
    InterfaceCounter []Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter
}

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetFilter() yfilter.YFilter { return interfaceCounters.YFilter }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) SetFilter(yf yfilter.YFilter) { interfaceCounters.YFilter = yf }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetGoName(yname string) string {
    if yname == "interface-counter" { return "InterfaceCounter" }
    return ""
}

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetSegmentPath() string {
    return "interface-counters"
}

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-counter" {
        for _, c := range interfaceCounters.InterfaceCounter {
            if interfaceCounters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter{}
        interfaceCounters.InterfaceCounter = append(interfaceCounters.InterfaceCounter, child)
        return &interfaceCounters.InterfaceCounter[len(interfaceCounters.InterfaceCounter)-1]
    }
    return nil
}

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceCounters.InterfaceCounter {
        children[interfaceCounters.InterfaceCounter[i].GetSegmentPath()] = &interfaceCounters.InterfaceCounter[i]
    }
    return children
}

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetYangName() string { return "interface-counters" }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) SetParent(parent types.Entity) { interfaceCounters.parent = parent }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetParent() types.Entity { return interfaceCounters.parent }

func (interfaceCounters *Rsvp_OpenConfig_InterfaceCounters) GetParentYangName() string { return "open-config" }

// Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter
// Info about an RSVP-enabled interface counters
type Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface name. The type is string.
    InterfaceNameXr interface{}

    // Per interface count of path messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InPathMessages interface{}

    // Per interface count of path error messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InPathErrorMessages interface{}

    // Per interface count of path tear messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InPathTearMessages interface{}

    // Per interface count of reservation messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationMessages interface{}

    // Per interface count of reservation error messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationErrorMessages interface{}

    // Per interface count of reservation tear messages received. The type is
    // interface{} with range: 0..18446744073709551615.
    InReservationTearMessages interface{}

    // Per interface count of hello messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InHelloMessages interface{}

    // Per interface count of srefresh messages received. The type is interface{}
    // with range: 0..18446744073709551615.
    InSrefreshMessages interface{}

    // Per interface count of ack messages received. The type is interface{} with
    // range: 0..18446744073709551615.
    InAckMessages interface{}

    // Per interface count of path messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutPathMessages interface{}

    // Per interface count of path error messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutPathErrorMessages interface{}

    // Per interface count of path tear messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutPathTearMessages interface{}

    // Per interface count of reservation messages send. The type is interface{}
    // with range: 0..18446744073709551615.
    OutReservationMessages interface{}

    // Per interface count of reservation error messages send. The type is
    // interface{} with range: 0..18446744073709551615.
    OutReservationErrorMessages interface{}

    // Per interface count of reservation tear messages send. The type is
    // interface{} with range: 0..18446744073709551615.
    OutReservationTearMessages interface{}

    // Per interface count of hello messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutHelloMessages interface{}

    // Per interface count of srefresh messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutSrefreshMessages interface{}

    // Per interface count of ack messages send. The type is interface{} with
    // range: 0..18446744073709551615.
    OutAckMessages interface{}
}

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetFilter() yfilter.YFilter { return interfaceCounter.YFilter }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) SetFilter(yf yfilter.YFilter) { interfaceCounter.YFilter = yf }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "in-path-messages" { return "InPathMessages" }
    if yname == "in-path-error-messages" { return "InPathErrorMessages" }
    if yname == "in-path-tear-messages" { return "InPathTearMessages" }
    if yname == "in-reservation-messages" { return "InReservationMessages" }
    if yname == "in-reservation-error-messages" { return "InReservationErrorMessages" }
    if yname == "in-reservation-tear-messages" { return "InReservationTearMessages" }
    if yname == "in-hello-messages" { return "InHelloMessages" }
    if yname == "in-srefresh-messages" { return "InSrefreshMessages" }
    if yname == "in-ack-messages" { return "InAckMessages" }
    if yname == "out-path-messages" { return "OutPathMessages" }
    if yname == "out-path-error-messages" { return "OutPathErrorMessages" }
    if yname == "out-path-tear-messages" { return "OutPathTearMessages" }
    if yname == "out-reservation-messages" { return "OutReservationMessages" }
    if yname == "out-reservation-error-messages" { return "OutReservationErrorMessages" }
    if yname == "out-reservation-tear-messages" { return "OutReservationTearMessages" }
    if yname == "out-hello-messages" { return "OutHelloMessages" }
    if yname == "out-srefresh-messages" { return "OutSrefreshMessages" }
    if yname == "out-ack-messages" { return "OutAckMessages" }
    return ""
}

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetSegmentPath() string {
    return "interface-counter" + "[interface-name='" + fmt.Sprintf("%v", interfaceCounter.InterfaceName) + "']"
}

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceCounter.InterfaceName
    leafs["interface-name-xr"] = interfaceCounter.InterfaceNameXr
    leafs["in-path-messages"] = interfaceCounter.InPathMessages
    leafs["in-path-error-messages"] = interfaceCounter.InPathErrorMessages
    leafs["in-path-tear-messages"] = interfaceCounter.InPathTearMessages
    leafs["in-reservation-messages"] = interfaceCounter.InReservationMessages
    leafs["in-reservation-error-messages"] = interfaceCounter.InReservationErrorMessages
    leafs["in-reservation-tear-messages"] = interfaceCounter.InReservationTearMessages
    leafs["in-hello-messages"] = interfaceCounter.InHelloMessages
    leafs["in-srefresh-messages"] = interfaceCounter.InSrefreshMessages
    leafs["in-ack-messages"] = interfaceCounter.InAckMessages
    leafs["out-path-messages"] = interfaceCounter.OutPathMessages
    leafs["out-path-error-messages"] = interfaceCounter.OutPathErrorMessages
    leafs["out-path-tear-messages"] = interfaceCounter.OutPathTearMessages
    leafs["out-reservation-messages"] = interfaceCounter.OutReservationMessages
    leafs["out-reservation-error-messages"] = interfaceCounter.OutReservationErrorMessages
    leafs["out-reservation-tear-messages"] = interfaceCounter.OutReservationTearMessages
    leafs["out-hello-messages"] = interfaceCounter.OutHelloMessages
    leafs["out-srefresh-messages"] = interfaceCounter.OutSrefreshMessages
    leafs["out-ack-messages"] = interfaceCounter.OutAckMessages
    return leafs
}

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetYangName() string { return "interface-counter" }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) SetParent(parent types.Entity) { interfaceCounter.parent = parent }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetParent() types.Entity { return interfaceCounter.parent }

func (interfaceCounter *Rsvp_OpenConfig_InterfaceCounters_InterfaceCounter) GetParentYangName() string { return "interface-counters" }

// Rsvp_Counters
// Counters
type Rsvp_Counters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Table of message counters.
    InterfaceMessages Rsvp_Counters_InterfaceMessages

    // Summary information for all RSVP message counters.
    MessageSummary Rsvp_Counters_MessageSummary

    // Prefix filtering counters.
    PrefixFiltering Rsvp_Counters_PrefixFiltering

    // Out of resource counters.
    OutOfResource Rsvp_Counters_OutOfResource

    // Event counters.
    InterfaceEvents Rsvp_Counters_InterfaceEvents

    // Summary information for all RSVP NSR counters.
    Nsr Rsvp_Counters_Nsr

    // Summary information for all RSVP ISSU counters.
    Issu Rsvp_Counters_Issu

    // Summary information for all RSVP database counters.
    Database Rsvp_Counters_Database

    // Table containing event sync counters.
    EventSyncs Rsvp_Counters_EventSyncs
}

func (counters *Rsvp_Counters) GetFilter() yfilter.YFilter { return counters.YFilter }

func (counters *Rsvp_Counters) SetFilter(yf yfilter.YFilter) { counters.YFilter = yf }

func (counters *Rsvp_Counters) GetGoName(yname string) string {
    if yname == "interface-messages" { return "InterfaceMessages" }
    if yname == "message-summary" { return "MessageSummary" }
    if yname == "prefix-filtering" { return "PrefixFiltering" }
    if yname == "out-of-resource" { return "OutOfResource" }
    if yname == "interface-events" { return "InterfaceEvents" }
    if yname == "nsr" { return "Nsr" }
    if yname == "issu" { return "Issu" }
    if yname == "database" { return "Database" }
    if yname == "event-syncs" { return "EventSyncs" }
    return ""
}

func (counters *Rsvp_Counters) GetSegmentPath() string {
    return "counters"
}

func (counters *Rsvp_Counters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-messages" {
        return &counters.InterfaceMessages
    }
    if childYangName == "message-summary" {
        return &counters.MessageSummary
    }
    if childYangName == "prefix-filtering" {
        return &counters.PrefixFiltering
    }
    if childYangName == "out-of-resource" {
        return &counters.OutOfResource
    }
    if childYangName == "interface-events" {
        return &counters.InterfaceEvents
    }
    if childYangName == "nsr" {
        return &counters.Nsr
    }
    if childYangName == "issu" {
        return &counters.Issu
    }
    if childYangName == "database" {
        return &counters.Database
    }
    if childYangName == "event-syncs" {
        return &counters.EventSyncs
    }
    return nil
}

func (counters *Rsvp_Counters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interface-messages"] = &counters.InterfaceMessages
    children["message-summary"] = &counters.MessageSummary
    children["prefix-filtering"] = &counters.PrefixFiltering
    children["out-of-resource"] = &counters.OutOfResource
    children["interface-events"] = &counters.InterfaceEvents
    children["nsr"] = &counters.Nsr
    children["issu"] = &counters.Issu
    children["database"] = &counters.Database
    children["event-syncs"] = &counters.EventSyncs
    return children
}

func (counters *Rsvp_Counters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (counters *Rsvp_Counters) GetBundleName() string { return "cisco_ios_xr" }

func (counters *Rsvp_Counters) GetYangName() string { return "counters" }

func (counters *Rsvp_Counters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (counters *Rsvp_Counters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (counters *Rsvp_Counters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (counters *Rsvp_Counters) SetParent(parent types.Entity) { counters.parent = parent }

func (counters *Rsvp_Counters) GetParent() types.Entity { return counters.parent }

func (counters *Rsvp_Counters) GetParentYangName() string { return "rsvp" }

// Rsvp_Counters_InterfaceMessages
// Table of message counters
type Rsvp_Counters_InterfaceMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface message counters. The type is slice of
    // Rsvp_Counters_InterfaceMessages_InterfaceMessage.
    InterfaceMessage []Rsvp_Counters_InterfaceMessages_InterfaceMessage
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetFilter() yfilter.YFilter { return interfaceMessages.YFilter }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) SetFilter(yf yfilter.YFilter) { interfaceMessages.YFilter = yf }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetGoName(yname string) string {
    if yname == "interface-message" { return "InterfaceMessage" }
    return ""
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetSegmentPath() string {
    return "interface-messages"
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-message" {
        for _, c := range interfaceMessages.InterfaceMessage {
            if interfaceMessages.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Counters_InterfaceMessages_InterfaceMessage{}
        interfaceMessages.InterfaceMessage = append(interfaceMessages.InterfaceMessage, child)
        return &interfaceMessages.InterfaceMessage[len(interfaceMessages.InterfaceMessage)-1]
    }
    return nil
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceMessages.InterfaceMessage {
        children[interfaceMessages.InterfaceMessage[i].GetSegmentPath()] = &interfaceMessages.InterfaceMessage[i]
    }
    return children
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetYangName() string { return "interface-messages" }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) SetParent(parent types.Entity) { interfaceMessages.parent = parent }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetParent() types.Entity { return interfaceMessages.parent }

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetParentYangName() string { return "counters" }

// Rsvp_Counters_InterfaceMessages_InterfaceMessage
// Interface message counters
type Rsvp_Counters_InterfaceMessages_InterfaceMessage struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetFilter() yfilter.YFilter { return interfaceMessage.YFilter }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) SetFilter(yf yfilter.YFilter) { interfaceMessage.YFilter = yf }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "retransmitted-messages" { return "RetransmittedMessages" }
    if yname == "out-of-order-messages" { return "OutOfOrderMessages" }
    if yname == "rate-limited-messages" { return "RateLimitedMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmitted-messages" { return "TransmittedMessages" }
    if yname == "bundle-received-messages" { return "BundleReceivedMessages" }
    if yname == "bundle-transmitted-messages" { return "BundleTransmittedMessages" }
    return ""
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetSegmentPath() string {
    return "interface-message" + "[interface-name='" + fmt.Sprintf("%v", interfaceMessage.InterfaceName) + "']"
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-messages" {
        return &interfaceMessage.ReceivedMessages
    }
    if childYangName == "transmitted-messages" {
        return &interfaceMessage.TransmittedMessages
    }
    if childYangName == "bundle-received-messages" {
        return &interfaceMessage.BundleReceivedMessages
    }
    if childYangName == "bundle-transmitted-messages" {
        return &interfaceMessage.BundleTransmittedMessages
    }
    return nil
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-messages"] = &interfaceMessage.ReceivedMessages
    children["transmitted-messages"] = &interfaceMessage.TransmittedMessages
    children["bundle-received-messages"] = &interfaceMessage.BundleReceivedMessages
    children["bundle-transmitted-messages"] = &interfaceMessage.BundleTransmittedMessages
    return children
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceMessage.InterfaceName
    leafs["retransmitted-messages"] = interfaceMessage.RetransmittedMessages
    leafs["out-of-order-messages"] = interfaceMessage.OutOfOrderMessages
    leafs["rate-limited-messages"] = interfaceMessage.RateLimitedMessages
    return leafs
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetYangName() string { return "interface-message" }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) SetParent(parent types.Entity) { interfaceMessage.parent = parent }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetParent() types.Entity { return interfaceMessage.parent }

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetParentYangName() string { return "interface-messages" }

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages
// Count of messages received
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetFilter() yfilter.YFilter { return receivedMessages.YFilter }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) SetFilter(yf yfilter.YFilter) { receivedMessages.YFilter = yf }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetSegmentPath() string {
    return "received-messages"
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = receivedMessages.Path
    leafs["reservation"] = receivedMessages.Reservation
    leafs["path-error"] = receivedMessages.PathError
    leafs["reservation-error"] = receivedMessages.ReservationError
    leafs["path-tear"] = receivedMessages.PathTear
    leafs["reservation-tear"] = receivedMessages.ReservationTear
    leafs["reservation-confirm"] = receivedMessages.ReservationConfirm
    leafs["bundle"] = receivedMessages.Bundle
    leafs["ack"] = receivedMessages.Ack
    leafs["srefresh"] = receivedMessages.Srefresh
    leafs["hello"] = receivedMessages.Hello
    leafs["challenge"] = receivedMessages.Challenge
    leafs["response"] = receivedMessages.Response
    return leafs
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetYangName() string { return "received-messages" }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) SetParent(parent types.Entity) { receivedMessages.parent = parent }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetParent() types.Entity { return receivedMessages.parent }

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetParentYangName() string { return "interface-message" }

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages
// Count of messages transmitted
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetFilter() yfilter.YFilter { return transmittedMessages.YFilter }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) SetFilter(yf yfilter.YFilter) { transmittedMessages.YFilter = yf }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetSegmentPath() string {
    return "transmitted-messages"
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = transmittedMessages.Path
    leafs["reservation"] = transmittedMessages.Reservation
    leafs["path-error"] = transmittedMessages.PathError
    leafs["reservation-error"] = transmittedMessages.ReservationError
    leafs["path-tear"] = transmittedMessages.PathTear
    leafs["reservation-tear"] = transmittedMessages.ReservationTear
    leafs["reservation-confirm"] = transmittedMessages.ReservationConfirm
    leafs["bundle"] = transmittedMessages.Bundle
    leafs["ack"] = transmittedMessages.Ack
    leafs["srefresh"] = transmittedMessages.Srefresh
    leafs["hello"] = transmittedMessages.Hello
    leafs["challenge"] = transmittedMessages.Challenge
    leafs["response"] = transmittedMessages.Response
    return leafs
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetYangName() string { return "transmitted-messages" }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) SetParent(parent types.Entity) { transmittedMessages.parent = parent }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetParent() types.Entity { return transmittedMessages.parent }

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetParentYangName() string { return "interface-message" }

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages
// Count of Bundle messages received
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetFilter() yfilter.YFilter { return bundleReceivedMessages.YFilter }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) SetFilter(yf yfilter.YFilter) { bundleReceivedMessages.YFilter = yf }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetSegmentPath() string {
    return "bundle-received-messages"
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleReceivedMessages.Path
    leafs["reservation"] = bundleReceivedMessages.Reservation
    leafs["path-error"] = bundleReceivedMessages.PathError
    leafs["reservation-error"] = bundleReceivedMessages.ReservationError
    leafs["path-tear"] = bundleReceivedMessages.PathTear
    leafs["reservation-tear"] = bundleReceivedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleReceivedMessages.ReservationConfirm
    leafs["bundle"] = bundleReceivedMessages.Bundle
    leafs["ack"] = bundleReceivedMessages.Ack
    leafs["srefresh"] = bundleReceivedMessages.Srefresh
    leafs["hello"] = bundleReceivedMessages.Hello
    leafs["challenge"] = bundleReceivedMessages.Challenge
    leafs["response"] = bundleReceivedMessages.Response
    return leafs
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetYangName() string { return "bundle-received-messages" }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) SetParent(parent types.Entity) { bundleReceivedMessages.parent = parent }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetParent() types.Entity { return bundleReceivedMessages.parent }

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetParentYangName() string { return "interface-message" }

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
// Count of Bundle messages transmitted
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetFilter() yfilter.YFilter { return bundleTransmittedMessages.YFilter }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) SetFilter(yf yfilter.YFilter) { bundleTransmittedMessages.YFilter = yf }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetSegmentPath() string {
    return "bundle-transmitted-messages"
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleTransmittedMessages.Path
    leafs["reservation"] = bundleTransmittedMessages.Reservation
    leafs["path-error"] = bundleTransmittedMessages.PathError
    leafs["reservation-error"] = bundleTransmittedMessages.ReservationError
    leafs["path-tear"] = bundleTransmittedMessages.PathTear
    leafs["reservation-tear"] = bundleTransmittedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleTransmittedMessages.ReservationConfirm
    leafs["bundle"] = bundleTransmittedMessages.Bundle
    leafs["ack"] = bundleTransmittedMessages.Ack
    leafs["srefresh"] = bundleTransmittedMessages.Srefresh
    leafs["hello"] = bundleTransmittedMessages.Hello
    leafs["challenge"] = bundleTransmittedMessages.Challenge
    leafs["response"] = bundleTransmittedMessages.Response
    return leafs
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetYangName() string { return "bundle-transmitted-messages" }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) SetParent(parent types.Entity) { bundleTransmittedMessages.parent = parent }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetParent() types.Entity { return bundleTransmittedMessages.parent }

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetParentYangName() string { return "interface-message" }

// Rsvp_Counters_MessageSummary
// Summary information for all RSVP message
// counters
type Rsvp_Counters_MessageSummary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages Rsvp_Counters_MessageSummary_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages Rsvp_Counters_MessageSummary_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages Rsvp_Counters_MessageSummary_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages Rsvp_Counters_MessageSummary_BundleTransmittedMessages
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetFilter() yfilter.YFilter { return messageSummary.YFilter }

func (messageSummary *Rsvp_Counters_MessageSummary) SetFilter(yf yfilter.YFilter) { messageSummary.YFilter = yf }

func (messageSummary *Rsvp_Counters_MessageSummary) GetGoName(yname string) string {
    if yname == "retransmitted-messages" { return "RetransmittedMessages" }
    if yname == "out-of-order-messages" { return "OutOfOrderMessages" }
    if yname == "rate-limited-messages" { return "RateLimitedMessages" }
    if yname == "received-messages" { return "ReceivedMessages" }
    if yname == "transmitted-messages" { return "TransmittedMessages" }
    if yname == "bundle-received-messages" { return "BundleReceivedMessages" }
    if yname == "bundle-transmitted-messages" { return "BundleTransmittedMessages" }
    return ""
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetSegmentPath() string {
    return "message-summary"
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "received-messages" {
        return &messageSummary.ReceivedMessages
    }
    if childYangName == "transmitted-messages" {
        return &messageSummary.TransmittedMessages
    }
    if childYangName == "bundle-received-messages" {
        return &messageSummary.BundleReceivedMessages
    }
    if childYangName == "bundle-transmitted-messages" {
        return &messageSummary.BundleTransmittedMessages
    }
    return nil
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["received-messages"] = &messageSummary.ReceivedMessages
    children["transmitted-messages"] = &messageSummary.TransmittedMessages
    children["bundle-received-messages"] = &messageSummary.BundleReceivedMessages
    children["bundle-transmitted-messages"] = &messageSummary.BundleTransmittedMessages
    return children
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["retransmitted-messages"] = messageSummary.RetransmittedMessages
    leafs["out-of-order-messages"] = messageSummary.OutOfOrderMessages
    leafs["rate-limited-messages"] = messageSummary.RateLimitedMessages
    return leafs
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetBundleName() string { return "cisco_ios_xr" }

func (messageSummary *Rsvp_Counters_MessageSummary) GetYangName() string { return "message-summary" }

func (messageSummary *Rsvp_Counters_MessageSummary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (messageSummary *Rsvp_Counters_MessageSummary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (messageSummary *Rsvp_Counters_MessageSummary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (messageSummary *Rsvp_Counters_MessageSummary) SetParent(parent types.Entity) { messageSummary.parent = parent }

func (messageSummary *Rsvp_Counters_MessageSummary) GetParent() types.Entity { return messageSummary.parent }

func (messageSummary *Rsvp_Counters_MessageSummary) GetParentYangName() string { return "counters" }

// Rsvp_Counters_MessageSummary_ReceivedMessages
// Count of messages received
type Rsvp_Counters_MessageSummary_ReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetFilter() yfilter.YFilter { return receivedMessages.YFilter }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) SetFilter(yf yfilter.YFilter) { receivedMessages.YFilter = yf }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetSegmentPath() string {
    return "received-messages"
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = receivedMessages.Path
    leafs["reservation"] = receivedMessages.Reservation
    leafs["path-error"] = receivedMessages.PathError
    leafs["reservation-error"] = receivedMessages.ReservationError
    leafs["path-tear"] = receivedMessages.PathTear
    leafs["reservation-tear"] = receivedMessages.ReservationTear
    leafs["reservation-confirm"] = receivedMessages.ReservationConfirm
    leafs["bundle"] = receivedMessages.Bundle
    leafs["ack"] = receivedMessages.Ack
    leafs["srefresh"] = receivedMessages.Srefresh
    leafs["hello"] = receivedMessages.Hello
    leafs["challenge"] = receivedMessages.Challenge
    leafs["response"] = receivedMessages.Response
    return leafs
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetYangName() string { return "received-messages" }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) SetParent(parent types.Entity) { receivedMessages.parent = parent }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetParent() types.Entity { return receivedMessages.parent }

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetParentYangName() string { return "message-summary" }

// Rsvp_Counters_MessageSummary_TransmittedMessages
// Count of messages transmitted
type Rsvp_Counters_MessageSummary_TransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetFilter() yfilter.YFilter { return transmittedMessages.YFilter }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) SetFilter(yf yfilter.YFilter) { transmittedMessages.YFilter = yf }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetSegmentPath() string {
    return "transmitted-messages"
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = transmittedMessages.Path
    leafs["reservation"] = transmittedMessages.Reservation
    leafs["path-error"] = transmittedMessages.PathError
    leafs["reservation-error"] = transmittedMessages.ReservationError
    leafs["path-tear"] = transmittedMessages.PathTear
    leafs["reservation-tear"] = transmittedMessages.ReservationTear
    leafs["reservation-confirm"] = transmittedMessages.ReservationConfirm
    leafs["bundle"] = transmittedMessages.Bundle
    leafs["ack"] = transmittedMessages.Ack
    leafs["srefresh"] = transmittedMessages.Srefresh
    leafs["hello"] = transmittedMessages.Hello
    leafs["challenge"] = transmittedMessages.Challenge
    leafs["response"] = transmittedMessages.Response
    return leafs
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetYangName() string { return "transmitted-messages" }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) SetParent(parent types.Entity) { transmittedMessages.parent = parent }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetParent() types.Entity { return transmittedMessages.parent }

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetParentYangName() string { return "message-summary" }

// Rsvp_Counters_MessageSummary_BundleReceivedMessages
// Count of Bundle messages received
type Rsvp_Counters_MessageSummary_BundleReceivedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetFilter() yfilter.YFilter { return bundleReceivedMessages.YFilter }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) SetFilter(yf yfilter.YFilter) { bundleReceivedMessages.YFilter = yf }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetSegmentPath() string {
    return "bundle-received-messages"
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleReceivedMessages.Path
    leafs["reservation"] = bundleReceivedMessages.Reservation
    leafs["path-error"] = bundleReceivedMessages.PathError
    leafs["reservation-error"] = bundleReceivedMessages.ReservationError
    leafs["path-tear"] = bundleReceivedMessages.PathTear
    leafs["reservation-tear"] = bundleReceivedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleReceivedMessages.ReservationConfirm
    leafs["bundle"] = bundleReceivedMessages.Bundle
    leafs["ack"] = bundleReceivedMessages.Ack
    leafs["srefresh"] = bundleReceivedMessages.Srefresh
    leafs["hello"] = bundleReceivedMessages.Hello
    leafs["challenge"] = bundleReceivedMessages.Challenge
    leafs["response"] = bundleReceivedMessages.Response
    return leafs
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetYangName() string { return "bundle-received-messages" }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) SetParent(parent types.Entity) { bundleReceivedMessages.parent = parent }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetParent() types.Entity { return bundleReceivedMessages.parent }

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetParentYangName() string { return "message-summary" }

// Rsvp_Counters_MessageSummary_BundleTransmittedMessages
// Count of Bundle messages transmitted
type Rsvp_Counters_MessageSummary_BundleTransmittedMessages struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetFilter() yfilter.YFilter { return bundleTransmittedMessages.YFilter }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) SetFilter(yf yfilter.YFilter) { bundleTransmittedMessages.YFilter = yf }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "reservation" { return "Reservation" }
    if yname == "path-error" { return "PathError" }
    if yname == "reservation-error" { return "ReservationError" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-tear" { return "ReservationTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "bundle" { return "Bundle" }
    if yname == "ack" { return "Ack" }
    if yname == "srefresh" { return "Srefresh" }
    if yname == "hello" { return "Hello" }
    if yname == "challenge" { return "Challenge" }
    if yname == "response" { return "Response" }
    return ""
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetSegmentPath() string {
    return "bundle-transmitted-messages"
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = bundleTransmittedMessages.Path
    leafs["reservation"] = bundleTransmittedMessages.Reservation
    leafs["path-error"] = bundleTransmittedMessages.PathError
    leafs["reservation-error"] = bundleTransmittedMessages.ReservationError
    leafs["path-tear"] = bundleTransmittedMessages.PathTear
    leafs["reservation-tear"] = bundleTransmittedMessages.ReservationTear
    leafs["reservation-confirm"] = bundleTransmittedMessages.ReservationConfirm
    leafs["bundle"] = bundleTransmittedMessages.Bundle
    leafs["ack"] = bundleTransmittedMessages.Ack
    leafs["srefresh"] = bundleTransmittedMessages.Srefresh
    leafs["hello"] = bundleTransmittedMessages.Hello
    leafs["challenge"] = bundleTransmittedMessages.Challenge
    leafs["response"] = bundleTransmittedMessages.Response
    return leafs
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetBundleName() string { return "cisco_ios_xr" }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetYangName() string { return "bundle-transmitted-messages" }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) SetParent(parent types.Entity) { bundleTransmittedMessages.parent = parent }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetParent() types.Entity { return bundleTransmittedMessages.parent }

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetParentYangName() string { return "message-summary" }

// Rsvp_Counters_PrefixFiltering
// Prefix filtering counters
type Rsvp_Counters_PrefixFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AccessList specific prefix filtering counters.
    Accesses Rsvp_Counters_PrefixFiltering_Accesses

    // Interface specific prefix filtering counters.
    Interfaces Rsvp_Counters_PrefixFiltering_Interfaces
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetFilter() yfilter.YFilter { return prefixFiltering.YFilter }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) SetFilter(yf yfilter.YFilter) { prefixFiltering.YFilter = yf }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetGoName(yname string) string {
    if yname == "accesses" { return "Accesses" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetSegmentPath() string {
    return "prefix-filtering"
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "accesses" {
        return &prefixFiltering.Accesses
    }
    if childYangName == "interfaces" {
        return &prefixFiltering.Interfaces
    }
    return nil
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["accesses"] = &prefixFiltering.Accesses
    children["interfaces"] = &prefixFiltering.Interfaces
    return children
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetYangName() string { return "prefix-filtering" }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) SetParent(parent types.Entity) { prefixFiltering.parent = parent }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetParent() types.Entity { return prefixFiltering.parent }

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetParentYangName() string { return "counters" }

// Rsvp_Counters_PrefixFiltering_Accesses
// AccessList specific prefix filtering counters
type Rsvp_Counters_PrefixFiltering_Accesses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific AccessList. The type is slice of
    // Rsvp_Counters_PrefixFiltering_Accesses_Access.
    Access []Rsvp_Counters_PrefixFiltering_Accesses_Access
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetFilter() yfilter.YFilter { return accesses.YFilter }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) SetFilter(yf yfilter.YFilter) { accesses.YFilter = yf }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetGoName(yname string) string {
    if yname == "access" { return "Access" }
    return ""
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetSegmentPath() string {
    return "accesses"
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "access" {
        for _, c := range accesses.Access {
            if accesses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Counters_PrefixFiltering_Accesses_Access{}
        accesses.Access = append(accesses.Access, child)
        return &accesses.Access[len(accesses.Access)-1]
    }
    return nil
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range accesses.Access {
        children[accesses.Access[i].GetSegmentPath()] = &accesses.Access[i]
    }
    return children
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetBundleName() string { return "cisco_ios_xr" }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetYangName() string { return "accesses" }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) SetParent(parent types.Entity) { accesses.parent = parent }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetParent() types.Entity { return accesses.parent }

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetParentYangName() string { return "prefix-filtering" }

// Rsvp_Counters_PrefixFiltering_Accesses_Access
// Prefix filtering counters for a specific
// AccessList
type Rsvp_Counters_PrefixFiltering_Accesses_Access struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. AccessList Name. The type is string with length:
    // 1..65.
    AccessListName interface{}

    // Count of messages which got forwarded.
    Forwarded Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded

    // Count of locally destined messages.
    LocallyDestined Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined

    // Count of messages dropped.
    Dropped Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped

    // Count of total messages.
    Total Rsvp_Counters_PrefixFiltering_Accesses_Access_Total
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetFilter() yfilter.YFilter { return access.YFilter }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) SetFilter(yf yfilter.YFilter) { access.YFilter = yf }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetGoName(yname string) string {
    if yname == "access-list-name" { return "AccessListName" }
    if yname == "forwarded" { return "Forwarded" }
    if yname == "locally-destined" { return "LocallyDestined" }
    if yname == "dropped" { return "Dropped" }
    if yname == "total" { return "Total" }
    return ""
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetSegmentPath() string {
    return "access" + "[access-list-name='" + fmt.Sprintf("%v", access.AccessListName) + "']"
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarded" {
        return &access.Forwarded
    }
    if childYangName == "locally-destined" {
        return &access.LocallyDestined
    }
    if childYangName == "dropped" {
        return &access.Dropped
    }
    if childYangName == "total" {
        return &access.Total
    }
    return nil
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarded"] = &access.Forwarded
    children["locally-destined"] = &access.LocallyDestined
    children["dropped"] = &access.Dropped
    children["total"] = &access.Total
    return children
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["access-list-name"] = access.AccessListName
    return leafs
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetBundleName() string { return "cisco_ios_xr" }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetYangName() string { return "access" }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) SetParent(parent types.Entity) { access.parent = parent }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetParent() types.Entity { return access.parent }

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetParentYangName() string { return "accesses" }

// Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded
// Count of messages which got forwarded
type Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetFilter() yfilter.YFilter { return forwarded.YFilter }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) SetFilter(yf yfilter.YFilter) { forwarded.YFilter = yf }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetSegmentPath() string {
    return "forwarded"
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = forwarded.Path
    leafs["path-tear"] = forwarded.PathTear
    leafs["reservation-confirm"] = forwarded.ReservationConfirm
    leafs["total"] = forwarded.Total
    return leafs
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetBundleName() string { return "cisco_ios_xr" }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetYangName() string { return "forwarded" }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) SetParent(parent types.Entity) { forwarded.parent = parent }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetParent() types.Entity { return forwarded.parent }

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetParentYangName() string { return "access" }

// Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined
// Count of locally destined messages
type Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetFilter() yfilter.YFilter { return locallyDestined.YFilter }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) SetFilter(yf yfilter.YFilter) { locallyDestined.YFilter = yf }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetSegmentPath() string {
    return "locally-destined"
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = locallyDestined.Path
    leafs["path-tear"] = locallyDestined.PathTear
    leafs["reservation-confirm"] = locallyDestined.ReservationConfirm
    leafs["total"] = locallyDestined.Total
    return leafs
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetBundleName() string { return "cisco_ios_xr" }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetYangName() string { return "locally-destined" }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) SetParent(parent types.Entity) { locallyDestined.parent = parent }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetParent() types.Entity { return locallyDestined.parent }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetParentYangName() string { return "access" }

// Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped
// Count of messages dropped
type Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetFilter() yfilter.YFilter { return dropped.YFilter }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) SetFilter(yf yfilter.YFilter) { dropped.YFilter = yf }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetSegmentPath() string {
    return "dropped"
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = dropped.Path
    leafs["path-tear"] = dropped.PathTear
    leafs["reservation-confirm"] = dropped.ReservationConfirm
    leafs["total"] = dropped.Total
    return leafs
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetBundleName() string { return "cisco_ios_xr" }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetYangName() string { return "dropped" }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) SetParent(parent types.Entity) { dropped.parent = parent }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetParent() types.Entity { return dropped.parent }

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetParentYangName() string { return "access" }

// Rsvp_Counters_PrefixFiltering_Accesses_Access_Total
// Count of total messages
type Rsvp_Counters_PrefixFiltering_Accesses_Access_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetSegmentPath() string {
    return "total"
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = total.Path
    leafs["path-tear"] = total.PathTear
    leafs["reservation-confirm"] = total.ReservationConfirm
    leafs["total"] = total.Total
    return leafs
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetYangName() string { return "total" }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetParent() types.Entity { return total.parent }

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetParentYangName() string { return "access" }

// Rsvp_Counters_PrefixFiltering_Interfaces
// Interface specific prefix filtering counters
type Rsvp_Counters_PrefixFiltering_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of prefix filtering counts for all interfaces.
    Summary Rsvp_Counters_PrefixFiltering_Interfaces_Summary

    // Table of interface specific prefix filtering counters.
    Interfaces Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &interfaces.Summary
    }
    if childYangName == "interfaces" {
        return &interfaces.Interfaces
    }
    return nil
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &interfaces.Summary
    children["interfaces"] = &interfaces.Interfaces
    return children
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetParentYangName() string { return "prefix-filtering" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary
// Summary of prefix filtering counts for all
// interfaces
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of messages which got forwarded.
    Forwarded Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded

    // Count of locally destined messages.
    LocallyDestined Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined

    // Count of messages dropped.
    Dropped Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed

    // Count of total messages.
    Total Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetGoName(yname string) string {
    if yname == "forwarded" { return "Forwarded" }
    if yname == "locally-destined" { return "LocallyDestined" }
    if yname == "dropped" { return "Dropped" }
    if yname == "default-action-dropped" { return "DefaultActionDropped" }
    if yname == "default-action-processed" { return "DefaultActionProcessed" }
    if yname == "total" { return "Total" }
    return ""
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarded" {
        return &summary.Forwarded
    }
    if childYangName == "locally-destined" {
        return &summary.LocallyDestined
    }
    if childYangName == "dropped" {
        return &summary.Dropped
    }
    if childYangName == "default-action-dropped" {
        return &summary.DefaultActionDropped
    }
    if childYangName == "default-action-processed" {
        return &summary.DefaultActionProcessed
    }
    if childYangName == "total" {
        return &summary.Total
    }
    return nil
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarded"] = &summary.Forwarded
    children["locally-destined"] = &summary.LocallyDestined
    children["dropped"] = &summary.Dropped
    children["default-action-dropped"] = &summary.DefaultActionDropped
    children["default-action-processed"] = &summary.DefaultActionProcessed
    children["total"] = &summary.Total
    return children
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetYangName() string { return "summary" }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetParentYangName() string { return "interfaces" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded
// Count of messages which got forwarded
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetFilter() yfilter.YFilter { return forwarded.YFilter }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) SetFilter(yf yfilter.YFilter) { forwarded.YFilter = yf }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetSegmentPath() string {
    return "forwarded"
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = forwarded.Path
    leafs["path-tear"] = forwarded.PathTear
    leafs["reservation-confirm"] = forwarded.ReservationConfirm
    leafs["total"] = forwarded.Total
    return leafs
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetBundleName() string { return "cisco_ios_xr" }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetYangName() string { return "forwarded" }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) SetParent(parent types.Entity) { forwarded.parent = parent }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetParent() types.Entity { return forwarded.parent }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetParentYangName() string { return "summary" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined
// Count of locally destined messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetFilter() yfilter.YFilter { return locallyDestined.YFilter }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) SetFilter(yf yfilter.YFilter) { locallyDestined.YFilter = yf }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetSegmentPath() string {
    return "locally-destined"
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = locallyDestined.Path
    leafs["path-tear"] = locallyDestined.PathTear
    leafs["reservation-confirm"] = locallyDestined.ReservationConfirm
    leafs["total"] = locallyDestined.Total
    return leafs
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetBundleName() string { return "cisco_ios_xr" }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetYangName() string { return "locally-destined" }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) SetParent(parent types.Entity) { locallyDestined.parent = parent }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetParent() types.Entity { return locallyDestined.parent }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetParentYangName() string { return "summary" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped
// Count of messages dropped
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetFilter() yfilter.YFilter { return dropped.YFilter }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) SetFilter(yf yfilter.YFilter) { dropped.YFilter = yf }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetSegmentPath() string {
    return "dropped"
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = dropped.Path
    leafs["path-tear"] = dropped.PathTear
    leafs["reservation-confirm"] = dropped.ReservationConfirm
    leafs["total"] = dropped.Total
    return leafs
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetBundleName() string { return "cisco_ios_xr" }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetYangName() string { return "dropped" }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) SetParent(parent types.Entity) { dropped.parent = parent }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetParent() types.Entity { return dropped.parent }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetParentYangName() string { return "summary" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetFilter() yfilter.YFilter { return defaultActionDropped.YFilter }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) SetFilter(yf yfilter.YFilter) { defaultActionDropped.YFilter = yf }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetSegmentPath() string {
    return "default-action-dropped"
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionDropped.Path
    leafs["path-tear"] = defaultActionDropped.PathTear
    leafs["reservation-confirm"] = defaultActionDropped.ReservationConfirm
    leafs["total"] = defaultActionDropped.Total
    return leafs
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetYangName() string { return "default-action-dropped" }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) SetParent(parent types.Entity) { defaultActionDropped.parent = parent }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetParent() types.Entity { return defaultActionDropped.parent }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetParentYangName() string { return "summary" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetFilter() yfilter.YFilter { return defaultActionProcessed.YFilter }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) SetFilter(yf yfilter.YFilter) { defaultActionProcessed.YFilter = yf }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetSegmentPath() string {
    return "default-action-processed"
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionProcessed.Path
    leafs["path-tear"] = defaultActionProcessed.PathTear
    leafs["reservation-confirm"] = defaultActionProcessed.ReservationConfirm
    leafs["total"] = defaultActionProcessed.Total
    return leafs
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetYangName() string { return "default-action-processed" }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) SetParent(parent types.Entity) { defaultActionProcessed.parent = parent }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetParent() types.Entity { return defaultActionProcessed.parent }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetParentYangName() string { return "summary" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total
// Count of total messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetSegmentPath() string {
    return "total"
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = total.Path
    leafs["path-tear"] = total.PathTear
    leafs["reservation-confirm"] = total.ReservationConfirm
    leafs["total"] = total.Total
    return leafs
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetYangName() string { return "total" }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetParent() types.Entity { return total.parent }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetParentYangName() string { return "summary" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces
// Table of interface specific prefix filtering
// counters
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific interface. The type is slice of
    // Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface.
    Interface []Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetParentYangName() string { return "interfaces" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
// Prefix filtering counters for a specific
// interface
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InterfaceName interface{}

    // Count of messages which got forwarded.
    Forwarded Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded

    // Count of locally destined messages.
    LocallyDestined Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined

    // Count of messages dropped.
    Dropped Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed

    // Count of total messages.
    Total Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "forwarded" { return "Forwarded" }
    if yname == "locally-destined" { return "LocallyDestined" }
    if yname == "dropped" { return "Dropped" }
    if yname == "default-action-dropped" { return "DefaultActionDropped" }
    if yname == "default-action-processed" { return "DefaultActionProcessed" }
    if yname == "total" { return "Total" }
    return ""
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "forwarded" {
        return &self.Forwarded
    }
    if childYangName == "locally-destined" {
        return &self.LocallyDestined
    }
    if childYangName == "dropped" {
        return &self.Dropped
    }
    if childYangName == "default-action-dropped" {
        return &self.DefaultActionDropped
    }
    if childYangName == "default-action-processed" {
        return &self.DefaultActionProcessed
    }
    if childYangName == "total" {
        return &self.Total
    }
    return nil
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["forwarded"] = &self.Forwarded
    children["locally-destined"] = &self.LocallyDestined
    children["dropped"] = &self.Dropped
    children["default-action-dropped"] = &self.DefaultActionDropped
    children["default-action-processed"] = &self.DefaultActionProcessed
    children["total"] = &self.Total
    return children
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    return leafs
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded
// Count of messages which got forwarded
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetFilter() yfilter.YFilter { return forwarded.YFilter }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) SetFilter(yf yfilter.YFilter) { forwarded.YFilter = yf }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetSegmentPath() string {
    return "forwarded"
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = forwarded.Path
    leafs["path-tear"] = forwarded.PathTear
    leafs["reservation-confirm"] = forwarded.ReservationConfirm
    leafs["total"] = forwarded.Total
    return leafs
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetBundleName() string { return "cisco_ios_xr" }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetYangName() string { return "forwarded" }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) SetParent(parent types.Entity) { forwarded.parent = parent }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetParent() types.Entity { return forwarded.parent }

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetParentYangName() string { return "interface" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined
// Count of locally destined messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetFilter() yfilter.YFilter { return locallyDestined.YFilter }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) SetFilter(yf yfilter.YFilter) { locallyDestined.YFilter = yf }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetSegmentPath() string {
    return "locally-destined"
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = locallyDestined.Path
    leafs["path-tear"] = locallyDestined.PathTear
    leafs["reservation-confirm"] = locallyDestined.ReservationConfirm
    leafs["total"] = locallyDestined.Total
    return leafs
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetBundleName() string { return "cisco_ios_xr" }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetYangName() string { return "locally-destined" }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) SetParent(parent types.Entity) { locallyDestined.parent = parent }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetParent() types.Entity { return locallyDestined.parent }

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetParentYangName() string { return "interface" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped
// Count of messages dropped
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetFilter() yfilter.YFilter { return dropped.YFilter }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) SetFilter(yf yfilter.YFilter) { dropped.YFilter = yf }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetSegmentPath() string {
    return "dropped"
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = dropped.Path
    leafs["path-tear"] = dropped.PathTear
    leafs["reservation-confirm"] = dropped.ReservationConfirm
    leafs["total"] = dropped.Total
    return leafs
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetBundleName() string { return "cisco_ios_xr" }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetYangName() string { return "dropped" }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) SetParent(parent types.Entity) { dropped.parent = parent }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetParent() types.Entity { return dropped.parent }

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetParentYangName() string { return "interface" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetFilter() yfilter.YFilter { return defaultActionDropped.YFilter }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) SetFilter(yf yfilter.YFilter) { defaultActionDropped.YFilter = yf }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetSegmentPath() string {
    return "default-action-dropped"
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionDropped.Path
    leafs["path-tear"] = defaultActionDropped.PathTear
    leafs["reservation-confirm"] = defaultActionDropped.ReservationConfirm
    leafs["total"] = defaultActionDropped.Total
    return leafs
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetYangName() string { return "default-action-dropped" }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) SetParent(parent types.Entity) { defaultActionDropped.parent = parent }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetParent() types.Entity { return defaultActionDropped.parent }

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetParentYangName() string { return "interface" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetFilter() yfilter.YFilter { return defaultActionProcessed.YFilter }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) SetFilter(yf yfilter.YFilter) { defaultActionProcessed.YFilter = yf }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetSegmentPath() string {
    return "default-action-processed"
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = defaultActionProcessed.Path
    leafs["path-tear"] = defaultActionProcessed.PathTear
    leafs["reservation-confirm"] = defaultActionProcessed.ReservationConfirm
    leafs["total"] = defaultActionProcessed.Total
    return leafs
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetBundleName() string { return "cisco_ios_xr" }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetYangName() string { return "default-action-processed" }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) SetParent(parent types.Entity) { defaultActionProcessed.parent = parent }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetParent() types.Entity { return defaultActionProcessed.parent }

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetParentYangName() string { return "interface" }

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
// Count of total messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetFilter() yfilter.YFilter { return total.YFilter }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) SetFilter(yf yfilter.YFilter) { total.YFilter = yf }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetGoName(yname string) string {
    if yname == "path" { return "Path" }
    if yname == "path-tear" { return "PathTear" }
    if yname == "reservation-confirm" { return "ReservationConfirm" }
    if yname == "total" { return "Total" }
    return ""
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetSegmentPath() string {
    return "total"
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["path"] = total.Path
    leafs["path-tear"] = total.PathTear
    leafs["reservation-confirm"] = total.ReservationConfirm
    leafs["total"] = total.Total
    return leafs
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetBundleName() string { return "cisco_ios_xr" }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetYangName() string { return "total" }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) SetParent(parent types.Entity) { total.parent = parent }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetParent() types.Entity { return total.parent }

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetParentYangName() string { return "interface" }

// Rsvp_Counters_OutOfResource
// Out of resource counters
type Rsvp_Counters_OutOfResource struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface specific out of resource counters.
    Interfaces Rsvp_Counters_OutOfResource_Interfaces
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetFilter() yfilter.YFilter { return outOfResource.YFilter }

func (outOfResource *Rsvp_Counters_OutOfResource) SetFilter(yf yfilter.YFilter) { outOfResource.YFilter = yf }

func (outOfResource *Rsvp_Counters_OutOfResource) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetSegmentPath() string {
    return "out-of-resource"
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interfaces" {
        return &outOfResource.Interfaces
    }
    return nil
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["interfaces"] = &outOfResource.Interfaces
    return children
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetBundleName() string { return "cisco_ios_xr" }

func (outOfResource *Rsvp_Counters_OutOfResource) GetYangName() string { return "out-of-resource" }

func (outOfResource *Rsvp_Counters_OutOfResource) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (outOfResource *Rsvp_Counters_OutOfResource) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (outOfResource *Rsvp_Counters_OutOfResource) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (outOfResource *Rsvp_Counters_OutOfResource) SetParent(parent types.Entity) { outOfResource.parent = parent }

func (outOfResource *Rsvp_Counters_OutOfResource) GetParent() types.Entity { return outOfResource.parent }

func (outOfResource *Rsvp_Counters_OutOfResource) GetParentYangName() string { return "counters" }

// Rsvp_Counters_OutOfResource_Interfaces
// Interface specific out of resource counters
type Rsvp_Counters_OutOfResource_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Summary of out of resource counts for all interfaces.
    Summary Rsvp_Counters_OutOfResource_Interfaces_Summary

    // Table of interface specific out of resource counters.
    Interfaces Rsvp_Counters_OutOfResource_Interfaces_Interfaces
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetGoName(yname string) string {
    if yname == "summary" { return "Summary" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "summary" {
        return &interfaces.Summary
    }
    if childYangName == "interfaces" {
        return &interfaces.Interfaces
    }
    return nil
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["summary"] = &interfaces.Summary
    children["interfaces"] = &interfaces.Interfaces
    return children
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetParentYangName() string { return "out-of-resource" }

// Rsvp_Counters_OutOfResource_Interfaces_Summary
// Summary of out of resource counts for all
// interfaces
type Rsvp_Counters_OutOfResource_Interfaces_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetGoName(yname string) string {
    if yname == "dropped-path-messages" { return "DroppedPathMessages" }
    return ""
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dropped-path-messages"] = summary.DroppedPathMessages
    return leafs
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetYangName() string { return "summary" }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetParentYangName() string { return "interfaces" }

// Rsvp_Counters_OutOfResource_Interfaces_Interfaces
// Table of interface specific out of resource
// counters
type Rsvp_Counters_OutOfResource_Interfaces_Interfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Out of resource counters for a specific interface. The type is slice of
    // Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface.
    Interface []Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetFilter() yfilter.YFilter { return interfaces.YFilter }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) SetFilter(yf yfilter.YFilter) { interfaces.YFilter = yf }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetGoName(yname string) string {
    if yname == "interface" { return "Interface" }
    return ""
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetSegmentPath() string {
    return "interfaces"
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface" {
        for _, c := range interfaces.Interface {
            if interfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface{}
        interfaces.Interface = append(interfaces.Interface, child)
        return &interfaces.Interface[len(interfaces.Interface)-1]
    }
    return nil
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaces.Interface {
        children[interfaces.Interface[i].GetSegmentPath()] = &interfaces.Interface[i]
    }
    return children
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetBundleName() string { return "cisco_ios_xr" }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetYangName() string { return "interfaces" }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) SetParent(parent types.Entity) { interfaces.parent = parent }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetParent() types.Entity { return interfaces.parent }

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetParentYangName() string { return "interfaces" }

// Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface
// Out of resource counters for a specific
// interface
type Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InterfaceName interface{}

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "dropped-path-messages" { return "DroppedPathMessages" }
    return ""
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetSegmentPath() string {
    return "interface" + "[interface-name='" + fmt.Sprintf("%v", self.InterfaceName) + "']"
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = self.InterfaceName
    leafs["dropped-path-messages"] = self.DroppedPathMessages
    return leafs
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetBundleName() string { return "cisco_ios_xr" }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetYangName() string { return "interface" }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) SetParent(parent types.Entity) { self.parent = parent }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetParent() types.Entity { return self.parent }

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetParentYangName() string { return "interfaces" }

// Rsvp_Counters_InterfaceEvents
// Event counters
type Rsvp_Counters_InterfaceEvents struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event counters for an interface. The type is slice of
    // Rsvp_Counters_InterfaceEvents_InterfaceEvent.
    InterfaceEvent []Rsvp_Counters_InterfaceEvents_InterfaceEvent
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetFilter() yfilter.YFilter { return interfaceEvents.YFilter }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) SetFilter(yf yfilter.YFilter) { interfaceEvents.YFilter = yf }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetGoName(yname string) string {
    if yname == "interface-event" { return "InterfaceEvent" }
    return ""
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetSegmentPath() string {
    return "interface-events"
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-event" {
        for _, c := range interfaceEvents.InterfaceEvent {
            if interfaceEvents.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Counters_InterfaceEvents_InterfaceEvent{}
        interfaceEvents.InterfaceEvent = append(interfaceEvents.InterfaceEvent, child)
        return &interfaceEvents.InterfaceEvent[len(interfaceEvents.InterfaceEvent)-1]
    }
    return nil
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceEvents.InterfaceEvent {
        children[interfaceEvents.InterfaceEvent[i].GetSegmentPath()] = &interfaceEvents.InterfaceEvent[i]
    }
    return children
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetYangName() string { return "interface-events" }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) SetParent(parent types.Entity) { interfaceEvents.parent = parent }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetParent() types.Entity { return interfaceEvents.parent }

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetParentYangName() string { return "counters" }

// Rsvp_Counters_InterfaceEvents_InterfaceEvent
// Event counters for an interface
type Rsvp_Counters_InterfaceEvents_InterfaceEvent struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetFilter() yfilter.YFilter { return interfaceEvent.YFilter }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) SetFilter(yf yfilter.YFilter) { interfaceEvent.YFilter = yf }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "expired-paths" { return "ExpiredPaths" }
    if yname == "expired-reservations" { return "ExpiredReservations" }
    if yname == "nac-ks" { return "NacKs" }
    return ""
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetSegmentPath() string {
    return "interface-event" + "[interface-name='" + fmt.Sprintf("%v", interfaceEvent.InterfaceName) + "']"
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceEvent.InterfaceName
    leafs["expired-paths"] = interfaceEvent.ExpiredPaths
    leafs["expired-reservations"] = interfaceEvent.ExpiredReservations
    leafs["nac-ks"] = interfaceEvent.NacKs
    return leafs
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetYangName() string { return "interface-event" }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) SetParent(parent types.Entity) { interfaceEvent.parent = parent }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetParent() types.Entity { return interfaceEvent.parent }

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetParentYangName() string { return "interface-events" }

// Rsvp_Counters_Nsr
// Summary information for all RSVP NSR counters
type Rsvp_Counters_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (nsr *Rsvp_Counters_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *Rsvp_Counters_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *Rsvp_Counters_Nsr) GetGoName(yname string) string {
    if yname == "last-cleared-timestamp" { return "LastClearedTimestamp" }
    if yname == "rsvp-process-role" { return "RsvpProcessRole" }
    if yname == "last-idt-states" { return "LastIdtStates" }
    if yname == "total-states" { return "TotalStates" }
    if yname == "total-deletions" { return "TotalDeletions" }
    if yname == "total-nacks" { return "TotalNacks" }
    if yname == "total-id-ts" { return "TotalIdTs" }
    return ""
}

func (nsr *Rsvp_Counters_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *Rsvp_Counters_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (nsr *Rsvp_Counters_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (nsr *Rsvp_Counters_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-cleared-timestamp"] = nsr.LastClearedTimestamp
    leafs["rsvp-process-role"] = nsr.RsvpProcessRole
    leafs["last-idt-states"] = nsr.LastIdtStates
    leafs["total-states"] = nsr.TotalStates
    leafs["total-deletions"] = nsr.TotalDeletions
    leafs["total-nacks"] = nsr.TotalNacks
    leafs["total-id-ts"] = nsr.TotalIdTs
    return leafs
}

func (nsr *Rsvp_Counters_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *Rsvp_Counters_Nsr) GetYangName() string { return "nsr" }

func (nsr *Rsvp_Counters_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *Rsvp_Counters_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *Rsvp_Counters_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *Rsvp_Counters_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *Rsvp_Counters_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *Rsvp_Counters_Nsr) GetParentYangName() string { return "counters" }

// Rsvp_Counters_Issu
// Summary information for all RSVP ISSU counters
type Rsvp_Counters_Issu struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (issu *Rsvp_Counters_Issu) GetFilter() yfilter.YFilter { return issu.YFilter }

func (issu *Rsvp_Counters_Issu) SetFilter(yf yfilter.YFilter) { issu.YFilter = yf }

func (issu *Rsvp_Counters_Issu) GetGoName(yname string) string {
    if yname == "last-cleared-timestamp" { return "LastClearedTimestamp" }
    if yname == "rsvp-process-role" { return "RsvpProcessRole" }
    if yname == "last-idt-states" { return "LastIdtStates" }
    if yname == "total-states" { return "TotalStates" }
    if yname == "total-deletions" { return "TotalDeletions" }
    if yname == "total-nacks" { return "TotalNacks" }
    if yname == "total-id-ts" { return "TotalIdTs" }
    return ""
}

func (issu *Rsvp_Counters_Issu) GetSegmentPath() string {
    return "issu"
}

func (issu *Rsvp_Counters_Issu) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (issu *Rsvp_Counters_Issu) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (issu *Rsvp_Counters_Issu) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["last-cleared-timestamp"] = issu.LastClearedTimestamp
    leafs["rsvp-process-role"] = issu.RsvpProcessRole
    leafs["last-idt-states"] = issu.LastIdtStates
    leafs["total-states"] = issu.TotalStates
    leafs["total-deletions"] = issu.TotalDeletions
    leafs["total-nacks"] = issu.TotalNacks
    leafs["total-id-ts"] = issu.TotalIdTs
    return leafs
}

func (issu *Rsvp_Counters_Issu) GetBundleName() string { return "cisco_ios_xr" }

func (issu *Rsvp_Counters_Issu) GetYangName() string { return "issu" }

func (issu *Rsvp_Counters_Issu) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issu *Rsvp_Counters_Issu) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issu *Rsvp_Counters_Issu) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issu *Rsvp_Counters_Issu) SetParent(parent types.Entity) { issu.parent = parent }

func (issu *Rsvp_Counters_Issu) GetParent() types.Entity { return issu.parent }

func (issu *Rsvp_Counters_Issu) GetParentYangName() string { return "counters" }

// Rsvp_Counters_Database
// Summary information for all RSVP database
// counters
type Rsvp_Counters_Database struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (database *Rsvp_Counters_Database) GetFilter() yfilter.YFilter { return database.YFilter }

func (database *Rsvp_Counters_Database) SetFilter(yf yfilter.YFilter) { database.YFilter = yf }

func (database *Rsvp_Counters_Database) GetGoName(yname string) string {
    if yname == "sessions" { return "Sessions" }
    if yname == "incoming-paths" { return "IncomingPaths" }
    if yname == "outgoing-paths" { return "OutgoingPaths" }
    if yname == "incoming-reservations" { return "IncomingReservations" }
    if yname == "outgoing-reservations" { return "OutgoingReservations" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (database *Rsvp_Counters_Database) GetSegmentPath() string {
    return "database"
}

func (database *Rsvp_Counters_Database) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (database *Rsvp_Counters_Database) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (database *Rsvp_Counters_Database) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessions"] = database.Sessions
    leafs["incoming-paths"] = database.IncomingPaths
    leafs["outgoing-paths"] = database.OutgoingPaths
    leafs["incoming-reservations"] = database.IncomingReservations
    leafs["outgoing-reservations"] = database.OutgoingReservations
    leafs["interfaces"] = database.Interfaces
    return leafs
}

func (database *Rsvp_Counters_Database) GetBundleName() string { return "cisco_ios_xr" }

func (database *Rsvp_Counters_Database) GetYangName() string { return "database" }

func (database *Rsvp_Counters_Database) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (database *Rsvp_Counters_Database) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (database *Rsvp_Counters_Database) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (database *Rsvp_Counters_Database) SetParent(parent types.Entity) { database.parent = parent }

func (database *Rsvp_Counters_Database) GetParent() types.Entity { return database.parent }

func (database *Rsvp_Counters_Database) GetParentYangName() string { return "counters" }

// Rsvp_Counters_EventSyncs
// Table containing event sync counters
type Rsvp_Counters_EventSyncs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Event sync counters. The type is slice of
    // Rsvp_Counters_EventSyncs_EventSync.
    EventSync []Rsvp_Counters_EventSyncs_EventSync
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetFilter() yfilter.YFilter { return eventSyncs.YFilter }

func (eventSyncs *Rsvp_Counters_EventSyncs) SetFilter(yf yfilter.YFilter) { eventSyncs.YFilter = yf }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetGoName(yname string) string {
    if yname == "event-sync" { return "EventSync" }
    return ""
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetSegmentPath() string {
    return "event-syncs"
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "event-sync" {
        for _, c := range eventSyncs.EventSync {
            if eventSyncs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Counters_EventSyncs_EventSync{}
        eventSyncs.EventSync = append(eventSyncs.EventSync, child)
        return &eventSyncs.EventSync[len(eventSyncs.EventSync)-1]
    }
    return nil
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eventSyncs.EventSync {
        children[eventSyncs.EventSync[i].GetSegmentPath()] = &eventSyncs.EventSync[i]
    }
    return children
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetBundleName() string { return "cisco_ios_xr" }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetYangName() string { return "event-syncs" }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventSyncs *Rsvp_Counters_EventSyncs) SetParent(parent types.Entity) { eventSyncs.parent = parent }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetParent() types.Entity { return eventSyncs.parent }

func (eventSyncs *Rsvp_Counters_EventSyncs) GetParentYangName() string { return "counters" }

// Rsvp_Counters_EventSyncs_EventSync
// Event sync counters
type Rsvp_Counters_EventSyncs_EventSync struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetFilter() yfilter.YFilter { return eventSync.YFilter }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) SetFilter(yf yfilter.YFilter) { eventSync.YFilter = yf }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "expired-paths" { return "ExpiredPaths" }
    if yname == "expired-reservations" { return "ExpiredReservations" }
    if yname == "nac-ks" { return "NacKs" }
    return ""
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetSegmentPath() string {
    return "event-sync" + "[interface-name='" + fmt.Sprintf("%v", eventSync.InterfaceName) + "']"
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = eventSync.InterfaceName
    leafs["expired-paths"] = eventSync.ExpiredPaths
    leafs["expired-reservations"] = eventSync.ExpiredReservations
    leafs["nac-ks"] = eventSync.NacKs
    return leafs
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetBundleName() string { return "cisco_ios_xr" }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetYangName() string { return "event-sync" }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) SetParent(parent types.Entity) { eventSync.parent = parent }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetParent() types.Entity { return eventSync.parent }

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetParentYangName() string { return "event-syncs" }

// Rsvp_InterfaceDetaileds
// Table of detailed info about RSVP-enabled
// interfaces
type Rsvp_InterfaceDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled interface. The type is slice of
    // Rsvp_InterfaceDetaileds_InterfaceDetailed.
    InterfaceDetailed []Rsvp_InterfaceDetaileds_InterfaceDetailed
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetFilter() yfilter.YFilter { return interfaceDetaileds.YFilter }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) SetFilter(yf yfilter.YFilter) { interfaceDetaileds.YFilter = yf }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetGoName(yname string) string {
    if yname == "interface-detailed" { return "InterfaceDetailed" }
    return ""
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetSegmentPath() string {
    return "interface-detaileds"
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-detailed" {
        for _, c := range interfaceDetaileds.InterfaceDetailed {
            if interfaceDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceDetaileds_InterfaceDetailed{}
        interfaceDetaileds.InterfaceDetailed = append(interfaceDetaileds.InterfaceDetailed, child)
        return &interfaceDetaileds.InterfaceDetailed[len(interfaceDetaileds.InterfaceDetailed)-1]
    }
    return nil
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceDetaileds.InterfaceDetailed {
        children[interfaceDetaileds.InterfaceDetailed[i].GetSegmentPath()] = &interfaceDetaileds.InterfaceDetailed[i]
    }
    return children
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetYangName() string { return "interface-detaileds" }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) SetParent(parent types.Entity) { interfaceDetaileds.parent = parent }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetParent() types.Entity { return interfaceDetaileds.parent }

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetParentYangName() string { return "rsvp" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed
// Detailed info about an RSVP-enabled interface
type Rsvp_InterfaceDetaileds_InterfaceDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation

    // Interface flags.
    Flags Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags

    // Neighbor array. The type is slice of
    // Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray.
    NeighborArray []Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetFilter() yfilter.YFilter { return interfaceDetailed.YFilter }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) SetFilter(yf yfilter.YFilter) { interfaceDetailed.YFilter = yf }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "signalling-ip-tos" { return "SignallingIpTos" }
    if yname == "integrity-send-password" { return "IntegritySendPassword" }
    if yname == "integrity-receive-password" { return "IntegrityReceivePassword" }
    if yname == "integrity-receive-password-optional" { return "IntegrityReceivePasswordOptional" }
    if yname == "refresh-timer-state" { return "RefreshTimerState" }
    if yname == "summary-refresh-timer-state" { return "SummaryRefreshTimerState" }
    if yname == "refresh-interval" { return "RefreshInterval" }
    if yname == "out-of-band-refresh-interval" { return "OutOfBandRefreshInterval" }
    if yname == "summary-refresh-max-size" { return "SummaryRefreshMaxSize" }
    if yname == "bundle-message-max-size" { return "BundleMessageMaxSize" }
    if yname == "expiry-timer-state" { return "ExpiryTimerState" }
    if yname == "expiry-states" { return "ExpiryStates" }
    if yname == "expiry-interval" { return "ExpiryInterval" }
    if yname == "expiry-drops-tolerated" { return "ExpiryDropsTolerated" }
    if yname == "out-of-band-expiry-drops-tolerated" { return "OutOfBandExpiryDropsTolerated" }
    if yname == "ack-hold-time" { return "AckHoldTime" }
    if yname == "ack-max-size" { return "AckMaxSize" }
    if yname == "retransmit-time" { return "RetransmitTime" }
    if yname == "pacing-interval" { return "PacingInterval" }
    if yname == "pacing-message-rate" { return "PacingMessageRate" }
    if yname == "pacing-timer-state" { return "PacingTimerState" }
    if yname == "pacing-messages" { return "PacingMessages" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    if yname == "flags" { return "Flags" }
    if yname == "neighbor-array" { return "NeighborArray" }
    return ""
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetSegmentPath() string {
    return "interface-detailed" + "[interface-name='" + fmt.Sprintf("%v", interfaceDetailed.InterfaceName) + "']"
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &interfaceDetailed.BandwidthInformation
    }
    if childYangName == "flags" {
        return &interfaceDetailed.Flags
    }
    if childYangName == "neighbor-array" {
        for _, c := range interfaceDetailed.NeighborArray {
            if interfaceDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray{}
        interfaceDetailed.NeighborArray = append(interfaceDetailed.NeighborArray, child)
        return &interfaceDetailed.NeighborArray[len(interfaceDetailed.NeighborArray)-1]
    }
    return nil
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &interfaceDetailed.BandwidthInformation
    children["flags"] = &interfaceDetailed.Flags
    for i := range interfaceDetailed.NeighborArray {
        children[interfaceDetailed.NeighborArray[i].GetSegmentPath()] = &interfaceDetailed.NeighborArray[i]
    }
    return children
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceDetailed.InterfaceName
    leafs["interface-name-xr"] = interfaceDetailed.InterfaceNameXr
    leafs["signalling-ip-tos"] = interfaceDetailed.SignallingIpTos
    leafs["integrity-send-password"] = interfaceDetailed.IntegritySendPassword
    leafs["integrity-receive-password"] = interfaceDetailed.IntegrityReceivePassword
    leafs["integrity-receive-password-optional"] = interfaceDetailed.IntegrityReceivePasswordOptional
    leafs["refresh-timer-state"] = interfaceDetailed.RefreshTimerState
    leafs["summary-refresh-timer-state"] = interfaceDetailed.SummaryRefreshTimerState
    leafs["refresh-interval"] = interfaceDetailed.RefreshInterval
    leafs["out-of-band-refresh-interval"] = interfaceDetailed.OutOfBandRefreshInterval
    leafs["summary-refresh-max-size"] = interfaceDetailed.SummaryRefreshMaxSize
    leafs["bundle-message-max-size"] = interfaceDetailed.BundleMessageMaxSize
    leafs["expiry-timer-state"] = interfaceDetailed.ExpiryTimerState
    leafs["expiry-states"] = interfaceDetailed.ExpiryStates
    leafs["expiry-interval"] = interfaceDetailed.ExpiryInterval
    leafs["expiry-drops-tolerated"] = interfaceDetailed.ExpiryDropsTolerated
    leafs["out-of-band-expiry-drops-tolerated"] = interfaceDetailed.OutOfBandExpiryDropsTolerated
    leafs["ack-hold-time"] = interfaceDetailed.AckHoldTime
    leafs["ack-max-size"] = interfaceDetailed.AckMaxSize
    leafs["retransmit-time"] = interfaceDetailed.RetransmitTime
    leafs["pacing-interval"] = interfaceDetailed.PacingInterval
    leafs["pacing-message-rate"] = interfaceDetailed.PacingMessageRate
    leafs["pacing-timer-state"] = interfaceDetailed.PacingTimerState
    leafs["pacing-messages"] = interfaceDetailed.PacingMessages
    return leafs
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetYangName() string { return "interface-detailed" }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) SetParent(parent types.Entity) { interfaceDetailed.parent = parent }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetParent() types.Entity { return interfaceDetailed.parent }

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetParentYangName() string { return "interface-detaileds" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation
// Interface bandwidth information
type Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetParentYangName() string { return "interface-detailed" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags
// Interface flags
type Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetGoName(yname string) string {
    if yname == "is-mpls-enabled" { return "IsMplsEnabled" }
    if yname == "is-refresh-reduction-enabled" { return "IsRefreshReductionEnabled" }
    if yname == "is-pacing-enabled" { return "IsPacingEnabled" }
    if yname == "is-refresh-enabled" { return "IsRefreshEnabled" }
    if yname == "is-s-refresh-enabled" { return "IsSRefreshEnabled" }
    if yname == "is-interface-down" { return "IsInterfaceDown" }
    if yname == "is-interface-created" { return "IsInterfaceCreated" }
    if yname == "is-rel-s-refresh-enabled" { return "IsRelSRefreshEnabled" }
    if yname == "is-backup-tunnel" { return "IsBackupTunnel" }
    if yname == "is-rsvp-configured" { return "IsRsvpConfigured" }
    if yname == "is-non-default-vrf" { return "IsNonDefaultVrf" }
    if yname == "is-message-bundling-enabled" { return "IsMessageBundlingEnabled" }
    return ""
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-mpls-enabled"] = flags.IsMplsEnabled
    leafs["is-refresh-reduction-enabled"] = flags.IsRefreshReductionEnabled
    leafs["is-pacing-enabled"] = flags.IsPacingEnabled
    leafs["is-refresh-enabled"] = flags.IsRefreshEnabled
    leafs["is-s-refresh-enabled"] = flags.IsSRefreshEnabled
    leafs["is-interface-down"] = flags.IsInterfaceDown
    leafs["is-interface-created"] = flags.IsInterfaceCreated
    leafs["is-rel-s-refresh-enabled"] = flags.IsRelSRefreshEnabled
    leafs["is-backup-tunnel"] = flags.IsBackupTunnel
    leafs["is-rsvp-configured"] = flags.IsRsvpConfigured
    leafs["is-non-default-vrf"] = flags.IsNonDefaultVrf
    leafs["is-message-bundling-enabled"] = flags.IsMessageBundlingEnabled
    return leafs
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetParentYangName() string { return "interface-detailed" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray
// Neighbor array
type Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetFilter() yfilter.YFilter { return neighborArray.YFilter }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) SetFilter(yf yfilter.YFilter) { neighborArray.YFilter = yf }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetGoName(yname string) string {
    if yname == "is-neighbor-refresh-reduction-capable" { return "IsNeighborRefreshReductionCapable" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "message-ids" { return "MessageIds" }
    if yname == "outgoing-states" { return "OutgoingStates" }
    if yname == "expiry-time" { return "ExpiryTime" }
    if yname == "neighbor-message-id" { return "NeighborMessageId" }
    return ""
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetSegmentPath() string {
    return "neighbor-array"
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "expiry-time" {
        return &neighborArray.ExpiryTime
    }
    if childYangName == "neighbor-message-id" {
        for _, c := range neighborArray.NeighborMessageId {
            if neighborArray.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId{}
        neighborArray.NeighborMessageId = append(neighborArray.NeighborMessageId, child)
        return &neighborArray.NeighborMessageId[len(neighborArray.NeighborMessageId)-1]
    }
    return nil
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["expiry-time"] = &neighborArray.ExpiryTime
    for i := range neighborArray.NeighborMessageId {
        children[neighborArray.NeighborMessageId[i].GetSegmentPath()] = &neighborArray.NeighborMessageId[i]
    }
    return children
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-neighbor-refresh-reduction-capable"] = neighborArray.IsNeighborRefreshReductionCapable
    leafs["neighbor-address"] = neighborArray.NeighborAddress
    leafs["message-ids"] = neighborArray.MessageIds
    leafs["outgoing-states"] = neighborArray.OutgoingStates
    return leafs
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetBundleName() string { return "cisco_ios_xr" }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetYangName() string { return "neighbor-array" }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) SetParent(parent types.Entity) { neighborArray.parent = parent }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetParent() types.Entity { return neighborArray.parent }

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetParentYangName() string { return "interface-detailed" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime
// Expiry time
type Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetFilter() yfilter.YFilter { return expiryTime.YFilter }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) SetFilter(yf yfilter.YFilter) { expiryTime.YFilter = yf }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetSegmentPath() string {
    return "expiry-time"
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = expiryTime.Seconds
    leafs["nanoseconds"] = expiryTime.Nanoseconds
    return leafs
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetYangName() string { return "expiry-time" }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) SetParent(parent types.Entity) { expiryTime.parent = parent }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetParent() types.Entity { return expiryTime.parent }

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetParentYangName() string { return "neighbor-array" }

// Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetFilter() yfilter.YFilter { return neighborMessageId.YFilter }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) SetFilter(yf yfilter.YFilter) { neighborMessageId.YFilter = yf }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetGoName(yname string) string {
    if yname == "message-id" { return "MessageId" }
    return ""
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetSegmentPath() string {
    return "neighbor-message-id"
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["message-id"] = neighborMessageId.MessageId
    return leafs
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetYangName() string { return "neighbor-message-id" }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) SetParent(parent types.Entity) { neighborMessageId.parent = parent }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetParent() types.Entity { return neighborMessageId.parent }

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetParentYangName() string { return "neighbor-array" }

// Rsvp_ControllerBriefs
// Table of brief info about RSVP-enabled
// controller
type Rsvp_ControllerBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled controller. The type is slice of
    // Rsvp_ControllerBriefs_ControllerBrief.
    ControllerBrief []Rsvp_ControllerBriefs_ControllerBrief
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetFilter() yfilter.YFilter { return controllerBriefs.YFilter }

func (controllerBriefs *Rsvp_ControllerBriefs) SetFilter(yf yfilter.YFilter) { controllerBriefs.YFilter = yf }

func (controllerBriefs *Rsvp_ControllerBriefs) GetGoName(yname string) string {
    if yname == "controller-brief" { return "ControllerBrief" }
    return ""
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetSegmentPath() string {
    return "controller-briefs"
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "controller-brief" {
        for _, c := range controllerBriefs.ControllerBrief {
            if controllerBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_ControllerBriefs_ControllerBrief{}
        controllerBriefs.ControllerBrief = append(controllerBriefs.ControllerBrief, child)
        return &controllerBriefs.ControllerBrief[len(controllerBriefs.ControllerBrief)-1]
    }
    return nil
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range controllerBriefs.ControllerBrief {
        children[controllerBriefs.ControllerBrief[i].GetSegmentPath()] = &controllerBriefs.ControllerBrief[i]
    }
    return children
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (controllerBriefs *Rsvp_ControllerBriefs) GetYangName() string { return "controller-briefs" }

func (controllerBriefs *Rsvp_ControllerBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerBriefs *Rsvp_ControllerBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerBriefs *Rsvp_ControllerBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerBriefs *Rsvp_ControllerBriefs) SetParent(parent types.Entity) { controllerBriefs.parent = parent }

func (controllerBriefs *Rsvp_ControllerBriefs) GetParent() types.Entity { return controllerBriefs.parent }

func (controllerBriefs *Rsvp_ControllerBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_ControllerBriefs_ControllerBrief
// Brief info about an RSVP-enabled controller
type Rsvp_ControllerBriefs_ControllerBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Controller Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetFilter() yfilter.YFilter { return controllerBrief.YFilter }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) SetFilter(yf yfilter.YFilter) { controllerBrief.YFilter = yf }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetGoName(yname string) string {
    if yname == "controller-name" { return "ControllerName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetSegmentPath() string {
    return "controller-brief" + "[controller-name='" + fmt.Sprintf("%v", controllerBrief.ControllerName) + "']"
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &controllerBrief.BandwidthInformation
    }
    return nil
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &controllerBrief.BandwidthInformation
    return children
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["controller-name"] = controllerBrief.ControllerName
    leafs["interface-name-xr"] = controllerBrief.InterfaceNameXr
    return leafs
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetBundleName() string { return "cisco_ios_xr" }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetYangName() string { return "controller-brief" }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) SetParent(parent types.Entity) { controllerBrief.parent = parent }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetParent() types.Entity { return controllerBrief.parent }

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetParentYangName() string { return "controller-briefs" }

// Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation
// Interface bandwidth information
type Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetParentYangName() string { return "controller-brief" }

// Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_GracefulRestart
// Info about graceful-restart
type Rsvp_GracefulRestart struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether GR is enabled. The type is bool.
    IsGrEnabled interface{}

    // Global neighbor count. The type is interface{} with range: 0..4294967295.
    GlobalNeighbors interface{}

    // Restart time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Recovery time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Whether recovery timer is running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Interval at which hello messages are sent. The type is interface{} with
    // range: 0..4294967295.
    HelloInterval interface{}

    // Max number of hellos missed before hellos declared down. The type is
    // interface{} with range: 0..255.
    MissedHellos interface{}

    // Total number of pending states. The type is interface{} with range:
    // 0..4294967295.
    PendingStates interface{}

    // How much recovery timer remains.
    RecoveryTimeLeft Rsvp_GracefulRestart_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime Rsvp_GracefulRestart_RecoveryTimerExpTime

    // Local node address. The type is slice of
    // Rsvp_GracefulRestart_LocalNodeAddress.
    LocalNodeAddress []Rsvp_GracefulRestart_LocalNodeAddress
}

func (gracefulRestart *Rsvp_GracefulRestart) GetFilter() yfilter.YFilter { return gracefulRestart.YFilter }

func (gracefulRestart *Rsvp_GracefulRestart) SetFilter(yf yfilter.YFilter) { gracefulRestart.YFilter = yf }

func (gracefulRestart *Rsvp_GracefulRestart) GetGoName(yname string) string {
    if yname == "is-gr-enabled" { return "IsGrEnabled" }
    if yname == "global-neighbors" { return "GlobalNeighbors" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "recovery-time" { return "RecoveryTime" }
    if yname == "is-recovery-timer-running" { return "IsRecoveryTimerRunning" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "missed-hellos" { return "MissedHellos" }
    if yname == "pending-states" { return "PendingStates" }
    if yname == "recovery-time-left" { return "RecoveryTimeLeft" }
    if yname == "recovery-timer-exp-time" { return "RecoveryTimerExpTime" }
    if yname == "local-node-address" { return "LocalNodeAddress" }
    return ""
}

func (gracefulRestart *Rsvp_GracefulRestart) GetSegmentPath() string {
    return "graceful-restart"
}

func (gracefulRestart *Rsvp_GracefulRestart) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "recovery-time-left" {
        return &gracefulRestart.RecoveryTimeLeft
    }
    if childYangName == "recovery-timer-exp-time" {
        return &gracefulRestart.RecoveryTimerExpTime
    }
    if childYangName == "local-node-address" {
        for _, c := range gracefulRestart.LocalNodeAddress {
            if gracefulRestart.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GracefulRestart_LocalNodeAddress{}
        gracefulRestart.LocalNodeAddress = append(gracefulRestart.LocalNodeAddress, child)
        return &gracefulRestart.LocalNodeAddress[len(gracefulRestart.LocalNodeAddress)-1]
    }
    return nil
}

func (gracefulRestart *Rsvp_GracefulRestart) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["recovery-time-left"] = &gracefulRestart.RecoveryTimeLeft
    children["recovery-timer-exp-time"] = &gracefulRestart.RecoveryTimerExpTime
    for i := range gracefulRestart.LocalNodeAddress {
        children[gracefulRestart.LocalNodeAddress[i].GetSegmentPath()] = &gracefulRestart.LocalNodeAddress[i]
    }
    return children
}

func (gracefulRestart *Rsvp_GracefulRestart) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-gr-enabled"] = gracefulRestart.IsGrEnabled
    leafs["global-neighbors"] = gracefulRestart.GlobalNeighbors
    leafs["restart-time"] = gracefulRestart.RestartTime
    leafs["recovery-time"] = gracefulRestart.RecoveryTime
    leafs["is-recovery-timer-running"] = gracefulRestart.IsRecoveryTimerRunning
    leafs["hello-interval"] = gracefulRestart.HelloInterval
    leafs["missed-hellos"] = gracefulRestart.MissedHellos
    leafs["pending-states"] = gracefulRestart.PendingStates
    return leafs
}

func (gracefulRestart *Rsvp_GracefulRestart) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulRestart *Rsvp_GracefulRestart) GetYangName() string { return "graceful-restart" }

func (gracefulRestart *Rsvp_GracefulRestart) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulRestart *Rsvp_GracefulRestart) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulRestart *Rsvp_GracefulRestart) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulRestart *Rsvp_GracefulRestart) SetParent(parent types.Entity) { gracefulRestart.parent = parent }

func (gracefulRestart *Rsvp_GracefulRestart) GetParent() types.Entity { return gracefulRestart.parent }

func (gracefulRestart *Rsvp_GracefulRestart) GetParentYangName() string { return "rsvp" }

// Rsvp_GracefulRestart_RecoveryTimeLeft
// How much recovery timer remains
type Rsvp_GracefulRestart_RecoveryTimeLeft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetFilter() yfilter.YFilter { return recoveryTimeLeft.YFilter }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) SetFilter(yf yfilter.YFilter) { recoveryTimeLeft.YFilter = yf }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetSegmentPath() string {
    return "recovery-time-left"
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimeLeft.Seconds
    leafs["nanoseconds"] = recoveryTimeLeft.Nanoseconds
    return leafs
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetYangName() string { return "recovery-time-left" }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) SetParent(parent types.Entity) { recoveryTimeLeft.parent = parent }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetParent() types.Entity { return recoveryTimeLeft.parent }

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetParentYangName() string { return "graceful-restart" }

// Rsvp_GracefulRestart_RecoveryTimerExpTime
// Time at which recovery timer will expire
type Rsvp_GracefulRestart_RecoveryTimerExpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetFilter() yfilter.YFilter { return recoveryTimerExpTime.YFilter }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) SetFilter(yf yfilter.YFilter) { recoveryTimerExpTime.YFilter = yf }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetSegmentPath() string {
    return "recovery-timer-exp-time"
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimerExpTime.Seconds
    leafs["nanoseconds"] = recoveryTimerExpTime.Nanoseconds
    return leafs
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetYangName() string { return "recovery-timer-exp-time" }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) SetParent(parent types.Entity) { recoveryTimerExpTime.parent = parent }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetParent() types.Entity { return recoveryTimerExpTime.parent }

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetParentYangName() string { return "graceful-restart" }

// Rsvp_GracefulRestart_LocalNodeAddress
// Local node address
type Rsvp_GracefulRestart_LocalNodeAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalNodeIpAddress interface{}

    // GR local node-id app type. The type is RsvpMgmtGrApp.
    ApplicationType interface{}
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetFilter() yfilter.YFilter { return localNodeAddress.YFilter }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) SetFilter(yf yfilter.YFilter) { localNodeAddress.YFilter = yf }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetGoName(yname string) string {
    if yname == "local-node-ip-address" { return "LocalNodeIpAddress" }
    if yname == "application-type" { return "ApplicationType" }
    return ""
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetSegmentPath() string {
    return "local-node-address"
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-node-ip-address"] = localNodeAddress.LocalNodeIpAddress
    leafs["application-type"] = localNodeAddress.ApplicationType
    return leafs
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetYangName() string { return "local-node-address" }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) SetParent(parent types.Entity) { localNodeAddress.parent = parent }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetParent() types.Entity { return localNodeAddress.parent }

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetParentYangName() string { return "graceful-restart" }

// Rsvp_HelloInterfaceInstanceBriefs
// Table of brief info about i/f-based hello
// instances
type Rsvp_HelloInterfaceInstanceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single interface-based hello instance. The type is slice
    // of Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief.
    HelloInterfaceInstanceBrief []Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetFilter() yfilter.YFilter { return helloInterfaceInstanceBriefs.YFilter }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceBriefs.YFilter = yf }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetGoName(yname string) string {
    if yname == "hello-interface-instance-brief" { return "HelloInterfaceInstanceBrief" }
    return ""
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetSegmentPath() string {
    return "hello-interface-instance-briefs"
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-interface-instance-brief" {
        for _, c := range helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief {
            if helloInterfaceInstanceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief{}
        helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief = append(helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief, child)
        return &helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[len(helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief)-1]
    }
    return nil
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief {
        children[helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i].GetSegmentPath()] = &helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i]
    }
    return children
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetYangName() string { return "hello-interface-instance-briefs" }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) SetParent(parent types.Entity) { helloInterfaceInstanceBriefs.parent = parent }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetParent() types.Entity { return helloInterfaceInstanceBriefs.parent }

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
// Brief info for a single interface-based hello
// instance
type Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetFilter() yfilter.YFilter { return helloInterfaceInstanceBrief.YFilter }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceBrief.YFilter = yf }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    return ""
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetSegmentPath() string {
    return "hello-interface-instance-brief" + "[source-address='" + fmt.Sprintf("%v", helloInterfaceInstanceBrief.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInterfaceInstanceBrief.DestinationAddress) + "']"
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInterfaceInstanceBrief.SourceAddress
    leafs["destination-address"] = helloInterfaceInstanceBrief.DestinationAddress
    leafs["source-address-xr"] = helloInterfaceInstanceBrief.SourceAddressXr
    leafs["destination-address-xr"] = helloInterfaceInstanceBrief.DestinationAddressXr
    leafs["instance-type"] = helloInterfaceInstanceBrief.InstanceType
    leafs["hello-interface"] = helloInterfaceInstanceBrief.HelloInterface
    return leafs
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetYangName() string { return "hello-interface-instance-brief" }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) SetParent(parent types.Entity) { helloInterfaceInstanceBrief.parent = parent }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetParent() types.Entity { return helloInterfaceInstanceBrief.parent }

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetParentYangName() string { return "hello-interface-instance-briefs" }

// Rsvp_HelloInterfaceInstanceDetails
// Table of detailed info about i/f-based hello
// instances
type Rsvp_HelloInterfaceInstanceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single interface-based hello instance. The type is
    // slice of Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail.
    HelloInterfaceInstanceDetail []Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetFilter() yfilter.YFilter { return helloInterfaceInstanceDetails.YFilter }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceDetails.YFilter = yf }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetGoName(yname string) string {
    if yname == "hello-interface-instance-detail" { return "HelloInterfaceInstanceDetail" }
    return ""
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetSegmentPath() string {
    return "hello-interface-instance-details"
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-interface-instance-detail" {
        for _, c := range helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail {
            if helloInterfaceInstanceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail{}
        helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail = append(helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail, child)
        return &helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[len(helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail)-1]
    }
    return nil
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail {
        children[helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i].GetSegmentPath()] = &helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i]
    }
    return children
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetYangName() string { return "hello-interface-instance-details" }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) SetParent(parent types.Entity) { helloInterfaceInstanceDetails.parent = parent }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetParent() types.Entity { return helloInterfaceInstanceDetails.parent }

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
// Detailed info for a single interface-based
// hello instance
type Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Global Neighbor ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    HelloGlobalNeighborId interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Last Ack/msg sent time.
    LastMessageSentTime Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetFilter() yfilter.YFilter { return helloInterfaceInstanceDetail.YFilter }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) SetFilter(yf yfilter.YFilter) { helloInterfaceInstanceDetail.YFilter = yf }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "hello-global-neighbor-id" { return "HelloGlobalNeighborId" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    if yname == "source-instance" { return "SourceInstance" }
    if yname == "destination-instance" { return "DestinationInstance" }
    if yname == "hello-messages-sent" { return "HelloMessagesSent" }
    if yname == "hello-messages-received" { return "HelloMessagesReceived" }
    if yname == "last-message-sent-time" { return "LastMessageSentTime" }
    return ""
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetSegmentPath() string {
    return "hello-interface-instance-detail" + "[source-address='" + fmt.Sprintf("%v", helloInterfaceInstanceDetail.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInterfaceInstanceDetail.DestinationAddress) + "']"
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "last-message-sent-time" {
        return &helloInterfaceInstanceDetail.LastMessageSentTime
    }
    return nil
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["last-message-sent-time"] = &helloInterfaceInstanceDetail.LastMessageSentTime
    return children
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInterfaceInstanceDetail.SourceAddress
    leafs["destination-address"] = helloInterfaceInstanceDetail.DestinationAddress
    leafs["source-address-xr"] = helloInterfaceInstanceDetail.SourceAddressXr
    leafs["destination-address-xr"] = helloInterfaceInstanceDetail.DestinationAddressXr
    leafs["hello-global-neighbor-id"] = helloInterfaceInstanceDetail.HelloGlobalNeighborId
    leafs["instance-type"] = helloInterfaceInstanceDetail.InstanceType
    leafs["hello-interface"] = helloInterfaceInstanceDetail.HelloInterface
    leafs["source-instance"] = helloInterfaceInstanceDetail.SourceInstance
    leafs["destination-instance"] = helloInterfaceInstanceDetail.DestinationInstance
    leafs["hello-messages-sent"] = helloInterfaceInstanceDetail.HelloMessagesSent
    leafs["hello-messages-received"] = helloInterfaceInstanceDetail.HelloMessagesReceived
    return leafs
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetYangName() string { return "hello-interface-instance-detail" }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) SetParent(parent types.Entity) { helloInterfaceInstanceDetail.parent = parent }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetParent() types.Entity { return helloInterfaceInstanceDetail.parent }

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetParentYangName() string { return "hello-interface-instance-details" }

// Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
// Last Ack/msg sent time
type Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetFilter() yfilter.YFilter { return lastMessageSentTime.YFilter }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) SetFilter(yf yfilter.YFilter) { lastMessageSentTime.YFilter = yf }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetSegmentPath() string {
    return "last-message-sent-time"
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lastMessageSentTime.Seconds
    leafs["nanoseconds"] = lastMessageSentTime.Nanoseconds
    return leafs
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetBundleName() string { return "cisco_ios_xr" }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetYangName() string { return "last-message-sent-time" }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) SetParent(parent types.Entity) { lastMessageSentTime.parent = parent }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetParent() types.Entity { return lastMessageSentTime.parent }

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetParentYangName() string { return "hello-interface-instance-detail" }

// Rsvp_InterfaceNeighborDetails
// Table of detailed info about I/F neighbors
type Rsvp_InterfaceNeighborDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single interface neighbor. The type is slice of
    // Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail.
    InterfaceNeighborDetail []Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetFilter() yfilter.YFilter { return interfaceNeighborDetails.YFilter }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) SetFilter(yf yfilter.YFilter) { interfaceNeighborDetails.YFilter = yf }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetGoName(yname string) string {
    if yname == "interface-neighbor-detail" { return "InterfaceNeighborDetail" }
    return ""
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetSegmentPath() string {
    return "interface-neighbor-details"
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-detail" {
        for _, c := range interfaceNeighborDetails.InterfaceNeighborDetail {
            if interfaceNeighborDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail{}
        interfaceNeighborDetails.InterfaceNeighborDetail = append(interfaceNeighborDetails.InterfaceNeighborDetail, child)
        return &interfaceNeighborDetails.InterfaceNeighborDetail[len(interfaceNeighborDetails.InterfaceNeighborDetail)-1]
    }
    return nil
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborDetails.InterfaceNeighborDetail {
        children[interfaceNeighborDetails.InterfaceNeighborDetail[i].GetSegmentPath()] = &interfaceNeighborDetails.InterfaceNeighborDetail[i]
    }
    return children
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetYangName() string { return "interface-neighbor-details" }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) SetParent(parent types.Entity) { interfaceNeighborDetails.parent = parent }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetParent() types.Entity { return interfaceNeighborDetails.parent }

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail
// Detailed info for a single interface neighbor
type Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Detail list of I/F Neighbors. The type is slice of
    // Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail.
    InterfaceNeighborListDetail []Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetFilter() yfilter.YFilter { return interfaceNeighborDetail.YFilter }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) SetFilter(yf yfilter.YFilter) { interfaceNeighborDetail.YFilter = yf }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "interface-neighbor-list-detail" { return "InterfaceNeighborListDetail" }
    return ""
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetSegmentPath() string {
    return "interface-neighbor-detail" + "[neighbor-address='" + fmt.Sprintf("%v", interfaceNeighborDetail.NeighborAddress) + "']"
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-neighbor-list-detail" {
        for _, c := range interfaceNeighborDetail.InterfaceNeighborListDetail {
            if interfaceNeighborDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail{}
        interfaceNeighborDetail.InterfaceNeighborListDetail = append(interfaceNeighborDetail.InterfaceNeighborListDetail, child)
        return &interfaceNeighborDetail.InterfaceNeighborListDetail[len(interfaceNeighborDetail.InterfaceNeighborListDetail)-1]
    }
    return nil
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceNeighborDetail.InterfaceNeighborListDetail {
        children[interfaceNeighborDetail.InterfaceNeighborListDetail[i].GetSegmentPath()] = &interfaceNeighborDetail.InterfaceNeighborListDetail[i]
    }
    return children
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = interfaceNeighborDetail.NeighborAddress
    leafs["node-address"] = interfaceNeighborDetail.NodeAddress
    return leafs
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetYangName() string { return "interface-neighbor-detail" }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) SetParent(parent types.Entity) { interfaceNeighborDetail.parent = parent }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetParent() types.Entity { return interfaceNeighborDetail.parent }

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetParentYangName() string { return "interface-neighbor-details" }

// Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
// Detail list of I/F Neighbors
type Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Interface Neighbor address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborInterfaceName interface{}

    // Is Neighbor's RR enable. The type is bool.
    IsRrEnabled interface{}

    // Neighbor's epoch value. The type is interface{} with range: 0..4294967295.
    NeighborEpoch interface{}

    // Number of out of order msgs. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Number of retransmitted msgs. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetFilter() yfilter.YFilter { return interfaceNeighborListDetail.YFilter }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) SetFilter(yf yfilter.YFilter) { interfaceNeighborListDetail.YFilter = yf }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetGoName(yname string) string {
    if yname == "interface-neighbor-address" { return "InterfaceNeighborAddress" }
    if yname == "neighbor-interface-name" { return "NeighborInterfaceName" }
    if yname == "is-rr-enabled" { return "IsRrEnabled" }
    if yname == "neighbor-epoch" { return "NeighborEpoch" }
    if yname == "out-of-order-messages" { return "OutOfOrderMessages" }
    if yname == "retransmitted-messages" { return "RetransmittedMessages" }
    return ""
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetSegmentPath() string {
    return "interface-neighbor-list-detail"
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-neighbor-address"] = interfaceNeighborListDetail.InterfaceNeighborAddress
    leafs["neighbor-interface-name"] = interfaceNeighborListDetail.NeighborInterfaceName
    leafs["is-rr-enabled"] = interfaceNeighborListDetail.IsRrEnabled
    leafs["neighbor-epoch"] = interfaceNeighborListDetail.NeighborEpoch
    leafs["out-of-order-messages"] = interfaceNeighborListDetail.OutOfOrderMessages
    leafs["retransmitted-messages"] = interfaceNeighborListDetail.RetransmittedMessages
    return leafs
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetYangName() string { return "interface-neighbor-list-detail" }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) SetParent(parent types.Entity) { interfaceNeighborListDetail.parent = parent }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetParent() types.Entity { return interfaceNeighborListDetail.parent }

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetParentYangName() string { return "interface-neighbor-detail" }

// Rsvp_Nsr
// RSVP NSR information
type Rsvp_Nsr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP NSR status information.
    Status Rsvp_Nsr_Status
}

func (nsr *Rsvp_Nsr) GetFilter() yfilter.YFilter { return nsr.YFilter }

func (nsr *Rsvp_Nsr) SetFilter(yf yfilter.YFilter) { nsr.YFilter = yf }

func (nsr *Rsvp_Nsr) GetGoName(yname string) string {
    if yname == "status" { return "Status" }
    return ""
}

func (nsr *Rsvp_Nsr) GetSegmentPath() string {
    return "nsr"
}

func (nsr *Rsvp_Nsr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "status" {
        return &nsr.Status
    }
    return nil
}

func (nsr *Rsvp_Nsr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["status"] = &nsr.Status
    return children
}

func (nsr *Rsvp_Nsr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (nsr *Rsvp_Nsr) GetBundleName() string { return "cisco_ios_xr" }

func (nsr *Rsvp_Nsr) GetYangName() string { return "nsr" }

func (nsr *Rsvp_Nsr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsr *Rsvp_Nsr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsr *Rsvp_Nsr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsr *Rsvp_Nsr) SetParent(parent types.Entity) { nsr.parent = parent }

func (nsr *Rsvp_Nsr) GetParent() types.Entity { return nsr.parent }

func (nsr *Rsvp_Nsr) GetParentYangName() string { return "rsvp" }

// Rsvp_Nsr_Status
// RSVP NSR status information
type Rsvp_Nsr_Status struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Nsr_Status_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Nsr_Status_PreviousIdtStatus
}

func (status *Rsvp_Nsr_Status) GetFilter() yfilter.YFilter { return status.YFilter }

func (status *Rsvp_Nsr_Status) SetFilter(yf yfilter.YFilter) { status.YFilter = yf }

func (status *Rsvp_Nsr_Status) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (status *Rsvp_Nsr_Status) GetSegmentPath() string {
    return "status"
}

func (status *Rsvp_Nsr_Status) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &status.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &status.PreviousIdtStatus
    }
    return nil
}

func (status *Rsvp_Nsr_Status) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &status.IdtStatus
    children["previous-idt-status"] = &status.PreviousIdtStatus
    return children
}

func (status *Rsvp_Nsr_Status) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = status.Role
    return leafs
}

func (status *Rsvp_Nsr_Status) GetBundleName() string { return "cisco_ios_xr" }

func (status *Rsvp_Nsr_Status) GetYangName() string { return "status" }

func (status *Rsvp_Nsr_Status) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (status *Rsvp_Nsr_Status) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (status *Rsvp_Nsr_Status) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (status *Rsvp_Nsr_Status) SetParent(parent types.Entity) { status.parent = parent }

func (status *Rsvp_Nsr_Status) GetParent() types.Entity { return status.parent }

func (status *Rsvp_Nsr_Status) GetParentYangName() string { return "nsr" }

// Rsvp_Nsr_Status_IdtStatus
// IDT status
type Rsvp_Nsr_Status_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetParentYangName() string { return "status" }

// Rsvp_Nsr_Status_PreviousIdtStatus
// Previous IDT status
type Rsvp_Nsr_Status_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetParentYangName() string { return "status" }

// Rsvp_Summary
// RSVP summary information
type Rsvp_Summary struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Total interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}

    // Total LSPs. The type is interface{} with range: 0..4294967295.
    LsPs interface{}

    // Issu status.
    IssuStatus Rsvp_Summary_IssuStatus

    // NSR status.
    NsrStatus Rsvp_Summary_NsrStatus

    // All database counters.
    DatabaseCounters Rsvp_Summary_DatabaseCounters
}

func (summary *Rsvp_Summary) GetFilter() yfilter.YFilter { return summary.YFilter }

func (summary *Rsvp_Summary) SetFilter(yf yfilter.YFilter) { summary.YFilter = yf }

func (summary *Rsvp_Summary) GetGoName(yname string) string {
    if yname == "interfaces" { return "Interfaces" }
    if yname == "ls-ps" { return "LsPs" }
    if yname == "issu-status" { return "IssuStatus" }
    if yname == "nsr-status" { return "NsrStatus" }
    if yname == "database-counters" { return "DatabaseCounters" }
    return ""
}

func (summary *Rsvp_Summary) GetSegmentPath() string {
    return "summary"
}

func (summary *Rsvp_Summary) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "issu-status" {
        return &summary.IssuStatus
    }
    if childYangName == "nsr-status" {
        return &summary.NsrStatus
    }
    if childYangName == "database-counters" {
        return &summary.DatabaseCounters
    }
    return nil
}

func (summary *Rsvp_Summary) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["issu-status"] = &summary.IssuStatus
    children["nsr-status"] = &summary.NsrStatus
    children["database-counters"] = &summary.DatabaseCounters
    return children
}

func (summary *Rsvp_Summary) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interfaces"] = summary.Interfaces
    leafs["ls-ps"] = summary.LsPs
    return leafs
}

func (summary *Rsvp_Summary) GetBundleName() string { return "cisco_ios_xr" }

func (summary *Rsvp_Summary) GetYangName() string { return "summary" }

func (summary *Rsvp_Summary) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (summary *Rsvp_Summary) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (summary *Rsvp_Summary) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (summary *Rsvp_Summary) SetParent(parent types.Entity) { summary.parent = parent }

func (summary *Rsvp_Summary) GetParent() types.Entity { return summary.parent }

func (summary *Rsvp_Summary) GetParentYangName() string { return "rsvp" }

// Rsvp_Summary_IssuStatus
// Issu status
type Rsvp_Summary_IssuStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Summary_IssuStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Summary_IssuStatus_PreviousIdtStatus
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetFilter() yfilter.YFilter { return issuStatus.YFilter }

func (issuStatus *Rsvp_Summary_IssuStatus) SetFilter(yf yfilter.YFilter) { issuStatus.YFilter = yf }

func (issuStatus *Rsvp_Summary_IssuStatus) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetSegmentPath() string {
    return "issu-status"
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &issuStatus.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &issuStatus.PreviousIdtStatus
    }
    return nil
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &issuStatus.IdtStatus
    children["previous-idt-status"] = &issuStatus.PreviousIdtStatus
    return children
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = issuStatus.Role
    return leafs
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetBundleName() string { return "cisco_ios_xr" }

func (issuStatus *Rsvp_Summary_IssuStatus) GetYangName() string { return "issu-status" }

func (issuStatus *Rsvp_Summary_IssuStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (issuStatus *Rsvp_Summary_IssuStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (issuStatus *Rsvp_Summary_IssuStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (issuStatus *Rsvp_Summary_IssuStatus) SetParent(parent types.Entity) { issuStatus.parent = parent }

func (issuStatus *Rsvp_Summary_IssuStatus) GetParent() types.Entity { return issuStatus.parent }

func (issuStatus *Rsvp_Summary_IssuStatus) GetParentYangName() string { return "summary" }

// Rsvp_Summary_IssuStatus_IdtStatus
// IDT status
type Rsvp_Summary_IssuStatus_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetParentYangName() string { return "issu-status" }

// Rsvp_Summary_IssuStatus_PreviousIdtStatus
// Previous IDT status
type Rsvp_Summary_IssuStatus_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetParentYangName() string { return "issu-status" }

// Rsvp_Summary_NsrStatus
// NSR status
type Rsvp_Summary_NsrStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Summary_NsrStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Summary_NsrStatus_PreviousIdtStatus
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetFilter() yfilter.YFilter { return nsrStatus.YFilter }

func (nsrStatus *Rsvp_Summary_NsrStatus) SetFilter(yf yfilter.YFilter) { nsrStatus.YFilter = yf }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetGoName(yname string) string {
    if yname == "role" { return "Role" }
    if yname == "idt-status" { return "IdtStatus" }
    if yname == "previous-idt-status" { return "PreviousIdtStatus" }
    return ""
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetSegmentPath() string {
    return "nsr-status"
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "idt-status" {
        return &nsrStatus.IdtStatus
    }
    if childYangName == "previous-idt-status" {
        return &nsrStatus.PreviousIdtStatus
    }
    return nil
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["idt-status"] = &nsrStatus.IdtStatus
    children["previous-idt-status"] = &nsrStatus.PreviousIdtStatus
    return children
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["role"] = nsrStatus.Role
    return leafs
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetBundleName() string { return "cisco_ios_xr" }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetYangName() string { return "nsr-status" }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (nsrStatus *Rsvp_Summary_NsrStatus) SetParent(parent types.Entity) { nsrStatus.parent = parent }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetParent() types.Entity { return nsrStatus.parent }

func (nsrStatus *Rsvp_Summary_NsrStatus) GetParentYangName() string { return "summary" }

// Rsvp_Summary_NsrStatus_IdtStatus
// IDT status
type Rsvp_Summary_NsrStatus_IdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetFilter() yfilter.YFilter { return idtStatus.YFilter }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) SetFilter(yf yfilter.YFilter) { idtStatus.YFilter = yf }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetSegmentPath() string {
    return "idt-status"
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = idtStatus.SyncStatus
    leafs["not-ready-reason"] = idtStatus.NotReadyReason
    leafs["idt-start-time"] = idtStatus.IdtStartTime
    leafs["idt-end-time"] = idtStatus.IdtEndTime
    leafs["declare-time"] = idtStatus.DeclareTime
    leafs["withdraw-time"] = idtStatus.WithdrawTime
    return leafs
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetYangName() string { return "idt-status" }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) SetParent(parent types.Entity) { idtStatus.parent = parent }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetParent() types.Entity { return idtStatus.parent }

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetParentYangName() string { return "nsr-status" }

// Rsvp_Summary_NsrStatus_PreviousIdtStatus
// Previous IDT status
type Rsvp_Summary_NsrStatus_PreviousIdtStatus struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetFilter() yfilter.YFilter { return previousIdtStatus.YFilter }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) SetFilter(yf yfilter.YFilter) { previousIdtStatus.YFilter = yf }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetGoName(yname string) string {
    if yname == "sync-status" { return "SyncStatus" }
    if yname == "not-ready-reason" { return "NotReadyReason" }
    if yname == "idt-start-time" { return "IdtStartTime" }
    if yname == "idt-end-time" { return "IdtEndTime" }
    if yname == "declare-time" { return "DeclareTime" }
    if yname == "withdraw-time" { return "WithdrawTime" }
    return ""
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetSegmentPath() string {
    return "previous-idt-status"
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sync-status"] = previousIdtStatus.SyncStatus
    leafs["not-ready-reason"] = previousIdtStatus.NotReadyReason
    leafs["idt-start-time"] = previousIdtStatus.IdtStartTime
    leafs["idt-end-time"] = previousIdtStatus.IdtEndTime
    leafs["declare-time"] = previousIdtStatus.DeclareTime
    leafs["withdraw-time"] = previousIdtStatus.WithdrawTime
    return leafs
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetBundleName() string { return "cisco_ios_xr" }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetYangName() string { return "previous-idt-status" }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) SetParent(parent types.Entity) { previousIdtStatus.parent = parent }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetParent() types.Entity { return previousIdtStatus.parent }

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetParentYangName() string { return "nsr-status" }

// Rsvp_Summary_DatabaseCounters
// All database counters
type Rsvp_Summary_DatabaseCounters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetFilter() yfilter.YFilter { return databaseCounters.YFilter }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) SetFilter(yf yfilter.YFilter) { databaseCounters.YFilter = yf }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetGoName(yname string) string {
    if yname == "sessions" { return "Sessions" }
    if yname == "incoming-paths" { return "IncomingPaths" }
    if yname == "outgoing-paths" { return "OutgoingPaths" }
    if yname == "incoming-reservations" { return "IncomingReservations" }
    if yname == "outgoing-reservations" { return "OutgoingReservations" }
    if yname == "interfaces" { return "Interfaces" }
    return ""
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetSegmentPath() string {
    return "database-counters"
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["sessions"] = databaseCounters.Sessions
    leafs["incoming-paths"] = databaseCounters.IncomingPaths
    leafs["outgoing-paths"] = databaseCounters.OutgoingPaths
    leafs["incoming-reservations"] = databaseCounters.IncomingReservations
    leafs["outgoing-reservations"] = databaseCounters.OutgoingReservations
    leafs["interfaces"] = databaseCounters.Interfaces
    return leafs
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetBundleName() string { return "cisco_ios_xr" }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetYangName() string { return "database-counters" }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) SetParent(parent types.Entity) { databaseCounters.parent = parent }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetParent() types.Entity { return databaseCounters.parent }

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetParentYangName() string { return "summary" }

// Rsvp_Frrs
// Table of detailed info about Fast Re-route
// states
type Rsvp_Frrs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single Fast Re-route state. The type is slice of
    // Rsvp_Frrs_Frr.
    Frr []Rsvp_Frrs_Frr
}

func (frrs *Rsvp_Frrs) GetFilter() yfilter.YFilter { return frrs.YFilter }

func (frrs *Rsvp_Frrs) SetFilter(yf yfilter.YFilter) { frrs.YFilter = yf }

func (frrs *Rsvp_Frrs) GetGoName(yname string) string {
    if yname == "frr" { return "Frr" }
    return ""
}

func (frrs *Rsvp_Frrs) GetSegmentPath() string {
    return "frrs"
}

func (frrs *Rsvp_Frrs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "frr" {
        for _, c := range frrs.Frr {
            if frrs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_Frrs_Frr{}
        frrs.Frr = append(frrs.Frr, child)
        return &frrs.Frr[len(frrs.Frr)-1]
    }
    return nil
}

func (frrs *Rsvp_Frrs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range frrs.Frr {
        children[frrs.Frr[i].GetSegmentPath()] = &frrs.Frr[i]
    }
    return children
}

func (frrs *Rsvp_Frrs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (frrs *Rsvp_Frrs) GetBundleName() string { return "cisco_ios_xr" }

func (frrs *Rsvp_Frrs) GetYangName() string { return "frrs" }

func (frrs *Rsvp_Frrs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frrs *Rsvp_Frrs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frrs *Rsvp_Frrs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frrs *Rsvp_Frrs) SetParent(parent types.Entity) { frrs.parent = parent }

func (frrs *Rsvp_Frrs) GetParent() types.Entity { return frrs.parent }

func (frrs *Rsvp_Frrs) GetParentYangName() string { return "rsvp" }

// Rsvp_Frrs_Frr
// Detailed info for a single Fast Re-route state
type Rsvp_Frrs_Frr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // RSVP FRR Path States. The type is RsvpMgmtFrrStateEnum.
    PathStatus interface{}

    // RSVP FRR Reservation States. The type is RsvpMgmtFrrStateEnum.
    ReservationStatus interface{}

    // RSVP Session Information.
    Session Rsvp_Frrs_Frr_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_Frrs_Frr_S2LSubLsp
}

func (frr *Rsvp_Frrs_Frr) GetFilter() yfilter.YFilter { return frr.YFilter }

func (frr *Rsvp_Frrs_Frr) SetFilter(yf yfilter.YFilter) { frr.YFilter = yf }

func (frr *Rsvp_Frrs_Frr) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "path-status" { return "PathStatus" }
    if yname == "reservation-status" { return "ReservationStatus" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    return ""
}

func (frr *Rsvp_Frrs_Frr) GetSegmentPath() string {
    return "frr"
}

func (frr *Rsvp_Frrs_Frr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &frr.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &frr.S2LSubLsp
    }
    return nil
}

func (frr *Rsvp_Frrs_Frr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &frr.Session
    children["s2l-sub-lsp"] = &frr.S2LSubLsp
    return children
}

func (frr *Rsvp_Frrs_Frr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = frr.DestinationAddress
    leafs["destination-port"] = frr.DestinationPort
    leafs["protocol"] = frr.Protocol
    leafs["extended-tunnel-id"] = frr.ExtendedTunnelId
    leafs["session-type"] = frr.SessionType
    leafs["p2mp-id"] = frr.P2MpId
    leafs["source-address"] = frr.SourceAddress
    leafs["source-port"] = frr.SourcePort
    leafs["sub-group-origin"] = frr.SubGroupOrigin
    leafs["sub-group-id"] = frr.SubGroupId
    leafs["vrf-name"] = frr.VrfName
    leafs["path-status"] = frr.PathStatus
    leafs["reservation-status"] = frr.ReservationStatus
    return leafs
}

func (frr *Rsvp_Frrs_Frr) GetBundleName() string { return "cisco_ios_xr" }

func (frr *Rsvp_Frrs_Frr) GetYangName() string { return "frr" }

func (frr *Rsvp_Frrs_Frr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (frr *Rsvp_Frrs_Frr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (frr *Rsvp_Frrs_Frr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (frr *Rsvp_Frrs_Frr) SetParent(parent types.Entity) { frr.parent = parent }

func (frr *Rsvp_Frrs_Frr) GetParent() types.Entity { return frr.parent }

func (frr *Rsvp_Frrs_Frr) GetParentYangName() string { return "frrs" }

// Rsvp_Frrs_Frr_Session
// RSVP Session Information
type Rsvp_Frrs_Frr_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_Frrs_Frr_Session_RsvpSession
}

func (session *Rsvp_Frrs_Frr_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_Frrs_Frr_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_Frrs_Frr_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_Frrs_Frr_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_Frrs_Frr_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_Frrs_Frr_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_Frrs_Frr_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_Frrs_Frr_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_Frrs_Frr_Session) GetYangName() string { return "session" }

func (session *Rsvp_Frrs_Frr_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_Frrs_Frr_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_Frrs_Frr_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_Frrs_Frr_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_Frrs_Frr_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_Frrs_Frr_Session) GetParentYangName() string { return "frr" }

// Rsvp_Frrs_Frr_Session_RsvpSession
// RSVP Session
type Rsvp_Frrs_Frr_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_Frrs_Frr_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_Frrs_Frr_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_Frrs_Frr_S2LSubLsp) GetParentYangName() string { return "frr" }

// Rsvp_RequestBriefs
// Table of brief info about requests
type Rsvp_RequestBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a request. The type is slice of
    // Rsvp_RequestBriefs_RequestBrief.
    RequestBrief []Rsvp_RequestBriefs_RequestBrief
}

func (requestBriefs *Rsvp_RequestBriefs) GetFilter() yfilter.YFilter { return requestBriefs.YFilter }

func (requestBriefs *Rsvp_RequestBriefs) SetFilter(yf yfilter.YFilter) { requestBriefs.YFilter = yf }

func (requestBriefs *Rsvp_RequestBriefs) GetGoName(yname string) string {
    if yname == "request-brief" { return "RequestBrief" }
    return ""
}

func (requestBriefs *Rsvp_RequestBriefs) GetSegmentPath() string {
    return "request-briefs"
}

func (requestBriefs *Rsvp_RequestBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request-brief" {
        for _, c := range requestBriefs.RequestBrief {
            if requestBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RequestBriefs_RequestBrief{}
        requestBriefs.RequestBrief = append(requestBriefs.RequestBrief, child)
        return &requestBriefs.RequestBrief[len(requestBriefs.RequestBrief)-1]
    }
    return nil
}

func (requestBriefs *Rsvp_RequestBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestBriefs.RequestBrief {
        children[requestBriefs.RequestBrief[i].GetSegmentPath()] = &requestBriefs.RequestBrief[i]
    }
    return children
}

func (requestBriefs *Rsvp_RequestBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestBriefs *Rsvp_RequestBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (requestBriefs *Rsvp_RequestBriefs) GetYangName() string { return "request-briefs" }

func (requestBriefs *Rsvp_RequestBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestBriefs *Rsvp_RequestBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestBriefs *Rsvp_RequestBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestBriefs *Rsvp_RequestBriefs) SetParent(parent types.Entity) { requestBriefs.parent = parent }

func (requestBriefs *Rsvp_RequestBriefs) GetParent() types.Entity { return requestBriefs.parent }

func (requestBriefs *Rsvp_RequestBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_RequestBriefs_RequestBrief
// Brief info for a request
type Rsvp_RequestBriefs_RequestBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_RequestBriefs_RequestBrief_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_RequestBriefs_RequestBrief_S2LSubLsp

    // Flow Spec Information.
    FlowSpec Rsvp_RequestBriefs_RequestBrief_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec

    // RSVP Filter.
    Filter Rsvp_RequestBriefs_RequestBrief_Filter

    // RSVP Style.
    Style Rsvp_RequestBriefs_RequestBrief_Style
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetFilter() yfilter.YFilter { return requestBrief.YFilter }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) SetFilter(yf yfilter.YFilter) { requestBrief.YFilter = yf }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "output-interface" { return "OutputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "filter" { return "Filter" }
    if yname == "style" { return "Style" }
    return ""
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetSegmentPath() string {
    return "request-brief"
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &requestBrief.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &requestBrief.S2LSubLsp
    }
    if childYangName == "flow-spec" {
        return &requestBrief.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &requestBrief.GenericFlowSpec
    }
    if childYangName == "filter" {
        return &requestBrief.Filter
    }
    if childYangName == "style" {
        return &requestBrief.Style
    }
    return nil
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &requestBrief.Session
    children["s2l-sub-lsp"] = &requestBrief.S2LSubLsp
    children["flow-spec"] = &requestBrief.FlowSpec
    children["generic-flow-spec"] = &requestBrief.GenericFlowSpec
    children["filter"] = &requestBrief.Filter
    children["style"] = &requestBrief.Style
    return children
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = requestBrief.DestinationAddress
    leafs["destination-port"] = requestBrief.DestinationPort
    leafs["protocol"] = requestBrief.Protocol
    leafs["extended-tunnel-id"] = requestBrief.ExtendedTunnelId
    leafs["session-type"] = requestBrief.SessionType
    leafs["p2mp-id"] = requestBrief.P2MpId
    leafs["source-address"] = requestBrief.SourceAddress
    leafs["source-port"] = requestBrief.SourcePort
    leafs["sub-group-origin"] = requestBrief.SubGroupOrigin
    leafs["sub-group-id"] = requestBrief.SubGroupId
    leafs["vrf-name"] = requestBrief.VrfName
    leafs["output-interface"] = requestBrief.OutputInterface
    return leafs
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetBundleName() string { return "cisco_ios_xr" }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetYangName() string { return "request-brief" }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) SetParent(parent types.Entity) { requestBrief.parent = parent }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetParent() types.Entity { return requestBrief.parent }

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetParentYangName() string { return "request-briefs" }

// Rsvp_RequestBriefs_RequestBrief_Session
// RSVP Session Information
type Rsvp_RequestBriefs_RequestBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetYangName() string { return "session" }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetParentYangName() string { return "request-brief" }

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession
// RSVP Session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestBriefs_RequestBrief_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RequestBriefs_RequestBrief_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_RequestBriefs_RequestBrief_S2LSubLsp) GetParentYangName() string { return "request-brief" }

// Rsvp_RequestBriefs_RequestBrief_FlowSpec
// Flow Spec Information
type Rsvp_RequestBriefs_RequestBrief_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetParentYangName() string { return "request-brief" }

// Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetParentYangName() string { return "request-brief" }

// Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// Rsvp_RequestBriefs_RequestBrief_Filter
// RSVP Filter
type Rsvp_RequestBriefs_RequestBrief_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetYangName() string { return "filter" }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetParent() types.Entity { return filter.parent }

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetParentYangName() string { return "request-brief" }

// Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RequestBriefs_RequestBrief_Style
// RSVP Style
type Rsvp_RequestBriefs_RequestBrief_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetSegmentPath() string {
    return "style"
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetYangName() string { return "style" }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetParent() types.Entity { return style.parent }

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetParentYangName() string { return "request-brief" }

// Rsvp_RequestDetails
// Table of detail info about requests
type Rsvp_RequestDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail info for a request. The type is slice of
    // Rsvp_RequestDetails_RequestDetail.
    RequestDetail []Rsvp_RequestDetails_RequestDetail
}

func (requestDetails *Rsvp_RequestDetails) GetFilter() yfilter.YFilter { return requestDetails.YFilter }

func (requestDetails *Rsvp_RequestDetails) SetFilter(yf yfilter.YFilter) { requestDetails.YFilter = yf }

func (requestDetails *Rsvp_RequestDetails) GetGoName(yname string) string {
    if yname == "request-detail" { return "RequestDetail" }
    return ""
}

func (requestDetails *Rsvp_RequestDetails) GetSegmentPath() string {
    return "request-details"
}

func (requestDetails *Rsvp_RequestDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "request-detail" {
        for _, c := range requestDetails.RequestDetail {
            if requestDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RequestDetails_RequestDetail{}
        requestDetails.RequestDetail = append(requestDetails.RequestDetail, child)
        return &requestDetails.RequestDetail[len(requestDetails.RequestDetail)-1]
    }
    return nil
}

func (requestDetails *Rsvp_RequestDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range requestDetails.RequestDetail {
        children[requestDetails.RequestDetail[i].GetSegmentPath()] = &requestDetails.RequestDetail[i]
    }
    return children
}

func (requestDetails *Rsvp_RequestDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (requestDetails *Rsvp_RequestDetails) GetBundleName() string { return "cisco_ios_xr" }

func (requestDetails *Rsvp_RequestDetails) GetYangName() string { return "request-details" }

func (requestDetails *Rsvp_RequestDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestDetails *Rsvp_RequestDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestDetails *Rsvp_RequestDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestDetails *Rsvp_RequestDetails) SetParent(parent types.Entity) { requestDetails.parent = parent }

func (requestDetails *Rsvp_RequestDetails) GetParent() types.Entity { return requestDetails.parent }

func (requestDetails *Rsvp_RequestDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_RequestDetails_RequestDetail
// Detail info for a request
type Rsvp_RequestDetails_RequestDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_RequestDetails_RequestDetail_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_RequestDetails_RequestDetail_S2LSubLsp

    // Flow Spec Information.
    FlowSpec Rsvp_RequestDetails_RequestDetail_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RequestDetails_RequestDetail_GenericFlowSpec

    // RSVP Filter.
    Filter Rsvp_RequestDetails_RequestDetail_Filter

    // RSVP Style.
    Style Rsvp_RequestDetails_RequestDetail_Style

    // Request flags.
    ReqFlags Rsvp_RequestDetails_RequestDetail_ReqFlags

    // Hop Infomation.
    Hop Rsvp_RequestDetails_RequestDetail_Hop

    // RSVP Header Information.
    Header Rsvp_RequestDetails_RequestDetail_Header

    // RSVP Policy Sources.
    PolicySources Rsvp_RequestDetails_RequestDetail_PolicySources

    // RSVP Policy Flags.
    PolicyFlags Rsvp_RequestDetails_RequestDetail_PolicyFlags

    // RSVP Query Flags.
    PolicyQueryFlags Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags

    // List of RSB keys. The type is slice of
    // Rsvp_RequestDetails_RequestDetail_PsbKey.
    PsbKey []Rsvp_RequestDetails_RequestDetail_PsbKey

    // List of RSB keys. The type is slice of
    // Rsvp_RequestDetails_RequestDetail_RsbKey.
    RsbKey []Rsvp_RequestDetails_RequestDetail_RsbKey
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetFilter() yfilter.YFilter { return requestDetail.YFilter }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) SetFilter(yf yfilter.YFilter) { requestDetail.YFilter = yf }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "output-interface" { return "OutputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "filter" { return "Filter" }
    if yname == "style" { return "Style" }
    if yname == "req-flags" { return "ReqFlags" }
    if yname == "hop" { return "Hop" }
    if yname == "header" { return "Header" }
    if yname == "policy-sources" { return "PolicySources" }
    if yname == "policy-flags" { return "PolicyFlags" }
    if yname == "policy-query-flags" { return "PolicyQueryFlags" }
    if yname == "psb-key" { return "PsbKey" }
    if yname == "rsb-key" { return "RsbKey" }
    return ""
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetSegmentPath() string {
    return "request-detail"
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &requestDetail.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &requestDetail.S2LSubLsp
    }
    if childYangName == "flow-spec" {
        return &requestDetail.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &requestDetail.GenericFlowSpec
    }
    if childYangName == "filter" {
        return &requestDetail.Filter
    }
    if childYangName == "style" {
        return &requestDetail.Style
    }
    if childYangName == "req-flags" {
        return &requestDetail.ReqFlags
    }
    if childYangName == "hop" {
        return &requestDetail.Hop
    }
    if childYangName == "header" {
        return &requestDetail.Header
    }
    if childYangName == "policy-sources" {
        return &requestDetail.PolicySources
    }
    if childYangName == "policy-flags" {
        return &requestDetail.PolicyFlags
    }
    if childYangName == "policy-query-flags" {
        return &requestDetail.PolicyQueryFlags
    }
    if childYangName == "psb-key" {
        for _, c := range requestDetail.PsbKey {
            if requestDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RequestDetails_RequestDetail_PsbKey{}
        requestDetail.PsbKey = append(requestDetail.PsbKey, child)
        return &requestDetail.PsbKey[len(requestDetail.PsbKey)-1]
    }
    if childYangName == "rsb-key" {
        for _, c := range requestDetail.RsbKey {
            if requestDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_RequestDetails_RequestDetail_RsbKey{}
        requestDetail.RsbKey = append(requestDetail.RsbKey, child)
        return &requestDetail.RsbKey[len(requestDetail.RsbKey)-1]
    }
    return nil
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &requestDetail.Session
    children["s2l-sub-lsp"] = &requestDetail.S2LSubLsp
    children["flow-spec"] = &requestDetail.FlowSpec
    children["generic-flow-spec"] = &requestDetail.GenericFlowSpec
    children["filter"] = &requestDetail.Filter
    children["style"] = &requestDetail.Style
    children["req-flags"] = &requestDetail.ReqFlags
    children["hop"] = &requestDetail.Hop
    children["header"] = &requestDetail.Header
    children["policy-sources"] = &requestDetail.PolicySources
    children["policy-flags"] = &requestDetail.PolicyFlags
    children["policy-query-flags"] = &requestDetail.PolicyQueryFlags
    for i := range requestDetail.PsbKey {
        children[requestDetail.PsbKey[i].GetSegmentPath()] = &requestDetail.PsbKey[i]
    }
    for i := range requestDetail.RsbKey {
        children[requestDetail.RsbKey[i].GetSegmentPath()] = &requestDetail.RsbKey[i]
    }
    return children
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = requestDetail.DestinationAddress
    leafs["destination-port"] = requestDetail.DestinationPort
    leafs["protocol"] = requestDetail.Protocol
    leafs["extended-tunnel-id"] = requestDetail.ExtendedTunnelId
    leafs["session-type"] = requestDetail.SessionType
    leafs["p2mp-id"] = requestDetail.P2MpId
    leafs["source-address"] = requestDetail.SourceAddress
    leafs["source-port"] = requestDetail.SourcePort
    leafs["sub-group-origin"] = requestDetail.SubGroupOrigin
    leafs["sub-group-id"] = requestDetail.SubGroupId
    leafs["vrf-name"] = requestDetail.VrfName
    leafs["output-interface"] = requestDetail.OutputInterface
    return leafs
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetBundleName() string { return "cisco_ios_xr" }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetYangName() string { return "request-detail" }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) SetParent(parent types.Entity) { requestDetail.parent = parent }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetParent() types.Entity { return requestDetail.parent }

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetParentYangName() string { return "request-details" }

// Rsvp_RequestDetails_RequestDetail_Session
// RSVP Session Information
type Rsvp_RequestDetails_RequestDetail_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_RequestDetails_RequestDetail_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetYangName() string { return "session" }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_RequestDetails_RequestDetail_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession
// RSVP Session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_RequestDetails_RequestDetail_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RequestDetails_RequestDetail_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_RequestDetails_RequestDetail_S2LSubLsp) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_FlowSpec
// Flow Spec Information
type Rsvp_RequestDetails_RequestDetail_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RequestDetails_RequestDetail_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// Rsvp_RequestDetails_RequestDetail_Filter
// RSVP Filter
type Rsvp_RequestDetails_RequestDetail_Filter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetFilter() yfilter.YFilter { return filter.YFilter }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) SetFilter(yf yfilter.YFilter) { filter.YFilter = yf }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetSegmentPath() string {
    return "filter"
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &filter.RsvpFilter
    }
    return nil
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &filter.RsvpFilter
    return children
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetBundleName() string { return "cisco_ios_xr" }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetYangName() string { return "filter" }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) SetParent(parent types.Entity) { filter.parent = parent }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetParent() types.Entity { return filter.parent }

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetParentYangName() string { return "filter" }

// Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_RequestDetails_RequestDetail_Style
// RSVP Style
type Rsvp_RequestDetails_RequestDetail_Style struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetFilter() yfilter.YFilter { return style.YFilter }

func (style *Rsvp_RequestDetails_RequestDetail_Style) SetFilter(yf yfilter.YFilter) { style.YFilter = yf }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetGoName(yname string) string {
    if yname == "reservation-type" { return "ReservationType" }
    return ""
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetSegmentPath() string {
    return "style"
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["reservation-type"] = style.ReservationType
    return leafs
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetBundleName() string { return "cisco_ios_xr" }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetYangName() string { return "style" }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (style *Rsvp_RequestDetails_RequestDetail_Style) SetParent(parent types.Entity) { style.parent = parent }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetParent() types.Entity { return style.parent }

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_ReqFlags
// Request flags
type Rsvp_RequestDetails_RequestDetail_ReqFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // Is neighbor refreshing. The type is bool.
    IsRefreshing interface{}

    // Send Confirm message. The type is bool.
    IsSendConfirm interface{}

    // Is ACK message outstanding. The type is bool.
    IsAckOutstanding interface{}

    // Is MessageID allocated. The type is bool.
    IsMessageIdAllocated interface{}

    // A NACK message was received. The type is bool.
    IsNackReceived interface{}

    // Retransmit the message. The type is bool.
    IsRetransmit interface{}

    // Message is paced. The type is bool.
    IsPaced interface{}

    // The Path message contains Label Request. The type is bool.
    IsLabelRequestInPath interface{}

    // The Path message contains RRO. The type is bool.
    IsRroInPath interface{}

    // Path has Session-Attr object with Record Labels set. The type is bool.
    IsRecordLabelInPath interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetFilter() yfilter.YFilter { return reqFlags.YFilter }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) SetFilter(yf yfilter.YFilter) { reqFlags.YFilter = yf }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetGoName(yname string) string {
    if yname == "is-local-receiver" { return "IsLocalReceiver" }
    if yname == "is-refreshing" { return "IsRefreshing" }
    if yname == "is-send-confirm" { return "IsSendConfirm" }
    if yname == "is-ack-outstanding" { return "IsAckOutstanding" }
    if yname == "is-message-id-allocated" { return "IsMessageIdAllocated" }
    if yname == "is-nack-received" { return "IsNackReceived" }
    if yname == "is-retransmit" { return "IsRetransmit" }
    if yname == "is-paced" { return "IsPaced" }
    if yname == "is-label-request-in-path" { return "IsLabelRequestInPath" }
    if yname == "is-rro-in-path" { return "IsRroInPath" }
    if yname == "is-record-label-in-path" { return "IsRecordLabelInPath" }
    if yname == "is-merge-point" { return "IsMergePoint" }
    return ""
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetSegmentPath() string {
    return "req-flags"
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-receiver"] = reqFlags.IsLocalReceiver
    leafs["is-refreshing"] = reqFlags.IsRefreshing
    leafs["is-send-confirm"] = reqFlags.IsSendConfirm
    leafs["is-ack-outstanding"] = reqFlags.IsAckOutstanding
    leafs["is-message-id-allocated"] = reqFlags.IsMessageIdAllocated
    leafs["is-nack-received"] = reqFlags.IsNackReceived
    leafs["is-retransmit"] = reqFlags.IsRetransmit
    leafs["is-paced"] = reqFlags.IsPaced
    leafs["is-label-request-in-path"] = reqFlags.IsLabelRequestInPath
    leafs["is-rro-in-path"] = reqFlags.IsRroInPath
    leafs["is-record-label-in-path"] = reqFlags.IsRecordLabelInPath
    leafs["is-merge-point"] = reqFlags.IsMergePoint
    return leafs
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetBundleName() string { return "cisco_ios_xr" }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetYangName() string { return "req-flags" }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) SetParent(parent types.Entity) { reqFlags.parent = parent }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetParent() types.Entity { return reqFlags.parent }

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_Hop
// Hop Infomation
type Rsvp_RequestDetails_RequestDetail_Hop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Neighbor Logical Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    NeighborLogicalInterfaceName interface{}
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetFilter() yfilter.YFilter { return hop.YFilter }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) SetFilter(yf yfilter.YFilter) { hop.YFilter = yf }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "neighbor-logical-interface-name" { return "NeighborLogicalInterfaceName" }
    return ""
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetSegmentPath() string {
    return "hop"
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = hop.NeighborAddress
    leafs["neighbor-logical-interface-name"] = hop.NeighborLogicalInterfaceName
    return leafs
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetBundleName() string { return "cisco_ios_xr" }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetYangName() string { return "hop" }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) SetParent(parent types.Entity) { hop.parent = parent }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetParent() types.Entity { return hop.parent }

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_Header
// RSVP Header Information
type Rsvp_RequestDetails_RequestDetail_Header struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IpSourceAddress interface{}
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetFilter() yfilter.YFilter { return header.YFilter }

func (header *Rsvp_RequestDetails_RequestDetail_Header) SetFilter(yf yfilter.YFilter) { header.YFilter = yf }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetGoName(yname string) string {
    if yname == "rsvp-version" { return "RsvpVersion" }
    if yname == "rsvp-header-flags" { return "RsvpHeaderFlags" }
    if yname == "rsvp-ttl" { return "RsvpTtl" }
    if yname == "rsvp-message-type" { return "RsvpMessageType" }
    if yname == "ip-tos" { return "IpTos" }
    if yname == "ip-ttl" { return "IpTtl" }
    if yname == "ip-source-address" { return "IpSourceAddress" }
    return ""
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetSegmentPath() string {
    return "header"
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-version"] = header.RsvpVersion
    leafs["rsvp-header-flags"] = header.RsvpHeaderFlags
    leafs["rsvp-ttl"] = header.RsvpTtl
    leafs["rsvp-message-type"] = header.RsvpMessageType
    leafs["ip-tos"] = header.IpTos
    leafs["ip-ttl"] = header.IpTtl
    leafs["ip-source-address"] = header.IpSourceAddress
    return leafs
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetBundleName() string { return "cisco_ios_xr" }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetYangName() string { return "header" }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (header *Rsvp_RequestDetails_RequestDetail_Header) SetParent(parent types.Entity) { header.parent = parent }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetParent() types.Entity { return header.parent }

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_PolicySources
// RSVP Policy Sources
type Rsvp_RequestDetails_RequestDetail_PolicySources struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetFilter() yfilter.YFilter { return policySources.YFilter }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) SetFilter(yf yfilter.YFilter) { policySources.YFilter = yf }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetGoName(yname string) string {
    if yname == "is-te-link" { return "IsTeLink" }
    if yname == "is-local" { return "IsLocal" }
    if yname == "is-cops" { return "IsCops" }
    if yname == "is-default" { return "IsDefault" }
    if yname == "is-cable" { return "IsCable" }
    return ""
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetSegmentPath() string {
    return "policy-sources"
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-te-link"] = policySources.IsTeLink
    leafs["is-local"] = policySources.IsLocal
    leafs["is-cops"] = policySources.IsCops
    leafs["is-default"] = policySources.IsDefault
    leafs["is-cable"] = policySources.IsCable
    return leafs
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetBundleName() string { return "cisco_ios_xr" }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetYangName() string { return "policy-sources" }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) SetParent(parent types.Entity) { policySources.parent = parent }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetParent() types.Entity { return policySources.parent }

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_PolicyFlags
// RSVP Policy Flags
type Rsvp_RequestDetails_RequestDetail_PolicyFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetFilter() yfilter.YFilter { return policyFlags.YFilter }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) SetFilter(yf yfilter.YFilter) { policyFlags.YFilter = yf }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetGoName(yname string) string {
    if yname == "is-accepted" { return "IsAccepted" }
    if yname == "is-installed" { return "IsInstalled" }
    if yname == "is-forwarding" { return "IsForwarding" }
    return ""
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetSegmentPath() string {
    return "policy-flags"
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-accepted"] = policyFlags.IsAccepted
    leafs["is-installed"] = policyFlags.IsInstalled
    leafs["is-forwarding"] = policyFlags.IsForwarding
    return leafs
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetYangName() string { return "policy-flags" }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) SetParent(parent types.Entity) { policyFlags.parent = parent }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetParent() types.Entity { return policyFlags.parent }

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags
// RSVP Query Flags
type Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetFilter() yfilter.YFilter { return policyQueryFlags.YFilter }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) SetFilter(yf yfilter.YFilter) { policyQueryFlags.YFilter = yf }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetGoName(yname string) string {
    if yname == "is-needed" { return "IsNeeded" }
    if yname == "is-report-required" { return "IsReportRequired" }
    if yname == "is-resync" { return "IsResync" }
    if yname == "is-bypass" { return "IsBypass" }
    return ""
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetSegmentPath() string {
    return "policy-query-flags"
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-needed"] = policyQueryFlags.IsNeeded
    leafs["is-report-required"] = policyQueryFlags.IsReportRequired
    leafs["is-resync"] = policyQueryFlags.IsResync
    leafs["is-bypass"] = policyQueryFlags.IsBypass
    return leafs
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetBundleName() string { return "cisco_ios_xr" }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetYangName() string { return "policy-query-flags" }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) SetParent(parent types.Entity) { policyQueryFlags.parent = parent }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetParent() types.Entity { return policyQueryFlags.parent }

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_PsbKey
// List of RSB keys
type Rsvp_RequestDetails_RequestDetail_PsbKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetFilter() yfilter.YFilter { return psbKey.YFilter }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) SetFilter(yf yfilter.YFilter) { psbKey.YFilter = yf }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port-or-tunnel-id" { return "DestinationPortOrTunnelId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port-or-lsp-id" { return "SourcePortOrLspId" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrfid" { return "Vrfid" }
    return ""
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetSegmentPath() string {
    return "psb-key"
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = psbKey.P2MpId
    leafs["destination-address"] = psbKey.DestinationAddress
    leafs["destination-port-or-tunnel-id"] = psbKey.DestinationPortOrTunnelId
    leafs["protocol"] = psbKey.Protocol
    leafs["extended-tunnel-id"] = psbKey.ExtendedTunnelId
    leafs["session-type"] = psbKey.SessionType
    leafs["source-address"] = psbKey.SourceAddress
    leafs["source-port-or-lsp-id"] = psbKey.SourcePortOrLspId
    leafs["p2mp-sub-group-origin"] = psbKey.P2MpSubGroupOrigin
    leafs["sub-group-id"] = psbKey.SubGroupId
    leafs["vrfid"] = psbKey.Vrfid
    return leafs
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetBundleName() string { return "cisco_ios_xr" }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetYangName() string { return "psb-key" }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) SetParent(parent types.Entity) { psbKey.parent = parent }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetParent() types.Entity { return psbKey.parent }

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetParentYangName() string { return "request-detail" }

// Rsvp_RequestDetails_RequestDetail_RsbKey
// List of RSB keys
type Rsvp_RequestDetails_RequestDetail_RsbKey struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2MpId interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetFilter() yfilter.YFilter { return rsbKey.YFilter }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) SetFilter(yf yfilter.YFilter) { rsbKey.YFilter = yf }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port-or-tunnel-id" { return "DestinationPortOrTunnelId" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port-or-lsp-id" { return "SourcePortOrLspId" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrfid" { return "Vrfid" }
    return ""
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetSegmentPath() string {
    return "rsb-key"
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = rsbKey.P2MpId
    leafs["destination-address"] = rsbKey.DestinationAddress
    leafs["destination-port-or-tunnel-id"] = rsbKey.DestinationPortOrTunnelId
    leafs["protocol"] = rsbKey.Protocol
    leafs["extended-tunnel-id"] = rsbKey.ExtendedTunnelId
    leafs["session-type"] = rsbKey.SessionType
    leafs["source-address"] = rsbKey.SourceAddress
    leafs["source-port-or-lsp-id"] = rsbKey.SourcePortOrLspId
    leafs["p2mp-sub-group-origin"] = rsbKey.P2MpSubGroupOrigin
    leafs["sub-group-id"] = rsbKey.SubGroupId
    leafs["vrfid"] = rsbKey.Vrfid
    return leafs
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetBundleName() string { return "cisco_ios_xr" }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetYangName() string { return "rsb-key" }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) SetParent(parent types.Entity) { rsbKey.parent = parent }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetParent() types.Entity { return rsbKey.parent }

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetParentYangName() string { return "request-detail" }

// Rsvp_InterfaceBriefs
// Table of brief info about RSVP-enabled
// interfaces
type Rsvp_InterfaceBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled interface. The type is slice of
    // Rsvp_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []Rsvp_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetFilter() yfilter.YFilter { return interfaceBriefs.YFilter }

func (interfaceBriefs *Rsvp_InterfaceBriefs) SetFilter(yf yfilter.YFilter) { interfaceBriefs.YFilter = yf }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetGoName(yname string) string {
    if yname == "interface-brief" { return "InterfaceBrief" }
    return ""
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetSegmentPath() string {
    return "interface-briefs"
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "interface-brief" {
        for _, c := range interfaceBriefs.InterfaceBrief {
            if interfaceBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_InterfaceBriefs_InterfaceBrief{}
        interfaceBriefs.InterfaceBrief = append(interfaceBriefs.InterfaceBrief, child)
        return &interfaceBriefs.InterfaceBrief[len(interfaceBriefs.InterfaceBrief)-1]
    }
    return nil
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range interfaceBriefs.InterfaceBrief {
        children[interfaceBriefs.InterfaceBrief[i].GetSegmentPath()] = &interfaceBriefs.InterfaceBrief[i]
    }
    return children
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetYangName() string { return "interface-briefs" }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBriefs *Rsvp_InterfaceBriefs) SetParent(parent types.Entity) { interfaceBriefs.parent = parent }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetParent() types.Entity { return interfaceBriefs.parent }

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_InterfaceBriefs_InterfaceBrief
// Brief info about an RSVP-enabled interface
type Rsvp_InterfaceBriefs_InterfaceBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetFilter() yfilter.YFilter { return interfaceBrief.YFilter }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) SetFilter(yf yfilter.YFilter) { interfaceBrief.YFilter = yf }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    if yname == "interface-name-xr" { return "InterfaceNameXr" }
    if yname == "bandwidth-information" { return "BandwidthInformation" }
    return ""
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetSegmentPath() string {
    return "interface-brief" + "[interface-name='" + fmt.Sprintf("%v", interfaceBrief.InterfaceName) + "']"
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bandwidth-information" {
        return &interfaceBrief.BandwidthInformation
    }
    return nil
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bandwidth-information"] = &interfaceBrief.BandwidthInformation
    return children
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = interfaceBrief.InterfaceName
    leafs["interface-name-xr"] = interfaceBrief.InterfaceNameXr
    return leafs
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetBundleName() string { return "cisco_ios_xr" }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetYangName() string { return "interface-brief" }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) SetParent(parent types.Entity) { interfaceBrief.parent = parent }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetParent() types.Entity { return interfaceBrief.parent }

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetParentYangName() string { return "interface-briefs" }

// Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation
// Interface bandwidth information
type Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetFilter() yfilter.YFilter { return bandwidthInformation.YFilter }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) SetFilter(yf yfilter.YFilter) { bandwidthInformation.YFilter = yf }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetGoName(yname string) string {
    if yname == "dste-mode" { return "DsteMode" }
    if yname == "pre-standard-dste-interface" { return "PreStandardDsteInterface" }
    if yname == "standard-dste-interface" { return "StandardDsteInterface" }
    return ""
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetSegmentPath() string {
    return "bandwidth-information"
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "pre-standard-dste-interface" {
        return &bandwidthInformation.PreStandardDsteInterface
    }
    if childYangName == "standard-dste-interface" {
        return &bandwidthInformation.StandardDsteInterface
    }
    return nil
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["pre-standard-dste-interface"] = &bandwidthInformation.PreStandardDsteInterface
    children["standard-dste-interface"] = &bandwidthInformation.StandardDsteInterface
    return children
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["dste-mode"] = bandwidthInformation.DsteMode
    return leafs
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetBundleName() string { return "cisco_ios_xr" }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetYangName() string { return "bandwidth-information" }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) SetParent(parent types.Entity) { bandwidthInformation.parent = parent }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetParent() types.Entity { return bandwidthInformation.parent }

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetParentYangName() string { return "interface-brief" }

// Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetFilter() yfilter.YFilter { return preStandardDsteInterface.YFilter }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) SetFilter(yf yfilter.YFilter) { preStandardDsteInterface.YFilter = yf }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-subpool-bandwidth" { return "MaxSubpoolBandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-subpool-bandwidth-absolute" { return "IsMaxSubpoolBandwidthAbsolute" }
    return ""
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetSegmentPath() string {
    return "pre-standard-dste-interface"
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = preStandardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = preStandardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = preStandardDsteInterface.MaxBandwidth
    leafs["max-subpool-bandwidth"] = preStandardDsteInterface.MaxSubpoolBandwidth
    leafs["is-max-bandwidth-absolute"] = preStandardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-subpool-bandwidth-absolute"] = preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute
    return leafs
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetYangName() string { return "pre-standard-dste-interface" }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) SetParent(parent types.Entity) { preStandardDsteInterface.parent = parent }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetParent() types.Entity { return preStandardDsteInterface.parent }

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetFilter() yfilter.YFilter { return standardDsteInterface.YFilter }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) SetFilter(yf yfilter.YFilter) { standardDsteInterface.YFilter = yf }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetGoName(yname string) string {
    if yname == "allocated-bit-rate" { return "AllocatedBitRate" }
    if yname == "max-flow-bandwidth" { return "MaxFlowBandwidth" }
    if yname == "max-bandwidth" { return "MaxBandwidth" }
    if yname == "max-pool0-bandwidth" { return "MaxPool0Bandwidth" }
    if yname == "max-pool1-bandwidth" { return "MaxPool1Bandwidth" }
    if yname == "is-max-bandwidth-absolute" { return "IsMaxBandwidthAbsolute" }
    if yname == "is-max-bc0-bandwidth-absolute" { return "IsMaxBc0BandwidthAbsolute" }
    if yname == "is-max-bc1-bandwidth-absolute" { return "IsMaxBc1BandwidthAbsolute" }
    return ""
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetSegmentPath() string {
    return "standard-dste-interface"
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["allocated-bit-rate"] = standardDsteInterface.AllocatedBitRate
    leafs["max-flow-bandwidth"] = standardDsteInterface.MaxFlowBandwidth
    leafs["max-bandwidth"] = standardDsteInterface.MaxBandwidth
    leafs["max-pool0-bandwidth"] = standardDsteInterface.MaxPool0Bandwidth
    leafs["max-pool1-bandwidth"] = standardDsteInterface.MaxPool1Bandwidth
    leafs["is-max-bandwidth-absolute"] = standardDsteInterface.IsMaxBandwidthAbsolute
    leafs["is-max-bc0-bandwidth-absolute"] = standardDsteInterface.IsMaxBc0BandwidthAbsolute
    leafs["is-max-bc1-bandwidth-absolute"] = standardDsteInterface.IsMaxBc1BandwidthAbsolute
    return leafs
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetBundleName() string { return "cisco_ios_xr" }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetYangName() string { return "standard-dste-interface" }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) SetParent(parent types.Entity) { standardDsteInterface.parent = parent }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetParent() types.Entity { return standardDsteInterface.parent }

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetParentYangName() string { return "bandwidth-information" }

// Rsvp_SessionDetaileds
// Table of detailed info about sessions
type Rsvp_SessionDetaileds struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info about session. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed.
    SessionDetailed []Rsvp_SessionDetaileds_SessionDetailed
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetFilter() yfilter.YFilter { return sessionDetaileds.YFilter }

func (sessionDetaileds *Rsvp_SessionDetaileds) SetFilter(yf yfilter.YFilter) { sessionDetaileds.YFilter = yf }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetGoName(yname string) string {
    if yname == "session-detailed" { return "SessionDetailed" }
    return ""
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetSegmentPath() string {
    return "session-detaileds"
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-detailed" {
        for _, c := range sessionDetaileds.SessionDetailed {
            if sessionDetaileds.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed{}
        sessionDetaileds.SessionDetailed = append(sessionDetaileds.SessionDetailed, child)
        return &sessionDetaileds.SessionDetailed[len(sessionDetaileds.SessionDetailed)-1]
    }
    return nil
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionDetaileds.SessionDetailed {
        children[sessionDetaileds.SessionDetailed[i].GetSegmentPath()] = &sessionDetaileds.SessionDetailed[i]
    }
    return children
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetYangName() string { return "session-detaileds" }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDetaileds *Rsvp_SessionDetaileds) SetParent(parent types.Entity) { sessionDetaileds.parent = parent }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetParent() types.Entity { return sessionDetaileds.parent }

func (sessionDetaileds *Rsvp_SessionDetaileds) GetParentYangName() string { return "rsvp" }

// Rsvp_SessionDetaileds_SessionDetailed
// Detailed info about session
type Rsvp_SessionDetaileds_SessionDetailed struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Compact session data.
    Compact Rsvp_SessionDetaileds_SessionDetailed_Compact

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp

    // Path and Reservation Info. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo.
    PsbRsbInfo []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetFilter() yfilter.YFilter { return sessionDetailed.YFilter }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) SetFilter(yf yfilter.YFilter) { sessionDetailed.YFilter = yf }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "compact" { return "Compact" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "psb-rsb-info" { return "PsbRsbInfo" }
    return ""
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetSegmentPath() string {
    return "session-detailed"
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "compact" {
        return &sessionDetailed.Compact
    }
    if childYangName == "s2l-sub-lsp" {
        return &sessionDetailed.S2LSubLsp
    }
    if childYangName == "psb-rsb-info" {
        for _, c := range sessionDetailed.PsbRsbInfo {
            if sessionDetailed.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo{}
        sessionDetailed.PsbRsbInfo = append(sessionDetailed.PsbRsbInfo, child)
        return &sessionDetailed.PsbRsbInfo[len(sessionDetailed.PsbRsbInfo)-1]
    }
    return nil
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["compact"] = &sessionDetailed.Compact
    children["s2l-sub-lsp"] = &sessionDetailed.S2LSubLsp
    for i := range sessionDetailed.PsbRsbInfo {
        children[sessionDetailed.PsbRsbInfo[i].GetSegmentPath()] = &sessionDetailed.PsbRsbInfo[i]
    }
    return children
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = sessionDetailed.DestinationAddress
    leafs["destination-port"] = sessionDetailed.DestinationPort
    leafs["protocol"] = sessionDetailed.Protocol
    leafs["extended-tunnel-id"] = sessionDetailed.ExtendedTunnelId
    leafs["session-type"] = sessionDetailed.SessionType
    leafs["p2mp-id"] = sessionDetailed.P2MpId
    leafs["vrf-name"] = sessionDetailed.VrfName
    return leafs
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetBundleName() string { return "cisco_ios_xr" }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetYangName() string { return "session-detailed" }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) SetParent(parent types.Entity) { sessionDetailed.parent = parent }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetParent() types.Entity { return sessionDetailed.parent }

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetParentYangName() string { return "session-detaileds" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact
// Compact session data
type Rsvp_SessionDetaileds_SessionDetailed_Compact struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session Rsvp_SessionDetaileds_SessionDetailed_Compact_Session
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetFilter() yfilter.YFilter { return compact.YFilter }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) SetFilter(yf yfilter.YFilter) { compact.YFilter = yf }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetGoName(yname string) string {
    if yname == "ps-bs" { return "PsBs" }
    if yname == "rs-bs" { return "RsBs" }
    if yname == "requests" { return "Requests" }
    if yname == "detail-list-size" { return "DetailListSize" }
    if yname == "session" { return "Session" }
    return ""
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetSegmentPath() string {
    return "compact"
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &compact.Session
    }
    return nil
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &compact.Session
    return children
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ps-bs"] = compact.PsBs
    leafs["rs-bs"] = compact.RsBs
    leafs["requests"] = compact.Requests
    leafs["detail-list-size"] = compact.DetailListSize
    return leafs
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetBundleName() string { return "cisco_ios_xr" }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetYangName() string { return "compact" }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) SetParent(parent types.Entity) { compact.parent = parent }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetParent() types.Entity { return compact.parent }

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetParentYangName() string { return "session-detailed" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session
// RSVP Session Information
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetYangName() string { return "session" }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetParentYangName() string { return "compact" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
// RSVP Session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2LSubLsp) GetParentYangName() string { return "session-detailed" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo
// Path and Reservation Info
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Path Info. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo.
    PsbInfo []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo

    // Reservation Info. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo.
    RsbInfo []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetFilter() yfilter.YFilter { return psbRsbInfo.YFilter }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) SetFilter(yf yfilter.YFilter) { psbRsbInfo.YFilter = yf }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetGoName(yname string) string {
    if yname == "psb-info" { return "PsbInfo" }
    if yname == "rsb-info" { return "RsbInfo" }
    return ""
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetSegmentPath() string {
    return "psb-rsb-info"
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "psb-info" {
        for _, c := range psbRsbInfo.PsbInfo {
            if psbRsbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo{}
        psbRsbInfo.PsbInfo = append(psbRsbInfo.PsbInfo, child)
        return &psbRsbInfo.PsbInfo[len(psbRsbInfo.PsbInfo)-1]
    }
    if childYangName == "rsb-info" {
        for _, c := range psbRsbInfo.RsbInfo {
            if psbRsbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo{}
        psbRsbInfo.RsbInfo = append(psbRsbInfo.RsbInfo, child)
        return &psbRsbInfo.RsbInfo[len(psbRsbInfo.RsbInfo)-1]
    }
    return nil
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range psbRsbInfo.PsbInfo {
        children[psbRsbInfo.PsbInfo[i].GetSegmentPath()] = &psbRsbInfo.PsbInfo[i]
    }
    for i := range psbRsbInfo.RsbInfo {
        children[psbRsbInfo.RsbInfo[i].GetSegmentPath()] = &psbRsbInfo.RsbInfo[i]
    }
    return children
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetBundleName() string { return "cisco_ios_xr" }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetYangName() string { return "psb-rsb-info" }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) SetParent(parent types.Entity) { psbRsbInfo.parent = parent }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetParent() types.Entity { return psbRsbInfo.parent }

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetParentYangName() string { return "session-detailed" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo
// Path Info
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    LspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Interface on which inbound message was received. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    InInterface interface{}

    // Label for inbound traffic. The type is interface{} with range:
    // 0..4294967295.
    InLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Address validity. The type is bool.
    IsBadAddress interface{}

    // IP address of Path's incoming interface. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    IncomingInterfaceAddress interface{}

    // ERO validity. The type is bool.
    IsEroValid interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // Traffic Spec validity. The type is bool.
    IsTrafficSpecValid interface{}

    // Tunnel name. The type is string.
    TunnelName interface{}

    // Generic Label for inbound traffic.
    GenericInLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel

    // Traffic Spec object.
    TrafficSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec

    // Generic Traffic Spec object.
    GenericTrafficSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec

    // Association object.
    Association Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association

    // Protection object.
    Protection Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection

    // Reverse LSP object.
    ReverseLsp Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp

    // Explicit Route Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero.
    Ero []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero

    // Record Route Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro.
    Rro []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetFilter() yfilter.YFilter { return psbInfo.YFilter }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) SetFilter(yf yfilter.YFilter) { psbInfo.YFilter = yf }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "lsp-id" { return "LspId" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "in-interface" { return "InInterface" }
    if yname == "in-label" { return "InLabel" }
    if yname == "lsp-wrap-label" { return "LspWrapLabel" }
    if yname == "is-bad-address" { return "IsBadAddress" }
    if yname == "incoming-interface-address" { return "IncomingInterfaceAddress" }
    if yname == "is-ero-valid" { return "IsEroValid" }
    if yname == "is-rro-valid" { return "IsRroValid" }
    if yname == "is-traffic-spec-valid" { return "IsTrafficSpecValid" }
    if yname == "tunnel-name" { return "TunnelName" }
    if yname == "generic-in-label" { return "GenericInLabel" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "association" { return "Association" }
    if yname == "protection" { return "Protection" }
    if yname == "reverse-lsp" { return "ReverseLsp" }
    if yname == "ero" { return "Ero" }
    if yname == "rro" { return "Rro" }
    return ""
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetSegmentPath() string {
    return "psb-info"
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-in-label" {
        return &psbInfo.GenericInLabel
    }
    if childYangName == "traffic-spec" {
        return &psbInfo.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &psbInfo.GenericTrafficSpec
    }
    if childYangName == "association" {
        return &psbInfo.Association
    }
    if childYangName == "protection" {
        return &psbInfo.Protection
    }
    if childYangName == "reverse-lsp" {
        return &psbInfo.ReverseLsp
    }
    if childYangName == "ero" {
        for _, c := range psbInfo.Ero {
            if psbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero{}
        psbInfo.Ero = append(psbInfo.Ero, child)
        return &psbInfo.Ero[len(psbInfo.Ero)-1]
    }
    if childYangName == "rro" {
        for _, c := range psbInfo.Rro {
            if psbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro{}
        psbInfo.Rro = append(psbInfo.Rro, child)
        return &psbInfo.Rro[len(psbInfo.Rro)-1]
    }
    return nil
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-in-label"] = &psbInfo.GenericInLabel
    children["traffic-spec"] = &psbInfo.TrafficSpec
    children["generic-traffic-spec"] = &psbInfo.GenericTrafficSpec
    children["association"] = &psbInfo.Association
    children["protection"] = &psbInfo.Protection
    children["reverse-lsp"] = &psbInfo.ReverseLsp
    for i := range psbInfo.Ero {
        children[psbInfo.Ero[i].GetSegmentPath()] = &psbInfo.Ero[i]
    }
    for i := range psbInfo.Rro {
        children[psbInfo.Rro[i].GetSegmentPath()] = &psbInfo.Rro[i]
    }
    return children
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = psbInfo.IsValid
    leafs["destination-address"] = psbInfo.DestinationAddress
    leafs["lsp-id"] = psbInfo.LspId
    leafs["p2mp-sub-group-origin"] = psbInfo.P2MpSubGroupOrigin
    leafs["sub-group-id"] = psbInfo.SubGroupId
    leafs["in-interface"] = psbInfo.InInterface
    leafs["in-label"] = psbInfo.InLabel
    leafs["lsp-wrap-label"] = psbInfo.LspWrapLabel
    leafs["is-bad-address"] = psbInfo.IsBadAddress
    leafs["incoming-interface-address"] = psbInfo.IncomingInterfaceAddress
    leafs["is-ero-valid"] = psbInfo.IsEroValid
    leafs["is-rro-valid"] = psbInfo.IsRroValid
    leafs["is-traffic-spec-valid"] = psbInfo.IsTrafficSpecValid
    leafs["tunnel-name"] = psbInfo.TunnelName
    return leafs
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetBundleName() string { return "cisco_ios_xr" }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetYangName() string { return "psb-info" }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) SetParent(parent types.Entity) { psbInfo.parent = parent }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetParent() types.Entity { return psbInfo.parent }

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetParentYangName() string { return "psb-rsb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel
// Generic Label for inbound traffic
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetFilter() yfilter.YFilter { return genericInLabel.YFilter }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) SetFilter(yf yfilter.YFilter) { genericInLabel.YFilter = yf }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetSegmentPath() string {
    return "generic-in-label"
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericInLabel.GeneralizedLabel
    }
    return nil
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericInLabel.GeneralizedLabel
    return children
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericInLabel.GenericLabelType
    return leafs
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetYangName() string { return "generic-in-label" }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) SetParent(parent types.Entity) { genericInLabel.parent = parent }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetParent() types.Entity { return genericInLabel.parent }

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
// Generalized Label
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetParentYangName() string { return "generic-in-label" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec
// Traffic Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec
// Generic Traffic Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association
// Association object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AssociationType. The type is RsvpMgmtAssociation.
    AssociationType interface{}

    // IPV4 ASSOCIATION Object.
    Ipv4 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4

    // IPV6 ASSOCIATION Object.
    Ipv6 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6

    // EXTENDED IPV4 ASSOCIATION Object.
    ExtendedIpv4 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4

    // EXTENDED IPV6 ASSOCIATION Object.
    ExtendedIpv6 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetFilter() yfilter.YFilter { return association.YFilter }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) SetFilter(yf yfilter.YFilter) { association.YFilter = yf }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetGoName(yname string) string {
    if yname == "association-type" { return "AssociationType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv6" { return "Ipv6" }
    if yname == "extended-ipv4" { return "ExtendedIpv4" }
    if yname == "extended-ipv6" { return "ExtendedIpv6" }
    return ""
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetSegmentPath() string {
    return "association"
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &association.Ipv4
    }
    if childYangName == "ipv6" {
        return &association.Ipv6
    }
    if childYangName == "extended-ipv4" {
        return &association.ExtendedIpv4
    }
    if childYangName == "extended-ipv6" {
        return &association.ExtendedIpv6
    }
    return nil
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &association.Ipv4
    children["ipv6"] = &association.Ipv6
    children["extended-ipv4"] = &association.ExtendedIpv4
    children["extended-ipv6"] = &association.ExtendedIpv6
    return children
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["association-type"] = association.AssociationType
    return leafs
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetBundleName() string { return "cisco_ios_xr" }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetYangName() string { return "association" }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) SetParent(parent types.Entity) { association.parent = parent }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetParent() types.Entity { return association.parent }

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4
// IPV4 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    return ""
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = ipv4.Type
    leafs["id"] = ipv4.Id
    leafs["source"] = ipv4.Source
    return leafs
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetParentYangName() string { return "association" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6
// IPV6 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Source interface{}
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetFilter() yfilter.YFilter { return ipv6.YFilter }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) SetFilter(yf yfilter.YFilter) { ipv6.YFilter = yf }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    return ""
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetSegmentPath() string {
    return "ipv6"
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = ipv6.Type
    leafs["id"] = ipv6.Id
    leafs["source"] = ipv6.Source
    return leafs
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetBundleName() string { return "cisco_ios_xr" }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetYangName() string { return "ipv6" }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) SetParent(parent types.Entity) { ipv6.parent = parent }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetParent() types.Entity { return ipv6.parent }

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetParentYangName() string { return "association" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4
// EXTENDED IPV4 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedId []interface{}
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetFilter() yfilter.YFilter { return extendedIpv4.YFilter }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) SetFilter(yf yfilter.YFilter) { extendedIpv4.YFilter = yf }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    if yname == "global-source" { return "GlobalSource" }
    if yname == "extended-id" { return "ExtendedId" }
    return ""
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetSegmentPath() string {
    return "extended-ipv4"
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extendedIpv4.Type
    leafs["id"] = extendedIpv4.Id
    leafs["source"] = extendedIpv4.Source
    leafs["global-source"] = extendedIpv4.GlobalSource
    leafs["extended-id"] = extendedIpv4.ExtendedId
    return leafs
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetBundleName() string { return "cisco_ios_xr" }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetYangName() string { return "extended-ipv4" }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) SetParent(parent types.Entity) { extendedIpv4.parent = parent }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetParent() types.Entity { return extendedIpv4.parent }

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetParentYangName() string { return "association" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
// EXTENDED IPV6 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of interface{} with range:
    // 0..4294967295.
    ExtendedId []interface{}
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetFilter() yfilter.YFilter { return extendedIpv6.YFilter }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) SetFilter(yf yfilter.YFilter) { extendedIpv6.YFilter = yf }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "id" { return "Id" }
    if yname == "source" { return "Source" }
    if yname == "global-source" { return "GlobalSource" }
    if yname == "extended-id" { return "ExtendedId" }
    return ""
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetSegmentPath() string {
    return "extended-ipv6"
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = extendedIpv6.Type
    leafs["id"] = extendedIpv6.Id
    leafs["source"] = extendedIpv6.Source
    leafs["global-source"] = extendedIpv6.GlobalSource
    leafs["extended-id"] = extendedIpv6.ExtendedId
    return leafs
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetBundleName() string { return "cisco_ios_xr" }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetYangName() string { return "extended-ipv6" }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) SetParent(parent types.Entity) { extendedIpv6.parent = parent }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetParent() types.Entity { return extendedIpv6.parent }

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetParentYangName() string { return "association" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection
// Protection object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Secondary Bit. The type is bool.
    S interface{}

    // Protecting Bit. The type is bool.
    P interface{}

    // Notification Bit. The type is bool.
    N interface{}

    // Operational Bit. The type is bool.
    O interface{}

    // PROTECTION Object LSP Flags.
    LspFlags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags

    // PROTECTION Object Link Flags.
    LinkFlags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetFilter() yfilter.YFilter { return protection.YFilter }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) SetFilter(yf yfilter.YFilter) { protection.YFilter = yf }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetGoName(yname string) string {
    if yname == "s" { return "S" }
    if yname == "p" { return "P" }
    if yname == "n" { return "N" }
    if yname == "o" { return "O" }
    if yname == "lsp-flags" { return "LspFlags" }
    if yname == "link-flags" { return "LinkFlags" }
    return ""
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetSegmentPath() string {
    return "protection"
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "lsp-flags" {
        return &protection.LspFlags
    }
    if childYangName == "link-flags" {
        return &protection.LinkFlags
    }
    return nil
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["lsp-flags"] = &protection.LspFlags
    children["link-flags"] = &protection.LinkFlags
    return children
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s"] = protection.S
    leafs["p"] = protection.P
    leafs["n"] = protection.N
    leafs["o"] = protection.O
    return leafs
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetBundleName() string { return "cisco_ios_xr" }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetYangName() string { return "protection" }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) SetParent(parent types.Entity) { protection.parent = parent }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetParent() types.Entity { return protection.parent }

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags
// PROTECTION Object LSP Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Full Rerouting. The type is bool.
    Rerouting interface{}

    // Rerouting Without Extra-Traffic. The type is bool.
    ReroutingNoEt interface{}

    // 1:N Protection with Extra-Traffic. The type is bool.
    OneToNProtectionEt interface{}

    // 1+1 Unidirectional Protection. The type is bool.
    OnePlusOneUni interface{}

    // 1+1 Bidirectional Protection. The type is bool.
    OnePlusOneBi interface{}
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetFilter() yfilter.YFilter { return lspFlags.YFilter }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) SetFilter(yf yfilter.YFilter) { lspFlags.YFilter = yf }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetGoName(yname string) string {
    if yname == "rerouting" { return "Rerouting" }
    if yname == "rerouting-no-et" { return "ReroutingNoEt" }
    if yname == "one-to-n-protection-et" { return "OneToNProtectionEt" }
    if yname == "one-plus-one-uni" { return "OnePlusOneUni" }
    if yname == "one-plus-one-bi" { return "OnePlusOneBi" }
    return ""
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetSegmentPath() string {
    return "lsp-flags"
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rerouting"] = lspFlags.Rerouting
    leafs["rerouting-no-et"] = lspFlags.ReroutingNoEt
    leafs["one-to-n-protection-et"] = lspFlags.OneToNProtectionEt
    leafs["one-plus-one-uni"] = lspFlags.OnePlusOneUni
    leafs["one-plus-one-bi"] = lspFlags.OnePlusOneBi
    return leafs
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetBundleName() string { return "cisco_ios_xr" }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetYangName() string { return "lsp-flags" }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) SetParent(parent types.Entity) { lspFlags.parent = parent }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetParent() types.Entity { return lspFlags.parent }

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetParentYangName() string { return "protection" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
// PROTECTION Object Link Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Indicates Enhanced Protection Scheme. The type is bool.
    Enhanced interface{}

    // Dedicated 1+1 Protection. The type is bool.
    Ded1Plus1 interface{}

    // Dedicated 1:1 Protection. The type is bool.
    Ded1To1 interface{}

    // Shared Link Layer Protection. The type is bool.
    Shared interface{}

    // LSP should not use any Link Layer Protection. The type is bool.
    Unprotected interface{}

    // LSP should use Links that are protecting other (primary) traffic. The type
    // is bool.
    ExtraTraffic interface{}

    // Reserved Bit 1. The type is bool.
    ReservedBit1 interface{}

    // Reserved Bit 2. The type is bool.
    ReservedBit2 interface{}
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetFilter() yfilter.YFilter { return linkFlags.YFilter }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) SetFilter(yf yfilter.YFilter) { linkFlags.YFilter = yf }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetGoName(yname string) string {
    if yname == "enhanced" { return "Enhanced" }
    if yname == "ded1-plus1" { return "Ded1Plus1" }
    if yname == "ded1-to1" { return "Ded1To1" }
    if yname == "shared" { return "Shared" }
    if yname == "unprotected" { return "Unprotected" }
    if yname == "extra-traffic" { return "ExtraTraffic" }
    if yname == "reserved-bit1" { return "ReservedBit1" }
    if yname == "reserved-bit2" { return "ReservedBit2" }
    return ""
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetSegmentPath() string {
    return "link-flags"
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enhanced"] = linkFlags.Enhanced
    leafs["ded1-plus1"] = linkFlags.Ded1Plus1
    leafs["ded1-to1"] = linkFlags.Ded1To1
    leafs["shared"] = linkFlags.Shared
    leafs["unprotected"] = linkFlags.Unprotected
    leafs["extra-traffic"] = linkFlags.ExtraTraffic
    leafs["reserved-bit1"] = linkFlags.ReservedBit1
    leafs["reserved-bit2"] = linkFlags.ReservedBit2
    return leafs
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetBundleName() string { return "cisco_ios_xr" }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetYangName() string { return "link-flags" }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) SetParent(parent types.Entity) { linkFlags.parent = parent }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetParent() types.Entity { return linkFlags.parent }

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetParentYangName() string { return "protection" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp
// Reverse LSP object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generic Traffic Spec object.
    GenericTrafficSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec

    // Explicit Route Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero.
    Ero []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero

    // Unsupported REVERSE_LSP Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject.
    UnsupSubObject []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetFilter() yfilter.YFilter { return reverseLsp.YFilter }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) SetFilter(yf yfilter.YFilter) { reverseLsp.YFilter = yf }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetGoName(yname string) string {
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    if yname == "ero" { return "Ero" }
    if yname == "unsup-sub-object" { return "UnsupSubObject" }
    return ""
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetSegmentPath() string {
    return "reverse-lsp"
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-traffic-spec" {
        return &reverseLsp.GenericTrafficSpec
    }
    if childYangName == "ero" {
        for _, c := range reverseLsp.Ero {
            if reverseLsp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero{}
        reverseLsp.Ero = append(reverseLsp.Ero, child)
        return &reverseLsp.Ero[len(reverseLsp.Ero)-1]
    }
    if childYangName == "unsup-sub-object" {
        for _, c := range reverseLsp.UnsupSubObject {
            if reverseLsp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject{}
        reverseLsp.UnsupSubObject = append(reverseLsp.UnsupSubObject, child)
        return &reverseLsp.UnsupSubObject[len(reverseLsp.UnsupSubObject)-1]
    }
    return nil
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-traffic-spec"] = &reverseLsp.GenericTrafficSpec
    for i := range reverseLsp.Ero {
        children[reverseLsp.Ero[i].GetSegmentPath()] = &reverseLsp.Ero[i]
    }
    for i := range reverseLsp.UnsupSubObject {
        children[reverseLsp.UnsupSubObject[i].GetSegmentPath()] = &reverseLsp.UnsupSubObject[i]
    }
    return children
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetBundleName() string { return "cisco_ios_xr" }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetYangName() string { return "reverse-lsp" }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) SetParent(parent types.Entity) { reverseLsp.parent = parent }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetParent() types.Entity { return reverseLsp.parent }

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec
// Generic Traffic Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetParentYangName() string { return "reverse-lsp" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero
// Explicit Route Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetFilter() yfilter.YFilter { return ero.YFilter }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) SetFilter(yf yfilter.YFilter) { ero.YFilter = yf }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetSegmentPath() string {
    return "ero"
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &ero.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &ero.UnnumberedEroSubObject
    }
    return nil
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &ero.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &ero.UnnumberedEroSubObject
    return children
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = ero.EroType
    return leafs
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetBundleName() string { return "cisco_ios_xr" }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetYangName() string { return "ero" }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) SetParent(parent types.Entity) { ero.parent = parent }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetParent() types.Entity { return ero.parent }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetParentYangName() string { return "reverse-lsp" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject
// IPV4 ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4EroSubObject) GetParentYangName() string { return "ero" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetParentYangName() string { return "ero" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
// Unsupported REVERSE_LSP Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // rsvp mgmt rev lsp unsupported subobj. The type is slice of interface{} with
    // range: 0..255.
    RsvpMgmtRevLspUnsupportedSubobj []interface{}
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetFilter() yfilter.YFilter { return unsupSubObject.YFilter }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) SetFilter(yf yfilter.YFilter) { unsupSubObject.YFilter = yf }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetGoName(yname string) string {
    if yname == "rsvp-mgmt-rev-lsp-unsupported-subobj" { return "RsvpMgmtRevLspUnsupportedSubobj" }
    return ""
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetSegmentPath() string {
    return "unsup-sub-object"
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rsvp-mgmt-rev-lsp-unsupported-subobj"] = unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj
    return leafs
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetYangName() string { return "unsup-sub-object" }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) SetParent(parent types.Entity) { unsupSubObject.parent = parent }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetParent() types.Entity { return unsupSubObject.parent }

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetParentYangName() string { return "reverse-lsp" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero
// Explicit Route Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4EroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetFilter() yfilter.YFilter { return ero.YFilter }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) SetFilter(yf yfilter.YFilter) { ero.YFilter = yf }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetGoName(yname string) string {
    if yname == "ero-type" { return "EroType" }
    if yname == "ipv4ero-sub-object" { return "Ipv4EroSubObject" }
    if yname == "unnumbered-ero-sub-object" { return "UnnumberedEroSubObject" }
    return ""
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetSegmentPath() string {
    return "ero"
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4ero-sub-object" {
        return &ero.Ipv4EroSubObject
    }
    if childYangName == "unnumbered-ero-sub-object" {
        return &ero.UnnumberedEroSubObject
    }
    return nil
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4ero-sub-object"] = &ero.Ipv4EroSubObject
    children["unnumbered-ero-sub-object"] = &ero.UnnumberedEroSubObject
    return children
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["ero-type"] = ero.EroType
    return leafs
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetBundleName() string { return "cisco_ios_xr" }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetYangName() string { return "ero" }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) SetParent(parent types.Entity) { ero.parent = parent }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetParent() types.Entity { return ero.parent }

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject
// IPV4 ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetFilter() yfilter.YFilter { return ipv4EroSubObject.YFilter }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) SetFilter(yf yfilter.YFilter) { ipv4EroSubObject.YFilter = yf }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-address" { return "EroAddress" }
    if yname == "prefix-length" { return "PrefixLength" }
    return ""
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetSegmentPath() string {
    return "ipv4ero-sub-object"
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = ipv4EroSubObject.IsStrictRoute
    leafs["ero-address"] = ipv4EroSubObject.EroAddress
    leafs["prefix-length"] = ipv4EroSubObject.PrefixLength
    return leafs
}

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetYangName() string { return "ipv4ero-sub-object" }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) SetParent(parent types.Entity) { ipv4EroSubObject.parent = parent }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetParent() types.Entity { return ipv4EroSubObject.parent }

func (ipv4EroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4EroSubObject) GetParentYangName() string { return "ero" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetFilter() yfilter.YFilter { return unnumberedEroSubObject.YFilter }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedEroSubObject.YFilter = yf }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetGoName(yname string) string {
    if yname == "is-strict-route" { return "IsStrictRoute" }
    if yname == "ero-interface-id" { return "EroInterfaceId" }
    if yname == "ero-router-id" { return "EroRouterId" }
    if yname == "status" { return "Status" }
    return ""
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetSegmentPath() string {
    return "unnumbered-ero-sub-object"
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-strict-route"] = unnumberedEroSubObject.IsStrictRoute
    leafs["ero-interface-id"] = unnumberedEroSubObject.EroInterfaceId
    leafs["ero-router-id"] = unnumberedEroSubObject.EroRouterId
    leafs["status"] = unnumberedEroSubObject.Status
    return leafs
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetYangName() string { return "unnumbered-ero-sub-object" }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) SetParent(parent types.Entity) { unnumberedEroSubObject.parent = parent }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetParent() types.Entity { return unnumberedEroSubObject.parent }

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetParentYangName() string { return "ero" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
// Record Route Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4RroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetFilter() yfilter.YFilter { return rro.YFilter }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) SetFilter(yf yfilter.YFilter) { rro.YFilter = yf }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetGoName(yname string) string {
    if yname == "rro-type" { return "RroType" }
    if yname == "ipv4rro-sub-object" { return "Ipv4RroSubObject" }
    if yname == "label-rro-sub-object" { return "LabelRroSubObject" }
    if yname == "unnumbered-rro-sub-object" { return "UnnumberedRroSubObject" }
    if yname == "srlg-rro-sub-object" { return "SrlgRroSubObject" }
    return ""
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetSegmentPath() string {
    return "rro"
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4rro-sub-object" {
        return &rro.Ipv4RroSubObject
    }
    if childYangName == "label-rro-sub-object" {
        return &rro.LabelRroSubObject
    }
    if childYangName == "unnumbered-rro-sub-object" {
        return &rro.UnnumberedRroSubObject
    }
    if childYangName == "srlg-rro-sub-object" {
        return &rro.SrlgRroSubObject
    }
    return nil
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4rro-sub-object"] = &rro.Ipv4RroSubObject
    children["label-rro-sub-object"] = &rro.LabelRroSubObject
    children["unnumbered-rro-sub-object"] = &rro.UnnumberedRroSubObject
    children["srlg-rro-sub-object"] = &rro.SrlgRroSubObject
    return children
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-type"] = rro.RroType
    return leafs
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetBundleName() string { return "cisco_ios_xr" }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetYangName() string { return "rro" }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) SetParent(parent types.Entity) { rro.parent = parent }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetParent() types.Entity { return rro.parent }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetParentYangName() string { return "psb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject
// IPV4 RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetFilter() yfilter.YFilter { return ipv4RroSubObject.YFilter }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) SetFilter(yf yfilter.YFilter) { ipv4RroSubObject.YFilter = yf }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetGoName(yname string) string {
    if yname == "rro-address" { return "RroAddress" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetSegmentPath() string {
    return "ipv4rro-sub-object"
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &ipv4RroSubObject.Flags
    }
    return nil
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &ipv4RroSubObject.Flags
    return children
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-address"] = ipv4RroSubObject.RroAddress
    return leafs
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetYangName() string { return "ipv4rro-sub-object" }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) SetParent(parent types.Entity) { ipv4RroSubObject.parent = parent }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetParent() types.Entity { return ipv4RroSubObject.parent }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags
// The RRO IPV4 Subobject Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4RroSubObject_Flags) GetParentYangName() string { return "ipv4rro-sub-object" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Variable Length Label. The type is slice of interface{}
    // with range: 0..4294967295.
    VariableLengthLabel []interface{}

    // The RRO Subobject Label Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetFilter() yfilter.YFilter { return labelRroSubObject.YFilter }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) SetFilter(yf yfilter.YFilter) { labelRroSubObject.YFilter = yf }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "is-label-variable-length" { return "IsLabelVariableLength" }
    if yname == "variable-length-label" { return "VariableLengthLabel" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetSegmentPath() string {
    return "label-rro-sub-object"
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &labelRroSubObject.Flags
    }
    return nil
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &labelRroSubObject.Flags
    return children
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelRroSubObject.Label
    leafs["is-label-variable-length"] = labelRroSubObject.IsLabelVariableLength
    leafs["variable-length-label"] = labelRroSubObject.VariableLengthLabel
    return leafs
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetYangName() string { return "label-rro-sub-object" }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) SetParent(parent types.Entity) { labelRroSubObject.parent = parent }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetParent() types.Entity { return labelRroSubObject.parent }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-global-label" { return "IsGlobalLabel" }
    return ""
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-global-label"] = flags.IsGlobalLabel
    return leafs
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetParentYangName() string { return "label-rro-sub-object" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetFilter() yfilter.YFilter { return unnumberedRroSubObject.YFilter }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedRroSubObject.YFilter = yf }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetGoName(yname string) string {
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-id" { return "InterfaceId" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetSegmentPath() string {
    return "unnumbered-rro-sub-object"
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &unnumberedRroSubObject.Flags
    }
    return nil
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &unnumberedRroSubObject.Flags
    return children
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-address"] = unnumberedRroSubObject.InterfaceAddress
    leafs["interface-id"] = unnumberedRroSubObject.InterfaceId
    return leafs
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetYangName() string { return "unnumbered-rro-sub-object" }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) SetParent(parent types.Entity) { unnumberedRroSubObject.parent = parent }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetParent() types.Entity { return unnumberedRroSubObject.parent }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParentYangName() string { return "unnumbered-rro-sub-object" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlGs []interface{}
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetFilter() yfilter.YFilter { return srlgRroSubObject.YFilter }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) SetFilter(yf yfilter.YFilter) { srlgRroSubObject.YFilter = yf }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetGoName(yname string) string {
    if yname == "srl-gs" { return "SrlGs" }
    return ""
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetSegmentPath() string {
    return "srlg-rro-sub-object"
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srl-gs"] = srlgRroSubObject.SrlGs
    return leafs
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetYangName() string { return "srlg-rro-sub-object" }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) SetParent(parent types.Entity) { srlgRroSubObject.parent = parent }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetParent() types.Entity { return srlgRroSubObject.parent }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
// Reservation Info
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Interface on which outbound message was sent. The type is string with
    // pattern: [a-zA-Z0-9./-]+.
    OutInterface interface{}

    // Label for outbound traffic. The type is interface{} with range:
    // 0..4294967295.
    OutLabel interface{}

    // Backup tunnel interface. The type is string with pattern: [a-zA-Z0-9./-]+.
    BackupInterface interface{}

    // Backup label. The type is interface{} with range: 0..4294967295.
    BackupLabel interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // FlowSpec validity. The type is bool.
    IsFlowSpecValid interface{}

    // Generic Label for outbound traffic.
    GenericOutLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel

    // Flow spec object.
    FlowSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec

    // Generic Flow Spec object.
    GenericFlowSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec

    // Record route object. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro.
    Rro []Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetFilter() yfilter.YFilter { return rsbInfo.YFilter }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) SetFilter(yf yfilter.YFilter) { rsbInfo.YFilter = yf }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetGoName(yname string) string {
    if yname == "is-valid" { return "IsValid" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "out-interface" { return "OutInterface" }
    if yname == "out-label" { return "OutLabel" }
    if yname == "backup-interface" { return "BackupInterface" }
    if yname == "backup-label" { return "BackupLabel" }
    if yname == "is-rro-valid" { return "IsRroValid" }
    if yname == "is-flow-spec-valid" { return "IsFlowSpecValid" }
    if yname == "generic-out-label" { return "GenericOutLabel" }
    if yname == "flow-spec" { return "FlowSpec" }
    if yname == "generic-flow-spec" { return "GenericFlowSpec" }
    if yname == "rro" { return "Rro" }
    return ""
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetSegmentPath() string {
    return "rsb-info"
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generic-out-label" {
        return &rsbInfo.GenericOutLabel
    }
    if childYangName == "flow-spec" {
        return &rsbInfo.FlowSpec
    }
    if childYangName == "generic-flow-spec" {
        return &rsbInfo.GenericFlowSpec
    }
    if childYangName == "rro" {
        for _, c := range rsbInfo.Rro {
            if rsbInfo.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro{}
        rsbInfo.Rro = append(rsbInfo.Rro, child)
        return &rsbInfo.Rro[len(rsbInfo.Rro)-1]
    }
    return nil
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generic-out-label"] = &rsbInfo.GenericOutLabel
    children["flow-spec"] = &rsbInfo.FlowSpec
    children["generic-flow-spec"] = &rsbInfo.GenericFlowSpec
    for i := range rsbInfo.Rro {
        children[rsbInfo.Rro[i].GetSegmentPath()] = &rsbInfo.Rro[i]
    }
    return children
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-valid"] = rsbInfo.IsValid
    leafs["destination-address"] = rsbInfo.DestinationAddress
    leafs["out-interface"] = rsbInfo.OutInterface
    leafs["out-label"] = rsbInfo.OutLabel
    leafs["backup-interface"] = rsbInfo.BackupInterface
    leafs["backup-label"] = rsbInfo.BackupLabel
    leafs["is-rro-valid"] = rsbInfo.IsRroValid
    leafs["is-flow-spec-valid"] = rsbInfo.IsFlowSpecValid
    return leafs
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetBundleName() string { return "cisco_ios_xr" }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetYangName() string { return "rsb-info" }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) SetParent(parent types.Entity) { rsbInfo.parent = parent }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetParent() types.Entity { return rsbInfo.parent }

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetParentYangName() string { return "psb-rsb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel
// Generic Label for outbound traffic
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetFilter() yfilter.YFilter { return genericOutLabel.YFilter }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) SetFilter(yf yfilter.YFilter) { genericOutLabel.YFilter = yf }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetGoName(yname string) string {
    if yname == "generic-label-type" { return "GenericLabelType" }
    if yname == "generalized-label" { return "GeneralizedLabel" }
    return ""
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetSegmentPath() string {
    return "generic-out-label"
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "generalized-label" {
        return &genericOutLabel.GeneralizedLabel
    }
    return nil
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["generalized-label"] = &genericOutLabel.GeneralizedLabel
    return children
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["generic-label-type"] = genericOutLabel.GenericLabelType
    return leafs
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetBundleName() string { return "cisco_ios_xr" }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetYangName() string { return "generic-out-label" }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) SetParent(parent types.Entity) { genericOutLabel.parent = parent }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetParent() types.Entity { return genericOutLabel.parent }

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetParentYangName() string { return "rsb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
// Generalized Label
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of interface{} with range:
    // 0..4294967295.
    Value []interface{}
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetFilter() yfilter.YFilter { return generalizedLabel.YFilter }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) SetFilter(yf yfilter.YFilter) { generalizedLabel.YFilter = yf }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetGoName(yname string) string {
    if yname == "value" { return "Value" }
    return ""
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetSegmentPath() string {
    return "generalized-label"
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["value"] = generalizedLabel.Value
    return leafs
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetBundleName() string { return "cisco_ios_xr" }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetYangName() string { return "generalized-label" }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) SetParent(parent types.Entity) { generalizedLabel.parent = parent }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetParent() types.Entity { return generalizedLabel.parent }

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetParentYangName() string { return "generic-out-label" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec
// Flow spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetFilter() yfilter.YFilter { return flowSpec.YFilter }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) SetFilter(yf yfilter.YFilter) { flowSpec.YFilter = yf }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetGoName(yname string) string {
    if yname == "flow-average-rate" { return "FlowAverageRate" }
    if yname == "flow-max-burst" { return "FlowMaxBurst" }
    if yname == "flow-peak-rate" { return "FlowPeakRate" }
    if yname == "flow-min-unit" { return "FlowMinUnit" }
    if yname == "flow-max-unit" { return "FlowMaxUnit" }
    if yname == "flow-requested-rate" { return "FlowRequestedRate" }
    if yname == "flow-slack" { return "FlowSlack" }
    if yname == "flow-qos" { return "FlowQos" }
    return ""
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetSegmentPath() string {
    return "flow-spec"
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-average-rate"] = flowSpec.FlowAverageRate
    leafs["flow-max-burst"] = flowSpec.FlowMaxBurst
    leafs["flow-peak-rate"] = flowSpec.FlowPeakRate
    leafs["flow-min-unit"] = flowSpec.FlowMinUnit
    leafs["flow-max-unit"] = flowSpec.FlowMaxUnit
    leafs["flow-requested-rate"] = flowSpec.FlowRequestedRate
    leafs["flow-slack"] = flowSpec.FlowSlack
    leafs["flow-qos"] = flowSpec.FlowQos
    return leafs
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetYangName() string { return "flow-spec" }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) SetParent(parent types.Entity) { flowSpec.parent = parent }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetParent() types.Entity { return flowSpec.parent }

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetParentYangName() string { return "rsb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec
// Generic Flow Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709OtnFlowSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetFilter() yfilter.YFilter { return genericFlowSpec.YFilter }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) SetFilter(yf yfilter.YFilter) { genericFlowSpec.YFilter = yf }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetGoName(yname string) string {
    if yname == "flow-spec-type" { return "FlowSpecType" }
    if yname == "g709otn-flow-spec" { return "G709OtnFlowSpec" }
    return ""
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetSegmentPath() string {
    return "generic-flow-spec"
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-flow-spec" {
        return &genericFlowSpec.G709OtnFlowSpec
    }
    return nil
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-flow-spec"] = &genericFlowSpec.G709OtnFlowSpec
    return children
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-spec-type"] = genericFlowSpec.FlowSpecType
    return leafs
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetYangName() string { return "generic-flow-spec" }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) SetParent(parent types.Entity) { genericFlowSpec.parent = parent }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetParent() types.Entity { return genericFlowSpec.parent }

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetParentYangName() string { return "rsb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec
// G709 OTN FlowSpec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetFilter() yfilter.YFilter { return g709OtnFlowSpec.YFilter }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) SetFilter(yf yfilter.YFilter) { g709OtnFlowSpec.YFilter = yf }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetGoName(yname string) string {
    if yname == "flow-signal-type" { return "FlowSignalType" }
    if yname == "flow-nvc" { return "FlowNvc" }
    if yname == "flow-multiplier" { return "FlowMultiplier" }
    if yname == "flow-bit-rate" { return "FlowBitRate" }
    return ""
}

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetSegmentPath() string {
    return "g709otn-flow-spec"
}

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["flow-signal-type"] = g709OtnFlowSpec.FlowSignalType
    leafs["flow-nvc"] = g709OtnFlowSpec.FlowNvc
    leafs["flow-multiplier"] = g709OtnFlowSpec.FlowMultiplier
    leafs["flow-bit-rate"] = g709OtnFlowSpec.FlowBitRate
    return leafs
}

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetYangName() string { return "g709otn-flow-spec" }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) SetParent(parent types.Entity) { g709OtnFlowSpec.parent = parent }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetParent() types.Entity { return g709OtnFlowSpec.parent }

func (g709OtnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709OtnFlowSpec) GetParentYangName() string { return "generic-flow-spec" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
// Record route object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4RroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetFilter() yfilter.YFilter { return rro.YFilter }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) SetFilter(yf yfilter.YFilter) { rro.YFilter = yf }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetGoName(yname string) string {
    if yname == "rro-type" { return "RroType" }
    if yname == "ipv4rro-sub-object" { return "Ipv4RroSubObject" }
    if yname == "label-rro-sub-object" { return "LabelRroSubObject" }
    if yname == "unnumbered-rro-sub-object" { return "UnnumberedRroSubObject" }
    if yname == "srlg-rro-sub-object" { return "SrlgRroSubObject" }
    return ""
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetSegmentPath() string {
    return "rro"
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4rro-sub-object" {
        return &rro.Ipv4RroSubObject
    }
    if childYangName == "label-rro-sub-object" {
        return &rro.LabelRroSubObject
    }
    if childYangName == "unnumbered-rro-sub-object" {
        return &rro.UnnumberedRroSubObject
    }
    if childYangName == "srlg-rro-sub-object" {
        return &rro.SrlgRroSubObject
    }
    return nil
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4rro-sub-object"] = &rro.Ipv4RroSubObject
    children["label-rro-sub-object"] = &rro.LabelRroSubObject
    children["unnumbered-rro-sub-object"] = &rro.UnnumberedRroSubObject
    children["srlg-rro-sub-object"] = &rro.SrlgRroSubObject
    return children
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-type"] = rro.RroType
    return leafs
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetBundleName() string { return "cisco_ios_xr" }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetYangName() string { return "rro" }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) SetParent(parent types.Entity) { rro.parent = parent }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetParent() types.Entity { return rro.parent }

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetParentYangName() string { return "rsb-info" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject
// IPV4 RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetFilter() yfilter.YFilter { return ipv4RroSubObject.YFilter }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) SetFilter(yf yfilter.YFilter) { ipv4RroSubObject.YFilter = yf }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetGoName(yname string) string {
    if yname == "rro-address" { return "RroAddress" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetSegmentPath() string {
    return "ipv4rro-sub-object"
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &ipv4RroSubObject.Flags
    }
    return nil
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &ipv4RroSubObject.Flags
    return children
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rro-address"] = ipv4RroSubObject.RroAddress
    return leafs
}

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetYangName() string { return "ipv4rro-sub-object" }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) SetParent(parent types.Entity) { ipv4RroSubObject.parent = parent }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetParent() types.Entity { return ipv4RroSubObject.parent }

func (ipv4RroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags
// The RRO IPV4 Subobject Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4RroSubObject_Flags) GetParentYangName() string { return "ipv4rro-sub-object" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Variable Length Label. The type is slice of interface{}
    // with range: 0..4294967295.
    VariableLengthLabel []interface{}

    // The RRO Subobject Label Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetFilter() yfilter.YFilter { return labelRroSubObject.YFilter }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) SetFilter(yf yfilter.YFilter) { labelRroSubObject.YFilter = yf }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetGoName(yname string) string {
    if yname == "label" { return "Label" }
    if yname == "is-label-variable-length" { return "IsLabelVariableLength" }
    if yname == "variable-length-label" { return "VariableLengthLabel" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetSegmentPath() string {
    return "label-rro-sub-object"
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &labelRroSubObject.Flags
    }
    return nil
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &labelRroSubObject.Flags
    return children
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label"] = labelRroSubObject.Label
    leafs["is-label-variable-length"] = labelRroSubObject.IsLabelVariableLength
    leafs["variable-length-label"] = labelRroSubObject.VariableLengthLabel
    return leafs
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetYangName() string { return "label-rro-sub-object" }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) SetParent(parent types.Entity) { labelRroSubObject.parent = parent }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetParent() types.Entity { return labelRroSubObject.parent }

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-global-label" { return "IsGlobalLabel" }
    return ""
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-global-label"] = flags.IsGlobalLabel
    return leafs
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetParentYangName() string { return "label-rro-sub-object" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetFilter() yfilter.YFilter { return unnumberedRroSubObject.YFilter }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) SetFilter(yf yfilter.YFilter) { unnumberedRroSubObject.YFilter = yf }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetGoName(yname string) string {
    if yname == "interface-address" { return "InterfaceAddress" }
    if yname == "interface-id" { return "InterfaceId" }
    if yname == "flags" { return "Flags" }
    return ""
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetSegmentPath() string {
    return "unnumbered-rro-sub-object"
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "flags" {
        return &unnumberedRroSubObject.Flags
    }
    return nil
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["flags"] = &unnumberedRroSubObject.Flags
    return children
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-address"] = unnumberedRroSubObject.InterfaceAddress
    leafs["interface-id"] = unnumberedRroSubObject.InterfaceId
    return leafs
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetYangName() string { return "unnumbered-rro-sub-object" }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) SetParent(parent types.Entity) { unnumberedRroSubObject.parent = parent }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetParent() types.Entity { return unnumberedRroSubObject.parent }

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetFilter() yfilter.YFilter { return flags.YFilter }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) SetFilter(yf yfilter.YFilter) { flags.YFilter = yf }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetGoName(yname string) string {
    if yname == "is-protection-available" { return "IsProtectionAvailable" }
    if yname == "is-protection-in-use" { return "IsProtectionInUse" }
    if yname == "is-bandwidth-protected" { return "IsBandwidthProtected" }
    if yname == "is-node-protection-available" { return "IsNodeProtectionAvailable" }
    if yname == "is-node-id" { return "IsNodeId" }
    return ""
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetSegmentPath() string {
    return "flags"
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-protection-available"] = flags.IsProtectionAvailable
    leafs["is-protection-in-use"] = flags.IsProtectionInUse
    leafs["is-bandwidth-protected"] = flags.IsBandwidthProtected
    leafs["is-node-protection-available"] = flags.IsNodeProtectionAvailable
    leafs["is-node-id"] = flags.IsNodeId
    return leafs
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleName() string { return "cisco_ios_xr" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetYangName() string { return "flags" }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) SetParent(parent types.Entity) { flags.parent = parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParent() types.Entity { return flags.parent }

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetParentYangName() string { return "unnumbered-rro-sub-object" }

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of interface{} with range:
    // 0..4294967295.
    SrlGs []interface{}
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetFilter() yfilter.YFilter { return srlgRroSubObject.YFilter }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) SetFilter(yf yfilter.YFilter) { srlgRroSubObject.YFilter = yf }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetGoName(yname string) string {
    if yname == "srl-gs" { return "SrlGs" }
    return ""
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetSegmentPath() string {
    return "srlg-rro-sub-object"
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["srl-gs"] = srlgRroSubObject.SrlGs
    return leafs
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetBundleName() string { return "cisco_ios_xr" }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetYangName() string { return "srlg-rro-sub-object" }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) SetParent(parent types.Entity) { srlgRroSubObject.parent = parent }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetParent() types.Entity { return srlgRroSubObject.parent }

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetParentYangName() string { return "rro" }

// Rsvp_HelloInstanceDetails
// Table of detailed info about hello instances
type Rsvp_HelloInstanceDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detailed info for a single hello instance. The type is slice of
    // Rsvp_HelloInstanceDetails_HelloInstanceDetail.
    HelloInstanceDetail []Rsvp_HelloInstanceDetails_HelloInstanceDetail
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetFilter() yfilter.YFilter { return helloInstanceDetails.YFilter }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) SetFilter(yf yfilter.YFilter) { helloInstanceDetails.YFilter = yf }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetGoName(yname string) string {
    if yname == "hello-instance-detail" { return "HelloInstanceDetail" }
    return ""
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetSegmentPath() string {
    return "hello-instance-details"
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "hello-instance-detail" {
        for _, c := range helloInstanceDetails.HelloInstanceDetail {
            if helloInstanceDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_HelloInstanceDetails_HelloInstanceDetail{}
        helloInstanceDetails.HelloInstanceDetail = append(helloInstanceDetails.HelloInstanceDetail, child)
        return &helloInstanceDetails.HelloInstanceDetail[len(helloInstanceDetails.HelloInstanceDetail)-1]
    }
    return nil
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range helloInstanceDetails.HelloInstanceDetail {
        children[helloInstanceDetails.HelloInstanceDetail[i].GetSegmentPath()] = &helloInstanceDetails.HelloInstanceDetail[i]
    }
    return children
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetYangName() string { return "hello-instance-details" }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) SetParent(parent types.Entity) { helloInstanceDetails.parent = parent }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetParent() types.Entity { return helloInstanceDetails.parent }

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_HelloInstanceDetails_HelloInstanceDetail
// Detailed info for a single hello instance
type Rsvp_HelloInstanceDetails_HelloInstanceDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddressXr interface{}

    // Hello instance owner. The type is RsvpMgmtHelloInstanceOwner.
    HelloInstanceOwner interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: [a-zA-Z0-9./-]+.
    HelloInterface interface{}

    // Hello Interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Number of missed Hello allowed. The type is interface{} with range:
    // 0..4294967295.
    MissedAcksAllowed interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    CommunicationLostReason interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    TotalCommunicationLost interface{}

    // Lost Comm. Hello missed count. The type is interface{} with range:
    // 0..65535.
    CommunicationLostHelloMissed interface{}

    // Count of lost comm. due to wrong Source Inst. The type is interface{} with
    // range: 0..65535.
    CommunicationLostWrongSourceInst interface{}

    // Count of lost comm. due to wrong Destination Inst. The type is interface{}
    // with range: 0..65535.
    CommunicationLostWrongDestinationInst interface{}

    // Count of lost comm. due to interface down. The type is interface{} with
    // range: 0..65535.
    CommunicationLostInterfaceDown interface{}

    // Count of lost comm. due to nbor disabling Hellos. The type is interface{}
    // with range: 0..65535.
    CommunicationLostNeighborDisabledHello interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Count of Hello Requests suppessed. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloRequestSuppressed interface{}

    // Hello up time.
    UpTime Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime

    // Time when communication was lost.
    CommunicationLostTime Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetFilter() yfilter.YFilter { return helloInstanceDetail.YFilter }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) SetFilter(yf yfilter.YFilter) { helloInstanceDetail.YFilter = yf }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "source-address-xr" { return "SourceAddressXr" }
    if yname == "destination-address-xr" { return "DestinationAddressXr" }
    if yname == "hello-instance-owner" { return "HelloInstanceOwner" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "instance-type" { return "InstanceType" }
    if yname == "hello-interface" { return "HelloInterface" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "missed-acks-allowed" { return "MissedAcksAllowed" }
    if yname == "source-instance" { return "SourceInstance" }
    if yname == "destination-instance" { return "DestinationInstance" }
    if yname == "communication-lost-reason" { return "CommunicationLostReason" }
    if yname == "total-communication-lost" { return "TotalCommunicationLost" }
    if yname == "communication-lost-hello-missed" { return "CommunicationLostHelloMissed" }
    if yname == "communication-lost-wrong-source-inst" { return "CommunicationLostWrongSourceInst" }
    if yname == "communication-lost-wrong-destination-inst" { return "CommunicationLostWrongDestinationInst" }
    if yname == "communication-lost-interface-down" { return "CommunicationLostInterfaceDown" }
    if yname == "communication-lost-neighbor-disabled-hello" { return "CommunicationLostNeighborDisabledHello" }
    if yname == "hello-messages-sent" { return "HelloMessagesSent" }
    if yname == "hello-messages-received" { return "HelloMessagesReceived" }
    if yname == "hello-request-suppressed" { return "HelloRequestSuppressed" }
    if yname == "up-time" { return "UpTime" }
    if yname == "communication-lost-time" { return "CommunicationLostTime" }
    return ""
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetSegmentPath() string {
    return "hello-instance-detail" + "[source-address='" + fmt.Sprintf("%v", helloInstanceDetail.SourceAddress) + "']" + "[destination-address='" + fmt.Sprintf("%v", helloInstanceDetail.DestinationAddress) + "']"
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "up-time" {
        return &helloInstanceDetail.UpTime
    }
    if childYangName == "communication-lost-time" {
        return &helloInstanceDetail.CommunicationLostTime
    }
    return nil
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["up-time"] = &helloInstanceDetail.UpTime
    children["communication-lost-time"] = &helloInstanceDetail.CommunicationLostTime
    return children
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = helloInstanceDetail.SourceAddress
    leafs["destination-address"] = helloInstanceDetail.DestinationAddress
    leafs["source-address-xr"] = helloInstanceDetail.SourceAddressXr
    leafs["destination-address-xr"] = helloInstanceDetail.DestinationAddressXr
    leafs["hello-instance-owner"] = helloInstanceDetail.HelloInstanceOwner
    leafs["neighbor-hello-state"] = helloInstanceDetail.NeighborHelloState
    leafs["instance-type"] = helloInstanceDetail.InstanceType
    leafs["hello-interface"] = helloInstanceDetail.HelloInterface
    leafs["hello-interval"] = helloInstanceDetail.HelloInterval
    leafs["missed-acks-allowed"] = helloInstanceDetail.MissedAcksAllowed
    leafs["source-instance"] = helloInstanceDetail.SourceInstance
    leafs["destination-instance"] = helloInstanceDetail.DestinationInstance
    leafs["communication-lost-reason"] = helloInstanceDetail.CommunicationLostReason
    leafs["total-communication-lost"] = helloInstanceDetail.TotalCommunicationLost
    leafs["communication-lost-hello-missed"] = helloInstanceDetail.CommunicationLostHelloMissed
    leafs["communication-lost-wrong-source-inst"] = helloInstanceDetail.CommunicationLostWrongSourceInst
    leafs["communication-lost-wrong-destination-inst"] = helloInstanceDetail.CommunicationLostWrongDestinationInst
    leafs["communication-lost-interface-down"] = helloInstanceDetail.CommunicationLostInterfaceDown
    leafs["communication-lost-neighbor-disabled-hello"] = helloInstanceDetail.CommunicationLostNeighborDisabledHello
    leafs["hello-messages-sent"] = helloInstanceDetail.HelloMessagesSent
    leafs["hello-messages-received"] = helloInstanceDetail.HelloMessagesReceived
    leafs["hello-request-suppressed"] = helloInstanceDetail.HelloRequestSuppressed
    return leafs
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetBundleName() string { return "cisco_ios_xr" }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetYangName() string { return "hello-instance-detail" }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) SetParent(parent types.Entity) { helloInstanceDetail.parent = parent }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetParent() types.Entity { return helloInstanceDetail.parent }

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetParentYangName() string { return "hello-instance-details" }

// Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime
// Hello up time
type Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetFilter() yfilter.YFilter { return upTime.YFilter }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) SetFilter(yf yfilter.YFilter) { upTime.YFilter = yf }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetSegmentPath() string {
    return "up-time"
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = upTime.Seconds
    leafs["nanoseconds"] = upTime.Nanoseconds
    return leafs
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetBundleName() string { return "cisco_ios_xr" }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetYangName() string { return "up-time" }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) SetParent(parent types.Entity) { upTime.parent = parent }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetParent() types.Entity { return upTime.parent }

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetParentYangName() string { return "hello-instance-detail" }

// Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
// Time when communication was lost
type Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetFilter() yfilter.YFilter { return communicationLostTime.YFilter }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) SetFilter(yf yfilter.YFilter) { communicationLostTime.YFilter = yf }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetSegmentPath() string {
    return "communication-lost-time"
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = communicationLostTime.Seconds
    leafs["nanoseconds"] = communicationLostTime.Nanoseconds
    return leafs
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetBundleName() string { return "cisco_ios_xr" }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetYangName() string { return "communication-lost-time" }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) SetParent(parent types.Entity) { communicationLostTime.parent = parent }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetParent() types.Entity { return communicationLostTime.parent }

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetParentYangName() string { return "hello-instance-detail" }

// Rsvp_GlobalNeighborDetails
// Table of detailed info about global neighbors
type Rsvp_GlobalNeighborDetails struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detail info for a single global neighbor. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail.
    GlobalNeighborDetail []Rsvp_GlobalNeighborDetails_GlobalNeighborDetail
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetFilter() yfilter.YFilter { return globalNeighborDetails.YFilter }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) SetFilter(yf yfilter.YFilter) { globalNeighborDetails.YFilter = yf }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetGoName(yname string) string {
    if yname == "global-neighbor-detail" { return "GlobalNeighborDetail" }
    return ""
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetSegmentPath() string {
    return "global-neighbor-details"
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-detail" {
        for _, c := range globalNeighborDetails.GlobalNeighborDetail {
            if globalNeighborDetails.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GlobalNeighborDetails_GlobalNeighborDetail{}
        globalNeighborDetails.GlobalNeighborDetail = append(globalNeighborDetails.GlobalNeighborDetail, child)
        return &globalNeighborDetails.GlobalNeighborDetail[len(globalNeighborDetails.GlobalNeighborDetail)-1]
    }
    return nil
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalNeighborDetails.GlobalNeighborDetail {
        children[globalNeighborDetails.GlobalNeighborDetail[i].GetSegmentPath()] = &globalNeighborDetails.GlobalNeighborDetail[i]
    }
    return children
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetYangName() string { return "global-neighbor-details" }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) SetParent(parent types.Entity) { globalNeighborDetails.parent = parent }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetParent() types.Entity { return globalNeighborDetails.parent }

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetParentYangName() string { return "rsvp" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail
// Detail info for a single global neighbor
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Current restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // GR Restart Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Is GR restart timer running. The type is bool.
    IsRestartTimerRunning interface{}

    // GR Recovery Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Is RSVP recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Hello Interval (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    HelloInterval interface{}

    // Hello missed count. The type is interface{} with range: 0..255.
    MissedHellos interface{}

    // Number of pending states for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    PendingStates interface{}

    // Local node address. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalNodeAddress []interface{}

    // Interface Neighbor List. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    InterfaceNeighbor []interface{}

    // Neighbor's hello state. The type is slice of RsvpMgmtHelloState.
    NeighborHelloState []interface{}

    // Reason why communication was lost. The type is slice of
    // RsvpMgmtHelloDownReason.
    LostCommunicationReason []interface{}

    // Total number of times communication got lost. The type is slice of
    // interface{} with range: 0..65535.
    LostCommunicationTotal []interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags

    // How much restart time remains.
    RestartTimeLeft Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft

    // When will restart timer expire.
    RestartTimerExpiryTime Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime

    // How much recovery timer remains.
    RecoveryTimeLeft Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime

    // Hello up time. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime.
    UpTime []Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime

    // Time when communication was lost. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime.
    LostCommunicationTime []Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetFilter() yfilter.YFilter { return globalNeighborDetail.YFilter }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) SetFilter(yf yfilter.YFilter) { globalNeighborDetail.YFilter = yf }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "is-gr-enabled" { return "IsGrEnabled" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "restart-state" { return "RestartState" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "is-restart-timer-running" { return "IsRestartTimerRunning" }
    if yname == "recovery-time" { return "RecoveryTime" }
    if yname == "is-recovery-timer-running" { return "IsRecoveryTimerRunning" }
    if yname == "hello-interval" { return "HelloInterval" }
    if yname == "missed-hellos" { return "MissedHellos" }
    if yname == "pending-states" { return "PendingStates" }
    if yname == "local-node-address" { return "LocalNodeAddress" }
    if yname == "interface-neighbor" { return "InterfaceNeighbor" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "lost-communication-reason" { return "LostCommunicationReason" }
    if yname == "lost-communication-total" { return "LostCommunicationTotal" }
    if yname == "global-neighbor-flags" { return "GlobalNeighborFlags" }
    if yname == "restart-time-left" { return "RestartTimeLeft" }
    if yname == "restart-timer-expiry-time" { return "RestartTimerExpiryTime" }
    if yname == "recovery-time-left" { return "RecoveryTimeLeft" }
    if yname == "recovery-timer-exp-time" { return "RecoveryTimerExpTime" }
    if yname == "up-time" { return "UpTime" }
    if yname == "lost-communication-time" { return "LostCommunicationTime" }
    return ""
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetSegmentPath() string {
    return "global-neighbor-detail" + "[neighbor-address='" + fmt.Sprintf("%v", globalNeighborDetail.NeighborAddress) + "']"
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-flags" {
        return &globalNeighborDetail.GlobalNeighborFlags
    }
    if childYangName == "restart-time-left" {
        return &globalNeighborDetail.RestartTimeLeft
    }
    if childYangName == "restart-timer-expiry-time" {
        return &globalNeighborDetail.RestartTimerExpiryTime
    }
    if childYangName == "recovery-time-left" {
        return &globalNeighborDetail.RecoveryTimeLeft
    }
    if childYangName == "recovery-timer-exp-time" {
        return &globalNeighborDetail.RecoveryTimerExpTime
    }
    if childYangName == "up-time" {
        for _, c := range globalNeighborDetail.UpTime {
            if globalNeighborDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime{}
        globalNeighborDetail.UpTime = append(globalNeighborDetail.UpTime, child)
        return &globalNeighborDetail.UpTime[len(globalNeighborDetail.UpTime)-1]
    }
    if childYangName == "lost-communication-time" {
        for _, c := range globalNeighborDetail.LostCommunicationTime {
            if globalNeighborDetail.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime{}
        globalNeighborDetail.LostCommunicationTime = append(globalNeighborDetail.LostCommunicationTime, child)
        return &globalNeighborDetail.LostCommunicationTime[len(globalNeighborDetail.LostCommunicationTime)-1]
    }
    return nil
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-neighbor-flags"] = &globalNeighborDetail.GlobalNeighborFlags
    children["restart-time-left"] = &globalNeighborDetail.RestartTimeLeft
    children["restart-timer-expiry-time"] = &globalNeighborDetail.RestartTimerExpiryTime
    children["recovery-time-left"] = &globalNeighborDetail.RecoveryTimeLeft
    children["recovery-timer-exp-time"] = &globalNeighborDetail.RecoveryTimerExpTime
    for i := range globalNeighborDetail.UpTime {
        children[globalNeighborDetail.UpTime[i].GetSegmentPath()] = &globalNeighborDetail.UpTime[i]
    }
    for i := range globalNeighborDetail.LostCommunicationTime {
        children[globalNeighborDetail.LostCommunicationTime[i].GetSegmentPath()] = &globalNeighborDetail.LostCommunicationTime[i]
    }
    return children
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = globalNeighborDetail.NeighborAddress
    leafs["is-gr-enabled"] = globalNeighborDetail.IsGrEnabled
    leafs["node-address"] = globalNeighborDetail.NodeAddress
    leafs["restart-state"] = globalNeighborDetail.RestartState
    leafs["restart-time"] = globalNeighborDetail.RestartTime
    leafs["is-restart-timer-running"] = globalNeighborDetail.IsRestartTimerRunning
    leafs["recovery-time"] = globalNeighborDetail.RecoveryTime
    leafs["is-recovery-timer-running"] = globalNeighborDetail.IsRecoveryTimerRunning
    leafs["hello-interval"] = globalNeighborDetail.HelloInterval
    leafs["missed-hellos"] = globalNeighborDetail.MissedHellos
    leafs["pending-states"] = globalNeighborDetail.PendingStates
    leafs["local-node-address"] = globalNeighborDetail.LocalNodeAddress
    leafs["interface-neighbor"] = globalNeighborDetail.InterfaceNeighbor
    leafs["neighbor-hello-state"] = globalNeighborDetail.NeighborHelloState
    leafs["lost-communication-reason"] = globalNeighborDetail.LostCommunicationReason
    leafs["lost-communication-total"] = globalNeighborDetail.LostCommunicationTotal
    return leafs
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetYangName() string { return "global-neighbor-detail" }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) SetParent(parent types.Entity) { globalNeighborDetail.parent = parent }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetParent() types.Entity { return globalNeighborDetail.parent }

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetParentYangName() string { return "global-neighbor-details" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags
// Global Neighbor Flags
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetFilter() yfilter.YFilter { return globalNeighborFlags.YFilter }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) SetFilter(yf yfilter.YFilter) { globalNeighborFlags.YFilter = yf }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetGoName(yname string) string {
    if yname == "is-application-ouni" { return "IsApplicationOuni" }
    if yname == "is-application-mpls" { return "IsApplicationMpls" }
    return ""
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetSegmentPath() string {
    return "global-neighbor-flags"
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-application-ouni"] = globalNeighborFlags.IsApplicationOuni
    leafs["is-application-mpls"] = globalNeighborFlags.IsApplicationMpls
    return leafs
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetYangName() string { return "global-neighbor-flags" }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) SetParent(parent types.Entity) { globalNeighborFlags.parent = parent }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetParent() types.Entity { return globalNeighborFlags.parent }

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft
// How much restart time remains
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetFilter() yfilter.YFilter { return restartTimeLeft.YFilter }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) SetFilter(yf yfilter.YFilter) { restartTimeLeft.YFilter = yf }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetSegmentPath() string {
    return "restart-time-left"
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = restartTimeLeft.Seconds
    leafs["nanoseconds"] = restartTimeLeft.Nanoseconds
    return leafs
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetBundleName() string { return "cisco_ios_xr" }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetYangName() string { return "restart-time-left" }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) SetParent(parent types.Entity) { restartTimeLeft.parent = parent }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetParent() types.Entity { return restartTimeLeft.parent }

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime
// When will restart timer expire
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetFilter() yfilter.YFilter { return restartTimerExpiryTime.YFilter }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) SetFilter(yf yfilter.YFilter) { restartTimerExpiryTime.YFilter = yf }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetSegmentPath() string {
    return "restart-timer-expiry-time"
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = restartTimerExpiryTime.Seconds
    leafs["nanoseconds"] = restartTimerExpiryTime.Nanoseconds
    return leafs
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetBundleName() string { return "cisco_ios_xr" }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetYangName() string { return "restart-timer-expiry-time" }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) SetParent(parent types.Entity) { restartTimerExpiryTime.parent = parent }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetParent() types.Entity { return restartTimerExpiryTime.parent }

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft
// How much recovery timer remains
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetFilter() yfilter.YFilter { return recoveryTimeLeft.YFilter }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) SetFilter(yf yfilter.YFilter) { recoveryTimeLeft.YFilter = yf }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetSegmentPath() string {
    return "recovery-time-left"
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimeLeft.Seconds
    leafs["nanoseconds"] = recoveryTimeLeft.Nanoseconds
    return leafs
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetYangName() string { return "recovery-time-left" }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) SetParent(parent types.Entity) { recoveryTimeLeft.parent = parent }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetParent() types.Entity { return recoveryTimeLeft.parent }

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime
// Time at which recovery timer will expire
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetFilter() yfilter.YFilter { return recoveryTimerExpTime.YFilter }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) SetFilter(yf yfilter.YFilter) { recoveryTimerExpTime.YFilter = yf }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetSegmentPath() string {
    return "recovery-timer-exp-time"
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = recoveryTimerExpTime.Seconds
    leafs["nanoseconds"] = recoveryTimerExpTime.Nanoseconds
    return leafs
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetBundleName() string { return "cisco_ios_xr" }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetYangName() string { return "recovery-timer-exp-time" }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) SetParent(parent types.Entity) { recoveryTimerExpTime.parent = parent }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetParent() types.Entity { return recoveryTimerExpTime.parent }

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime
// Hello up time
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetFilter() yfilter.YFilter { return upTime.YFilter }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) SetFilter(yf yfilter.YFilter) { upTime.YFilter = yf }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetSegmentPath() string {
    return "up-time"
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = upTime.Seconds
    leafs["nanoseconds"] = upTime.Nanoseconds
    return leafs
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetBundleName() string { return "cisco_ios_xr" }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetYangName() string { return "up-time" }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) SetParent(parent types.Entity) { upTime.parent = parent }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetParent() types.Entity { return upTime.parent }

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
// Time when communication was lost
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetFilter() yfilter.YFilter { return lostCommunicationTime.YFilter }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) SetFilter(yf yfilter.YFilter) { lostCommunicationTime.YFilter = yf }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetSegmentPath() string {
    return "lost-communication-time"
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lostCommunicationTime.Seconds
    leafs["nanoseconds"] = lostCommunicationTime.Nanoseconds
    return leafs
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetBundleName() string { return "cisco_ios_xr" }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetYangName() string { return "lost-communication-time" }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) SetParent(parent types.Entity) { lostCommunicationTime.parent = parent }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetParent() types.Entity { return lostCommunicationTime.parent }

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetParentYangName() string { return "global-neighbor-detail" }

// Rsvp_PsbBriefs
// Table of brief info about path state blocks
type Rsvp_PsbBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single path state block. The type is slice of
    // Rsvp_PsbBriefs_PsbBrief.
    PsbBrief []Rsvp_PsbBriefs_PsbBrief
}

func (psbBriefs *Rsvp_PsbBriefs) GetFilter() yfilter.YFilter { return psbBriefs.YFilter }

func (psbBriefs *Rsvp_PsbBriefs) SetFilter(yf yfilter.YFilter) { psbBriefs.YFilter = yf }

func (psbBriefs *Rsvp_PsbBriefs) GetGoName(yname string) string {
    if yname == "psb-brief" { return "PsbBrief" }
    return ""
}

func (psbBriefs *Rsvp_PsbBriefs) GetSegmentPath() string {
    return "psb-briefs"
}

func (psbBriefs *Rsvp_PsbBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "psb-brief" {
        for _, c := range psbBriefs.PsbBrief {
            if psbBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_PsbBriefs_PsbBrief{}
        psbBriefs.PsbBrief = append(psbBriefs.PsbBrief, child)
        return &psbBriefs.PsbBrief[len(psbBriefs.PsbBrief)-1]
    }
    return nil
}

func (psbBriefs *Rsvp_PsbBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range psbBriefs.PsbBrief {
        children[psbBriefs.PsbBrief[i].GetSegmentPath()] = &psbBriefs.PsbBrief[i]
    }
    return children
}

func (psbBriefs *Rsvp_PsbBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (psbBriefs *Rsvp_PsbBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (psbBriefs *Rsvp_PsbBriefs) GetYangName() string { return "psb-briefs" }

func (psbBriefs *Rsvp_PsbBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbBriefs *Rsvp_PsbBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbBriefs *Rsvp_PsbBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbBriefs *Rsvp_PsbBriefs) SetParent(parent types.Entity) { psbBriefs.parent = parent }

func (psbBriefs *Rsvp_PsbBriefs) GetParent() types.Entity { return psbBriefs.parent }

func (psbBriefs *Rsvp_PsbBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_PsbBriefs_PsbBrief
// Brief info for a single path state block
type Rsvp_PsbBriefs_PsbBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range:
    // -2147483648..2147483647.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: -2147483648..2147483647.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: -2147483648..2147483647.
    P2MpId interface{}

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: -2147483648..2147483647.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: -2147483648..2147483647.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_PsbBriefs_PsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2LSubLsp Rsvp_PsbBriefs_PsbBrief_S2LSubLsp

    // RSVP Template.
    Template Rsvp_PsbBriefs_PsbBrief_Template

    // RSVP Session Attribute.
    SessionAttribute Rsvp_PsbBriefs_PsbBrief_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec Rsvp_PsbBriefs_PsbBrief_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetFilter() yfilter.YFilter { return psbBrief.YFilter }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) SetFilter(yf yfilter.YFilter) { psbBrief.YFilter = yf }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "destination-port" { return "DestinationPort" }
    if yname == "protocol" { return "Protocol" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    if yname == "session-type" { return "SessionType" }
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "sub-group-origin" { return "SubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    if yname == "vrf-name" { return "VrfName" }
    if yname == "input-interface" { return "InputInterface" }
    if yname == "session" { return "Session" }
    if yname == "s2l-sub-lsp" { return "S2LSubLsp" }
    if yname == "template" { return "Template" }
    if yname == "session-attribute" { return "SessionAttribute" }
    if yname == "traffic-spec" { return "TrafficSpec" }
    if yname == "generic-traffic-spec" { return "GenericTrafficSpec" }
    return ""
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetSegmentPath() string {
    return "psb-brief"
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session" {
        return &psbBrief.Session
    }
    if childYangName == "s2l-sub-lsp" {
        return &psbBrief.S2LSubLsp
    }
    if childYangName == "template" {
        return &psbBrief.Template
    }
    if childYangName == "session-attribute" {
        return &psbBrief.SessionAttribute
    }
    if childYangName == "traffic-spec" {
        return &psbBrief.TrafficSpec
    }
    if childYangName == "generic-traffic-spec" {
        return &psbBrief.GenericTrafficSpec
    }
    return nil
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["session"] = &psbBrief.Session
    children["s2l-sub-lsp"] = &psbBrief.S2LSubLsp
    children["template"] = &psbBrief.Template
    children["session-attribute"] = &psbBrief.SessionAttribute
    children["traffic-spec"] = &psbBrief.TrafficSpec
    children["generic-traffic-spec"] = &psbBrief.GenericTrafficSpec
    return children
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = psbBrief.DestinationAddress
    leafs["destination-port"] = psbBrief.DestinationPort
    leafs["protocol"] = psbBrief.Protocol
    leafs["extended-tunnel-id"] = psbBrief.ExtendedTunnelId
    leafs["session-type"] = psbBrief.SessionType
    leafs["p2mp-id"] = psbBrief.P2MpId
    leafs["source-address"] = psbBrief.SourceAddress
    leafs["source-port"] = psbBrief.SourcePort
    leafs["sub-group-origin"] = psbBrief.SubGroupOrigin
    leafs["sub-group-id"] = psbBrief.SubGroupId
    leafs["vrf-name"] = psbBrief.VrfName
    leafs["input-interface"] = psbBrief.InputInterface
    return leafs
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetBundleName() string { return "cisco_ios_xr" }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetYangName() string { return "psb-brief" }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) SetParent(parent types.Entity) { psbBrief.parent = parent }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetParent() types.Entity { return psbBrief.parent }

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetParentYangName() string { return "psb-briefs" }

// Rsvp_PsbBriefs_PsbBrief_Session
// RSVP Session Information
type Rsvp_PsbBriefs_PsbBrief_Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetFilter() yfilter.YFilter { return session.YFilter }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) SetFilter(yf yfilter.YFilter) { session.YFilter = yf }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetGoName(yname string) string {
    if yname == "rsvp-session" { return "RsvpSession" }
    return ""
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetSegmentPath() string {
    return "session"
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-session" {
        return &session.RsvpSession
    }
    return nil
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-session"] = &session.RsvpSession
    return children
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetBundleName() string { return "cisco_ios_xr" }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetYangName() string { return "session" }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) SetParent(parent types.Entity) { session.parent = parent }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetParent() types.Entity { return session.parent }

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetParentYangName() string { return "psb-brief" }

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession
// RSVP Session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2MpLspSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetFilter() yfilter.YFilter { return rsvpSession.YFilter }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) SetFilter(yf yfilter.YFilter) { rsvpSession.YFilter = yf }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetGoName(yname string) string {
    if yname == "session-type" { return "SessionType" }
    if yname == "ipv4" { return "Ipv4" }
    if yname == "ipv4-lsp-session" { return "Ipv4LspSession" }
    if yname == "ipv4-uni-session" { return "Ipv4UniSession" }
    if yname == "ipv4-p2mp-lsp-session" { return "Ipv4P2MpLspSession" }
    return ""
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetSegmentPath() string {
    return "rsvp-session"
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ipv4" {
        return &rsvpSession.Ipv4
    }
    if childYangName == "ipv4-lsp-session" {
        return &rsvpSession.Ipv4LspSession
    }
    if childYangName == "ipv4-uni-session" {
        return &rsvpSession.Ipv4UniSession
    }
    if childYangName == "ipv4-p2mp-lsp-session" {
        return &rsvpSession.Ipv4P2MpLspSession
    }
    return nil
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ipv4"] = &rsvpSession.Ipv4
    children["ipv4-lsp-session"] = &rsvpSession.Ipv4LspSession
    children["ipv4-uni-session"] = &rsvpSession.Ipv4UniSession
    children["ipv4-p2mp-lsp-session"] = &rsvpSession.Ipv4P2MpLspSession
    return children
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-type"] = rsvpSession.SessionType
    return leafs
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetYangName() string { return "rsvp-session" }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) SetParent(parent types.Entity) { rsvpSession.parent = parent }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetParent() types.Entity { return rsvpSession.parent }

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetParentYangName() string { return "session" }

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetFilter() yfilter.YFilter { return ipv4.YFilter }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) SetFilter(yf yfilter.YFilter) { ipv4.YFilter = yf }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "protocol" { return "Protocol" }
    if yname == "destination-port" { return "DestinationPort" }
    return ""
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetSegmentPath() string {
    return "ipv4"
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4.DestinationAddress
    leafs["protocol"] = ipv4.Protocol
    leafs["destination-port"] = ipv4.DestinationPort
    return leafs
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetYangName() string { return "ipv4" }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) SetParent(parent types.Entity) { ipv4.parent = parent }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetParent() types.Entity { return ipv4.parent }

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetFilter() yfilter.YFilter { return ipv4LspSession.YFilter }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) SetFilter(yf yfilter.YFilter) { ipv4LspSession.YFilter = yf }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetSegmentPath() string {
    return "ipv4-lsp-session"
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4LspSession.DestinationAddress
    leafs["tunnel-id"] = ipv4LspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4LspSession.ExtendedTunnelId
    return leafs
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetYangName() string { return "ipv4-lsp-session" }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) SetParent(parent types.Entity) { ipv4LspSession.parent = parent }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetParent() types.Entity { return ipv4LspSession.parent }

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetFilter() yfilter.YFilter { return ipv4UniSession.YFilter }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) SetFilter(yf yfilter.YFilter) { ipv4UniSession.YFilter = yf }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetGoName(yname string) string {
    if yname == "destination-address" { return "DestinationAddress" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-address" { return "ExtendedAddress" }
    return ""
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetSegmentPath() string {
    return "ipv4-uni-session"
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["destination-address"] = ipv4UniSession.DestinationAddress
    leafs["tunnel-id"] = ipv4UniSession.TunnelId
    leafs["extended-address"] = ipv4UniSession.ExtendedAddress
    return leafs
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetYangName() string { return "ipv4-uni-session" }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) SetParent(parent types.Entity) { ipv4UniSession.parent = parent }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetParent() types.Entity { return ipv4UniSession.parent }

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession
// IPv4 P2MP LSP session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2MpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ExtendedTunnelId interface{}
}

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetFilter() yfilter.YFilter { return ipv4P2MpLspSession.YFilter }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetFilter(yf yfilter.YFilter) { ipv4P2MpLspSession.YFilter = yf }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetGoName(yname string) string {
    if yname == "p2mp-id" { return "P2MpId" }
    if yname == "tunnel-id" { return "TunnelId" }
    if yname == "extended-tunnel-id" { return "ExtendedTunnelId" }
    return ""
}

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetSegmentPath() string {
    return "ipv4-p2mp-lsp-session"
}

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["p2mp-id"] = ipv4P2MpLspSession.P2MpId
    leafs["tunnel-id"] = ipv4P2MpLspSession.TunnelId
    leafs["extended-tunnel-id"] = ipv4P2MpLspSession.ExtendedTunnelId
    return leafs
}

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetYangName() string { return "ipv4-p2mp-lsp-session" }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) SetParent(parent types.Entity) { ipv4P2MpLspSession.parent = parent }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParent() types.Entity { return ipv4P2MpLspSession.parent }

func (ipv4P2MpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2MpLspSession) GetParentYangName() string { return "rsvp-session" }

// Rsvp_PsbBriefs_PsbBrief_S2LSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_PsbBriefs_PsbBrief_S2LSubLsp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    S2LDestinationAddress interface{}
}

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetFilter() yfilter.YFilter { return s2LSubLsp.YFilter }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) SetFilter(yf yfilter.YFilter) { s2LSubLsp.YFilter = yf }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetGoName(yname string) string {
    if yname == "s2l-destination-address" { return "S2LDestinationAddress" }
    return ""
}

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetSegmentPath() string {
    return "s2l-sub-lsp"
}

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["s2l-destination-address"] = s2LSubLsp.S2LDestinationAddress
    return leafs
}

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetBundleName() string { return "cisco_ios_xr" }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetYangName() string { return "s2l-sub-lsp" }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) SetParent(parent types.Entity) { s2LSubLsp.parent = parent }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetParent() types.Entity { return s2LSubLsp.parent }

func (s2LSubLsp *Rsvp_PsbBriefs_PsbBrief_S2LSubLsp) GetParentYangName() string { return "psb-brief" }

// Rsvp_PsbBriefs_PsbBrief_Template
// RSVP Template
type Rsvp_PsbBriefs_PsbBrief_Template struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetFilter() yfilter.YFilter { return template.YFilter }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) SetFilter(yf yfilter.YFilter) { template.YFilter = yf }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetGoName(yname string) string {
    if yname == "rsvp-filter" { return "RsvpFilter" }
    return ""
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetSegmentPath() string {
    return "template"
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rsvp-filter" {
        return &template.RsvpFilter
    }
    return nil
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["rsvp-filter"] = &template.RsvpFilter
    return children
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetBundleName() string { return "cisco_ios_xr" }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetYangName() string { return "template" }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) SetParent(parent types.Entity) { template.parent = parent }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetParent() types.Entity { return template.parent }

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetParentYangName() string { return "psb-brief" }

// Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter
// RSVP Filter
type Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2MpIpv4Session Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetFilter() yfilter.YFilter { return rsvpFilter.YFilter }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) SetFilter(yf yfilter.YFilter) { rsvpFilter.YFilter = yf }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetGoName(yname string) string {
    if yname == "filter-type" { return "FilterType" }
    if yname == "udp-ipv4-session" { return "UdpIpv4Session" }
    if yname == "p2mp-ipv4-session" { return "P2MpIpv4Session" }
    return ""
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetSegmentPath() string {
    return "rsvp-filter"
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "udp-ipv4-session" {
        return &rsvpFilter.UdpIpv4Session
    }
    if childYangName == "p2mp-ipv4-session" {
        return &rsvpFilter.P2MpIpv4Session
    }
    return nil
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["udp-ipv4-session"] = &rsvpFilter.UdpIpv4Session
    children["p2mp-ipv4-session"] = &rsvpFilter.P2MpIpv4Session
    return children
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["filter-type"] = rsvpFilter.FilterType
    return leafs
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetBundleName() string { return "cisco_ios_xr" }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetYangName() string { return "rsvp-filter" }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) SetParent(parent types.Entity) { rsvpFilter.parent = parent }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetParent() types.Entity { return rsvpFilter.parent }

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetParentYangName() string { return "template" }

// Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetFilter() yfilter.YFilter { return udpIpv4Session.YFilter }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) SetFilter(yf yfilter.YFilter) { udpIpv4Session.YFilter = yf }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    return ""
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetSegmentPath() string {
    return "udp-ipv4-session"
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = udpIpv4Session.SourceAddress
    leafs["source-port"] = udpIpv4Session.SourcePort
    return leafs
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetYangName() string { return "udp-ipv4-session" }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) SetParent(parent types.Entity) { udpIpv4Session.parent = parent }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetParent() types.Entity { return udpIpv4Session.parent }

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    P2MpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetFilter() yfilter.YFilter { return p2MpIpv4Session.YFilter }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) SetFilter(yf yfilter.YFilter) { p2MpIpv4Session.YFilter = yf }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetGoName(yname string) string {
    if yname == "source-address" { return "SourceAddress" }
    if yname == "source-port" { return "SourcePort" }
    if yname == "p2mp-sub-group-origin" { return "P2MpSubGroupOrigin" }
    if yname == "sub-group-id" { return "SubGroupId" }
    return ""
}

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetSegmentPath() string {
    return "p2mp-ipv4-session"
}

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["source-address"] = p2MpIpv4Session.SourceAddress
    leafs["source-port"] = p2MpIpv4Session.SourcePort
    leafs["p2mp-sub-group-origin"] = p2MpIpv4Session.P2MpSubGroupOrigin
    leafs["sub-group-id"] = p2MpIpv4Session.SubGroupId
    return leafs
}

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetBundleName() string { return "cisco_ios_xr" }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetYangName() string { return "p2mp-ipv4-session" }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) SetParent(parent types.Entity) { p2MpIpv4Session.parent = parent }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetParent() types.Entity { return p2MpIpv4Session.parent }

func (p2MpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2MpIpv4Session) GetParentYangName() string { return "rsvp-filter" }

// Rsvp_PsbBriefs_PsbBrief_SessionAttribute
// RSVP Session Attribute
type Rsvp_PsbBriefs_PsbBrief_SessionAttribute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetFilter() yfilter.YFilter { return sessionAttribute.YFilter }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) SetFilter(yf yfilter.YFilter) { sessionAttribute.YFilter = yf }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetGoName(yname string) string {
    if yname == "setup-priority" { return "SetupPriority" }
    if yname == "reservation-priority" { return "ReservationPriority" }
    if yname == "sess-attribute-flags" { return "SessAttributeFlags" }
    return ""
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetSegmentPath() string {
    return "session-attribute"
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sess-attribute-flags" {
        return &sessionAttribute.SessAttributeFlags
    }
    return nil
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["sess-attribute-flags"] = &sessionAttribute.SessAttributeFlags
    return children
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["setup-priority"] = sessionAttribute.SetupPriority
    leafs["reservation-priority"] = sessionAttribute.ReservationPriority
    return leafs
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetBundleName() string { return "cisco_ios_xr" }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetYangName() string { return "session-attribute" }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) SetParent(parent types.Entity) { sessionAttribute.parent = parent }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetParent() types.Entity { return sessionAttribute.parent }

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetParentYangName() string { return "psb-brief" }

// Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
// Session Attributes
type Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetFilter() yfilter.YFilter { return sessAttributeFlags.YFilter }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) SetFilter(yf yfilter.YFilter) { sessAttributeFlags.YFilter = yf }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetGoName(yname string) string {
    if yname == "is-local-protect" { return "IsLocalProtect" }
    if yname == "is-node-protect" { return "IsNodeProtect" }
    if yname == "is-bandwidth-protect" { return "IsBandwidthProtect" }
    if yname == "is-record-labels" { return "IsRecordLabels" }
    if yname == "is-shared-explicit-requested" { return "IsSharedExplicitRequested" }
    return ""
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetSegmentPath() string {
    return "sess-attribute-flags"
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-local-protect"] = sessAttributeFlags.IsLocalProtect
    leafs["is-node-protect"] = sessAttributeFlags.IsNodeProtect
    leafs["is-bandwidth-protect"] = sessAttributeFlags.IsBandwidthProtect
    leafs["is-record-labels"] = sessAttributeFlags.IsRecordLabels
    leafs["is-shared-explicit-requested"] = sessAttributeFlags.IsSharedExplicitRequested
    return leafs
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetBundleName() string { return "cisco_ios_xr" }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetYangName() string { return "sess-attribute-flags" }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) SetParent(parent types.Entity) { sessAttributeFlags.parent = parent }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetParent() types.Entity { return sessAttributeFlags.parent }

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetParentYangName() string { return "session-attribute" }

// Rsvp_PsbBriefs_PsbBrief_TrafficSpec
// RSVP Traffic Spec Info
type Rsvp_PsbBriefs_PsbBrief_TrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetFilter() yfilter.YFilter { return trafficSpec.YFilter }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) SetFilter(yf yfilter.YFilter) { trafficSpec.YFilter = yf }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetSegmentPath() string {
    return "traffic-spec"
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = trafficSpec.TrafficAverageRate
    leafs["traffic-max-burst"] = trafficSpec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = trafficSpec.TrafficPeakRate
    leafs["traffic-min-unit"] = trafficSpec.TrafficMinUnit
    leafs["traffic-max-unit"] = trafficSpec.TrafficMaxUnit
    return leafs
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetYangName() string { return "traffic-spec" }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) SetParent(parent types.Entity) { trafficSpec.parent = parent }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetParent() types.Entity { return trafficSpec.parent }

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetParentYangName() string { return "psb-brief" }

// Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709OtnTspec Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetFilter() yfilter.YFilter { return genericTrafficSpec.YFilter }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) SetFilter(yf yfilter.YFilter) { genericTrafficSpec.YFilter = yf }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetGoName(yname string) string {
    if yname == "tspec-type" { return "TspecType" }
    if yname == "g709otn-tspec" { return "G709OtnTspec" }
    if yname == "intsrv-tspec" { return "IntsrvTspec" }
    return ""
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetSegmentPath() string {
    return "generic-traffic-spec"
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "g709otn-tspec" {
        return &genericTrafficSpec.G709OtnTspec
    }
    if childYangName == "intsrv-tspec" {
        return &genericTrafficSpec.IntsrvTspec
    }
    return nil
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["g709otn-tspec"] = &genericTrafficSpec.G709OtnTspec
    children["intsrv-tspec"] = &genericTrafficSpec.IntsrvTspec
    return children
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tspec-type"] = genericTrafficSpec.TspecType
    return leafs
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetBundleName() string { return "cisco_ios_xr" }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetYangName() string { return "generic-traffic-spec" }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) SetParent(parent types.Entity) { genericTrafficSpec.parent = parent }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetParent() types.Entity { return genericTrafficSpec.parent }

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetParentYangName() string { return "psb-brief" }

// Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec
// G709 OTN Sender Tspec
type Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetFilter() yfilter.YFilter { return g709OtnTspec.YFilter }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) SetFilter(yf yfilter.YFilter) { g709OtnTspec.YFilter = yf }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetGoName(yname string) string {
    if yname == "traffic-signal-type" { return "TrafficSignalType" }
    if yname == "traffic-nvc" { return "TrafficNvc" }
    if yname == "traffic-multiplier" { return "TrafficMultiplier" }
    if yname == "traffic-bit-rate" { return "TrafficBitRate" }
    return ""
}

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetSegmentPath() string {
    return "g709otn-tspec"
}

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-signal-type"] = g709OtnTspec.TrafficSignalType
    leafs["traffic-nvc"] = g709OtnTspec.TrafficNvc
    leafs["traffic-multiplier"] = g709OtnTspec.TrafficMultiplier
    leafs["traffic-bit-rate"] = g709OtnTspec.TrafficBitRate
    return leafs
}

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetBundleName() string { return "cisco_ios_xr" }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetYangName() string { return "g709otn-tspec" }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) SetParent(parent types.Entity) { g709OtnTspec.parent = parent }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetParent() types.Entity { return g709OtnTspec.parent }

func (g709OtnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709OtnTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetFilter() yfilter.YFilter { return intsrvTspec.YFilter }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) SetFilter(yf yfilter.YFilter) { intsrvTspec.YFilter = yf }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetGoName(yname string) string {
    if yname == "traffic-average-rate" { return "TrafficAverageRate" }
    if yname == "traffic-max-burst" { return "TrafficMaxBurst" }
    if yname == "traffic-peak-rate" { return "TrafficPeakRate" }
    if yname == "traffic-min-unit" { return "TrafficMinUnit" }
    if yname == "traffic-max-unit" { return "TrafficMaxUnit" }
    return ""
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetSegmentPath() string {
    return "intsrv-tspec"
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["traffic-average-rate"] = intsrvTspec.TrafficAverageRate
    leafs["traffic-max-burst"] = intsrvTspec.TrafficMaxBurst
    leafs["traffic-peak-rate"] = intsrvTspec.TrafficPeakRate
    leafs["traffic-min-unit"] = intsrvTspec.TrafficMinUnit
    leafs["traffic-max-unit"] = intsrvTspec.TrafficMaxUnit
    return leafs
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetBundleName() string { return "cisco_ios_xr" }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetYangName() string { return "intsrv-tspec" }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) SetParent(parent types.Entity) { intsrvTspec.parent = parent }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetParent() types.Entity { return intsrvTspec.parent }

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetParentYangName() string { return "generic-traffic-spec" }

// Rsvp_GlobalNeighborBriefs
// Table of brief info about global neighbors
type Rsvp_GlobalNeighborBriefs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Brief info for a single global neighbor. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief.
    GlobalNeighborBrief []Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetFilter() yfilter.YFilter { return globalNeighborBriefs.YFilter }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) SetFilter(yf yfilter.YFilter) { globalNeighborBriefs.YFilter = yf }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetGoName(yname string) string {
    if yname == "global-neighbor-brief" { return "GlobalNeighborBrief" }
    return ""
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetSegmentPath() string {
    return "global-neighbor-briefs"
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-brief" {
        for _, c := range globalNeighborBriefs.GlobalNeighborBrief {
            if globalNeighborBriefs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief{}
        globalNeighborBriefs.GlobalNeighborBrief = append(globalNeighborBriefs.GlobalNeighborBrief, child)
        return &globalNeighborBriefs.GlobalNeighborBrief[len(globalNeighborBriefs.GlobalNeighborBrief)-1]
    }
    return nil
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalNeighborBriefs.GlobalNeighborBrief {
        children[globalNeighborBriefs.GlobalNeighborBrief[i].GetSegmentPath()] = &globalNeighborBriefs.GlobalNeighborBrief[i]
    }
    return children
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetYangName() string { return "global-neighbor-briefs" }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) SetParent(parent types.Entity) { globalNeighborBriefs.parent = parent }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetParent() types.Entity { return globalNeighborBriefs.parent }

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetParentYangName() string { return "rsvp" }

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief
// Brief info for a single global neighbor
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    NodeAddress interface{}

    // Restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // Local node address. The type is slice of string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    LocalNodeAddress []interface{}

    // Neighbor Hello state. The type is slice of RsvpMgmtHelloState.
    NeighborHelloState []interface{}

    // Reason why communication was lost. The type is slice of
    // RsvpMgmtHelloDownReason.
    LostCommunicationReason []interface{}

    // Total number of times communication got lost. The type is slice of
    // interface{} with range: 0..65535.
    LostCommunicationTotal []interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags

    // Time hellos have been up. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime.
    UpTime []Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime

    // Time when communication was lost. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime.
    LostCommunicationTime []Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetFilter() yfilter.YFilter { return globalNeighborBrief.YFilter }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) SetFilter(yf yfilter.YFilter) { globalNeighborBrief.YFilter = yf }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "is-gr-enabled" { return "IsGrEnabled" }
    if yname == "node-address" { return "NodeAddress" }
    if yname == "restart-state" { return "RestartState" }
    if yname == "local-node-address" { return "LocalNodeAddress" }
    if yname == "neighbor-hello-state" { return "NeighborHelloState" }
    if yname == "lost-communication-reason" { return "LostCommunicationReason" }
    if yname == "lost-communication-total" { return "LostCommunicationTotal" }
    if yname == "global-neighbor-flags" { return "GlobalNeighborFlags" }
    if yname == "up-time" { return "UpTime" }
    if yname == "lost-communication-time" { return "LostCommunicationTime" }
    return ""
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetSegmentPath() string {
    return "global-neighbor-brief" + "[neighbor-address='" + fmt.Sprintf("%v", globalNeighborBrief.NeighborAddress) + "']"
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-neighbor-flags" {
        return &globalNeighborBrief.GlobalNeighborFlags
    }
    if childYangName == "up-time" {
        for _, c := range globalNeighborBrief.UpTime {
            if globalNeighborBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime{}
        globalNeighborBrief.UpTime = append(globalNeighborBrief.UpTime, child)
        return &globalNeighborBrief.UpTime[len(globalNeighborBrief.UpTime)-1]
    }
    if childYangName == "lost-communication-time" {
        for _, c := range globalNeighborBrief.LostCommunicationTime {
            if globalNeighborBrief.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime{}
        globalNeighborBrief.LostCommunicationTime = append(globalNeighborBrief.LostCommunicationTime, child)
        return &globalNeighborBrief.LostCommunicationTime[len(globalNeighborBrief.LostCommunicationTime)-1]
    }
    return nil
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["global-neighbor-flags"] = &globalNeighborBrief.GlobalNeighborFlags
    for i := range globalNeighborBrief.UpTime {
        children[globalNeighborBrief.UpTime[i].GetSegmentPath()] = &globalNeighborBrief.UpTime[i]
    }
    for i := range globalNeighborBrief.LostCommunicationTime {
        children[globalNeighborBrief.LostCommunicationTime[i].GetSegmentPath()] = &globalNeighborBrief.LostCommunicationTime[i]
    }
    return children
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = globalNeighborBrief.NeighborAddress
    leafs["is-gr-enabled"] = globalNeighborBrief.IsGrEnabled
    leafs["node-address"] = globalNeighborBrief.NodeAddress
    leafs["restart-state"] = globalNeighborBrief.RestartState
    leafs["local-node-address"] = globalNeighborBrief.LocalNodeAddress
    leafs["neighbor-hello-state"] = globalNeighborBrief.NeighborHelloState
    leafs["lost-communication-reason"] = globalNeighborBrief.LostCommunicationReason
    leafs["lost-communication-total"] = globalNeighborBrief.LostCommunicationTotal
    return leafs
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetYangName() string { return "global-neighbor-brief" }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) SetParent(parent types.Entity) { globalNeighborBrief.parent = parent }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetParent() types.Entity { return globalNeighborBrief.parent }

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetParentYangName() string { return "global-neighbor-briefs" }

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags
// Global Neighbor Flags
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetFilter() yfilter.YFilter { return globalNeighborFlags.YFilter }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) SetFilter(yf yfilter.YFilter) { globalNeighborFlags.YFilter = yf }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetGoName(yname string) string {
    if yname == "is-application-ouni" { return "IsApplicationOuni" }
    if yname == "is-application-mpls" { return "IsApplicationMpls" }
    return ""
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetSegmentPath() string {
    return "global-neighbor-flags"
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["is-application-ouni"] = globalNeighborFlags.IsApplicationOuni
    leafs["is-application-mpls"] = globalNeighborFlags.IsApplicationMpls
    return leafs
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetBundleName() string { return "cisco_ios_xr" }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetYangName() string { return "global-neighbor-flags" }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) SetParent(parent types.Entity) { globalNeighborFlags.parent = parent }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetParent() types.Entity { return globalNeighborFlags.parent }

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetParentYangName() string { return "global-neighbor-brief" }

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime
// Time hellos have been up
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetFilter() yfilter.YFilter { return upTime.YFilter }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) SetFilter(yf yfilter.YFilter) { upTime.YFilter = yf }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetSegmentPath() string {
    return "up-time"
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = upTime.Seconds
    leafs["nanoseconds"] = upTime.Nanoseconds
    return leafs
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetBundleName() string { return "cisco_ios_xr" }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetYangName() string { return "up-time" }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) SetParent(parent types.Entity) { upTime.parent = parent }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetParent() types.Entity { return upTime.parent }

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetParentYangName() string { return "global-neighbor-brief" }

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
// Time when communication was lost
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetFilter() yfilter.YFilter { return lostCommunicationTime.YFilter }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) SetFilter(yf yfilter.YFilter) { lostCommunicationTime.YFilter = yf }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "nanoseconds" { return "Nanoseconds" }
    return ""
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetSegmentPath() string {
    return "lost-communication-time"
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = lostCommunicationTime.Seconds
    leafs["nanoseconds"] = lostCommunicationTime.Nanoseconds
    return leafs
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetBundleName() string { return "cisco_ios_xr" }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetYangName() string { return "lost-communication-time" }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) SetParent(parent types.Entity) { lostCommunicationTime.parent = parent }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetParent() types.Entity { return lostCommunicationTime.parent }

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetParentYangName() string { return "global-neighbor-brief" }

