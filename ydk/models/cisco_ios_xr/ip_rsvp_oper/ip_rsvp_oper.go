// This module contains a collection of YANG definitions
// for Cisco IOS-XR ip-rsvp package operational data.
// 
// This module contains definitions
// for the following management objects:
//   rsvp-standby: RSVP operational data for standby role
//   rsvp: rsvp
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ip_rsvp_oper

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ip_rsvp_oper"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rsvp-oper rsvp-standby}", reflect.TypeOf(RsvpStandby{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby", reflect.TypeOf(RsvpStandby{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ip-rsvp-oper rsvp}", reflect.TypeOf(Rsvp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ip-rsvp-oper:rsvp", reflect.TypeOf(Rsvp{}))
}

// RsvpMode represents Rsvp mode
type RsvpMode string

const (
    // Send
    RsvpMode_send RsvpMode = "send"

    // Receive
    RsvpMode_receive RsvpMode = "receive"
)

// RsvpSession represents Rsvp session
type RsvpSession string

const (
    // Show IPv4 sessions only
    RsvpSession_ipv4 RsvpSession = "ipv4"

    // Show IPv4 P2P LSP sessions only
    RsvpSession_p2p_lsp_ipv4 RsvpSession = "p2p-lsp-ipv4"

    // Show IPv4 OUNI sessions only
    RsvpSession_ouni_ipv4 RsvpSession = "ouni-ipv4"

    // Show IPv4 P2MP LSP sessions only
    RsvpSession_p2mp_lsp_ipv4 RsvpSession = "p2mp-lsp-ipv4"
)

// IgpteLibBwModel represents Bandwidth model
type IgpteLibBwModel string

const (
    // Russian Dolls Model
    IgpteLibBwModel_rdm IgpteLibBwModel = "rdm"

    // Maximum Allocation Model
    IgpteLibBwModel_mam IgpteLibBwModel = "mam"

    // No model set
    IgpteLibBwModel_not_set IgpteLibBwModel = "not-set"
)

// RsvpMgmtRestartState represents RSVP GR (Graceful Restart) Restart states
type RsvpMgmtRestartState string

const (
    // Restart is done
    RsvpMgmtRestartState_done RsvpMgmtRestartState = "done"

    // Neighbor is in recovery
    RsvpMgmtRestartState_recovery RsvpMgmtRestartState = "recovery"

    // Neighbor recovery aborted
    RsvpMgmtRestartState_abort RsvpMgmtRestartState = "abort"
)

// RsvpMgmtHelloDownReason represents Reasons why RSVP Hellos went down
type RsvpMgmtHelloDownReason string

const (
    // Not applicable. This means RSVP Hellos are up
    RsvpMgmtHelloDownReason_not_applicable RsvpMgmtHelloDownReason = "not-applicable"

    // Incorrect destination instance in received
    // Hellos
    RsvpMgmtHelloDownReason_wrong_destination_instance RsvpMgmtHelloDownReason = "wrong-destination-instance"

    // Incorrect source instance in received Hellos
    RsvpMgmtHelloDownReason_wrong_source_instance RsvpMgmtHelloDownReason = "wrong-source-instance"

    // Hellos not being received
    RsvpMgmtHelloDownReason_hello_missed RsvpMgmtHelloDownReason = "hello-missed"

    // Interface went down
    RsvpMgmtHelloDownReason_interface_down RsvpMgmtHelloDownReason = "interface-down"

    // Neighbor disabled Hellos
    RsvpMgmtHelloDownReason_neighbor_disabled_hello RsvpMgmtHelloDownReason = "neighbor-disabled-hello"

    // Control channel went down
    RsvpMgmtHelloDownReason_control_channel_down RsvpMgmtHelloDownReason = "control-channel-down"
)

// RsvpMgmtHelloInstanceOwner represents RSVP Hello instance owner
type RsvpMgmtHelloInstanceOwner string

const (
    // MPLS Graceful Restart
    RsvpMgmtHelloInstanceOwner_mpls_graceful_restart RsvpMgmtHelloInstanceOwner = "mpls-graceful-restart"

    // MPLS OUNI
    RsvpMgmtHelloInstanceOwner_mpls_ouni RsvpMgmtHelloInstanceOwner = "mpls-ouni"
)

// RsvpMgmtAssociation represents RSVP ASSOCIATION Types
type RsvpMgmtAssociation string

const (
    // No ASSOCIATION Object present
    RsvpMgmtAssociation_none RsvpMgmtAssociation = "none"

    // IPv4 ASSOCIATION Type
    RsvpMgmtAssociation_ipv4 RsvpMgmtAssociation = "ipv4"

    // IPv6 ASSOCIATION Type
    RsvpMgmtAssociation_ipv6 RsvpMgmtAssociation = "ipv6"

    // EXTENDED IPv4 ASSOCIATION Type
    RsvpMgmtAssociation_extended_ipv4 RsvpMgmtAssociation = "extended-ipv4"

    // EXTENDED IPv6 ASSOCIATION Type
    RsvpMgmtAssociation_extended_ipv6 RsvpMgmtAssociation = "extended-ipv6"
)

// RsvpMgmtRroSubobj represents RSVP RRO Types
type RsvpMgmtRroSubobj string

const (
    // IPv4 RRO Type
    RsvpMgmtRroSubobj_ipv4rro_type RsvpMgmtRroSubobj = "ipv4rro-type"

    // Label RRO Type
    RsvpMgmtRroSubobj_label_rro_type RsvpMgmtRroSubobj = "label-rro-type"

    // Unnumbered RRO Type
    RsvpMgmtRroSubobj_unnumbered_rro_type RsvpMgmtRroSubobj = "unnumbered-rro-type"

    // SRLG RRO Type
    RsvpMgmtRroSubobj_srlg_rro_type RsvpMgmtRroSubobj = "srlg-rro-type"
)

// RsvpMgmtFrrStateEnum represents RSVP FRR States
type RsvpMgmtFrrStateEnum string

const (
    // Ready State
    RsvpMgmtFrrStateEnum_ready_state RsvpMgmtFrrStateEnum = "ready-state"

    // Pending
    RsvpMgmtFrrStateEnum_pending_state RsvpMgmtFrrStateEnum = "pending-state"

    // Active State
    RsvpMgmtFrrStateEnum_active_state RsvpMgmtFrrStateEnum = "active-state"
)

// RsvpProcNsrNotReadyReason represents Rsvp proc nsr not ready reason
type RsvpProcNsrNotReadyReason string

const (
    // Collab connection time out
    RsvpProcNsrNotReadyReason_collab_time_out RsvpProcNsrNotReadyReason = "collab-time-out"

    // Collab connection down or IDT not done
    RsvpProcNsrNotReadyReason_collab_conntection_idt RsvpProcNsrNotReadyReason = "collab-conntection-idt"

    // NSR peer not connected
    RsvpProcNsrNotReadyReason_nsr_peer_not_connected RsvpProcNsrNotReadyReason = "nsr-peer-not-connected"

    // NSR peer not in sync
    RsvpProcNsrNotReadyReason_nsr_peer_not_in_sync RsvpProcNsrNotReadyReason = "nsr-peer-not-in-sync"
)

// RsvpSyncStatus represents Rsvp sync status
type RsvpSyncStatus string

const (
    // Not Ready
    RsvpSyncStatus_not_ready RsvpSyncStatus = "not-ready"

    // Ready
    RsvpSyncStatus_ready RsvpSyncStatus = "ready"
)

// RsvpMgmtGrApp represents RSVP Graceful Restart application type
type RsvpMgmtGrApp string

const (
    // Application is OUNI
    RsvpMgmtGrApp_ouni RsvpMgmtGrApp = "ouni"

    // Application is GMPLS
    RsvpMgmtGrApp_gmpls RsvpMgmtGrApp = "gmpls"
)

// RsvpProcRole represents RSVP Process Role
type RsvpProcRole string

const (
    // Unknown
    RsvpProcRole_unknown RsvpProcRole = "unknown"

    // V1 Active
    RsvpProcRole_v1_active RsvpProcRole = "v1-active"

    // V1 Standby
    RsvpProcRole_v1_standby RsvpProcRole = "v1-standby"

    // V2 Active
    RsvpProcRole_v2_active RsvpProcRole = "v2-active"

    // V2 Standby
    RsvpProcRole_v2_standby RsvpProcRole = "v2-standby"

    // V1 Active post big-bang
    RsvpProcRole_v1_active_post_big_bang RsvpProcRole = "v1-active-post-big-bang"

    // V1 Standbyi post big-bang
    RsvpProcRole_v1_standby_post_big_bang RsvpProcRole = "v1-standby-post-big-bang"

    // Count
    RsvpProcRole_count RsvpProcRole = "count"
)

// RsvpMgmtAuthChallengeStatus represents RSVP Authentication Challenge Status
type RsvpMgmtAuthChallengeStatus string

const (
    // Not configured
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_not_cfg RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-not-cfg"

    // Complete
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_completed RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-completed"

    // In Progress
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_in_progress RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-in-progress"

    // Failed
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_failure RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-failure"

    // Not supported
    RsvpMgmtAuthChallengeStatus_rsvp_mgmt_auth_cs_not_supported RsvpMgmtAuthChallengeStatus = "rsvp-mgmt-auth-cs-not-supported"
)

// RsvpMgmtHelloInstance represents RSVP Hello instance types
type RsvpMgmtHelloInstance string

const (
    // Hello requests and ACKs are sent
    RsvpMgmtHelloInstance_active RsvpMgmtHelloInstance = "active"

    // Hello ACKs only are sent
    RsvpMgmtHelloInstance_passive RsvpMgmtHelloInstance = "passive"
)

// RsvpMgmtHelloState represents RSVP Hello instance states
type RsvpMgmtHelloState string

const (
    // No Hello messages ever received from neighbor
    RsvpMgmtHelloState_hello_state_init RsvpMgmtHelloState = "hello-state-init"

    // Receiving expected Hello messages from neighbor
    RsvpMgmtHelloState_hello_state_up RsvpMgmtHelloState = "hello-state-up"

    // Stopped receiving expected Hello messages from
    // neighbor
    RsvpMgmtHelloState_hello_state_down RsvpMgmtHelloState = "hello-state-down"
)

// RsvpMgmtReservationTypeEnum represents RSVP Reservation Types
type RsvpMgmtReservationTypeEnum string

const (
    // Single Reservation
    RsvpMgmtReservationTypeEnum_rsvp_mgmt_ff_option RsvpMgmtReservationTypeEnum = "rsvp-mgmt-ff-option"

    // Shared Reservation, Unlimited Scope
    RsvpMgmtReservationTypeEnum_rsvp_mgmt_wf_option RsvpMgmtReservationTypeEnum = "rsvp-mgmt-wf-option"

    // Shared Reservation, Limited Scope
    RsvpMgmtReservationTypeEnum_rsvp_mgmt_se_option RsvpMgmtReservationTypeEnum = "rsvp-mgmt-se-option"
)

// RsvpMgmtFlowSpec represents RSVP Generic FlowSpec Types
type RsvpMgmtFlowSpec string

const (
    // G709 OTN FlowSpec Type
    RsvpMgmtFlowSpec_g709otn RsvpMgmtFlowSpec = "g709otn"
)

// RsvpMgmtQosServiceEnum represents QOS Types
type RsvpMgmtQosServiceEnum string

const (
    // QOS Unknown
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_unknown RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-unknown"

    // QOS Guaranteed
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_guaranteed RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-guaranteed"

    // QOS Controlled Load
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_controlled_load RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-controlled-load"

    // QOS Qualitative
    RsvpMgmtQosServiceEnum_rsvp_mgmt_qos_qualitative RsvpMgmtQosServiceEnum = "rsvp-mgmt-qos-qualitative"
)

// RsvpTimerState represents RSVP Timer States
type RsvpTimerState string

const (
    // RSVP timer running and sleeping
    RsvpTimerState_rsvp_timer_running_and_sleeping RsvpTimerState = "rsvp-timer-running-and-sleeping"

    // RSVP timer running
    RsvpTimerState_rsvp_timer_running RsvpTimerState = "rsvp-timer-running"

    // RSVP timer not running
    RsvpTimerState_rsvp_timer_not_running RsvpTimerState = "rsvp-timer-not-running"
)

// RsvpMgmtEroSubobjStatus represents RSVP ERO Status
type RsvpMgmtEroSubobjStatus string

const (
    // ERO is not available in topology
    RsvpMgmtEroSubobjStatus_rsvp_mgmt_ero_status_not_available RsvpMgmtEroSubobjStatus = "rsvp-mgmt-ero-status-not-available"

    // ERO is available in topology
    RsvpMgmtEroSubobjStatus_rsvp_mgmt_ero_status_available RsvpMgmtEroSubobjStatus = "rsvp-mgmt-ero-status-available"

    // ERO doesn't have bw available in topology
    RsvpMgmtEroSubobjStatus_rsvp_mgmt_ero_status_bw_not_available RsvpMgmtEroSubobjStatus = "rsvp-mgmt-ero-status-bw-not-available"
)

// RsvpMgmtEroSubobj represents RSVP ERO Types
type RsvpMgmtEroSubobj string

const (
    // IPv4 ERO Type
    RsvpMgmtEroSubobj_rsvp_mgmt_ero_type_ipv4 RsvpMgmtEroSubobj = "rsvp-mgmt-ero-type-ipv4"

    // Unnumbered ERO Type
    RsvpMgmtEroSubobj_rsvp_mgmt_ero_type_un_num RsvpMgmtEroSubobj = "rsvp-mgmt-ero-type-un-num"
)

// RsvpMgmtGenericLabel represents RSVP Generic Label Types
type RsvpMgmtGenericLabel string

const (
    // Generalized Label Type
    RsvpMgmtGenericLabel_rsvp_mgmt_label_type_gmpls RsvpMgmtGenericLabel = "rsvp-mgmt-label-type-gmpls"
)

// RsvpMgmtTspec represents RSVP Generic Sender Tspec Types
type RsvpMgmtTspec string

const (
    // G709 OTN Sender Tspec Type
    RsvpMgmtTspec_g709otn RsvpMgmtTspec = "g709otn"

    // Int-Serv Sender Tspec Type
    RsvpMgmtTspec_intsrv RsvpMgmtTspec = "intsrv"
)

// RsvpMgmtFilter represents RSVP Filter Types
type RsvpMgmtFilter string

const (
    // IPv4 FilterSpec Type
    RsvpMgmtFilter_rsvp_mgmt_filter_type_ipv4 RsvpMgmtFilter = "rsvp-mgmt-filter-type-ipv4"

    // P2MP LSP IPv4 FilterSpec Type
    RsvpMgmtFilter_rsvp_mgmt_filter_type_p2mp_lsp_ipv4 RsvpMgmtFilter = "rsvp-mgmt-filter-type-p2mp-lsp-ipv4"
)

// RsvpMgmtSession represents RSVP Session Types
type RsvpMgmtSession string

const (
    // UDP IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_udp_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-udp-ipv4"

    // LSP IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_lsp_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-lsp-ipv4"

    // UNI IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_uni_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-uni-ipv4"

    // P2MP LSP IPv4 Session Type
    RsvpMgmtSession_rsvp_mgmt_session_type_p2mp_lsp_ipv4 RsvpMgmtSession = "rsvp-mgmt-session-type-p2mp-lsp-ipv4"
)

// RsvpMgmtAuthKi represents RSVP Authentication KeyInfo Type
type RsvpMgmtAuthKi string

const (
    // None
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_none RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-none"

    // Global
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_global RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-global"

    // Interface
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_interface RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-interface"

    // Neighbor
    RsvpMgmtAuthKi_rsvp_mgmt_auth_ki_type_neighbor RsvpMgmtAuthKi = "rsvp-mgmt-auth-ki-type-neighbor"
)

// RsvpMgmtAuthDirection represents RSVP Authentication Direction Types
type RsvpMgmtAuthDirection string

const (
    // Send
    RsvpMgmtAuthDirection_rsvp_mgmt_auth_direction_send RsvpMgmtAuthDirection = "rsvp-mgmt-auth-direction-send"

    // Receive
    RsvpMgmtAuthDirection_rsvp_mgmt_auth_direction_recv RsvpMgmtAuthDirection = "rsvp-mgmt-auth-direction-recv"
)

// RsvpMgmtDsteModes represents RSVP DSTE modes
type RsvpMgmtDsteModes string

const (
    // pre standard
    RsvpMgmtDsteModes_pre_standard RsvpMgmtDsteModes = "pre-standard"

    // standard
    RsvpMgmtDsteModes_standard RsvpMgmtDsteModes = "standard"
)

// RsvpStandby
// RSVP operational data for standby role
type RsvpStandby struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of brief info about I/F neighbors.
    InterfaceNeighborBriefs RsvpStandby_InterfaceNeighborBriefs

    // Table of summary info about RSVP-enabled controllers.
    ControllerSummaries RsvpStandby_ControllerSummaries

    // Table for Authentication related information.
    AuthenticationBriefs RsvpStandby_AuthenticationBriefs

    // Table of brief info about sessions.
    SessionBriefs RsvpStandby_SessionBriefs

    // Table of detailed info about path state blocks.
    PsbDetaileds RsvpStandby_PsbDetaileds

    // Table of detailed info about RSVP-enabled controllers.
    ControllerDetaileds RsvpStandby_ControllerDetaileds

    // Fast Re-Route Summary State Information.
    FrrSummary RsvpStandby_FrrSummary

    // Table of detailed info about reservation state blocks.
    RsbDetaileds RsvpStandby_RsbDetaileds

    // Table of summary info about RSVP-enabled interfaces.
    InterfaceSummaries RsvpStandby_InterfaceSummaries

    // Table of brief info about hello instances.
    HelloInstanceBriefs RsvpStandby_HelloInstanceBriefs

    // Table for detailed authentication related information.
    AuthenticationDetails RsvpStandby_AuthenticationDetails

    // Table of brief info about reservation state blocks.
    RsbBriefs RsvpStandby_RsbBriefs

    // Counters.
    Counters RsvpStandby_Counters

    // Table of detailed info about RSVP-enabled interfaces.
    InterfaceDetaileds RsvpStandby_InterfaceDetaileds

    // Table of brief info about RSVP-enabled controller.
    ControllerBriefs RsvpStandby_ControllerBriefs

    // Info about graceful-restart.
    GracefulRestart RsvpStandby_GracefulRestart

    // Table of brief info about i/f-based hello instances.
    HelloInterfaceInstanceBriefs RsvpStandby_HelloInterfaceInstanceBriefs

    // Table of detailed info about i/f-based hello instances.
    HelloInterfaceInstanceDetails RsvpStandby_HelloInterfaceInstanceDetails

    // Table of detailed info about I/F neighbors.
    InterfaceNeighborDetails RsvpStandby_InterfaceNeighborDetails

    // RSVP NSR information.
    Nsr RsvpStandby_Nsr

    // RSVP summary information.
    Summary RsvpStandby_Summary

    // Table of detailed info about Fast Re-route states.
    Frrs RsvpStandby_Frrs

    // Table of brief info about requests.
    RequestBriefs RsvpStandby_RequestBriefs

    // Table of detail info about requests.
    RequestDetails RsvpStandby_RequestDetails

    // Table of brief info about RSVP-enabled interfaces.
    InterfaceBriefs RsvpStandby_InterfaceBriefs

    // Table of detailed info about sessions.
    SessionDetaileds RsvpStandby_SessionDetaileds

    // Table of detailed info about hello instances.
    HelloInstanceDetails RsvpStandby_HelloInstanceDetails

    // Table of detailed info about global neighbors.
    GlobalNeighborDetails RsvpStandby_GlobalNeighborDetails

    // Table of brief info about path state blocks.
    PsbBriefs RsvpStandby_PsbBriefs

    // Table of brief info about global neighbors.
    GlobalNeighborBriefs RsvpStandby_GlobalNeighborBriefs
}

func (rsvpStandby *RsvpStandby) GetEntityData() *types.CommonEntityData {
    rsvpStandby.EntityData.YFilter = rsvpStandby.YFilter
    rsvpStandby.EntityData.YangName = "rsvp-standby"
    rsvpStandby.EntityData.BundleName = "cisco_ios_xr"
    rsvpStandby.EntityData.ParentYangName = "Cisco-IOS-XR-ip-rsvp-oper"
    rsvpStandby.EntityData.SegmentPath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby"
    rsvpStandby.EntityData.AbsolutePath = rsvpStandby.EntityData.SegmentPath
    rsvpStandby.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpStandby.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpStandby.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpStandby.EntityData.Children = types.NewOrderedMap()
    rsvpStandby.EntityData.Children.Append("interface-neighbor-briefs", types.YChild{"InterfaceNeighborBriefs", &rsvpStandby.InterfaceNeighborBriefs})
    rsvpStandby.EntityData.Children.Append("controller-summaries", types.YChild{"ControllerSummaries", &rsvpStandby.ControllerSummaries})
    rsvpStandby.EntityData.Children.Append("authentication-briefs", types.YChild{"AuthenticationBriefs", &rsvpStandby.AuthenticationBriefs})
    rsvpStandby.EntityData.Children.Append("session-briefs", types.YChild{"SessionBriefs", &rsvpStandby.SessionBriefs})
    rsvpStandby.EntityData.Children.Append("psb-detaileds", types.YChild{"PsbDetaileds", &rsvpStandby.PsbDetaileds})
    rsvpStandby.EntityData.Children.Append("controller-detaileds", types.YChild{"ControllerDetaileds", &rsvpStandby.ControllerDetaileds})
    rsvpStandby.EntityData.Children.Append("frr-summary", types.YChild{"FrrSummary", &rsvpStandby.FrrSummary})
    rsvpStandby.EntityData.Children.Append("rsb-detaileds", types.YChild{"RsbDetaileds", &rsvpStandby.RsbDetaileds})
    rsvpStandby.EntityData.Children.Append("interface-summaries", types.YChild{"InterfaceSummaries", &rsvpStandby.InterfaceSummaries})
    rsvpStandby.EntityData.Children.Append("hello-instance-briefs", types.YChild{"HelloInstanceBriefs", &rsvpStandby.HelloInstanceBriefs})
    rsvpStandby.EntityData.Children.Append("authentication-details", types.YChild{"AuthenticationDetails", &rsvpStandby.AuthenticationDetails})
    rsvpStandby.EntityData.Children.Append("rsb-briefs", types.YChild{"RsbBriefs", &rsvpStandby.RsbBriefs})
    rsvpStandby.EntityData.Children.Append("counters", types.YChild{"Counters", &rsvpStandby.Counters})
    rsvpStandby.EntityData.Children.Append("interface-detaileds", types.YChild{"InterfaceDetaileds", &rsvpStandby.InterfaceDetaileds})
    rsvpStandby.EntityData.Children.Append("controller-briefs", types.YChild{"ControllerBriefs", &rsvpStandby.ControllerBriefs})
    rsvpStandby.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &rsvpStandby.GracefulRestart})
    rsvpStandby.EntityData.Children.Append("hello-interface-instance-briefs", types.YChild{"HelloInterfaceInstanceBriefs", &rsvpStandby.HelloInterfaceInstanceBriefs})
    rsvpStandby.EntityData.Children.Append("hello-interface-instance-details", types.YChild{"HelloInterfaceInstanceDetails", &rsvpStandby.HelloInterfaceInstanceDetails})
    rsvpStandby.EntityData.Children.Append("interface-neighbor-details", types.YChild{"InterfaceNeighborDetails", &rsvpStandby.InterfaceNeighborDetails})
    rsvpStandby.EntityData.Children.Append("nsr", types.YChild{"Nsr", &rsvpStandby.Nsr})
    rsvpStandby.EntityData.Children.Append("summary", types.YChild{"Summary", &rsvpStandby.Summary})
    rsvpStandby.EntityData.Children.Append("frrs", types.YChild{"Frrs", &rsvpStandby.Frrs})
    rsvpStandby.EntityData.Children.Append("request-briefs", types.YChild{"RequestBriefs", &rsvpStandby.RequestBriefs})
    rsvpStandby.EntityData.Children.Append("request-details", types.YChild{"RequestDetails", &rsvpStandby.RequestDetails})
    rsvpStandby.EntityData.Children.Append("interface-briefs", types.YChild{"InterfaceBriefs", &rsvpStandby.InterfaceBriefs})
    rsvpStandby.EntityData.Children.Append("session-detaileds", types.YChild{"SessionDetaileds", &rsvpStandby.SessionDetaileds})
    rsvpStandby.EntityData.Children.Append("hello-instance-details", types.YChild{"HelloInstanceDetails", &rsvpStandby.HelloInstanceDetails})
    rsvpStandby.EntityData.Children.Append("global-neighbor-details", types.YChild{"GlobalNeighborDetails", &rsvpStandby.GlobalNeighborDetails})
    rsvpStandby.EntityData.Children.Append("psb-briefs", types.YChild{"PsbBriefs", &rsvpStandby.PsbBriefs})
    rsvpStandby.EntityData.Children.Append("global-neighbor-briefs", types.YChild{"GlobalNeighborBriefs", &rsvpStandby.GlobalNeighborBriefs})
    rsvpStandby.EntityData.Leafs = types.NewOrderedMap()

    rsvpStandby.EntityData.YListKeys = []string {}

    return &(rsvpStandby.EntityData)
}

// RsvpStandby_InterfaceNeighborBriefs
// Table of brief info about I/F neighbors
type RsvpStandby_InterfaceNeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single interface neighbor. The type is slice of
    // RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief.
    InterfaceNeighborBrief []*RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief
}

func (interfaceNeighborBriefs *RsvpStandby_InterfaceNeighborBriefs) GetEntityData() *types.CommonEntityData {
    interfaceNeighborBriefs.EntityData.YFilter = interfaceNeighborBriefs.YFilter
    interfaceNeighborBriefs.EntityData.YangName = "interface-neighbor-briefs"
    interfaceNeighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborBriefs.EntityData.ParentYangName = "rsvp-standby"
    interfaceNeighborBriefs.EntityData.SegmentPath = "interface-neighbor-briefs"
    interfaceNeighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + interfaceNeighborBriefs.EntityData.SegmentPath
    interfaceNeighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborBriefs.EntityData.Children.Append("interface-neighbor-brief", types.YChild{"InterfaceNeighborBrief", nil})
    for i := range interfaceNeighborBriefs.InterfaceNeighborBrief {
        interfaceNeighborBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborBriefs.InterfaceNeighborBrief[i]), types.YChild{"InterfaceNeighborBrief", interfaceNeighborBriefs.InterfaceNeighborBrief[i]})
    }
    interfaceNeighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceNeighborBriefs.EntityData.YListKeys = []string {}

    return &(interfaceNeighborBriefs.EntityData)
}

// RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief
// Brief info for a single interface neighbor
type RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Compact list of I/F Neighbors. The type is slice of
    // RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact.
    InterfaceNeighborListCompact []*RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
}

func (interfaceNeighborBrief *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetEntityData() *types.CommonEntityData {
    interfaceNeighborBrief.EntityData.YFilter = interfaceNeighborBrief.YFilter
    interfaceNeighborBrief.EntityData.YangName = "interface-neighbor-brief"
    interfaceNeighborBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborBrief.EntityData.ParentYangName = "interface-neighbor-briefs"
    interfaceNeighborBrief.EntityData.SegmentPath = "interface-neighbor-brief" + types.AddKeyToken(interfaceNeighborBrief.NeighborAddress, "neighbor-address")
    interfaceNeighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-briefs/" + interfaceNeighborBrief.EntityData.SegmentPath
    interfaceNeighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborBrief.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborBrief.EntityData.Children.Append("interface-neighbor-list-compact", types.YChild{"InterfaceNeighborListCompact", nil})
    for i := range interfaceNeighborBrief.InterfaceNeighborListCompact {
        types.SetYListKey(interfaceNeighborBrief.InterfaceNeighborListCompact[i], i)
        interfaceNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborBrief.InterfaceNeighborListCompact[i]), types.YChild{"InterfaceNeighborListCompact", interfaceNeighborBrief.InterfaceNeighborListCompact[i]})
    }
    interfaceNeighborBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborBrief.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", interfaceNeighborBrief.NeighborAddress})
    interfaceNeighborBrief.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", interfaceNeighborBrief.NodeAddress})

    interfaceNeighborBrief.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(interfaceNeighborBrief.EntityData)
}

// RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
// Compact list of I/F Neighbors
type RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    NeighborInterfaceName interface{}
}

func (interfaceNeighborListCompact *RsvpStandby_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetEntityData() *types.CommonEntityData {
    interfaceNeighborListCompact.EntityData.YFilter = interfaceNeighborListCompact.YFilter
    interfaceNeighborListCompact.EntityData.YangName = "interface-neighbor-list-compact"
    interfaceNeighborListCompact.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborListCompact.EntityData.ParentYangName = "interface-neighbor-brief"
    interfaceNeighborListCompact.EntityData.SegmentPath = "interface-neighbor-list-compact" + types.AddNoKeyToken(interfaceNeighborListCompact)
    interfaceNeighborListCompact.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-briefs/interface-neighbor-brief/" + interfaceNeighborListCompact.EntityData.SegmentPath
    interfaceNeighborListCompact.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborListCompact.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborListCompact.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborListCompact.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborListCompact.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborListCompact.EntityData.Leafs.Append("interface-neighbor-address", types.YLeaf{"InterfaceNeighborAddress", interfaceNeighborListCompact.InterfaceNeighborAddress})
    interfaceNeighborListCompact.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", interfaceNeighborListCompact.NeighborInterfaceName})

    interfaceNeighborListCompact.EntityData.YListKeys = []string {}

    return &(interfaceNeighborListCompact.EntityData)
}

// RsvpStandby_ControllerSummaries
// Table of summary info about RSVP-enabled
// controllers
type RsvpStandby_ControllerSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled controller. The type is slice of
    // RsvpStandby_ControllerSummaries_ControllerSummary.
    ControllerSummary []*RsvpStandby_ControllerSummaries_ControllerSummary
}

func (controllerSummaries *RsvpStandby_ControllerSummaries) GetEntityData() *types.CommonEntityData {
    controllerSummaries.EntityData.YFilter = controllerSummaries.YFilter
    controllerSummaries.EntityData.YangName = "controller-summaries"
    controllerSummaries.EntityData.BundleName = "cisco_ios_xr"
    controllerSummaries.EntityData.ParentYangName = "rsvp-standby"
    controllerSummaries.EntityData.SegmentPath = "controller-summaries"
    controllerSummaries.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + controllerSummaries.EntityData.SegmentPath
    controllerSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerSummaries.EntityData.Children = types.NewOrderedMap()
    controllerSummaries.EntityData.Children.Append("controller-summary", types.YChild{"ControllerSummary", nil})
    for i := range controllerSummaries.ControllerSummary {
        controllerSummaries.EntityData.Children.Append(types.GetSegmentPath(controllerSummaries.ControllerSummary[i]), types.YChild{"ControllerSummary", controllerSummaries.ControllerSummary[i]})
    }
    controllerSummaries.EntityData.Leafs = types.NewOrderedMap()

    controllerSummaries.EntityData.YListKeys = []string {}

    return &(controllerSummaries.EntityData)
}

// RsvpStandby_ControllerSummaries_ControllerSummary
// Summary info about an RSVP-enabled controller
type RsvpStandby_ControllerSummaries_ControllerSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Controller Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation
}

func (controllerSummary *RsvpStandby_ControllerSummaries_ControllerSummary) GetEntityData() *types.CommonEntityData {
    controllerSummary.EntityData.YFilter = controllerSummary.YFilter
    controllerSummary.EntityData.YangName = "controller-summary"
    controllerSummary.EntityData.BundleName = "cisco_ios_xr"
    controllerSummary.EntityData.ParentYangName = "controller-summaries"
    controllerSummary.EntityData.SegmentPath = "controller-summary" + types.AddKeyToken(controllerSummary.ControllerName, "controller-name")
    controllerSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-summaries/" + controllerSummary.EntityData.SegmentPath
    controllerSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerSummary.EntityData.Children = types.NewOrderedMap()
    controllerSummary.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &controllerSummary.BandwidthInformation})
    controllerSummary.EntityData.Leafs = types.NewOrderedMap()
    controllerSummary.EntityData.Leafs.Append("controller-name", types.YLeaf{"ControllerName", controllerSummary.ControllerName})
    controllerSummary.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", controllerSummary.InterfaceNameXr})
    controllerSummary.EntityData.Leafs.Append("paths-in", types.YLeaf{"PathsIn", controllerSummary.PathsIn})
    controllerSummary.EntityData.Leafs.Append("paths-out", types.YLeaf{"PathsOut", controllerSummary.PathsOut})
    controllerSummary.EntityData.Leafs.Append("reservations-in", types.YLeaf{"ReservationsIn", controllerSummary.ReservationsIn})
    controllerSummary.EntityData.Leafs.Append("reservations-out", types.YLeaf{"ReservationsOut", controllerSummary.ReservationsOut})

    controllerSummary.EntityData.YListKeys = []string {"ControllerName"}

    return &(controllerSummary.EntityData)
}

// RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "controller-summary"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-summaries/controller-summary/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-summaries/controller-summary/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-summaries/controller-summary/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// RsvpStandby_AuthenticationBriefs
// Table for Authentication related information
type RsvpStandby_AuthenticationBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // RsvpStandby_AuthenticationBriefs_AuthenticationBrief.
    AuthenticationBrief []*RsvpStandby_AuthenticationBriefs_AuthenticationBrief
}

func (authenticationBriefs *RsvpStandby_AuthenticationBriefs) GetEntityData() *types.CommonEntityData {
    authenticationBriefs.EntityData.YFilter = authenticationBriefs.YFilter
    authenticationBriefs.EntityData.YangName = "authentication-briefs"
    authenticationBriefs.EntityData.BundleName = "cisco_ios_xr"
    authenticationBriefs.EntityData.ParentYangName = "rsvp-standby"
    authenticationBriefs.EntityData.SegmentPath = "authentication-briefs"
    authenticationBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + authenticationBriefs.EntityData.SegmentPath
    authenticationBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationBriefs.EntityData.Children = types.NewOrderedMap()
    authenticationBriefs.EntityData.Children.Append("authentication-brief", types.YChild{"AuthenticationBrief", nil})
    for i := range authenticationBriefs.AuthenticationBrief {
        authenticationBriefs.EntityData.Children.Append(types.GetSegmentPath(authenticationBriefs.AuthenticationBrief[i]), types.YChild{"AuthenticationBrief", authenticationBriefs.AuthenticationBrief[i]})
    }
    authenticationBriefs.EntityData.Leafs = types.NewOrderedMap()

    authenticationBriefs.EntityData.YListKeys = []string {}

    return &(authenticationBriefs.EntityData)
}

// RsvpStandby_AuthenticationBriefs_AuthenticationBrief
// Brief Authentication information
type RsvpStandby_AuthenticationBriefs_AuthenticationBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authenticationBrief *RsvpStandby_AuthenticationBriefs_AuthenticationBrief) GetEntityData() *types.CommonEntityData {
    authenticationBrief.EntityData.YFilter = authenticationBrief.YFilter
    authenticationBrief.EntityData.YangName = "authentication-brief"
    authenticationBrief.EntityData.BundleName = "cisco_ios_xr"
    authenticationBrief.EntityData.ParentYangName = "authentication-briefs"
    authenticationBrief.EntityData.SegmentPath = "authentication-brief" + types.AddKeyToken(authenticationBrief.SourceAddress, "source-address") + types.AddKeyToken(authenticationBrief.DestinationAddress, "destination-address") + types.AddKeyToken(authenticationBrief.ModeId, "mode-id") + types.AddKeyToken(authenticationBrief.InterfaceName, "interface-name")
    authenticationBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-briefs/" + authenticationBrief.EntityData.SegmentPath
    authenticationBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationBrief.EntityData.Children = types.NewOrderedMap()
    authenticationBrief.EntityData.Leafs = types.NewOrderedMap()
    authenticationBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", authenticationBrief.SourceAddress})
    authenticationBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", authenticationBrief.DestinationAddress})
    authenticationBrief.EntityData.Leafs.Append("mode-id", types.YLeaf{"ModeId", authenticationBrief.ModeId})
    authenticationBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", authenticationBrief.InterfaceName})
    authenticationBrief.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", authenticationBrief.SourceAddressXr})
    authenticationBrief.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", authenticationBrief.DestinationAddressXr})
    authenticationBrief.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", authenticationBrief.NeighborAddress})
    authenticationBrief.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", authenticationBrief.Direction})
    authenticationBrief.EntityData.Leafs.Append("key-type", types.YLeaf{"KeyType", authenticationBrief.KeyType})
    authenticationBrief.EntityData.Leafs.Append("key-source", types.YLeaf{"KeySource", authenticationBrief.KeySource})
    authenticationBrief.EntityData.Leafs.Append("key-id", types.YLeaf{"KeyId", authenticationBrief.KeyId})
    authenticationBrief.EntityData.Leafs.Append("key-id-valid", types.YLeaf{"KeyIdValid", authenticationBrief.KeyIdValid})

    authenticationBrief.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress", "ModeId", "InterfaceName"}

    return &(authenticationBrief.EntityData)
}

// RsvpStandby_SessionBriefs
// Table of brief info about sessions
type RsvpStandby_SessionBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info about session. The type is slice of
    // RsvpStandby_SessionBriefs_SessionBrief.
    SessionBrief []*RsvpStandby_SessionBriefs_SessionBrief
}

func (sessionBriefs *RsvpStandby_SessionBriefs) GetEntityData() *types.CommonEntityData {
    sessionBriefs.EntityData.YFilter = sessionBriefs.YFilter
    sessionBriefs.EntityData.YangName = "session-briefs"
    sessionBriefs.EntityData.BundleName = "cisco_ios_xr"
    sessionBriefs.EntityData.ParentYangName = "rsvp-standby"
    sessionBriefs.EntityData.SegmentPath = "session-briefs"
    sessionBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + sessionBriefs.EntityData.SegmentPath
    sessionBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionBriefs.EntityData.Children = types.NewOrderedMap()
    sessionBriefs.EntityData.Children.Append("session-brief", types.YChild{"SessionBrief", nil})
    for i := range sessionBriefs.SessionBrief {
        types.SetYListKey(sessionBriefs.SessionBrief[i], i)
        sessionBriefs.EntityData.Children.Append(types.GetSegmentPath(sessionBriefs.SessionBrief[i]), types.YChild{"SessionBrief", sessionBriefs.SessionBrief[i]})
    }
    sessionBriefs.EntityData.Leafs = types.NewOrderedMap()

    sessionBriefs.EntityData.YListKeys = []string {}

    return &(sessionBriefs.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief
// Brief info about session
type RsvpStandby_SessionBriefs_SessionBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session RsvpStandby_SessionBriefs_SessionBrief_Session
}

func (sessionBrief *RsvpStandby_SessionBriefs_SessionBrief) GetEntityData() *types.CommonEntityData {
    sessionBrief.EntityData.YFilter = sessionBrief.YFilter
    sessionBrief.EntityData.YangName = "session-brief"
    sessionBrief.EntityData.BundleName = "cisco_ios_xr"
    sessionBrief.EntityData.ParentYangName = "session-briefs"
    sessionBrief.EntityData.SegmentPath = "session-brief" + types.AddNoKeyToken(sessionBrief)
    sessionBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/" + sessionBrief.EntityData.SegmentPath
    sessionBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionBrief.EntityData.Children = types.NewOrderedMap()
    sessionBrief.EntityData.Children.Append("session", types.YChild{"Session", &sessionBrief.Session})
    sessionBrief.EntityData.Leafs = types.NewOrderedMap()
    sessionBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", sessionBrief.DestinationAddress})
    sessionBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", sessionBrief.DestinationPort})
    sessionBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", sessionBrief.Protocol})
    sessionBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", sessionBrief.ExtendedTunnelId})
    sessionBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", sessionBrief.SessionType})
    sessionBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", sessionBrief.P2mpId})
    sessionBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", sessionBrief.VrfName})
    sessionBrief.EntityData.Leafs.Append("ps-bs", types.YLeaf{"PsBs", sessionBrief.PsBs})
    sessionBrief.EntityData.Leafs.Append("rs-bs", types.YLeaf{"RsBs", sessionBrief.RsBs})
    sessionBrief.EntityData.Leafs.Append("requests", types.YLeaf{"Requests", sessionBrief.Requests})
    sessionBrief.EntityData.Leafs.Append("detail-list-size", types.YLeaf{"DetailListSize", sessionBrief.DetailListSize})

    sessionBrief.EntityData.YListKeys = []string {}

    return &(sessionBrief.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief_Session
// RSVP Session Information
type RsvpStandby_SessionBriefs_SessionBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession
}

func (session *RsvpStandby_SessionBriefs_SessionBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "session-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-briefs/session-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_PsbDetaileds
// Table of detailed info about path state blocks
type RsvpStandby_PsbDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single path state block. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed.
    PsbDetailed []*RsvpStandby_PsbDetaileds_PsbDetailed
}

func (psbDetaileds *RsvpStandby_PsbDetaileds) GetEntityData() *types.CommonEntityData {
    psbDetaileds.EntityData.YFilter = psbDetaileds.YFilter
    psbDetaileds.EntityData.YangName = "psb-detaileds"
    psbDetaileds.EntityData.BundleName = "cisco_ios_xr"
    psbDetaileds.EntityData.ParentYangName = "rsvp-standby"
    psbDetaileds.EntityData.SegmentPath = "psb-detaileds"
    psbDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + psbDetaileds.EntityData.SegmentPath
    psbDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbDetaileds.EntityData.Children = types.NewOrderedMap()
    psbDetaileds.EntityData.Children.Append("psb-detailed", types.YChild{"PsbDetailed", nil})
    for i := range psbDetaileds.PsbDetailed {
        types.SetYListKey(psbDetaileds.PsbDetailed[i], i)
        psbDetaileds.EntityData.Children.Append(types.GetSegmentPath(psbDetaileds.PsbDetailed[i]), types.YChild{"PsbDetailed", psbDetaileds.PsbDetailed[i]})
    }
    psbDetaileds.EntityData.Leafs = types.NewOrderedMap()

    psbDetaileds.EntityData.YListKeys = []string {}

    return &(psbDetaileds.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed
// Detailed info for a single path state block
type RsvpStandby_PsbDetaileds_PsbDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Path Backup Tunnel. The type is string.
    BackupTunnelName interface{}

    // Incoming ERO validity. The type is bool.
    IsInEroValid interface{}

    // Outgoing ERO validity. The type is bool.
    IsOutEroValid interface{}

    // RSVP Session Information.
    Session RsvpStandby_PsbDetaileds_PsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_PsbDetaileds_PsbDetailed_S2lSubLsp

    // RSVP Template.
    Template RsvpStandby_PsbDetaileds_PsbDetailed_Template

    // RSVP Session Attribute.
    SessionAttribute RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec

    // Path Flags.
    PathFlags RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags

    // Path Hop Info.
    Hop RsvpStandby_PsbDetaileds_PsbDetailed_Hop

    // Policy Sources Info.
    PolicySourceInfo RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo

    // RSVP Header Info.
    Header RsvpStandby_PsbDetaileds_PsbDetailed_Header

    // Expiry Time.
    ExpiryTime RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime

    // Policy Flags.
    PolicyFlags RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo

    // DS-TE Class-Type.
    ClassType RsvpStandby_PsbDetaileds_PsbDetailed_ClassType

    // Path Forwarding Contexts. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_Pfc.
    Pfc []*RsvpStandby_PsbDetaileds_PsbDetailed_Pfc

    // Incoming Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_InEro.
    InEro []*RsvpStandby_PsbDetaileds_PsbDetailed_InEro

    // Outgoing Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_OutEro.
    OutEro []*RsvpStandby_PsbDetaileds_PsbDetailed_OutEro
}

func (psbDetailed *RsvpStandby_PsbDetaileds_PsbDetailed) GetEntityData() *types.CommonEntityData {
    psbDetailed.EntityData.YFilter = psbDetailed.YFilter
    psbDetailed.EntityData.YangName = "psb-detailed"
    psbDetailed.EntityData.BundleName = "cisco_ios_xr"
    psbDetailed.EntityData.ParentYangName = "psb-detaileds"
    psbDetailed.EntityData.SegmentPath = "psb-detailed" + types.AddNoKeyToken(psbDetailed)
    psbDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/" + psbDetailed.EntityData.SegmentPath
    psbDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbDetailed.EntityData.Children = types.NewOrderedMap()
    psbDetailed.EntityData.Children.Append("session", types.YChild{"Session", &psbDetailed.Session})
    psbDetailed.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &psbDetailed.S2lSubLsp})
    psbDetailed.EntityData.Children.Append("template", types.YChild{"Template", &psbDetailed.Template})
    psbDetailed.EntityData.Children.Append("session-attribute", types.YChild{"SessionAttribute", &psbDetailed.SessionAttribute})
    psbDetailed.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &psbDetailed.TrafficSpec})
    psbDetailed.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &psbDetailed.GenericTrafficSpec})
    psbDetailed.EntityData.Children.Append("path-flags", types.YChild{"PathFlags", &psbDetailed.PathFlags})
    psbDetailed.EntityData.Children.Append("hop", types.YChild{"Hop", &psbDetailed.Hop})
    psbDetailed.EntityData.Children.Append("policy-source-info", types.YChild{"PolicySourceInfo", &psbDetailed.PolicySourceInfo})
    psbDetailed.EntityData.Children.Append("header", types.YChild{"Header", &psbDetailed.Header})
    psbDetailed.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &psbDetailed.ExpiryTime})
    psbDetailed.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &psbDetailed.PolicyFlags})
    psbDetailed.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &psbDetailed.PolicyQueryFlags})
    psbDetailed.EntityData.Children.Append("label-info", types.YChild{"LabelInfo", &psbDetailed.LabelInfo})
    psbDetailed.EntityData.Children.Append("class-type", types.YChild{"ClassType", &psbDetailed.ClassType})
    psbDetailed.EntityData.Children.Append("pfc", types.YChild{"Pfc", nil})
    for i := range psbDetailed.Pfc {
        types.SetYListKey(psbDetailed.Pfc[i], i)
        psbDetailed.EntityData.Children.Append(types.GetSegmentPath(psbDetailed.Pfc[i]), types.YChild{"Pfc", psbDetailed.Pfc[i]})
    }
    psbDetailed.EntityData.Children.Append("in-ero", types.YChild{"InEro", nil})
    for i := range psbDetailed.InEro {
        types.SetYListKey(psbDetailed.InEro[i], i)
        psbDetailed.EntityData.Children.Append(types.GetSegmentPath(psbDetailed.InEro[i]), types.YChild{"InEro", psbDetailed.InEro[i]})
    }
    psbDetailed.EntityData.Children.Append("out-ero", types.YChild{"OutEro", nil})
    for i := range psbDetailed.OutEro {
        types.SetYListKey(psbDetailed.OutEro[i], i)
        psbDetailed.EntityData.Children.Append(types.GetSegmentPath(psbDetailed.OutEro[i]), types.YChild{"OutEro", psbDetailed.OutEro[i]})
    }
    psbDetailed.EntityData.Leafs = types.NewOrderedMap()
    psbDetailed.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbDetailed.DestinationAddress})
    psbDetailed.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", psbDetailed.DestinationPort})
    psbDetailed.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", psbDetailed.Protocol})
    psbDetailed.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", psbDetailed.ExtendedTunnelId})
    psbDetailed.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", psbDetailed.SessionType})
    psbDetailed.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", psbDetailed.P2mpId})
    psbDetailed.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", psbDetailed.SourceAddress})
    psbDetailed.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", psbDetailed.SourcePort})
    psbDetailed.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", psbDetailed.SubGroupOrigin})
    psbDetailed.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbDetailed.SubGroupId})
    psbDetailed.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", psbDetailed.VrfName})
    psbDetailed.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", psbDetailed.InputInterface})
    psbDetailed.EntityData.Leafs.Append("backup-tunnel-name", types.YLeaf{"BackupTunnelName", psbDetailed.BackupTunnelName})
    psbDetailed.EntityData.Leafs.Append("is-in-ero-valid", types.YLeaf{"IsInEroValid", psbDetailed.IsInEroValid})
    psbDetailed.EntityData.Leafs.Append("is-out-ero-valid", types.YLeaf{"IsOutEroValid", psbDetailed.IsOutEroValid})

    psbDetailed.EntityData.YListKeys = []string {}

    return &(psbDetailed.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Session
// RSVP Session Information
type RsvpStandby_PsbDetaileds_PsbDetailed_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession
}

func (session *RsvpStandby_PsbDetaileds_PsbDetailed_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "psb-detailed"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession
// RSVP Session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_PsbDetaileds_PsbDetailed_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_PsbDetaileds_PsbDetailed_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "psb-detailed"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Template
// RSVP Template
type RsvpStandby_PsbDetaileds_PsbDetailed_Template struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter
}

func (template *RsvpStandby_PsbDetaileds_PsbDetailed_Template) GetEntityData() *types.CommonEntityData {
    template.EntityData.YFilter = template.YFilter
    template.EntityData.YangName = "template"
    template.EntityData.BundleName = "cisco_ios_xr"
    template.EntityData.ParentYangName = "psb-detailed"
    template.EntityData.SegmentPath = "template"
    template.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + template.EntityData.SegmentPath
    template.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    template.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    template.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    template.EntityData.Children = types.NewOrderedMap()
    template.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &template.RsvpFilter})
    template.EntityData.Leafs = types.NewOrderedMap()

    template.EntityData.YListKeys = []string {}

    return &(template.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter
// RSVP Filter
type RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "template"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *RsvpStandby_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/template/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute
// RSVP Session Attribute
type RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute) GetEntityData() *types.CommonEntityData {
    sessionAttribute.EntityData.YFilter = sessionAttribute.YFilter
    sessionAttribute.EntityData.YangName = "session-attribute"
    sessionAttribute.EntityData.BundleName = "cisco_ios_xr"
    sessionAttribute.EntityData.ParentYangName = "psb-detailed"
    sessionAttribute.EntityData.SegmentPath = "session-attribute"
    sessionAttribute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + sessionAttribute.EntityData.SegmentPath
    sessionAttribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionAttribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionAttribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionAttribute.EntityData.Children = types.NewOrderedMap()
    sessionAttribute.EntityData.Children.Append("sess-attribute-flags", types.YChild{"SessAttributeFlags", &sessionAttribute.SessAttributeFlags})
    sessionAttribute.EntityData.Leafs = types.NewOrderedMap()
    sessionAttribute.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", sessionAttribute.SetupPriority})
    sessionAttribute.EntityData.Leafs.Append("reservation-priority", types.YLeaf{"ReservationPriority", sessionAttribute.ReservationPriority})

    sessionAttribute.EntityData.YListKeys = []string {}

    return &(sessionAttribute.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
// Session Attributes
type RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *RsvpStandby_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetEntityData() *types.CommonEntityData {
    sessAttributeFlags.EntityData.YFilter = sessAttributeFlags.YFilter
    sessAttributeFlags.EntityData.YangName = "sess-attribute-flags"
    sessAttributeFlags.EntityData.BundleName = "cisco_ios_xr"
    sessAttributeFlags.EntityData.ParentYangName = "session-attribute"
    sessAttributeFlags.EntityData.SegmentPath = "sess-attribute-flags"
    sessAttributeFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/session-attribute/" + sessAttributeFlags.EntityData.SegmentPath
    sessAttributeFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessAttributeFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessAttributeFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessAttributeFlags.EntityData.Children = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs.Append("is-local-protect", types.YLeaf{"IsLocalProtect", sessAttributeFlags.IsLocalProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-node-protect", types.YLeaf{"IsNodeProtect", sessAttributeFlags.IsNodeProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-bandwidth-protect", types.YLeaf{"IsBandwidthProtect", sessAttributeFlags.IsBandwidthProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-record-labels", types.YLeaf{"IsRecordLabels", sessAttributeFlags.IsRecordLabels})
    sessAttributeFlags.EntityData.Leafs.Append("is-shared-explicit-requested", types.YLeaf{"IsSharedExplicitRequested", sessAttributeFlags.IsSharedExplicitRequested})

    sessAttributeFlags.EntityData.YListKeys = []string {}

    return &(sessAttributeFlags.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec
// RSVP Traffic Spec Info
type RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "psb-detailed"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "psb-detailed"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags
// Path Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non-RSVP Hop Upstream. The type is bool.
    IsNonRsvpHopUpstream interface{}

    // Local Sender. The type is bool.
    IsLocalSender interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Bidirectional. The type is bool.
    IsBidirectional interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (pathFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PathFlags) GetEntityData() *types.CommonEntityData {
    pathFlags.EntityData.YFilter = pathFlags.YFilter
    pathFlags.EntityData.YangName = "path-flags"
    pathFlags.EntityData.BundleName = "cisco_ios_xr"
    pathFlags.EntityData.ParentYangName = "psb-detailed"
    pathFlags.EntityData.SegmentPath = "path-flags"
    pathFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + pathFlags.EntityData.SegmentPath
    pathFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathFlags.EntityData.Children = types.NewOrderedMap()
    pathFlags.EntityData.Leafs = types.NewOrderedMap()
    pathFlags.EntityData.Leafs.Append("is-non-rsvp-hop-upstream", types.YLeaf{"IsNonRsvpHopUpstream", pathFlags.IsNonRsvpHopUpstream})
    pathFlags.EntityData.Leafs.Append("is-local-sender", types.YLeaf{"IsLocalSender", pathFlags.IsLocalSender})
    pathFlags.EntityData.Leafs.Append("is-message-id-valid", types.YLeaf{"IsMessageIdValid", pathFlags.IsMessageIdValid})
    pathFlags.EntityData.Leafs.Append("is-local-repair", types.YLeaf{"IsLocalRepair", pathFlags.IsLocalRepair})
    pathFlags.EntityData.Leafs.Append("is-bidirectional", types.YLeaf{"IsBidirectional", pathFlags.IsBidirectional})
    pathFlags.EntityData.Leafs.Append("is-lockout", types.YLeaf{"IsLockout", pathFlags.IsLockout})

    pathFlags.EntityData.YListKeys = []string {}

    return &(pathFlags.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Hop
// Path Hop Info
type RsvpStandby_PsbDetaileds_PsbDetailed_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *RsvpStandby_PsbDetaileds_PsbDetailed_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "psb-detailed"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo
// Policy Sources Info
type RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySourceInfo *RsvpStandby_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetEntityData() *types.CommonEntityData {
    policySourceInfo.EntityData.YFilter = policySourceInfo.YFilter
    policySourceInfo.EntityData.YangName = "policy-source-info"
    policySourceInfo.EntityData.BundleName = "cisco_ios_xr"
    policySourceInfo.EntityData.ParentYangName = "psb-detailed"
    policySourceInfo.EntityData.SegmentPath = "policy-source-info"
    policySourceInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + policySourceInfo.EntityData.SegmentPath
    policySourceInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policySourceInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policySourceInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policySourceInfo.EntityData.Children = types.NewOrderedMap()
    policySourceInfo.EntityData.Leafs = types.NewOrderedMap()
    policySourceInfo.EntityData.Leafs.Append("is-te-link", types.YLeaf{"IsTeLink", policySourceInfo.IsTeLink})
    policySourceInfo.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", policySourceInfo.IsLocal})
    policySourceInfo.EntityData.Leafs.Append("is-cops", types.YLeaf{"IsCops", policySourceInfo.IsCops})
    policySourceInfo.EntityData.Leafs.Append("is-default", types.YLeaf{"IsDefault", policySourceInfo.IsDefault})
    policySourceInfo.EntityData.Leafs.Append("is-cable", types.YLeaf{"IsCable", policySourceInfo.IsCable})

    policySourceInfo.EntityData.YListKeys = []string {}

    return &(policySourceInfo.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Header
// RSVP Header Info
type RsvpStandby_PsbDetaileds_PsbDetailed_Header struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (header *RsvpStandby_PsbDetaileds_PsbDetailed_Header) GetEntityData() *types.CommonEntityData {
    header.EntityData.YFilter = header.YFilter
    header.EntityData.YangName = "header"
    header.EntityData.BundleName = "cisco_ios_xr"
    header.EntityData.ParentYangName = "psb-detailed"
    header.EntityData.SegmentPath = "header"
    header.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + header.EntityData.SegmentPath
    header.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    header.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    header.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    header.EntityData.Children = types.NewOrderedMap()
    header.EntityData.Leafs = types.NewOrderedMap()
    header.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", header.RsvpVersion})
    header.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", header.RsvpHeaderFlags})
    header.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", header.RsvpTtl})
    header.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", header.RsvpMessageType})
    header.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", header.IpTos})
    header.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", header.IpTtl})
    header.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", header.IpSourceAddress})

    header.EntityData.YListKeys = []string {}

    return &(header.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime
// Expiry Time
type RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_PsbDetaileds_PsbDetailed_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "psb-detailed"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags
// Policy Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "psb-detailed"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags
// Policy Query Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "psb-detailed"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo
// Label Information
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo) GetEntityData() *types.CommonEntityData {
    labelInfo.EntityData.YFilter = labelInfo.YFilter
    labelInfo.EntityData.YangName = "label-info"
    labelInfo.EntityData.BundleName = "cisco_ios_xr"
    labelInfo.EntityData.ParentYangName = "psb-detailed"
    labelInfo.EntityData.SegmentPath = "label-info"
    labelInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + labelInfo.EntityData.SegmentPath
    labelInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInfo.EntityData.Children = types.NewOrderedMap()
    labelInfo.EntityData.Children.Append("generic-local-downstream-label", types.YChild{"GenericLocalDownstreamLabel", &labelInfo.GenericLocalDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-downstream-label", types.YChild{"GenericOutgoingDownstreamLabel", &labelInfo.GenericOutgoingDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-merge-point-label", types.YChild{"GenericMergePointLabel", &labelInfo.GenericMergePointLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-upstream-label", types.YChild{"GenericOutgoingUpstreamLabel", &labelInfo.GenericOutgoingUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-local-upstream-label", types.YChild{"GenericLocalUpstreamLabel", &labelInfo.GenericLocalUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-recovery-label", types.YChild{"GenericRecoveryLabel", &labelInfo.GenericRecoveryLabel})
    labelInfo.EntityData.Leafs = types.NewOrderedMap()
    labelInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", labelInfo.IsValid})
    labelInfo.EntityData.Leafs.Append("local-downstream-label", types.YLeaf{"LocalDownstreamLabel", labelInfo.LocalDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-downstream-label", types.YLeaf{"OutgoingDownstreamLabel", labelInfo.OutgoingDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", labelInfo.MergePointLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-upstream-label", types.YLeaf{"OutgoingUpstreamLabel", labelInfo.OutgoingUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("local-upstream-label", types.YLeaf{"LocalUpstreamLabel", labelInfo.LocalUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("recovery-label", types.YLeaf{"RecoveryLabel", labelInfo.RecoveryLabel})
    labelInfo.EntityData.Leafs.Append("lsp-wrap-label", types.YLeaf{"LspWrapLabel", labelInfo.LspWrapLabel})

    labelInfo.EntityData.YListKeys = []string {}

    return &(labelInfo.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalDownstreamLabel.EntityData.YFilter = genericLocalDownstreamLabel.YFilter
    genericLocalDownstreamLabel.EntityData.YangName = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalDownstreamLabel.EntityData.SegmentPath = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" + genericLocalDownstreamLabel.EntityData.SegmentPath
    genericLocalDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalDownstreamLabel.GeneralizedLabel})
    genericLocalDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalDownstreamLabel.GenericLabelType})

    genericLocalDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalDownstreamLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingDownstreamLabel.EntityData.YFilter = genericOutgoingDownstreamLabel.YFilter
    genericOutgoingDownstreamLabel.EntityData.YangName = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingDownstreamLabel.EntityData.SegmentPath = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" + genericOutgoingDownstreamLabel.EntityData.SegmentPath
    genericOutgoingDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingDownstreamLabel.GeneralizedLabel})
    genericOutgoingDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingDownstreamLabel.GenericLabelType})

    genericOutgoingDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingDownstreamLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetEntityData() *types.CommonEntityData {
    genericMergePointLabel.EntityData.YFilter = genericMergePointLabel.YFilter
    genericMergePointLabel.EntityData.YangName = "generic-merge-point-label"
    genericMergePointLabel.EntityData.BundleName = "cisco_ios_xr"
    genericMergePointLabel.EntityData.ParentYangName = "label-info"
    genericMergePointLabel.EntityData.SegmentPath = "generic-merge-point-label"
    genericMergePointLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" + genericMergePointLabel.EntityData.SegmentPath
    genericMergePointLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericMergePointLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericMergePointLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericMergePointLabel.EntityData.Children = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericMergePointLabel.GeneralizedLabel})
    genericMergePointLabel.EntityData.Leafs = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericMergePointLabel.GenericLabelType})

    genericMergePointLabel.EntityData.YListKeys = []string {}

    return &(genericMergePointLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-merge-point-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingUpstreamLabel.EntityData.YFilter = genericOutgoingUpstreamLabel.YFilter
    genericOutgoingUpstreamLabel.EntityData.YangName = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingUpstreamLabel.EntityData.SegmentPath = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" + genericOutgoingUpstreamLabel.EntityData.SegmentPath
    genericOutgoingUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingUpstreamLabel.GeneralizedLabel})
    genericOutgoingUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingUpstreamLabel.GenericLabelType})

    genericOutgoingUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingUpstreamLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalUpstreamLabel.EntityData.YFilter = genericLocalUpstreamLabel.YFilter
    genericLocalUpstreamLabel.EntityData.YangName = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalUpstreamLabel.EntityData.SegmentPath = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" + genericLocalUpstreamLabel.EntityData.SegmentPath
    genericLocalUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalUpstreamLabel.GeneralizedLabel})
    genericLocalUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalUpstreamLabel.GenericLabelType})

    genericLocalUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalUpstreamLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetEntityData() *types.CommonEntityData {
    genericRecoveryLabel.EntityData.YFilter = genericRecoveryLabel.YFilter
    genericRecoveryLabel.EntityData.YangName = "generic-recovery-label"
    genericRecoveryLabel.EntityData.BundleName = "cisco_ios_xr"
    genericRecoveryLabel.EntityData.ParentYangName = "label-info"
    genericRecoveryLabel.EntityData.SegmentPath = "generic-recovery-label"
    genericRecoveryLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/" + genericRecoveryLabel.EntityData.SegmentPath
    genericRecoveryLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRecoveryLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRecoveryLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRecoveryLabel.EntityData.Children = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericRecoveryLabel.GeneralizedLabel})
    genericRecoveryLabel.EntityData.Leafs = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericRecoveryLabel.GenericLabelType})

    genericRecoveryLabel.EntityData.YListKeys = []string {}

    return &(genericRecoveryLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-recovery-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-recovery-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/label-info/generic-recovery-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_ClassType
// DS-TE Class-Type
type RsvpStandby_PsbDetaileds_PsbDetailed_ClassType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the Class-Type information valid. The type is bool.
    IsClassTypeInfoValid interface{}

    // DS-TE Class-Type. The type is interface{} with range: 0..255.
    ClassType interface{}
}

func (classType *RsvpStandby_PsbDetaileds_PsbDetailed_ClassType) GetEntityData() *types.CommonEntityData {
    classType.EntityData.YFilter = classType.YFilter
    classType.EntityData.YangName = "class-type"
    classType.EntityData.BundleName = "cisco_ios_xr"
    classType.EntityData.ParentYangName = "psb-detailed"
    classType.EntityData.SegmentPath = "class-type"
    classType.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + classType.EntityData.SegmentPath
    classType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    classType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    classType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    classType.EntityData.Children = types.NewOrderedMap()
    classType.EntityData.Leafs = types.NewOrderedMap()
    classType.EntityData.Leafs.Append("is-class-type-info-valid", types.YLeaf{"IsClassTypeInfoValid", classType.IsClassTypeInfoValid})
    classType.EntityData.Leafs.Append("class-type", types.YLeaf{"ClassType", classType.ClassType})

    classType.EntityData.YListKeys = []string {}

    return &(classType.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Pfc
// Path Forwarding Contexts
type RsvpStandby_PsbDetaileds_PsbDetailed_Pfc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Output interface. The type is string.
    OutputInterface interface{}

    // Policy Flags.
    PolicyFlags RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
}

func (pfc *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc) GetEntityData() *types.CommonEntityData {
    pfc.EntityData.YFilter = pfc.YFilter
    pfc.EntityData.YangName = "pfc"
    pfc.EntityData.BundleName = "cisco_ios_xr"
    pfc.EntityData.ParentYangName = "psb-detailed"
    pfc.EntityData.SegmentPath = "pfc" + types.AddNoKeyToken(pfc)
    pfc.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + pfc.EntityData.SegmentPath
    pfc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfc.EntityData.Children = types.NewOrderedMap()
    pfc.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &pfc.PolicyFlags})
    pfc.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &pfc.PolicyQueryFlags})
    pfc.EntityData.Leafs = types.NewOrderedMap()
    pfc.EntityData.Leafs.Append("output-interface", types.YLeaf{"OutputInterface", pfc.OutputInterface})

    pfc.EntityData.YListKeys = []string {}

    return &(pfc.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags
// Policy Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "pfc"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/pfc/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
// Policy Query Flags
type RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "pfc"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/pfc/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_InEro
// Incoming Explicit Route Sub Objects
type RsvpStandby_PsbDetaileds_PsbDetailed_InEro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
}

func (inEro *RsvpStandby_PsbDetaileds_PsbDetailed_InEro) GetEntityData() *types.CommonEntityData {
    inEro.EntityData.YFilter = inEro.YFilter
    inEro.EntityData.YangName = "in-ero"
    inEro.EntityData.BundleName = "cisco_ios_xr"
    inEro.EntityData.ParentYangName = "psb-detailed"
    inEro.EntityData.SegmentPath = "in-ero" + types.AddNoKeyToken(inEro)
    inEro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + inEro.EntityData.SegmentPath
    inEro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inEro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inEro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inEro.EntityData.Children = types.NewOrderedMap()
    inEro.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &inEro.Ipv4eroSubObject})
    inEro.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &inEro.UnnumberedEroSubObject})
    inEro.EntityData.Leafs = types.NewOrderedMap()
    inEro.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", inEro.EroType})

    inEro.EntityData.YListKeys = []string {}

    return &(inEro.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "in-ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/in-ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "in-ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/in-ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_OutEro
// Outgoing Explicit Route Sub Objects
type RsvpStandby_PsbDetaileds_PsbDetailed_OutEro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
}

func (outEro *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro) GetEntityData() *types.CommonEntityData {
    outEro.EntityData.YFilter = outEro.YFilter
    outEro.EntityData.YangName = "out-ero"
    outEro.EntityData.BundleName = "cisco_ios_xr"
    outEro.EntityData.ParentYangName = "psb-detailed"
    outEro.EntityData.SegmentPath = "out-ero" + types.AddNoKeyToken(outEro)
    outEro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/" + outEro.EntityData.SegmentPath
    outEro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outEro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outEro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outEro.EntityData.Children = types.NewOrderedMap()
    outEro.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &outEro.Ipv4eroSubObject})
    outEro.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &outEro.UnnumberedEroSubObject})
    outEro.EntityData.Leafs = types.NewOrderedMap()
    outEro.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", outEro.EroType})

    outEro.EntityData.YListKeys = []string {}

    return &(outEro.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "out-ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/out-ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "out-ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-detaileds/psb-detailed/out-ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// RsvpStandby_ControllerDetaileds
// Table of detailed info about RSVP-enabled
// controllers
type RsvpStandby_ControllerDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled controller. The type is slice of
    // RsvpStandby_ControllerDetaileds_ControllerDetailed.
    ControllerDetailed []*RsvpStandby_ControllerDetaileds_ControllerDetailed
}

func (controllerDetaileds *RsvpStandby_ControllerDetaileds) GetEntityData() *types.CommonEntityData {
    controllerDetaileds.EntityData.YFilter = controllerDetaileds.YFilter
    controllerDetaileds.EntityData.YangName = "controller-detaileds"
    controllerDetaileds.EntityData.BundleName = "cisco_ios_xr"
    controllerDetaileds.EntityData.ParentYangName = "rsvp-standby"
    controllerDetaileds.EntityData.SegmentPath = "controller-detaileds"
    controllerDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + controllerDetaileds.EntityData.SegmentPath
    controllerDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerDetaileds.EntityData.Children = types.NewOrderedMap()
    controllerDetaileds.EntityData.Children.Append("controller-detailed", types.YChild{"ControllerDetailed", nil})
    for i := range controllerDetaileds.ControllerDetailed {
        controllerDetaileds.EntityData.Children.Append(types.GetSegmentPath(controllerDetaileds.ControllerDetailed[i]), types.YChild{"ControllerDetailed", controllerDetaileds.ControllerDetailed[i]})
    }
    controllerDetaileds.EntityData.Leafs = types.NewOrderedMap()

    controllerDetaileds.EntityData.YListKeys = []string {}

    return &(controllerDetaileds.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed
// Detailed info about an RSVP-enabled controller
type RsvpStandby_ControllerDetaileds_ControllerDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Controller Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation

    // Interface flags.
    Flags RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags

    // Neighbor array. The type is slice of
    // RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray.
    NeighborArray []*RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray
}

func (controllerDetailed *RsvpStandby_ControllerDetaileds_ControllerDetailed) GetEntityData() *types.CommonEntityData {
    controllerDetailed.EntityData.YFilter = controllerDetailed.YFilter
    controllerDetailed.EntityData.YangName = "controller-detailed"
    controllerDetailed.EntityData.BundleName = "cisco_ios_xr"
    controllerDetailed.EntityData.ParentYangName = "controller-detaileds"
    controllerDetailed.EntityData.SegmentPath = "controller-detailed" + types.AddKeyToken(controllerDetailed.ControllerName, "controller-name")
    controllerDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/" + controllerDetailed.EntityData.SegmentPath
    controllerDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerDetailed.EntityData.Children = types.NewOrderedMap()
    controllerDetailed.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &controllerDetailed.BandwidthInformation})
    controllerDetailed.EntityData.Children.Append("flags", types.YChild{"Flags", &controllerDetailed.Flags})
    controllerDetailed.EntityData.Children.Append("neighbor-array", types.YChild{"NeighborArray", nil})
    for i := range controllerDetailed.NeighborArray {
        types.SetYListKey(controllerDetailed.NeighborArray[i], i)
        controllerDetailed.EntityData.Children.Append(types.GetSegmentPath(controllerDetailed.NeighborArray[i]), types.YChild{"NeighborArray", controllerDetailed.NeighborArray[i]})
    }
    controllerDetailed.EntityData.Leafs = types.NewOrderedMap()
    controllerDetailed.EntityData.Leafs.Append("controller-name", types.YLeaf{"ControllerName", controllerDetailed.ControllerName})
    controllerDetailed.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", controllerDetailed.InterfaceNameXr})
    controllerDetailed.EntityData.Leafs.Append("signalling-ip-tos", types.YLeaf{"SignallingIpTos", controllerDetailed.SignallingIpTos})
    controllerDetailed.EntityData.Leafs.Append("integrity-send-password", types.YLeaf{"IntegritySendPassword", controllerDetailed.IntegritySendPassword})
    controllerDetailed.EntityData.Leafs.Append("integrity-receive-password", types.YLeaf{"IntegrityReceivePassword", controllerDetailed.IntegrityReceivePassword})
    controllerDetailed.EntityData.Leafs.Append("integrity-receive-password-optional", types.YLeaf{"IntegrityReceivePasswordOptional", controllerDetailed.IntegrityReceivePasswordOptional})
    controllerDetailed.EntityData.Leafs.Append("refresh-timer-state", types.YLeaf{"RefreshTimerState", controllerDetailed.RefreshTimerState})
    controllerDetailed.EntityData.Leafs.Append("summary-refresh-timer-state", types.YLeaf{"SummaryRefreshTimerState", controllerDetailed.SummaryRefreshTimerState})
    controllerDetailed.EntityData.Leafs.Append("refresh-interval", types.YLeaf{"RefreshInterval", controllerDetailed.RefreshInterval})
    controllerDetailed.EntityData.Leafs.Append("out-of-band-refresh-interval", types.YLeaf{"OutOfBandRefreshInterval", controllerDetailed.OutOfBandRefreshInterval})
    controllerDetailed.EntityData.Leafs.Append("summary-refresh-max-size", types.YLeaf{"SummaryRefreshMaxSize", controllerDetailed.SummaryRefreshMaxSize})
    controllerDetailed.EntityData.Leafs.Append("bundle-message-max-size", types.YLeaf{"BundleMessageMaxSize", controllerDetailed.BundleMessageMaxSize})
    controllerDetailed.EntityData.Leafs.Append("expiry-timer-state", types.YLeaf{"ExpiryTimerState", controllerDetailed.ExpiryTimerState})
    controllerDetailed.EntityData.Leafs.Append("expiry-states", types.YLeaf{"ExpiryStates", controllerDetailed.ExpiryStates})
    controllerDetailed.EntityData.Leafs.Append("expiry-interval", types.YLeaf{"ExpiryInterval", controllerDetailed.ExpiryInterval})
    controllerDetailed.EntityData.Leafs.Append("expiry-drops-tolerated", types.YLeaf{"ExpiryDropsTolerated", controllerDetailed.ExpiryDropsTolerated})
    controllerDetailed.EntityData.Leafs.Append("out-of-band-expiry-drops-tolerated", types.YLeaf{"OutOfBandExpiryDropsTolerated", controllerDetailed.OutOfBandExpiryDropsTolerated})
    controllerDetailed.EntityData.Leafs.Append("ack-hold-time", types.YLeaf{"AckHoldTime", controllerDetailed.AckHoldTime})
    controllerDetailed.EntityData.Leafs.Append("ack-max-size", types.YLeaf{"AckMaxSize", controllerDetailed.AckMaxSize})
    controllerDetailed.EntityData.Leafs.Append("retransmit-time", types.YLeaf{"RetransmitTime", controllerDetailed.RetransmitTime})
    controllerDetailed.EntityData.Leafs.Append("pacing-interval", types.YLeaf{"PacingInterval", controllerDetailed.PacingInterval})
    controllerDetailed.EntityData.Leafs.Append("pacing-message-rate", types.YLeaf{"PacingMessageRate", controllerDetailed.PacingMessageRate})
    controllerDetailed.EntityData.Leafs.Append("pacing-timer-state", types.YLeaf{"PacingTimerState", controllerDetailed.PacingTimerState})
    controllerDetailed.EntityData.Leafs.Append("pacing-messages", types.YLeaf{"PacingMessages", controllerDetailed.PacingMessages})

    controllerDetailed.EntityData.YListKeys = []string {"ControllerName"}

    return &(controllerDetailed.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "controller-detailed"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags
// Interface flags
type RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *RsvpStandby_ControllerDetaileds_ControllerDetailed_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "controller-detailed"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-mpls-enabled", types.YLeaf{"IsMplsEnabled", flags.IsMplsEnabled})
    flags.EntityData.Leafs.Append("is-refresh-reduction-enabled", types.YLeaf{"IsRefreshReductionEnabled", flags.IsRefreshReductionEnabled})
    flags.EntityData.Leafs.Append("is-pacing-enabled", types.YLeaf{"IsPacingEnabled", flags.IsPacingEnabled})
    flags.EntityData.Leafs.Append("is-refresh-enabled", types.YLeaf{"IsRefreshEnabled", flags.IsRefreshEnabled})
    flags.EntityData.Leafs.Append("is-s-refresh-enabled", types.YLeaf{"IsSRefreshEnabled", flags.IsSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-interface-down", types.YLeaf{"IsInterfaceDown", flags.IsInterfaceDown})
    flags.EntityData.Leafs.Append("is-interface-created", types.YLeaf{"IsInterfaceCreated", flags.IsInterfaceCreated})
    flags.EntityData.Leafs.Append("is-rel-s-refresh-enabled", types.YLeaf{"IsRelSRefreshEnabled", flags.IsRelSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-backup-tunnel", types.YLeaf{"IsBackupTunnel", flags.IsBackupTunnel})
    flags.EntityData.Leafs.Append("is-rsvp-configured", types.YLeaf{"IsRsvpConfigured", flags.IsRsvpConfigured})
    flags.EntityData.Leafs.Append("is-non-default-vrf", types.YLeaf{"IsNonDefaultVrf", flags.IsNonDefaultVrf})
    flags.EntityData.Leafs.Append("is-message-bundling-enabled", types.YLeaf{"IsMessageBundlingEnabled", flags.IsMessageBundlingEnabled})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray
// Neighbor array
type RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []*RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray) GetEntityData() *types.CommonEntityData {
    neighborArray.EntityData.YFilter = neighborArray.YFilter
    neighborArray.EntityData.YangName = "neighbor-array"
    neighborArray.EntityData.BundleName = "cisco_ios_xr"
    neighborArray.EntityData.ParentYangName = "controller-detailed"
    neighborArray.EntityData.SegmentPath = "neighbor-array" + types.AddNoKeyToken(neighborArray)
    neighborArray.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/" + neighborArray.EntityData.SegmentPath
    neighborArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborArray.EntityData.Children = types.NewOrderedMap()
    neighborArray.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &neighborArray.ExpiryTime})
    neighborArray.EntityData.Children.Append("neighbor-message-id", types.YChild{"NeighborMessageId", nil})
    for i := range neighborArray.NeighborMessageId {
        types.SetYListKey(neighborArray.NeighborMessageId[i], i)
        neighborArray.EntityData.Children.Append(types.GetSegmentPath(neighborArray.NeighborMessageId[i]), types.YChild{"NeighborMessageId", neighborArray.NeighborMessageId[i]})
    }
    neighborArray.EntityData.Leafs = types.NewOrderedMap()
    neighborArray.EntityData.Leafs.Append("is-neighbor-refresh-reduction-capable", types.YLeaf{"IsNeighborRefreshReductionCapable", neighborArray.IsNeighborRefreshReductionCapable})
    neighborArray.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborArray.NeighborAddress})
    neighborArray.EntityData.Leafs.Append("message-ids", types.YLeaf{"MessageIds", neighborArray.MessageIds})
    neighborArray.EntityData.Leafs.Append("outgoing-states", types.YLeaf{"OutgoingStates", neighborArray.OutgoingStates})

    neighborArray.EntityData.YListKeys = []string {}

    return &(neighborArray.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime
// Expiry time
type RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "neighbor-array"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/neighbor-array/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *RsvpStandby_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetEntityData() *types.CommonEntityData {
    neighborMessageId.EntityData.YFilter = neighborMessageId.YFilter
    neighborMessageId.EntityData.YangName = "neighbor-message-id"
    neighborMessageId.EntityData.BundleName = "cisco_ios_xr"
    neighborMessageId.EntityData.ParentYangName = "neighbor-array"
    neighborMessageId.EntityData.SegmentPath = "neighbor-message-id" + types.AddNoKeyToken(neighborMessageId)
    neighborMessageId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-detaileds/controller-detailed/neighbor-array/" + neighborMessageId.EntityData.SegmentPath
    neighborMessageId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborMessageId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborMessageId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborMessageId.EntityData.Children = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs.Append("message-id", types.YLeaf{"MessageId", neighborMessageId.MessageId})

    neighborMessageId.EntityData.YListKeys = []string {}

    return &(neighborMessageId.EntityData)
}

// RsvpStandby_FrrSummary
// Fast Re-Route Summary State Information
type RsvpStandby_FrrSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path state counters.
    PathStates RsvpStandby_FrrSummary_PathStates

    // Rerservation state counters.
    ReservationStates RsvpStandby_FrrSummary_ReservationStates
}

func (frrSummary *RsvpStandby_FrrSummary) GetEntityData() *types.CommonEntityData {
    frrSummary.EntityData.YFilter = frrSummary.YFilter
    frrSummary.EntityData.YangName = "frr-summary"
    frrSummary.EntityData.BundleName = "cisco_ios_xr"
    frrSummary.EntityData.ParentYangName = "rsvp-standby"
    frrSummary.EntityData.SegmentPath = "frr-summary"
    frrSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + frrSummary.EntityData.SegmentPath
    frrSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrSummary.EntityData.Children = types.NewOrderedMap()
    frrSummary.EntityData.Children.Append("path-states", types.YChild{"PathStates", &frrSummary.PathStates})
    frrSummary.EntityData.Children.Append("reservation-states", types.YChild{"ReservationStates", &frrSummary.ReservationStates})
    frrSummary.EntityData.Leafs = types.NewOrderedMap()

    frrSummary.EntityData.YListKeys = []string {}

    return &(frrSummary.EntityData)
}

// RsvpStandby_FrrSummary_PathStates
// Path state counters
type RsvpStandby_FrrSummary_PathStates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (pathStates *RsvpStandby_FrrSummary_PathStates) GetEntityData() *types.CommonEntityData {
    pathStates.EntityData.YFilter = pathStates.YFilter
    pathStates.EntityData.YangName = "path-states"
    pathStates.EntityData.BundleName = "cisco_ios_xr"
    pathStates.EntityData.ParentYangName = "frr-summary"
    pathStates.EntityData.SegmentPath = "path-states"
    pathStates.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frr-summary/" + pathStates.EntityData.SegmentPath
    pathStates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathStates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathStates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathStates.EntityData.Children = types.NewOrderedMap()
    pathStates.EntityData.Leafs = types.NewOrderedMap()
    pathStates.EntityData.Leafs.Append("total", types.YLeaf{"Total", pathStates.Total})
    pathStates.EntityData.Leafs.Append("active-instances", types.YLeaf{"ActiveInstances", pathStates.ActiveInstances})
    pathStates.EntityData.Leafs.Append("ready-instances", types.YLeaf{"ReadyInstances", pathStates.ReadyInstances})
    pathStates.EntityData.Leafs.Append("active-wait-instances", types.YLeaf{"ActiveWaitInstances", pathStates.ActiveWaitInstances})

    pathStates.EntityData.YListKeys = []string {}

    return &(pathStates.EntityData)
}

// RsvpStandby_FrrSummary_ReservationStates
// Rerservation state counters
type RsvpStandby_FrrSummary_ReservationStates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (reservationStates *RsvpStandby_FrrSummary_ReservationStates) GetEntityData() *types.CommonEntityData {
    reservationStates.EntityData.YFilter = reservationStates.YFilter
    reservationStates.EntityData.YangName = "reservation-states"
    reservationStates.EntityData.BundleName = "cisco_ios_xr"
    reservationStates.EntityData.ParentYangName = "frr-summary"
    reservationStates.EntityData.SegmentPath = "reservation-states"
    reservationStates.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frr-summary/" + reservationStates.EntityData.SegmentPath
    reservationStates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reservationStates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reservationStates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reservationStates.EntityData.Children = types.NewOrderedMap()
    reservationStates.EntityData.Leafs = types.NewOrderedMap()
    reservationStates.EntityData.Leafs.Append("total", types.YLeaf{"Total", reservationStates.Total})
    reservationStates.EntityData.Leafs.Append("active-instances", types.YLeaf{"ActiveInstances", reservationStates.ActiveInstances})
    reservationStates.EntityData.Leafs.Append("ready-instances", types.YLeaf{"ReadyInstances", reservationStates.ReadyInstances})
    reservationStates.EntityData.Leafs.Append("active-wait-instances", types.YLeaf{"ActiveWaitInstances", reservationStates.ActiveWaitInstances})

    reservationStates.EntityData.YListKeys = []string {}

    return &(reservationStates.EntityData)
}

// RsvpStandby_RsbDetaileds
// Table of detailed info about reservation state
// blocks
type RsvpStandby_RsbDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single reservation state block. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed.
    RsbDetailed []*RsvpStandby_RsbDetaileds_RsbDetailed
}

func (rsbDetaileds *RsvpStandby_RsbDetaileds) GetEntityData() *types.CommonEntityData {
    rsbDetaileds.EntityData.YFilter = rsbDetaileds.YFilter
    rsbDetaileds.EntityData.YangName = "rsb-detaileds"
    rsbDetaileds.EntityData.BundleName = "cisco_ios_xr"
    rsbDetaileds.EntityData.ParentYangName = "rsvp-standby"
    rsbDetaileds.EntityData.SegmentPath = "rsb-detaileds"
    rsbDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + rsbDetaileds.EntityData.SegmentPath
    rsbDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbDetaileds.EntityData.Children = types.NewOrderedMap()
    rsbDetaileds.EntityData.Children.Append("rsb-detailed", types.YChild{"RsbDetailed", nil})
    for i := range rsbDetaileds.RsbDetailed {
        types.SetYListKey(rsbDetaileds.RsbDetailed[i], i)
        rsbDetaileds.EntityData.Children.Append(types.GetSegmentPath(rsbDetaileds.RsbDetailed[i]), types.YChild{"RsbDetailed", rsbDetaileds.RsbDetailed[i]})
    }
    rsbDetaileds.EntityData.Leafs = types.NewOrderedMap()

    rsbDetaileds.EntityData.YListKeys = []string {}

    return &(rsbDetaileds.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed
// Detailed info for a single reservation state
// block
type RsvpStandby_RsbDetaileds_RsbDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Input Adjusted Interface. The type is string.
    InputAdjustedInterface interface{}

    // Input Physical Interface. The type is string.
    InputPhysicalInterface interface{}

    // Flow Spec Information.
    FlowSpec RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec

    // RSVP Session Information.
    Session RsvpStandby_RsbDetaileds_RsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_RsbDetaileds_RsbDetailed_S2lSubLsp

    // RSVP Style.
    Style RsvpStandby_RsbDetaileds_RsbDetailed_Style

    // RSVP Filter.
    Filter RsvpStandby_RsbDetaileds_RsbDetailed_Filter

    // Reservation State Block Flags.
    RsbFlags RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags

    // Hop Infomation.
    Hop RsvpStandby_RsbDetaileds_RsbDetailed_Hop

    // RSVP Policy Sources.
    PolicySources RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources

    // RSVP Header Information.
    Header RsvpStandby_RsbDetaileds_RsbDetailed_Header

    // RSVP Policy Flags.
    PolicyFlags RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags

    // Expiry Time.
    ExpiryTime RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime

    // RSVP Query Flags.
    PolicyQueryFlags RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo
}

func (rsbDetailed *RsvpStandby_RsbDetaileds_RsbDetailed) GetEntityData() *types.CommonEntityData {
    rsbDetailed.EntityData.YFilter = rsbDetailed.YFilter
    rsbDetailed.EntityData.YangName = "rsb-detailed"
    rsbDetailed.EntityData.BundleName = "cisco_ios_xr"
    rsbDetailed.EntityData.ParentYangName = "rsb-detaileds"
    rsbDetailed.EntityData.SegmentPath = "rsb-detailed" + types.AddNoKeyToken(rsbDetailed)
    rsbDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/" + rsbDetailed.EntityData.SegmentPath
    rsbDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbDetailed.EntityData.Children = types.NewOrderedMap()
    rsbDetailed.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rsbDetailed.FlowSpec})
    rsbDetailed.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rsbDetailed.GenericFlowSpec})
    rsbDetailed.EntityData.Children.Append("session", types.YChild{"Session", &rsbDetailed.Session})
    rsbDetailed.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &rsbDetailed.S2lSubLsp})
    rsbDetailed.EntityData.Children.Append("style", types.YChild{"Style", &rsbDetailed.Style})
    rsbDetailed.EntityData.Children.Append("filter", types.YChild{"Filter", &rsbDetailed.Filter})
    rsbDetailed.EntityData.Children.Append("rsb-flags", types.YChild{"RsbFlags", &rsbDetailed.RsbFlags})
    rsbDetailed.EntityData.Children.Append("hop", types.YChild{"Hop", &rsbDetailed.Hop})
    rsbDetailed.EntityData.Children.Append("policy-sources", types.YChild{"PolicySources", &rsbDetailed.PolicySources})
    rsbDetailed.EntityData.Children.Append("header", types.YChild{"Header", &rsbDetailed.Header})
    rsbDetailed.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &rsbDetailed.PolicyFlags})
    rsbDetailed.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &rsbDetailed.ExpiryTime})
    rsbDetailed.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &rsbDetailed.PolicyQueryFlags})
    rsbDetailed.EntityData.Children.Append("label-info", types.YChild{"LabelInfo", &rsbDetailed.LabelInfo})
    rsbDetailed.EntityData.Leafs = types.NewOrderedMap()
    rsbDetailed.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbDetailed.DestinationAddress})
    rsbDetailed.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", rsbDetailed.DestinationPort})
    rsbDetailed.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rsbDetailed.Protocol})
    rsbDetailed.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rsbDetailed.ExtendedTunnelId})
    rsbDetailed.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsbDetailed.SessionType})
    rsbDetailed.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rsbDetailed.P2mpId})
    rsbDetailed.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rsbDetailed.SourceAddress})
    rsbDetailed.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", rsbDetailed.SourcePort})
    rsbDetailed.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", rsbDetailed.SubGroupOrigin})
    rsbDetailed.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rsbDetailed.SubGroupId})
    rsbDetailed.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rsbDetailed.VrfName})
    rsbDetailed.EntityData.Leafs.Append("input-adjusted-interface", types.YLeaf{"InputAdjustedInterface", rsbDetailed.InputAdjustedInterface})
    rsbDetailed.EntityData.Leafs.Append("input-physical-interface", types.YLeaf{"InputPhysicalInterface", rsbDetailed.InputPhysicalInterface})

    rsbDetailed.EntityData.YListKeys = []string {}

    return &(rsbDetailed.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec
// Flow Spec Information
type RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rsb-detailed"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec
// Generic Flow Spec Information
type RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rsb-detailed"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *RsvpStandby_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Session
// RSVP Session Information
type RsvpStandby_RsbDetaileds_RsbDetailed_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession
}

func (session *RsvpStandby_RsbDetaileds_RsbDetailed_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "rsb-detailed"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession
// RSVP Session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RsbDetaileds_RsbDetailed_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_RsbDetaileds_RsbDetailed_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "rsb-detailed"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Style
// RSVP Style
type RsvpStandby_RsbDetaileds_RsbDetailed_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RsbDetaileds_RsbDetailed_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "rsb-detailed"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter
// RSVP Filter
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
}

func (filter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "rsb-detailed"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *RsvpStandby_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags
// Reservation State Block Flags
type RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (rsbFlags *RsvpStandby_RsbDetaileds_RsbDetailed_RsbFlags) GetEntityData() *types.CommonEntityData {
    rsbFlags.EntityData.YFilter = rsbFlags.YFilter
    rsbFlags.EntityData.YangName = "rsb-flags"
    rsbFlags.EntityData.BundleName = "cisco_ios_xr"
    rsbFlags.EntityData.ParentYangName = "rsb-detailed"
    rsbFlags.EntityData.SegmentPath = "rsb-flags"
    rsbFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + rsbFlags.EntityData.SegmentPath
    rsbFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbFlags.EntityData.Children = types.NewOrderedMap()
    rsbFlags.EntityData.Leafs = types.NewOrderedMap()
    rsbFlags.EntityData.Leafs.Append("is-local-receiver", types.YLeaf{"IsLocalReceiver", rsbFlags.IsLocalReceiver})
    rsbFlags.EntityData.Leafs.Append("is-message-id-valid", types.YLeaf{"IsMessageIdValid", rsbFlags.IsMessageIdValid})
    rsbFlags.EntityData.Leafs.Append("is-local-repair", types.YLeaf{"IsLocalRepair", rsbFlags.IsLocalRepair})
    rsbFlags.EntityData.Leafs.Append("is-merge-point", types.YLeaf{"IsMergePoint", rsbFlags.IsMergePoint})
    rsbFlags.EntityData.Leafs.Append("is-lockout", types.YLeaf{"IsLockout", rsbFlags.IsLockout})

    rsbFlags.EntityData.YListKeys = []string {}

    return &(rsbFlags.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Hop
// Hop Infomation
type RsvpStandby_RsbDetaileds_RsbDetailed_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *RsvpStandby_RsbDetaileds_RsbDetailed_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "rsb-detailed"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources
// RSVP Policy Sources
type RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *RsvpStandby_RsbDetaileds_RsbDetailed_PolicySources) GetEntityData() *types.CommonEntityData {
    policySources.EntityData.YFilter = policySources.YFilter
    policySources.EntityData.YangName = "policy-sources"
    policySources.EntityData.BundleName = "cisco_ios_xr"
    policySources.EntityData.ParentYangName = "rsb-detailed"
    policySources.EntityData.SegmentPath = "policy-sources"
    policySources.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + policySources.EntityData.SegmentPath
    policySources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policySources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policySources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policySources.EntityData.Children = types.NewOrderedMap()
    policySources.EntityData.Leafs = types.NewOrderedMap()
    policySources.EntityData.Leafs.Append("is-te-link", types.YLeaf{"IsTeLink", policySources.IsTeLink})
    policySources.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", policySources.IsLocal})
    policySources.EntityData.Leafs.Append("is-cops", types.YLeaf{"IsCops", policySources.IsCops})
    policySources.EntityData.Leafs.Append("is-default", types.YLeaf{"IsDefault", policySources.IsDefault})
    policySources.EntityData.Leafs.Append("is-cable", types.YLeaf{"IsCable", policySources.IsCable})

    policySources.EntityData.YListKeys = []string {}

    return &(policySources.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_Header
// RSVP Header Information
type RsvpStandby_RsbDetaileds_RsbDetailed_Header struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (header *RsvpStandby_RsbDetaileds_RsbDetailed_Header) GetEntityData() *types.CommonEntityData {
    header.EntityData.YFilter = header.YFilter
    header.EntityData.YangName = "header"
    header.EntityData.BundleName = "cisco_ios_xr"
    header.EntityData.ParentYangName = "rsb-detailed"
    header.EntityData.SegmentPath = "header"
    header.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + header.EntityData.SegmentPath
    header.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    header.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    header.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    header.EntityData.Children = types.NewOrderedMap()
    header.EntityData.Leafs = types.NewOrderedMap()
    header.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", header.RsvpVersion})
    header.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", header.RsvpHeaderFlags})
    header.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", header.RsvpTtl})
    header.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", header.RsvpMessageType})
    header.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", header.IpTos})
    header.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", header.IpTtl})
    header.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", header.IpSourceAddress})

    header.EntityData.YListKeys = []string {}

    return &(header.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags
// RSVP Policy Flags
type RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "rsb-detailed"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime
// Expiry Time
type RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_RsbDetaileds_RsbDetailed_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "rsb-detailed"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags
// RSVP Query Flags
type RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "rsb-detailed"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo
// Label Information
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo) GetEntityData() *types.CommonEntityData {
    labelInfo.EntityData.YFilter = labelInfo.YFilter
    labelInfo.EntityData.YangName = "label-info"
    labelInfo.EntityData.BundleName = "cisco_ios_xr"
    labelInfo.EntityData.ParentYangName = "rsb-detailed"
    labelInfo.EntityData.SegmentPath = "label-info"
    labelInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/" + labelInfo.EntityData.SegmentPath
    labelInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInfo.EntityData.Children = types.NewOrderedMap()
    labelInfo.EntityData.Children.Append("generic-local-downstream-label", types.YChild{"GenericLocalDownstreamLabel", &labelInfo.GenericLocalDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-downstream-label", types.YChild{"GenericOutgoingDownstreamLabel", &labelInfo.GenericOutgoingDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-merge-point-label", types.YChild{"GenericMergePointLabel", &labelInfo.GenericMergePointLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-upstream-label", types.YChild{"GenericOutgoingUpstreamLabel", &labelInfo.GenericOutgoingUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-local-upstream-label", types.YChild{"GenericLocalUpstreamLabel", &labelInfo.GenericLocalUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-recovery-label", types.YChild{"GenericRecoveryLabel", &labelInfo.GenericRecoveryLabel})
    labelInfo.EntityData.Leafs = types.NewOrderedMap()
    labelInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", labelInfo.IsValid})
    labelInfo.EntityData.Leafs.Append("local-downstream-label", types.YLeaf{"LocalDownstreamLabel", labelInfo.LocalDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-downstream-label", types.YLeaf{"OutgoingDownstreamLabel", labelInfo.OutgoingDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", labelInfo.MergePointLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-upstream-label", types.YLeaf{"OutgoingUpstreamLabel", labelInfo.OutgoingUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("local-upstream-label", types.YLeaf{"LocalUpstreamLabel", labelInfo.LocalUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("recovery-label", types.YLeaf{"RecoveryLabel", labelInfo.RecoveryLabel})
    labelInfo.EntityData.Leafs.Append("lsp-wrap-label", types.YLeaf{"LspWrapLabel", labelInfo.LspWrapLabel})

    labelInfo.EntityData.YListKeys = []string {}

    return &(labelInfo.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalDownstreamLabel.EntityData.YFilter = genericLocalDownstreamLabel.YFilter
    genericLocalDownstreamLabel.EntityData.YangName = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalDownstreamLabel.EntityData.SegmentPath = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" + genericLocalDownstreamLabel.EntityData.SegmentPath
    genericLocalDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalDownstreamLabel.GeneralizedLabel})
    genericLocalDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalDownstreamLabel.GenericLabelType})

    genericLocalDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalDownstreamLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingDownstreamLabel.EntityData.YFilter = genericOutgoingDownstreamLabel.YFilter
    genericOutgoingDownstreamLabel.EntityData.YangName = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingDownstreamLabel.EntityData.SegmentPath = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" + genericOutgoingDownstreamLabel.EntityData.SegmentPath
    genericOutgoingDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingDownstreamLabel.GeneralizedLabel})
    genericOutgoingDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingDownstreamLabel.GenericLabelType})

    genericOutgoingDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingDownstreamLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetEntityData() *types.CommonEntityData {
    genericMergePointLabel.EntityData.YFilter = genericMergePointLabel.YFilter
    genericMergePointLabel.EntityData.YangName = "generic-merge-point-label"
    genericMergePointLabel.EntityData.BundleName = "cisco_ios_xr"
    genericMergePointLabel.EntityData.ParentYangName = "label-info"
    genericMergePointLabel.EntityData.SegmentPath = "generic-merge-point-label"
    genericMergePointLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" + genericMergePointLabel.EntityData.SegmentPath
    genericMergePointLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericMergePointLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericMergePointLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericMergePointLabel.EntityData.Children = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericMergePointLabel.GeneralizedLabel})
    genericMergePointLabel.EntityData.Leafs = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericMergePointLabel.GenericLabelType})

    genericMergePointLabel.EntityData.YListKeys = []string {}

    return &(genericMergePointLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-merge-point-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingUpstreamLabel.EntityData.YFilter = genericOutgoingUpstreamLabel.YFilter
    genericOutgoingUpstreamLabel.EntityData.YangName = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingUpstreamLabel.EntityData.SegmentPath = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" + genericOutgoingUpstreamLabel.EntityData.SegmentPath
    genericOutgoingUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingUpstreamLabel.GeneralizedLabel})
    genericOutgoingUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingUpstreamLabel.GenericLabelType})

    genericOutgoingUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingUpstreamLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalUpstreamLabel.EntityData.YFilter = genericLocalUpstreamLabel.YFilter
    genericLocalUpstreamLabel.EntityData.YangName = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalUpstreamLabel.EntityData.SegmentPath = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" + genericLocalUpstreamLabel.EntityData.SegmentPath
    genericLocalUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalUpstreamLabel.GeneralizedLabel})
    genericLocalUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalUpstreamLabel.GenericLabelType})

    genericLocalUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalUpstreamLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetEntityData() *types.CommonEntityData {
    genericRecoveryLabel.EntityData.YFilter = genericRecoveryLabel.YFilter
    genericRecoveryLabel.EntityData.YangName = "generic-recovery-label"
    genericRecoveryLabel.EntityData.BundleName = "cisco_ios_xr"
    genericRecoveryLabel.EntityData.ParentYangName = "label-info"
    genericRecoveryLabel.EntityData.SegmentPath = "generic-recovery-label"
    genericRecoveryLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/" + genericRecoveryLabel.EntityData.SegmentPath
    genericRecoveryLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRecoveryLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRecoveryLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRecoveryLabel.EntityData.Children = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericRecoveryLabel.GeneralizedLabel})
    genericRecoveryLabel.EntityData.Leafs = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericRecoveryLabel.GenericLabelType})

    genericRecoveryLabel.EntityData.YListKeys = []string {}

    return &(genericRecoveryLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-recovery-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_InterfaceSummaries
// Table of summary info about RSVP-enabled
// interfaces
type RsvpStandby_InterfaceSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled interface. The type is slice of
    // RsvpStandby_InterfaceSummaries_InterfaceSummary.
    InterfaceSummary []*RsvpStandby_InterfaceSummaries_InterfaceSummary
}

func (interfaceSummaries *RsvpStandby_InterfaceSummaries) GetEntityData() *types.CommonEntityData {
    interfaceSummaries.EntityData.YFilter = interfaceSummaries.YFilter
    interfaceSummaries.EntityData.YangName = "interface-summaries"
    interfaceSummaries.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummaries.EntityData.ParentYangName = "rsvp-standby"
    interfaceSummaries.EntityData.SegmentPath = "interface-summaries"
    interfaceSummaries.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + interfaceSummaries.EntityData.SegmentPath
    interfaceSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummaries.EntityData.Children = types.NewOrderedMap()
    interfaceSummaries.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", nil})
    for i := range interfaceSummaries.InterfaceSummary {
        interfaceSummaries.EntityData.Children.Append(types.GetSegmentPath(interfaceSummaries.InterfaceSummary[i]), types.YChild{"InterfaceSummary", interfaceSummaries.InterfaceSummary[i]})
    }
    interfaceSummaries.EntityData.Leafs = types.NewOrderedMap()

    interfaceSummaries.EntityData.YListKeys = []string {}

    return &(interfaceSummaries.EntityData)
}

// RsvpStandby_InterfaceSummaries_InterfaceSummary
// Summary info about an RSVP-enabled interface
type RsvpStandby_InterfaceSummaries_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation
}

func (interfaceSummary *RsvpStandby_InterfaceSummaries_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "interface-summaries"
    interfaceSummary.EntityData.SegmentPath = "interface-summary" + types.AddKeyToken(interfaceSummary.InterfaceName, "interface-name")
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-summaries/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &interfaceSummary.BandwidthInformation})
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceSummary.InterfaceName})
    interfaceSummary.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceSummary.InterfaceNameXr})
    interfaceSummary.EntityData.Leafs.Append("paths-in", types.YLeaf{"PathsIn", interfaceSummary.PathsIn})
    interfaceSummary.EntityData.Leafs.Append("paths-out", types.YLeaf{"PathsOut", interfaceSummary.PathsOut})
    interfaceSummary.EntityData.Leafs.Append("reservations-in", types.YLeaf{"ReservationsIn", interfaceSummary.ReservationsIn})
    interfaceSummary.EntityData.Leafs.Append("reservations-out", types.YLeaf{"ReservationsOut", interfaceSummary.ReservationsOut})

    interfaceSummary.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceSummary.EntityData)
}

// RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "interface-summary"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-summaries/interface-summary/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-summaries/interface-summary/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-summaries/interface-summary/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// RsvpStandby_HelloInstanceBriefs
// Table of brief info about hello instances
type RsvpStandby_HelloInstanceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single hello instance. The type is slice of
    // RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief.
    HelloInstanceBrief []*RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief
}

func (helloInstanceBriefs *RsvpStandby_HelloInstanceBriefs) GetEntityData() *types.CommonEntityData {
    helloInstanceBriefs.EntityData.YFilter = helloInstanceBriefs.YFilter
    helloInstanceBriefs.EntityData.YangName = "hello-instance-briefs"
    helloInstanceBriefs.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceBriefs.EntityData.ParentYangName = "rsvp-standby"
    helloInstanceBriefs.EntityData.SegmentPath = "hello-instance-briefs"
    helloInstanceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + helloInstanceBriefs.EntityData.SegmentPath
    helloInstanceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceBriefs.EntityData.Children = types.NewOrderedMap()
    helloInstanceBriefs.EntityData.Children.Append("hello-instance-brief", types.YChild{"HelloInstanceBrief", nil})
    for i := range helloInstanceBriefs.HelloInstanceBrief {
        helloInstanceBriefs.EntityData.Children.Append(types.GetSegmentPath(helloInstanceBriefs.HelloInstanceBrief[i]), types.YChild{"HelloInstanceBrief", helloInstanceBriefs.HelloInstanceBrief[i]})
    }
    helloInstanceBriefs.EntityData.Leafs = types.NewOrderedMap()

    helloInstanceBriefs.EntityData.YListKeys = []string {}

    return &(helloInstanceBriefs.EntityData)
}

// RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief
// Brief info for a single hello instance
type RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    LostCommunicationTotal interface{}
}

func (helloInstanceBrief *RsvpStandby_HelloInstanceBriefs_HelloInstanceBrief) GetEntityData() *types.CommonEntityData {
    helloInstanceBrief.EntityData.YFilter = helloInstanceBrief.YFilter
    helloInstanceBrief.EntityData.YangName = "hello-instance-brief"
    helloInstanceBrief.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceBrief.EntityData.ParentYangName = "hello-instance-briefs"
    helloInstanceBrief.EntityData.SegmentPath = "hello-instance-brief" + types.AddKeyToken(helloInstanceBrief.SourceAddress, "source-address") + types.AddKeyToken(helloInstanceBrief.DestinationAddress, "destination-address")
    helloInstanceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-briefs/" + helloInstanceBrief.EntityData.SegmentPath
    helloInstanceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceBrief.EntityData.Children = types.NewOrderedMap()
    helloInstanceBrief.EntityData.Leafs = types.NewOrderedMap()
    helloInstanceBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInstanceBrief.SourceAddress})
    helloInstanceBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInstanceBrief.DestinationAddress})
    helloInstanceBrief.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInstanceBrief.SourceAddressXr})
    helloInstanceBrief.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInstanceBrief.DestinationAddressXr})
    helloInstanceBrief.EntityData.Leafs.Append("neighbor-hello-state", types.YLeaf{"NeighborHelloState", helloInstanceBrief.NeighborHelloState})
    helloInstanceBrief.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInstanceBrief.InstanceType})
    helloInstanceBrief.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInstanceBrief.HelloInterface})
    helloInstanceBrief.EntityData.Leafs.Append("lost-communication-total", types.YLeaf{"LostCommunicationTotal", helloInstanceBrief.LostCommunicationTotal})

    helloInstanceBrief.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInstanceBrief.EntityData)
}

// RsvpStandby_AuthenticationDetails
// Table for detailed authentication related
// information
type RsvpStandby_AuthenticationDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // RsvpStandby_AuthenticationDetails_AuthenticationDetail.
    AuthenticationDetail []*RsvpStandby_AuthenticationDetails_AuthenticationDetail
}

func (authenticationDetails *RsvpStandby_AuthenticationDetails) GetEntityData() *types.CommonEntityData {
    authenticationDetails.EntityData.YFilter = authenticationDetails.YFilter
    authenticationDetails.EntityData.YangName = "authentication-details"
    authenticationDetails.EntityData.BundleName = "cisco_ios_xr"
    authenticationDetails.EntityData.ParentYangName = "rsvp-standby"
    authenticationDetails.EntityData.SegmentPath = "authentication-details"
    authenticationDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + authenticationDetails.EntityData.SegmentPath
    authenticationDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationDetails.EntityData.Children = types.NewOrderedMap()
    authenticationDetails.EntityData.Children.Append("authentication-detail", types.YChild{"AuthenticationDetail", nil})
    for i := range authenticationDetails.AuthenticationDetail {
        authenticationDetails.EntityData.Children.Append(types.GetSegmentPath(authenticationDetails.AuthenticationDetail[i]), types.YChild{"AuthenticationDetail", authenticationDetails.AuthenticationDetail[i]})
    }
    authenticationDetails.EntityData.Leafs = types.NewOrderedMap()

    authenticationDetails.EntityData.YListKeys = []string {}

    return &(authenticationDetails.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail
// Brief Authentication information
type RsvpStandby_AuthenticationDetails_AuthenticationDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Key status. The type is interface{} with range: 0..4294967295.
    KeyStatus interface{}

    // Direction. The type is interface{} with range: 0..4294967295.
    KeyDigestInfo interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    Lifetime interface{}

    // Remaining lifetime (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    LifetimeLeft interface{}

    // Challenge status. The type is RsvpMgmtAuthChallengeStatus.
    ChallengeStatus interface{}

    // Basic authentication data.
    AuthCompact RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact

    // direction info.
    DirectionInfo RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo
}

func (authenticationDetail *RsvpStandby_AuthenticationDetails_AuthenticationDetail) GetEntityData() *types.CommonEntityData {
    authenticationDetail.EntityData.YFilter = authenticationDetail.YFilter
    authenticationDetail.EntityData.YangName = "authentication-detail"
    authenticationDetail.EntityData.BundleName = "cisco_ios_xr"
    authenticationDetail.EntityData.ParentYangName = "authentication-details"
    authenticationDetail.EntityData.SegmentPath = "authentication-detail" + types.AddKeyToken(authenticationDetail.SourceAddress, "source-address") + types.AddKeyToken(authenticationDetail.DestinationAddress, "destination-address") + types.AddKeyToken(authenticationDetail.ModeId, "mode-id") + types.AddKeyToken(authenticationDetail.InterfaceName, "interface-name")
    authenticationDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/" + authenticationDetail.EntityData.SegmentPath
    authenticationDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationDetail.EntityData.Children = types.NewOrderedMap()
    authenticationDetail.EntityData.Children.Append("auth-compact", types.YChild{"AuthCompact", &authenticationDetail.AuthCompact})
    authenticationDetail.EntityData.Children.Append("direction-info", types.YChild{"DirectionInfo", &authenticationDetail.DirectionInfo})
    authenticationDetail.EntityData.Leafs = types.NewOrderedMap()
    authenticationDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", authenticationDetail.SourceAddress})
    authenticationDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", authenticationDetail.DestinationAddress})
    authenticationDetail.EntityData.Leafs.Append("mode-id", types.YLeaf{"ModeId", authenticationDetail.ModeId})
    authenticationDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", authenticationDetail.InterfaceName})
    authenticationDetail.EntityData.Leafs.Append("key-status", types.YLeaf{"KeyStatus", authenticationDetail.KeyStatus})
    authenticationDetail.EntityData.Leafs.Append("key-digest-info", types.YLeaf{"KeyDigestInfo", authenticationDetail.KeyDigestInfo})
    authenticationDetail.EntityData.Leafs.Append("lifetime", types.YLeaf{"Lifetime", authenticationDetail.Lifetime})
    authenticationDetail.EntityData.Leafs.Append("lifetime-left", types.YLeaf{"LifetimeLeft", authenticationDetail.LifetimeLeft})
    authenticationDetail.EntityData.Leafs.Append("challenge-status", types.YLeaf{"ChallengeStatus", authenticationDetail.ChallengeStatus})

    authenticationDetail.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress", "ModeId", "InterfaceName"}

    return &(authenticationDetail.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact
// Basic authentication data
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authCompact *RsvpStandby_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetEntityData() *types.CommonEntityData {
    authCompact.EntityData.YFilter = authCompact.YFilter
    authCompact.EntityData.YangName = "auth-compact"
    authCompact.EntityData.BundleName = "cisco_ios_xr"
    authCompact.EntityData.ParentYangName = "authentication-detail"
    authCompact.EntityData.SegmentPath = "auth-compact"
    authCompact.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/" + authCompact.EntityData.SegmentPath
    authCompact.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authCompact.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authCompact.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authCompact.EntityData.Children = types.NewOrderedMap()
    authCompact.EntityData.Leafs = types.NewOrderedMap()
    authCompact.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", authCompact.SourceAddressXr})
    authCompact.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", authCompact.DestinationAddressXr})
    authCompact.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", authCompact.NeighborAddress})
    authCompact.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", authCompact.Direction})
    authCompact.EntityData.Leafs.Append("key-type", types.YLeaf{"KeyType", authCompact.KeyType})
    authCompact.EntityData.Leafs.Append("key-source", types.YLeaf{"KeySource", authCompact.KeySource})
    authCompact.EntityData.Leafs.Append("key-id", types.YLeaf{"KeyId", authCompact.KeyId})
    authCompact.EntityData.Leafs.Append("key-id-valid", types.YLeaf{"KeyIdValid", authCompact.KeyIdValid})

    authCompact.EntityData.YListKeys = []string {}

    return &(authCompact.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo
// direction info
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AuthDirection. The type is RsvpMgmtAuthDirection.
    AuthDirection interface{}

    // send info.
    SendInfo RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo

    // receive info.
    ReceiveInfo RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
}

func (directionInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetEntityData() *types.CommonEntityData {
    directionInfo.EntityData.YFilter = directionInfo.YFilter
    directionInfo.EntityData.YangName = "direction-info"
    directionInfo.EntityData.BundleName = "cisco_ios_xr"
    directionInfo.EntityData.ParentYangName = "authentication-detail"
    directionInfo.EntityData.SegmentPath = "direction-info"
    directionInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/" + directionInfo.EntityData.SegmentPath
    directionInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directionInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directionInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directionInfo.EntityData.Children = types.NewOrderedMap()
    directionInfo.EntityData.Children.Append("send-info", types.YChild{"SendInfo", &directionInfo.SendInfo})
    directionInfo.EntityData.Children.Append("receive-info", types.YChild{"ReceiveInfo", &directionInfo.ReceiveInfo})
    directionInfo.EntityData.Leafs = types.NewOrderedMap()
    directionInfo.EntityData.Leafs.Append("auth-direction", types.YLeaf{"AuthDirection", directionInfo.AuthDirection})

    directionInfo.EntityData.YListKeys = []string {}

    return &(directionInfo.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo
// send info
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Counters.
    Counters RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
}

func (sendInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetEntityData() *types.CommonEntityData {
    sendInfo.EntityData.YFilter = sendInfo.YFilter
    sendInfo.EntityData.YangName = "send-info"
    sendInfo.EntityData.BundleName = "cisco_ios_xr"
    sendInfo.EntityData.ParentYangName = "direction-info"
    sendInfo.EntityData.SegmentPath = "send-info"
    sendInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/direction-info/" + sendInfo.EntityData.SegmentPath
    sendInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendInfo.EntityData.Children = types.NewOrderedMap()
    sendInfo.EntityData.Children.Append("counters", types.YChild{"Counters", &sendInfo.Counters})
    sendInfo.EntityData.Leafs = types.NewOrderedMap()
    sendInfo.EntityData.Leafs.Append("sequence", types.YLeaf{"Sequence", sendInfo.Sequence})

    sendInfo.EntityData.YListKeys = []string {}

    return &(sendInfo.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
// Counters
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Messages sent. The type is interface{} with range: 0..4294967295.
    AuthenticationSent interface{}

    // Failures. The type is interface{} with range: 0..4294967295.
    AuthenticationFailures interface{}

    // Challenges received. The type is interface{} with range: 0..4294967295.
    AuthenticationSendChallengesReceived interface{}

    // Challenge responses sent. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationChallengeResponsesSent interface{}
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "send-info"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/direction-info/send-info/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("authentication-sent", types.YLeaf{"AuthenticationSent", counters.AuthenticationSent})
    counters.EntityData.Leafs.Append("authentication-failures", types.YLeaf{"AuthenticationFailures", counters.AuthenticationFailures})
    counters.EntityData.Leafs.Append("authentication-send-challenges-received", types.YLeaf{"AuthenticationSendChallengesReceived", counters.AuthenticationSendChallengesReceived})
    counters.EntityData.Leafs.Append("authentication-challenge-responses-sent", types.YLeaf{"AuthenticationChallengeResponsesSent", counters.AuthenticationChallengeResponsesSent})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
// receive info
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Sequence window size. The type is interface{} with range: 0..4294967295.
    SequenceWindowSize interface{}

    // Sequence window count. The type is interface{} with range: 0..4294967295.
    SequenceWindowCount interface{}

    // Counters.
    Counters RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters

    // Sequence window. The type is slice of
    // RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow.
    SequenceWindow []*RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow
}

func (receiveInfo *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetEntityData() *types.CommonEntityData {
    receiveInfo.EntityData.YFilter = receiveInfo.YFilter
    receiveInfo.EntityData.YangName = "receive-info"
    receiveInfo.EntityData.BundleName = "cisco_ios_xr"
    receiveInfo.EntityData.ParentYangName = "direction-info"
    receiveInfo.EntityData.SegmentPath = "receive-info"
    receiveInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/direction-info/" + receiveInfo.EntityData.SegmentPath
    receiveInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveInfo.EntityData.Children = types.NewOrderedMap()
    receiveInfo.EntityData.Children.Append("counters", types.YChild{"Counters", &receiveInfo.Counters})
    receiveInfo.EntityData.Children.Append("sequence-window", types.YChild{"SequenceWindow", nil})
    for i := range receiveInfo.SequenceWindow {
        types.SetYListKey(receiveInfo.SequenceWindow[i], i)
        receiveInfo.EntityData.Children.Append(types.GetSegmentPath(receiveInfo.SequenceWindow[i]), types.YChild{"SequenceWindow", receiveInfo.SequenceWindow[i]})
    }
    receiveInfo.EntityData.Leafs = types.NewOrderedMap()
    receiveInfo.EntityData.Leafs.Append("sequence", types.YLeaf{"Sequence", receiveInfo.Sequence})
    receiveInfo.EntityData.Leafs.Append("sequence-window-size", types.YLeaf{"SequenceWindowSize", receiveInfo.SequenceWindowSize})
    receiveInfo.EntityData.Leafs.Append("sequence-window-count", types.YLeaf{"SequenceWindowCount", receiveInfo.SequenceWindowCount})

    receiveInfo.EntityData.YListKeys = []string {}

    return &(receiveInfo.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters
// Counters
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Valid messages. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedValidMessages interface{}

    // Challenges sent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesSent interface{}

    // Challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengeResponse interface{}

    // Challenges resent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesResent interface{}

    // Challenge timeouts. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengeTimeouts interface{}

    // Authentication received during challenge. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedDuringChallenge interface{}

    // Authentication received incomplete. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedIncomplete interface{}

    // Authentication received with no integrity. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedNoIntegrity interface{}

    // Authentication received with bad digest. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedBadDigest interface{}

    // Authentication received with wrong digest type. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedWrongDigestType interface{}

    // Authentication received with duplicate sequence number. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberDuplicate interface{}

    // Authentication received with sequence number out of range. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberOutofRange interface{}

    // Incorect challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedWrongChallengesResponse interface{}

    // Duplicate challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengesResponseDuplicate interface{}

    // Challenge responses received late. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedResponseLate interface{}

    // Authentication received with bad mesage format. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedBadMessageFormat interface{}
}

func (counters *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "receive-info"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/direction-info/receive-info/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("authentication-received-valid-messages", types.YLeaf{"AuthenticationReceivedValidMessages", counters.AuthenticationReceivedValidMessages})
    counters.EntityData.Leafs.Append("authentication-received-challenges-sent", types.YLeaf{"AuthenticationReceivedChallengesSent", counters.AuthenticationReceivedChallengesSent})
    counters.EntityData.Leafs.Append("authentication-received-challenge-response", types.YLeaf{"AuthenticationReceivedChallengeResponse", counters.AuthenticationReceivedChallengeResponse})
    counters.EntityData.Leafs.Append("authentication-received-challenges-resent", types.YLeaf{"AuthenticationReceivedChallengesResent", counters.AuthenticationReceivedChallengesResent})
    counters.EntityData.Leafs.Append("authentication-received-challenge-timeouts", types.YLeaf{"AuthenticationReceivedChallengeTimeouts", counters.AuthenticationReceivedChallengeTimeouts})
    counters.EntityData.Leafs.Append("authentication-received-during-challenge", types.YLeaf{"AuthenticationReceivedDuringChallenge", counters.AuthenticationReceivedDuringChallenge})
    counters.EntityData.Leafs.Append("authentication-received-incomplete", types.YLeaf{"AuthenticationReceivedIncomplete", counters.AuthenticationReceivedIncomplete})
    counters.EntityData.Leafs.Append("authentication-received-no-integrity", types.YLeaf{"AuthenticationReceivedNoIntegrity", counters.AuthenticationReceivedNoIntegrity})
    counters.EntityData.Leafs.Append("authentication-received-bad-digest", types.YLeaf{"AuthenticationReceivedBadDigest", counters.AuthenticationReceivedBadDigest})
    counters.EntityData.Leafs.Append("authentication-received-wrong-digest-type", types.YLeaf{"AuthenticationReceivedWrongDigestType", counters.AuthenticationReceivedWrongDigestType})
    counters.EntityData.Leafs.Append("authentication-received-sequence-number-duplicate", types.YLeaf{"AuthenticationReceivedSequenceNumberDuplicate", counters.AuthenticationReceivedSequenceNumberDuplicate})
    counters.EntityData.Leafs.Append("authentication-received-sequence-number-outof-range", types.YLeaf{"AuthenticationReceivedSequenceNumberOutofRange", counters.AuthenticationReceivedSequenceNumberOutofRange})
    counters.EntityData.Leafs.Append("authentication-received-wrong-challenges-response", types.YLeaf{"AuthenticationReceivedWrongChallengesResponse", counters.AuthenticationReceivedWrongChallengesResponse})
    counters.EntityData.Leafs.Append("authentication-received-challenges-response-duplicate", types.YLeaf{"AuthenticationReceivedChallengesResponseDuplicate", counters.AuthenticationReceivedChallengesResponseDuplicate})
    counters.EntityData.Leafs.Append("authentication-received-response-late", types.YLeaf{"AuthenticationReceivedResponseLate", counters.AuthenticationReceivedResponseLate})
    counters.EntityData.Leafs.Append("authentication-received-bad-message-format", types.YLeaf{"AuthenticationReceivedBadMessageFormat", counters.AuthenticationReceivedBadMessageFormat})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow
// Sequence window
type RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Sequence window. The type is interface{} with range:
    // 0..18446744073709551615.
    Entry interface{}
}

func (sequenceWindow *RsvpStandby_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow) GetEntityData() *types.CommonEntityData {
    sequenceWindow.EntityData.YFilter = sequenceWindow.YFilter
    sequenceWindow.EntityData.YangName = "sequence-window"
    sequenceWindow.EntityData.BundleName = "cisco_ios_xr"
    sequenceWindow.EntityData.ParentYangName = "receive-info"
    sequenceWindow.EntityData.SegmentPath = "sequence-window" + types.AddNoKeyToken(sequenceWindow)
    sequenceWindow.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/authentication-details/authentication-detail/direction-info/receive-info/" + sequenceWindow.EntityData.SegmentPath
    sequenceWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceWindow.EntityData.Children = types.NewOrderedMap()
    sequenceWindow.EntityData.Leafs = types.NewOrderedMap()
    sequenceWindow.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sequenceWindow.Entry})

    sequenceWindow.EntityData.YListKeys = []string {}

    return &(sequenceWindow.EntityData)
}

// RsvpStandby_RsbBriefs
// Table of brief info about reservation state
// blocks
type RsvpStandby_RsbBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single reservation state block. The type is slice of
    // RsvpStandby_RsbBriefs_RsbBrief.
    RsbBrief []*RsvpStandby_RsbBriefs_RsbBrief
}

func (rsbBriefs *RsvpStandby_RsbBriefs) GetEntityData() *types.CommonEntityData {
    rsbBriefs.EntityData.YFilter = rsbBriefs.YFilter
    rsbBriefs.EntityData.YangName = "rsb-briefs"
    rsbBriefs.EntityData.BundleName = "cisco_ios_xr"
    rsbBriefs.EntityData.ParentYangName = "rsvp-standby"
    rsbBriefs.EntityData.SegmentPath = "rsb-briefs"
    rsbBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + rsbBriefs.EntityData.SegmentPath
    rsbBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbBriefs.EntityData.Children = types.NewOrderedMap()
    rsbBriefs.EntityData.Children.Append("rsb-brief", types.YChild{"RsbBrief", nil})
    for i := range rsbBriefs.RsbBrief {
        types.SetYListKey(rsbBriefs.RsbBrief[i], i)
        rsbBriefs.EntityData.Children.Append(types.GetSegmentPath(rsbBriefs.RsbBrief[i]), types.YChild{"RsbBrief", rsbBriefs.RsbBrief[i]})
    }
    rsbBriefs.EntityData.Leafs = types.NewOrderedMap()

    rsbBriefs.EntityData.YListKeys = []string {}

    return &(rsbBriefs.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief
// Brief info for a single reservation state block
type RsvpStandby_RsbBriefs_RsbBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Reservation Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_RsbBriefs_RsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_RsbBriefs_RsbBrief_S2lSubLsp

    // Flow Spec Information.
    FlowSpec RsvpStandby_RsbBriefs_RsbBrief_FlowSpec

    // Generic Flow Spec Info.
    GenericFlowSpec RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec

    // RSVP Style.
    Style RsvpStandby_RsbBriefs_RsbBrief_Style

    // RSVP Filter.
    Filter RsvpStandby_RsbBriefs_RsbBrief_Filter
}

func (rsbBrief *RsvpStandby_RsbBriefs_RsbBrief) GetEntityData() *types.CommonEntityData {
    rsbBrief.EntityData.YFilter = rsbBrief.YFilter
    rsbBrief.EntityData.YangName = "rsb-brief"
    rsbBrief.EntityData.BundleName = "cisco_ios_xr"
    rsbBrief.EntityData.ParentYangName = "rsb-briefs"
    rsbBrief.EntityData.SegmentPath = "rsb-brief" + types.AddNoKeyToken(rsbBrief)
    rsbBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/" + rsbBrief.EntityData.SegmentPath
    rsbBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbBrief.EntityData.Children = types.NewOrderedMap()
    rsbBrief.EntityData.Children.Append("session", types.YChild{"Session", &rsbBrief.Session})
    rsbBrief.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &rsbBrief.S2lSubLsp})
    rsbBrief.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rsbBrief.FlowSpec})
    rsbBrief.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rsbBrief.GenericFlowSpec})
    rsbBrief.EntityData.Children.Append("style", types.YChild{"Style", &rsbBrief.Style})
    rsbBrief.EntityData.Children.Append("filter", types.YChild{"Filter", &rsbBrief.Filter})
    rsbBrief.EntityData.Leafs = types.NewOrderedMap()
    rsbBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbBrief.DestinationAddress})
    rsbBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", rsbBrief.DestinationPort})
    rsbBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rsbBrief.Protocol})
    rsbBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rsbBrief.ExtendedTunnelId})
    rsbBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsbBrief.SessionType})
    rsbBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rsbBrief.P2mpId})
    rsbBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rsbBrief.SourceAddress})
    rsbBrief.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", rsbBrief.SourcePort})
    rsbBrief.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", rsbBrief.SubGroupOrigin})
    rsbBrief.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rsbBrief.SubGroupId})
    rsbBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rsbBrief.VrfName})
    rsbBrief.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", rsbBrief.InputInterface})

    rsbBrief.EntityData.YListKeys = []string {}

    return &(rsbBrief.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Session
// RSVP Session Information
type RsvpStandby_RsbBriefs_RsbBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession
}

func (session *RsvpStandby_RsbBriefs_RsbBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "rsb-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RsbBriefs_RsbBrief_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_RsbBriefs_RsbBrief_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "rsb-brief"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_FlowSpec
// Flow Spec Information
type RsvpStandby_RsbBriefs_RsbBrief_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RsbBriefs_RsbBrief_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rsb-brief"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec
// Generic Flow Spec Info
type RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rsb-brief"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *RsvpStandby_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Style
// RSVP Style
type RsvpStandby_RsbBriefs_RsbBrief_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RsbBriefs_RsbBrief_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "rsb-brief"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Filter
// RSVP Filter
type RsvpStandby_RsbBriefs_RsbBrief_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter
}

func (filter *RsvpStandby_RsbBriefs_RsbBrief_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "rsb-brief"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *RsvpStandby_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/rsb-briefs/rsb-brief/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// RsvpStandby_Counters
// Counters
type RsvpStandby_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of message counters.
    InterfaceMessages RsvpStandby_Counters_InterfaceMessages

    // Summary information for all RSVP message counters.
    MessageSummary RsvpStandby_Counters_MessageSummary

    // Prefix filtering counters.
    PrefixFiltering RsvpStandby_Counters_PrefixFiltering

    // Out of resource counters.
    OutOfResource RsvpStandby_Counters_OutOfResource

    // Event counters.
    InterfaceEvents RsvpStandby_Counters_InterfaceEvents

    // Summary information for all RSVP NSR counters.
    Nsr RsvpStandby_Counters_Nsr

    // Summary information for all RSVP ISSU counters.
    Issu RsvpStandby_Counters_Issu

    // Summary information for all RSVP database counters.
    Database RsvpStandby_Counters_Database

    // Table containing event sync counters.
    EventSyncs RsvpStandby_Counters_EventSyncs
}

func (counters *RsvpStandby_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "rsvp-standby"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Children.Append("interface-messages", types.YChild{"InterfaceMessages", &counters.InterfaceMessages})
    counters.EntityData.Children.Append("message-summary", types.YChild{"MessageSummary", &counters.MessageSummary})
    counters.EntityData.Children.Append("prefix-filtering", types.YChild{"PrefixFiltering", &counters.PrefixFiltering})
    counters.EntityData.Children.Append("out-of-resource", types.YChild{"OutOfResource", &counters.OutOfResource})
    counters.EntityData.Children.Append("interface-events", types.YChild{"InterfaceEvents", &counters.InterfaceEvents})
    counters.EntityData.Children.Append("nsr", types.YChild{"Nsr", &counters.Nsr})
    counters.EntityData.Children.Append("issu", types.YChild{"Issu", &counters.Issu})
    counters.EntityData.Children.Append("database", types.YChild{"Database", &counters.Database})
    counters.EntityData.Children.Append("event-syncs", types.YChild{"EventSyncs", &counters.EventSyncs})
    counters.EntityData.Leafs = types.NewOrderedMap()

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// RsvpStandby_Counters_InterfaceMessages
// Table of message counters
type RsvpStandby_Counters_InterfaceMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface message counters. The type is slice of
    // RsvpStandby_Counters_InterfaceMessages_InterfaceMessage.
    InterfaceMessage []*RsvpStandby_Counters_InterfaceMessages_InterfaceMessage
}

func (interfaceMessages *RsvpStandby_Counters_InterfaceMessages) GetEntityData() *types.CommonEntityData {
    interfaceMessages.EntityData.YFilter = interfaceMessages.YFilter
    interfaceMessages.EntityData.YangName = "interface-messages"
    interfaceMessages.EntityData.BundleName = "cisco_ios_xr"
    interfaceMessages.EntityData.ParentYangName = "counters"
    interfaceMessages.EntityData.SegmentPath = "interface-messages"
    interfaceMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + interfaceMessages.EntityData.SegmentPath
    interfaceMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMessages.EntityData.Children = types.NewOrderedMap()
    interfaceMessages.EntityData.Children.Append("interface-message", types.YChild{"InterfaceMessage", nil})
    for i := range interfaceMessages.InterfaceMessage {
        interfaceMessages.EntityData.Children.Append(types.GetSegmentPath(interfaceMessages.InterfaceMessage[i]), types.YChild{"InterfaceMessage", interfaceMessages.InterfaceMessage[i]})
    }
    interfaceMessages.EntityData.Leafs = types.NewOrderedMap()

    interfaceMessages.EntityData.YListKeys = []string {}

    return &(interfaceMessages.EntityData)
}

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage
// Interface message counters
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
}

func (interfaceMessage *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage) GetEntityData() *types.CommonEntityData {
    interfaceMessage.EntityData.YFilter = interfaceMessage.YFilter
    interfaceMessage.EntityData.YangName = "interface-message"
    interfaceMessage.EntityData.BundleName = "cisco_ios_xr"
    interfaceMessage.EntityData.ParentYangName = "interface-messages"
    interfaceMessage.EntityData.SegmentPath = "interface-message" + types.AddKeyToken(interfaceMessage.InterfaceName, "interface-name")
    interfaceMessage.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/" + interfaceMessage.EntityData.SegmentPath
    interfaceMessage.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMessage.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMessage.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMessage.EntityData.Children = types.NewOrderedMap()
    interfaceMessage.EntityData.Children.Append("received-messages", types.YChild{"ReceivedMessages", &interfaceMessage.ReceivedMessages})
    interfaceMessage.EntityData.Children.Append("transmitted-messages", types.YChild{"TransmittedMessages", &interfaceMessage.TransmittedMessages})
    interfaceMessage.EntityData.Children.Append("bundle-received-messages", types.YChild{"BundleReceivedMessages", &interfaceMessage.BundleReceivedMessages})
    interfaceMessage.EntityData.Children.Append("bundle-transmitted-messages", types.YChild{"BundleTransmittedMessages", &interfaceMessage.BundleTransmittedMessages})
    interfaceMessage.EntityData.Leafs = types.NewOrderedMap()
    interfaceMessage.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceMessage.InterfaceName})
    interfaceMessage.EntityData.Leafs.Append("retransmitted-messages", types.YLeaf{"RetransmittedMessages", interfaceMessage.RetransmittedMessages})
    interfaceMessage.EntityData.Leafs.Append("out-of-order-messages", types.YLeaf{"OutOfOrderMessages", interfaceMessage.OutOfOrderMessages})
    interfaceMessage.EntityData.Leafs.Append("rate-limited-messages", types.YLeaf{"RateLimitedMessages", interfaceMessage.RateLimitedMessages})

    interfaceMessage.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceMessage.EntityData)
}

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages
// Count of messages received
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetEntityData() *types.CommonEntityData {
    receivedMessages.EntityData.YFilter = receivedMessages.YFilter
    receivedMessages.EntityData.YangName = "received-messages"
    receivedMessages.EntityData.BundleName = "cisco_ios_xr"
    receivedMessages.EntityData.ParentYangName = "interface-message"
    receivedMessages.EntityData.SegmentPath = "received-messages"
    receivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/interface-message/" + receivedMessages.EntityData.SegmentPath
    receivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedMessages.EntityData.Children = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", receivedMessages.Path})
    receivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", receivedMessages.Reservation})
    receivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", receivedMessages.PathError})
    receivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", receivedMessages.ReservationError})
    receivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", receivedMessages.PathTear})
    receivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", receivedMessages.ReservationTear})
    receivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", receivedMessages.ReservationConfirm})
    receivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", receivedMessages.Bundle})
    receivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", receivedMessages.Ack})
    receivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", receivedMessages.Srefresh})
    receivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", receivedMessages.Hello})
    receivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", receivedMessages.Challenge})
    receivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", receivedMessages.Response})

    receivedMessages.EntityData.YListKeys = []string {}

    return &(receivedMessages.EntityData)
}

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages
// Count of messages transmitted
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetEntityData() *types.CommonEntityData {
    transmittedMessages.EntityData.YFilter = transmittedMessages.YFilter
    transmittedMessages.EntityData.YangName = "transmitted-messages"
    transmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    transmittedMessages.EntityData.ParentYangName = "interface-message"
    transmittedMessages.EntityData.SegmentPath = "transmitted-messages"
    transmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/interface-message/" + transmittedMessages.EntityData.SegmentPath
    transmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmittedMessages.EntityData.Children = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", transmittedMessages.Path})
    transmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", transmittedMessages.Reservation})
    transmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", transmittedMessages.PathError})
    transmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", transmittedMessages.ReservationError})
    transmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", transmittedMessages.PathTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", transmittedMessages.ReservationTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", transmittedMessages.ReservationConfirm})
    transmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", transmittedMessages.Bundle})
    transmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", transmittedMessages.Ack})
    transmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", transmittedMessages.Srefresh})
    transmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", transmittedMessages.Hello})
    transmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", transmittedMessages.Challenge})
    transmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", transmittedMessages.Response})

    transmittedMessages.EntityData.YListKeys = []string {}

    return &(transmittedMessages.EntityData)
}

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages
// Count of Bundle messages received
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetEntityData() *types.CommonEntityData {
    bundleReceivedMessages.EntityData.YFilter = bundleReceivedMessages.YFilter
    bundleReceivedMessages.EntityData.YangName = "bundle-received-messages"
    bundleReceivedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleReceivedMessages.EntityData.ParentYangName = "interface-message"
    bundleReceivedMessages.EntityData.SegmentPath = "bundle-received-messages"
    bundleReceivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/interface-message/" + bundleReceivedMessages.EntityData.SegmentPath
    bundleReceivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleReceivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleReceivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleReceivedMessages.EntityData.Children = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleReceivedMessages.Path})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleReceivedMessages.Reservation})
    bundleReceivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleReceivedMessages.PathError})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleReceivedMessages.ReservationError})
    bundleReceivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleReceivedMessages.PathTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleReceivedMessages.ReservationTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleReceivedMessages.ReservationConfirm})
    bundleReceivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleReceivedMessages.Bundle})
    bundleReceivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleReceivedMessages.Ack})
    bundleReceivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleReceivedMessages.Srefresh})
    bundleReceivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleReceivedMessages.Hello})
    bundleReceivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleReceivedMessages.Challenge})
    bundleReceivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleReceivedMessages.Response})

    bundleReceivedMessages.EntityData.YListKeys = []string {}

    return &(bundleReceivedMessages.EntityData)
}

// RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
// Count of Bundle messages transmitted
type RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *RsvpStandby_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetEntityData() *types.CommonEntityData {
    bundleTransmittedMessages.EntityData.YFilter = bundleTransmittedMessages.YFilter
    bundleTransmittedMessages.EntityData.YangName = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleTransmittedMessages.EntityData.ParentYangName = "interface-message"
    bundleTransmittedMessages.EntityData.SegmentPath = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-messages/interface-message/" + bundleTransmittedMessages.EntityData.SegmentPath
    bundleTransmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleTransmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleTransmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleTransmittedMessages.EntityData.Children = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleTransmittedMessages.Path})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleTransmittedMessages.Reservation})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleTransmittedMessages.PathError})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleTransmittedMessages.ReservationError})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleTransmittedMessages.PathTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleTransmittedMessages.ReservationTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleTransmittedMessages.ReservationConfirm})
    bundleTransmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleTransmittedMessages.Bundle})
    bundleTransmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleTransmittedMessages.Ack})
    bundleTransmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleTransmittedMessages.Srefresh})
    bundleTransmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleTransmittedMessages.Hello})
    bundleTransmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleTransmittedMessages.Challenge})
    bundleTransmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleTransmittedMessages.Response})

    bundleTransmittedMessages.EntityData.YListKeys = []string {}

    return &(bundleTransmittedMessages.EntityData)
}

// RsvpStandby_Counters_MessageSummary
// Summary information for all RSVP message
// counters
type RsvpStandby_Counters_MessageSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages RsvpStandby_Counters_MessageSummary_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages RsvpStandby_Counters_MessageSummary_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages RsvpStandby_Counters_MessageSummary_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages
}

func (messageSummary *RsvpStandby_Counters_MessageSummary) GetEntityData() *types.CommonEntityData {
    messageSummary.EntityData.YFilter = messageSummary.YFilter
    messageSummary.EntityData.YangName = "message-summary"
    messageSummary.EntityData.BundleName = "cisco_ios_xr"
    messageSummary.EntityData.ParentYangName = "counters"
    messageSummary.EntityData.SegmentPath = "message-summary"
    messageSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + messageSummary.EntityData.SegmentPath
    messageSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageSummary.EntityData.Children = types.NewOrderedMap()
    messageSummary.EntityData.Children.Append("received-messages", types.YChild{"ReceivedMessages", &messageSummary.ReceivedMessages})
    messageSummary.EntityData.Children.Append("transmitted-messages", types.YChild{"TransmittedMessages", &messageSummary.TransmittedMessages})
    messageSummary.EntityData.Children.Append("bundle-received-messages", types.YChild{"BundleReceivedMessages", &messageSummary.BundleReceivedMessages})
    messageSummary.EntityData.Children.Append("bundle-transmitted-messages", types.YChild{"BundleTransmittedMessages", &messageSummary.BundleTransmittedMessages})
    messageSummary.EntityData.Leafs = types.NewOrderedMap()
    messageSummary.EntityData.Leafs.Append("retransmitted-messages", types.YLeaf{"RetransmittedMessages", messageSummary.RetransmittedMessages})
    messageSummary.EntityData.Leafs.Append("out-of-order-messages", types.YLeaf{"OutOfOrderMessages", messageSummary.OutOfOrderMessages})
    messageSummary.EntityData.Leafs.Append("rate-limited-messages", types.YLeaf{"RateLimitedMessages", messageSummary.RateLimitedMessages})

    messageSummary.EntityData.YListKeys = []string {}

    return &(messageSummary.EntityData)
}

// RsvpStandby_Counters_MessageSummary_ReceivedMessages
// Count of messages received
type RsvpStandby_Counters_MessageSummary_ReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *RsvpStandby_Counters_MessageSummary_ReceivedMessages) GetEntityData() *types.CommonEntityData {
    receivedMessages.EntityData.YFilter = receivedMessages.YFilter
    receivedMessages.EntityData.YangName = "received-messages"
    receivedMessages.EntityData.BundleName = "cisco_ios_xr"
    receivedMessages.EntityData.ParentYangName = "message-summary"
    receivedMessages.EntityData.SegmentPath = "received-messages"
    receivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" + receivedMessages.EntityData.SegmentPath
    receivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedMessages.EntityData.Children = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", receivedMessages.Path})
    receivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", receivedMessages.Reservation})
    receivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", receivedMessages.PathError})
    receivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", receivedMessages.ReservationError})
    receivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", receivedMessages.PathTear})
    receivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", receivedMessages.ReservationTear})
    receivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", receivedMessages.ReservationConfirm})
    receivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", receivedMessages.Bundle})
    receivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", receivedMessages.Ack})
    receivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", receivedMessages.Srefresh})
    receivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", receivedMessages.Hello})
    receivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", receivedMessages.Challenge})
    receivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", receivedMessages.Response})

    receivedMessages.EntityData.YListKeys = []string {}

    return &(receivedMessages.EntityData)
}

// RsvpStandby_Counters_MessageSummary_TransmittedMessages
// Count of messages transmitted
type RsvpStandby_Counters_MessageSummary_TransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *RsvpStandby_Counters_MessageSummary_TransmittedMessages) GetEntityData() *types.CommonEntityData {
    transmittedMessages.EntityData.YFilter = transmittedMessages.YFilter
    transmittedMessages.EntityData.YangName = "transmitted-messages"
    transmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    transmittedMessages.EntityData.ParentYangName = "message-summary"
    transmittedMessages.EntityData.SegmentPath = "transmitted-messages"
    transmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" + transmittedMessages.EntityData.SegmentPath
    transmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmittedMessages.EntityData.Children = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", transmittedMessages.Path})
    transmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", transmittedMessages.Reservation})
    transmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", transmittedMessages.PathError})
    transmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", transmittedMessages.ReservationError})
    transmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", transmittedMessages.PathTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", transmittedMessages.ReservationTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", transmittedMessages.ReservationConfirm})
    transmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", transmittedMessages.Bundle})
    transmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", transmittedMessages.Ack})
    transmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", transmittedMessages.Srefresh})
    transmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", transmittedMessages.Hello})
    transmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", transmittedMessages.Challenge})
    transmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", transmittedMessages.Response})

    transmittedMessages.EntityData.YListKeys = []string {}

    return &(transmittedMessages.EntityData)
}

// RsvpStandby_Counters_MessageSummary_BundleReceivedMessages
// Count of Bundle messages received
type RsvpStandby_Counters_MessageSummary_BundleReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *RsvpStandby_Counters_MessageSummary_BundleReceivedMessages) GetEntityData() *types.CommonEntityData {
    bundleReceivedMessages.EntityData.YFilter = bundleReceivedMessages.YFilter
    bundleReceivedMessages.EntityData.YangName = "bundle-received-messages"
    bundleReceivedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleReceivedMessages.EntityData.ParentYangName = "message-summary"
    bundleReceivedMessages.EntityData.SegmentPath = "bundle-received-messages"
    bundleReceivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" + bundleReceivedMessages.EntityData.SegmentPath
    bundleReceivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleReceivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleReceivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleReceivedMessages.EntityData.Children = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleReceivedMessages.Path})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleReceivedMessages.Reservation})
    bundleReceivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleReceivedMessages.PathError})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleReceivedMessages.ReservationError})
    bundleReceivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleReceivedMessages.PathTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleReceivedMessages.ReservationTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleReceivedMessages.ReservationConfirm})
    bundleReceivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleReceivedMessages.Bundle})
    bundleReceivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleReceivedMessages.Ack})
    bundleReceivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleReceivedMessages.Srefresh})
    bundleReceivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleReceivedMessages.Hello})
    bundleReceivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleReceivedMessages.Challenge})
    bundleReceivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleReceivedMessages.Response})

    bundleReceivedMessages.EntityData.YListKeys = []string {}

    return &(bundleReceivedMessages.EntityData)
}

// RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages
// Count of Bundle messages transmitted
type RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *RsvpStandby_Counters_MessageSummary_BundleTransmittedMessages) GetEntityData() *types.CommonEntityData {
    bundleTransmittedMessages.EntityData.YFilter = bundleTransmittedMessages.YFilter
    bundleTransmittedMessages.EntityData.YangName = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleTransmittedMessages.EntityData.ParentYangName = "message-summary"
    bundleTransmittedMessages.EntityData.SegmentPath = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/message-summary/" + bundleTransmittedMessages.EntityData.SegmentPath
    bundleTransmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleTransmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleTransmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleTransmittedMessages.EntityData.Children = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleTransmittedMessages.Path})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleTransmittedMessages.Reservation})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleTransmittedMessages.PathError})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleTransmittedMessages.ReservationError})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleTransmittedMessages.PathTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleTransmittedMessages.ReservationTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleTransmittedMessages.ReservationConfirm})
    bundleTransmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleTransmittedMessages.Bundle})
    bundleTransmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleTransmittedMessages.Ack})
    bundleTransmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleTransmittedMessages.Srefresh})
    bundleTransmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleTransmittedMessages.Hello})
    bundleTransmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleTransmittedMessages.Challenge})
    bundleTransmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleTransmittedMessages.Response})

    bundleTransmittedMessages.EntityData.YListKeys = []string {}

    return &(bundleTransmittedMessages.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering
// Prefix filtering counters
type RsvpStandby_Counters_PrefixFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AccessList specific prefix filtering counters.
    Accesses RsvpStandby_Counters_PrefixFiltering_Accesses

    // Interface specific prefix filtering counters.
    Interfaces RsvpStandby_Counters_PrefixFiltering_Interfaces
}

func (prefixFiltering *RsvpStandby_Counters_PrefixFiltering) GetEntityData() *types.CommonEntityData {
    prefixFiltering.EntityData.YFilter = prefixFiltering.YFilter
    prefixFiltering.EntityData.YangName = "prefix-filtering"
    prefixFiltering.EntityData.BundleName = "cisco_ios_xr"
    prefixFiltering.EntityData.ParentYangName = "counters"
    prefixFiltering.EntityData.SegmentPath = "prefix-filtering"
    prefixFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + prefixFiltering.EntityData.SegmentPath
    prefixFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixFiltering.EntityData.Children = types.NewOrderedMap()
    prefixFiltering.EntityData.Children.Append("accesses", types.YChild{"Accesses", &prefixFiltering.Accesses})
    prefixFiltering.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &prefixFiltering.Interfaces})
    prefixFiltering.EntityData.Leafs = types.NewOrderedMap()

    prefixFiltering.EntityData.YListKeys = []string {}

    return &(prefixFiltering.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Accesses
// AccessList specific prefix filtering counters
type RsvpStandby_Counters_PrefixFiltering_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific AccessList. The type is slice of
    // RsvpStandby_Counters_PrefixFiltering_Accesses_Access.
    Access []*RsvpStandby_Counters_PrefixFiltering_Accesses_Access
}

func (accesses *RsvpStandby_Counters_PrefixFiltering_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "prefix-filtering"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/" + accesses.EntityData.SegmentPath
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = types.NewOrderedMap()
    accesses.EntityData.Children.Append("access", types.YChild{"Access", nil})
    for i := range accesses.Access {
        accesses.EntityData.Children.Append(types.GetSegmentPath(accesses.Access[i]), types.YChild{"Access", accesses.Access[i]})
    }
    accesses.EntityData.Leafs = types.NewOrderedMap()

    accesses.EntityData.YListKeys = []string {}

    return &(accesses.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access
// Prefix filtering counters for a specific
// AccessList
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. AccessList Name. The type is string with length:
    // 1..65.
    AccessListName interface{}

    // Count of messages which got forwarded.
    Forwarded RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded

    // Count of locally destined messages.
    LocallyDestined RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined

    // Count of messages dropped.
    Dropped RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped

    // Count of total messages.
    Total RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total
}

func (access *RsvpStandby_Counters_PrefixFiltering_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + types.AddKeyToken(access.AccessListName, "access-list-name")
    access.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/" + access.EntityData.SegmentPath
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = types.NewOrderedMap()
    access.EntityData.Children.Append("forwarded", types.YChild{"Forwarded", &access.Forwarded})
    access.EntityData.Children.Append("locally-destined", types.YChild{"LocallyDestined", &access.LocallyDestined})
    access.EntityData.Children.Append("dropped", types.YChild{"Dropped", &access.Dropped})
    access.EntityData.Children.Append("total", types.YChild{"Total", &access.Total})
    access.EntityData.Leafs = types.NewOrderedMap()
    access.EntityData.Leafs.Append("access-list-name", types.YLeaf{"AccessListName", access.AccessListName})

    access.EntityData.YListKeys = []string {"AccessListName"}

    return &(access.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded
// Count of messages which got forwarded
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetEntityData() *types.CommonEntityData {
    forwarded.EntityData.YFilter = forwarded.YFilter
    forwarded.EntityData.YangName = "forwarded"
    forwarded.EntityData.BundleName = "cisco_ios_xr"
    forwarded.EntityData.ParentYangName = "access"
    forwarded.EntityData.SegmentPath = "forwarded"
    forwarded.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/access/" + forwarded.EntityData.SegmentPath
    forwarded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarded.EntityData.Children = types.NewOrderedMap()
    forwarded.EntityData.Leafs = types.NewOrderedMap()
    forwarded.EntityData.Leafs.Append("path", types.YLeaf{"Path", forwarded.Path})
    forwarded.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", forwarded.PathTear})
    forwarded.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", forwarded.ReservationConfirm})
    forwarded.EntityData.Leafs.Append("total", types.YLeaf{"Total", forwarded.Total})

    forwarded.EntityData.YListKeys = []string {}

    return &(forwarded.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined
// Count of locally destined messages
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetEntityData() *types.CommonEntityData {
    locallyDestined.EntityData.YFilter = locallyDestined.YFilter
    locallyDestined.EntityData.YangName = "locally-destined"
    locallyDestined.EntityData.BundleName = "cisco_ios_xr"
    locallyDestined.EntityData.ParentYangName = "access"
    locallyDestined.EntityData.SegmentPath = "locally-destined"
    locallyDestined.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/access/" + locallyDestined.EntityData.SegmentPath
    locallyDestined.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locallyDestined.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locallyDestined.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locallyDestined.EntityData.Children = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs.Append("path", types.YLeaf{"Path", locallyDestined.Path})
    locallyDestined.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", locallyDestined.PathTear})
    locallyDestined.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", locallyDestined.ReservationConfirm})
    locallyDestined.EntityData.Leafs.Append("total", types.YLeaf{"Total", locallyDestined.Total})

    locallyDestined.EntityData.YListKeys = []string {}

    return &(locallyDestined.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped
// Count of messages dropped
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Dropped) GetEntityData() *types.CommonEntityData {
    dropped.EntityData.YFilter = dropped.YFilter
    dropped.EntityData.YangName = "dropped"
    dropped.EntityData.BundleName = "cisco_ios_xr"
    dropped.EntityData.ParentYangName = "access"
    dropped.EntityData.SegmentPath = "dropped"
    dropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/access/" + dropped.EntityData.SegmentPath
    dropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dropped.EntityData.Children = types.NewOrderedMap()
    dropped.EntityData.Leafs = types.NewOrderedMap()
    dropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", dropped.Path})
    dropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", dropped.PathTear})
    dropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", dropped.ReservationConfirm})
    dropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", dropped.Total})

    dropped.EntityData.YListKeys = []string {}

    return &(dropped.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total
// Count of total messages
type RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *RsvpStandby_Counters_PrefixFiltering_Accesses_Access_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "access"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/accesses/access/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("path", types.YLeaf{"Path", total.Path})
    total.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", total.PathTear})
    total.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", total.ReservationConfirm})
    total.EntityData.Leafs.Append("total", types.YLeaf{"Total", total.Total})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces
// Interface specific prefix filtering counters
type RsvpStandby_Counters_PrefixFiltering_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary of prefix filtering counts for all interfaces.
    Summary RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary

    // Table of interface specific prefix filtering counters.
    Interfaces RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "prefix-filtering"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("summary", types.YChild{"Summary", &interfaces.Summary})
    interfaces.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaces.Interfaces})
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary
// Summary of prefix filtering counts for all
// interfaces
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of messages which got forwarded.
    Forwarded RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded

    // Count of locally destined messages.
    LocallyDestined RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined

    // Count of messages dropped.
    Dropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed

    // Count of total messages.
    Total RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total
}

func (summary *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "interfaces"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("forwarded", types.YChild{"Forwarded", &summary.Forwarded})
    summary.EntityData.Children.Append("locally-destined", types.YChild{"LocallyDestined", &summary.LocallyDestined})
    summary.EntityData.Children.Append("dropped", types.YChild{"Dropped", &summary.Dropped})
    summary.EntityData.Children.Append("default-action-dropped", types.YChild{"DefaultActionDropped", &summary.DefaultActionDropped})
    summary.EntityData.Children.Append("default-action-processed", types.YChild{"DefaultActionProcessed", &summary.DefaultActionProcessed})
    summary.EntityData.Children.Append("total", types.YChild{"Total", &summary.Total})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded
// Count of messages which got forwarded
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetEntityData() *types.CommonEntityData {
    forwarded.EntityData.YFilter = forwarded.YFilter
    forwarded.EntityData.YangName = "forwarded"
    forwarded.EntityData.BundleName = "cisco_ios_xr"
    forwarded.EntityData.ParentYangName = "summary"
    forwarded.EntityData.SegmentPath = "forwarded"
    forwarded.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" + forwarded.EntityData.SegmentPath
    forwarded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarded.EntityData.Children = types.NewOrderedMap()
    forwarded.EntityData.Leafs = types.NewOrderedMap()
    forwarded.EntityData.Leafs.Append("path", types.YLeaf{"Path", forwarded.Path})
    forwarded.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", forwarded.PathTear})
    forwarded.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", forwarded.ReservationConfirm})
    forwarded.EntityData.Leafs.Append("total", types.YLeaf{"Total", forwarded.Total})

    forwarded.EntityData.YListKeys = []string {}

    return &(forwarded.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined
// Count of locally destined messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetEntityData() *types.CommonEntityData {
    locallyDestined.EntityData.YFilter = locallyDestined.YFilter
    locallyDestined.EntityData.YangName = "locally-destined"
    locallyDestined.EntityData.BundleName = "cisco_ios_xr"
    locallyDestined.EntityData.ParentYangName = "summary"
    locallyDestined.EntityData.SegmentPath = "locally-destined"
    locallyDestined.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" + locallyDestined.EntityData.SegmentPath
    locallyDestined.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locallyDestined.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locallyDestined.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locallyDestined.EntityData.Children = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs.Append("path", types.YLeaf{"Path", locallyDestined.Path})
    locallyDestined.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", locallyDestined.PathTear})
    locallyDestined.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", locallyDestined.ReservationConfirm})
    locallyDestined.EntityData.Leafs.Append("total", types.YLeaf{"Total", locallyDestined.Total})

    locallyDestined.EntityData.YListKeys = []string {}

    return &(locallyDestined.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped
// Count of messages dropped
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetEntityData() *types.CommonEntityData {
    dropped.EntityData.YFilter = dropped.YFilter
    dropped.EntityData.YangName = "dropped"
    dropped.EntityData.BundleName = "cisco_ios_xr"
    dropped.EntityData.ParentYangName = "summary"
    dropped.EntityData.SegmentPath = "dropped"
    dropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" + dropped.EntityData.SegmentPath
    dropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dropped.EntityData.Children = types.NewOrderedMap()
    dropped.EntityData.Leafs = types.NewOrderedMap()
    dropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", dropped.Path})
    dropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", dropped.PathTear})
    dropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", dropped.ReservationConfirm})
    dropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", dropped.Total})

    dropped.EntityData.YListKeys = []string {}

    return &(dropped.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetEntityData() *types.CommonEntityData {
    defaultActionDropped.EntityData.YFilter = defaultActionDropped.YFilter
    defaultActionDropped.EntityData.YangName = "default-action-dropped"
    defaultActionDropped.EntityData.BundleName = "cisco_ios_xr"
    defaultActionDropped.EntityData.ParentYangName = "summary"
    defaultActionDropped.EntityData.SegmentPath = "default-action-dropped"
    defaultActionDropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" + defaultActionDropped.EntityData.SegmentPath
    defaultActionDropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionDropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionDropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionDropped.EntityData.Children = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionDropped.Path})
    defaultActionDropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionDropped.PathTear})
    defaultActionDropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionDropped.ReservationConfirm})
    defaultActionDropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionDropped.Total})

    defaultActionDropped.EntityData.YListKeys = []string {}

    return &(defaultActionDropped.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetEntityData() *types.CommonEntityData {
    defaultActionProcessed.EntityData.YFilter = defaultActionProcessed.YFilter
    defaultActionProcessed.EntityData.YangName = "default-action-processed"
    defaultActionProcessed.EntityData.BundleName = "cisco_ios_xr"
    defaultActionProcessed.EntityData.ParentYangName = "summary"
    defaultActionProcessed.EntityData.SegmentPath = "default-action-processed"
    defaultActionProcessed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" + defaultActionProcessed.EntityData.SegmentPath
    defaultActionProcessed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionProcessed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionProcessed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionProcessed.EntityData.Children = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionProcessed.Path})
    defaultActionProcessed.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionProcessed.PathTear})
    defaultActionProcessed.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionProcessed.ReservationConfirm})
    defaultActionProcessed.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionProcessed.Total})

    defaultActionProcessed.EntityData.YListKeys = []string {}

    return &(defaultActionProcessed.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total
// Count of total messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Summary_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "summary"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/summary/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("path", types.YLeaf{"Path", total.Path})
    total.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", total.PathTear})
    total.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", total.ReservationConfirm})
    total.EntityData.Leafs.Append("total", types.YLeaf{"Total", total.Total})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces
// Table of interface specific prefix filtering
// counters
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific interface. The type is slice of
    // RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface.
    Interface []*RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
}

func (interfaces *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interfaces"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
// Prefix filtering counters for a specific
// interface
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InterfaceName interface{}

    // Count of messages which got forwarded.
    Forwarded RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded

    // Count of locally destined messages.
    LocallyDestined RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined

    // Count of messages dropped.
    Dropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed

    // Count of total messages.
    Total RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
}

func (self *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("forwarded", types.YChild{"Forwarded", &self.Forwarded})
    self.EntityData.Children.Append("locally-destined", types.YChild{"LocallyDestined", &self.LocallyDestined})
    self.EntityData.Children.Append("dropped", types.YChild{"Dropped", &self.Dropped})
    self.EntityData.Children.Append("default-action-dropped", types.YChild{"DefaultActionDropped", &self.DefaultActionDropped})
    self.EntityData.Children.Append("default-action-processed", types.YChild{"DefaultActionProcessed", &self.DefaultActionProcessed})
    self.EntityData.Children.Append("total", types.YChild{"Total", &self.Total})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded
// Count of messages which got forwarded
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetEntityData() *types.CommonEntityData {
    forwarded.EntityData.YFilter = forwarded.YFilter
    forwarded.EntityData.YangName = "forwarded"
    forwarded.EntityData.BundleName = "cisco_ios_xr"
    forwarded.EntityData.ParentYangName = "interface"
    forwarded.EntityData.SegmentPath = "forwarded"
    forwarded.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/interface/" + forwarded.EntityData.SegmentPath
    forwarded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarded.EntityData.Children = types.NewOrderedMap()
    forwarded.EntityData.Leafs = types.NewOrderedMap()
    forwarded.EntityData.Leafs.Append("path", types.YLeaf{"Path", forwarded.Path})
    forwarded.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", forwarded.PathTear})
    forwarded.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", forwarded.ReservationConfirm})
    forwarded.EntityData.Leafs.Append("total", types.YLeaf{"Total", forwarded.Total})

    forwarded.EntityData.YListKeys = []string {}

    return &(forwarded.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined
// Count of locally destined messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetEntityData() *types.CommonEntityData {
    locallyDestined.EntityData.YFilter = locallyDestined.YFilter
    locallyDestined.EntityData.YangName = "locally-destined"
    locallyDestined.EntityData.BundleName = "cisco_ios_xr"
    locallyDestined.EntityData.ParentYangName = "interface"
    locallyDestined.EntityData.SegmentPath = "locally-destined"
    locallyDestined.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/interface/" + locallyDestined.EntityData.SegmentPath
    locallyDestined.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locallyDestined.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locallyDestined.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locallyDestined.EntityData.Children = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs.Append("path", types.YLeaf{"Path", locallyDestined.Path})
    locallyDestined.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", locallyDestined.PathTear})
    locallyDestined.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", locallyDestined.ReservationConfirm})
    locallyDestined.EntityData.Leafs.Append("total", types.YLeaf{"Total", locallyDestined.Total})

    locallyDestined.EntityData.YListKeys = []string {}

    return &(locallyDestined.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped
// Count of messages dropped
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetEntityData() *types.CommonEntityData {
    dropped.EntityData.YFilter = dropped.YFilter
    dropped.EntityData.YangName = "dropped"
    dropped.EntityData.BundleName = "cisco_ios_xr"
    dropped.EntityData.ParentYangName = "interface"
    dropped.EntityData.SegmentPath = "dropped"
    dropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/interface/" + dropped.EntityData.SegmentPath
    dropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dropped.EntityData.Children = types.NewOrderedMap()
    dropped.EntityData.Leafs = types.NewOrderedMap()
    dropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", dropped.Path})
    dropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", dropped.PathTear})
    dropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", dropped.ReservationConfirm})
    dropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", dropped.Total})

    dropped.EntityData.YListKeys = []string {}

    return &(dropped.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetEntityData() *types.CommonEntityData {
    defaultActionDropped.EntityData.YFilter = defaultActionDropped.YFilter
    defaultActionDropped.EntityData.YangName = "default-action-dropped"
    defaultActionDropped.EntityData.BundleName = "cisco_ios_xr"
    defaultActionDropped.EntityData.ParentYangName = "interface"
    defaultActionDropped.EntityData.SegmentPath = "default-action-dropped"
    defaultActionDropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/interface/" + defaultActionDropped.EntityData.SegmentPath
    defaultActionDropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionDropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionDropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionDropped.EntityData.Children = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionDropped.Path})
    defaultActionDropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionDropped.PathTear})
    defaultActionDropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionDropped.ReservationConfirm})
    defaultActionDropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionDropped.Total})

    defaultActionDropped.EntityData.YListKeys = []string {}

    return &(defaultActionDropped.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetEntityData() *types.CommonEntityData {
    defaultActionProcessed.EntityData.YFilter = defaultActionProcessed.YFilter
    defaultActionProcessed.EntityData.YangName = "default-action-processed"
    defaultActionProcessed.EntityData.BundleName = "cisco_ios_xr"
    defaultActionProcessed.EntityData.ParentYangName = "interface"
    defaultActionProcessed.EntityData.SegmentPath = "default-action-processed"
    defaultActionProcessed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/interface/" + defaultActionProcessed.EntityData.SegmentPath
    defaultActionProcessed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionProcessed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionProcessed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionProcessed.EntityData.Children = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionProcessed.Path})
    defaultActionProcessed.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionProcessed.PathTear})
    defaultActionProcessed.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionProcessed.ReservationConfirm})
    defaultActionProcessed.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionProcessed.Total})

    defaultActionProcessed.EntityData.YListKeys = []string {}

    return &(defaultActionProcessed.EntityData)
}

// RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
// Count of total messages
type RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *RsvpStandby_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "interface"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/prefix-filtering/interfaces/interfaces/interface/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("path", types.YLeaf{"Path", total.Path})
    total.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", total.PathTear})
    total.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", total.ReservationConfirm})
    total.EntityData.Leafs.Append("total", types.YLeaf{"Total", total.Total})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// RsvpStandby_Counters_OutOfResource
// Out of resource counters
type RsvpStandby_Counters_OutOfResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface specific out of resource counters.
    Interfaces RsvpStandby_Counters_OutOfResource_Interfaces
}

func (outOfResource *RsvpStandby_Counters_OutOfResource) GetEntityData() *types.CommonEntityData {
    outOfResource.EntityData.YFilter = outOfResource.YFilter
    outOfResource.EntityData.YangName = "out-of-resource"
    outOfResource.EntityData.BundleName = "cisco_ios_xr"
    outOfResource.EntityData.ParentYangName = "counters"
    outOfResource.EntityData.SegmentPath = "out-of-resource"
    outOfResource.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + outOfResource.EntityData.SegmentPath
    outOfResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outOfResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outOfResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outOfResource.EntityData.Children = types.NewOrderedMap()
    outOfResource.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &outOfResource.Interfaces})
    outOfResource.EntityData.Leafs = types.NewOrderedMap()

    outOfResource.EntityData.YListKeys = []string {}

    return &(outOfResource.EntityData)
}

// RsvpStandby_Counters_OutOfResource_Interfaces
// Interface specific out of resource counters
type RsvpStandby_Counters_OutOfResource_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary of out of resource counts for all interfaces.
    Summary RsvpStandby_Counters_OutOfResource_Interfaces_Summary

    // Table of interface specific out of resource counters.
    Interfaces RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "out-of-resource"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("summary", types.YChild{"Summary", &interfaces.Summary})
    interfaces.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaces.Interfaces})
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// RsvpStandby_Counters_OutOfResource_Interfaces_Summary
// Summary of out of resource counts for all
// interfaces
type RsvpStandby_Counters_OutOfResource_Interfaces_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (summary *RsvpStandby_Counters_OutOfResource_Interfaces_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "interfaces"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("dropped-path-messages", types.YLeaf{"DroppedPathMessages", summary.DroppedPathMessages})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces
// Table of interface specific out of resource
// counters
type RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Out of resource counters for a specific interface. The type is slice of
    // RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface.
    Interface []*RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface
}

func (interfaces *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interfaces"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface
// Out of resource counters for a specific
// interface
type RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InterfaceName interface{}

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (self *RsvpStandby_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/out-of-resource/interfaces/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("dropped-path-messages", types.YLeaf{"DroppedPathMessages", self.DroppedPathMessages})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// RsvpStandby_Counters_InterfaceEvents
// Event counters
type RsvpStandby_Counters_InterfaceEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event counters for an interface. The type is slice of
    // RsvpStandby_Counters_InterfaceEvents_InterfaceEvent.
    InterfaceEvent []*RsvpStandby_Counters_InterfaceEvents_InterfaceEvent
}

func (interfaceEvents *RsvpStandby_Counters_InterfaceEvents) GetEntityData() *types.CommonEntityData {
    interfaceEvents.EntityData.YFilter = interfaceEvents.YFilter
    interfaceEvents.EntityData.YangName = "interface-events"
    interfaceEvents.EntityData.BundleName = "cisco_ios_xr"
    interfaceEvents.EntityData.ParentYangName = "counters"
    interfaceEvents.EntityData.SegmentPath = "interface-events"
    interfaceEvents.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + interfaceEvents.EntityData.SegmentPath
    interfaceEvents.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceEvents.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceEvents.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceEvents.EntityData.Children = types.NewOrderedMap()
    interfaceEvents.EntityData.Children.Append("interface-event", types.YChild{"InterfaceEvent", nil})
    for i := range interfaceEvents.InterfaceEvent {
        interfaceEvents.EntityData.Children.Append(types.GetSegmentPath(interfaceEvents.InterfaceEvent[i]), types.YChild{"InterfaceEvent", interfaceEvents.InterfaceEvent[i]})
    }
    interfaceEvents.EntityData.Leafs = types.NewOrderedMap()

    interfaceEvents.EntityData.YListKeys = []string {}

    return &(interfaceEvents.EntityData)
}

// RsvpStandby_Counters_InterfaceEvents_InterfaceEvent
// Event counters for an interface
type RsvpStandby_Counters_InterfaceEvents_InterfaceEvent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (interfaceEvent *RsvpStandby_Counters_InterfaceEvents_InterfaceEvent) GetEntityData() *types.CommonEntityData {
    interfaceEvent.EntityData.YFilter = interfaceEvent.YFilter
    interfaceEvent.EntityData.YangName = "interface-event"
    interfaceEvent.EntityData.BundleName = "cisco_ios_xr"
    interfaceEvent.EntityData.ParentYangName = "interface-events"
    interfaceEvent.EntityData.SegmentPath = "interface-event" + types.AddKeyToken(interfaceEvent.InterfaceName, "interface-name")
    interfaceEvent.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/interface-events/" + interfaceEvent.EntityData.SegmentPath
    interfaceEvent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceEvent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceEvent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceEvent.EntityData.Children = types.NewOrderedMap()
    interfaceEvent.EntityData.Leafs = types.NewOrderedMap()
    interfaceEvent.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceEvent.InterfaceName})
    interfaceEvent.EntityData.Leafs.Append("expired-paths", types.YLeaf{"ExpiredPaths", interfaceEvent.ExpiredPaths})
    interfaceEvent.EntityData.Leafs.Append("expired-reservations", types.YLeaf{"ExpiredReservations", interfaceEvent.ExpiredReservations})
    interfaceEvent.EntityData.Leafs.Append("nac-ks", types.YLeaf{"NacKs", interfaceEvent.NacKs})

    interfaceEvent.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceEvent.EntityData)
}

// RsvpStandby_Counters_Nsr
// Summary information for all RSVP NSR counters
type RsvpStandby_Counters_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (nsr *RsvpStandby_Counters_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "counters"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Leafs = types.NewOrderedMap()
    nsr.EntityData.Leafs.Append("last-cleared-timestamp", types.YLeaf{"LastClearedTimestamp", nsr.LastClearedTimestamp})
    nsr.EntityData.Leafs.Append("rsvp-process-role", types.YLeaf{"RsvpProcessRole", nsr.RsvpProcessRole})
    nsr.EntityData.Leafs.Append("last-idt-states", types.YLeaf{"LastIdtStates", nsr.LastIdtStates})
    nsr.EntityData.Leafs.Append("total-states", types.YLeaf{"TotalStates", nsr.TotalStates})
    nsr.EntityData.Leafs.Append("total-deletions", types.YLeaf{"TotalDeletions", nsr.TotalDeletions})
    nsr.EntityData.Leafs.Append("total-nacks", types.YLeaf{"TotalNacks", nsr.TotalNacks})
    nsr.EntityData.Leafs.Append("total-id-ts", types.YLeaf{"TotalIdTs", nsr.TotalIdTs})

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// RsvpStandby_Counters_Issu
// Summary information for all RSVP ISSU counters
type RsvpStandby_Counters_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (issu *RsvpStandby_Counters_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "counters"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Leafs = types.NewOrderedMap()
    issu.EntityData.Leafs.Append("last-cleared-timestamp", types.YLeaf{"LastClearedTimestamp", issu.LastClearedTimestamp})
    issu.EntityData.Leafs.Append("rsvp-process-role", types.YLeaf{"RsvpProcessRole", issu.RsvpProcessRole})
    issu.EntityData.Leafs.Append("last-idt-states", types.YLeaf{"LastIdtStates", issu.LastIdtStates})
    issu.EntityData.Leafs.Append("total-states", types.YLeaf{"TotalStates", issu.TotalStates})
    issu.EntityData.Leafs.Append("total-deletions", types.YLeaf{"TotalDeletions", issu.TotalDeletions})
    issu.EntityData.Leafs.Append("total-nacks", types.YLeaf{"TotalNacks", issu.TotalNacks})
    issu.EntityData.Leafs.Append("total-id-ts", types.YLeaf{"TotalIdTs", issu.TotalIdTs})

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// RsvpStandby_Counters_Database
// Summary information for all RSVP database
// counters
type RsvpStandby_Counters_Database struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (database *RsvpStandby_Counters_Database) GetEntityData() *types.CommonEntityData {
    database.EntityData.YFilter = database.YFilter
    database.EntityData.YangName = "database"
    database.EntityData.BundleName = "cisco_ios_xr"
    database.EntityData.ParentYangName = "counters"
    database.EntityData.SegmentPath = "database"
    database.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + database.EntityData.SegmentPath
    database.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    database.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    database.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    database.EntityData.Children = types.NewOrderedMap()
    database.EntityData.Leafs = types.NewOrderedMap()
    database.EntityData.Leafs.Append("sessions", types.YLeaf{"Sessions", database.Sessions})
    database.EntityData.Leafs.Append("incoming-paths", types.YLeaf{"IncomingPaths", database.IncomingPaths})
    database.EntityData.Leafs.Append("outgoing-paths", types.YLeaf{"OutgoingPaths", database.OutgoingPaths})
    database.EntityData.Leafs.Append("incoming-reservations", types.YLeaf{"IncomingReservations", database.IncomingReservations})
    database.EntityData.Leafs.Append("outgoing-reservations", types.YLeaf{"OutgoingReservations", database.OutgoingReservations})
    database.EntityData.Leafs.Append("interfaces", types.YLeaf{"Interfaces", database.Interfaces})

    database.EntityData.YListKeys = []string {}

    return &(database.EntityData)
}

// RsvpStandby_Counters_EventSyncs
// Table containing event sync counters
type RsvpStandby_Counters_EventSyncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event sync counters. The type is slice of
    // RsvpStandby_Counters_EventSyncs_EventSync.
    EventSync []*RsvpStandby_Counters_EventSyncs_EventSync
}

func (eventSyncs *RsvpStandby_Counters_EventSyncs) GetEntityData() *types.CommonEntityData {
    eventSyncs.EntityData.YFilter = eventSyncs.YFilter
    eventSyncs.EntityData.YangName = "event-syncs"
    eventSyncs.EntityData.BundleName = "cisco_ios_xr"
    eventSyncs.EntityData.ParentYangName = "counters"
    eventSyncs.EntityData.SegmentPath = "event-syncs"
    eventSyncs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/" + eventSyncs.EntityData.SegmentPath
    eventSyncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventSyncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventSyncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventSyncs.EntityData.Children = types.NewOrderedMap()
    eventSyncs.EntityData.Children.Append("event-sync", types.YChild{"EventSync", nil})
    for i := range eventSyncs.EventSync {
        eventSyncs.EntityData.Children.Append(types.GetSegmentPath(eventSyncs.EventSync[i]), types.YChild{"EventSync", eventSyncs.EventSync[i]})
    }
    eventSyncs.EntityData.Leafs = types.NewOrderedMap()

    eventSyncs.EntityData.YListKeys = []string {}

    return &(eventSyncs.EntityData)
}

// RsvpStandby_Counters_EventSyncs_EventSync
// Event sync counters
type RsvpStandby_Counters_EventSyncs_EventSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (eventSync *RsvpStandby_Counters_EventSyncs_EventSync) GetEntityData() *types.CommonEntityData {
    eventSync.EntityData.YFilter = eventSync.YFilter
    eventSync.EntityData.YangName = "event-sync"
    eventSync.EntityData.BundleName = "cisco_ios_xr"
    eventSync.EntityData.ParentYangName = "event-syncs"
    eventSync.EntityData.SegmentPath = "event-sync" + types.AddKeyToken(eventSync.InterfaceName, "interface-name")
    eventSync.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/counters/event-syncs/" + eventSync.EntityData.SegmentPath
    eventSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventSync.EntityData.Children = types.NewOrderedMap()
    eventSync.EntityData.Leafs = types.NewOrderedMap()
    eventSync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", eventSync.InterfaceName})
    eventSync.EntityData.Leafs.Append("expired-paths", types.YLeaf{"ExpiredPaths", eventSync.ExpiredPaths})
    eventSync.EntityData.Leafs.Append("expired-reservations", types.YLeaf{"ExpiredReservations", eventSync.ExpiredReservations})
    eventSync.EntityData.Leafs.Append("nac-ks", types.YLeaf{"NacKs", eventSync.NacKs})

    eventSync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(eventSync.EntityData)
}

// RsvpStandby_InterfaceDetaileds
// Table of detailed info about RSVP-enabled
// interfaces
type RsvpStandby_InterfaceDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled interface. The type is slice of
    // RsvpStandby_InterfaceDetaileds_InterfaceDetailed.
    InterfaceDetailed []*RsvpStandby_InterfaceDetaileds_InterfaceDetailed
}

func (interfaceDetaileds *RsvpStandby_InterfaceDetaileds) GetEntityData() *types.CommonEntityData {
    interfaceDetaileds.EntityData.YFilter = interfaceDetaileds.YFilter
    interfaceDetaileds.EntityData.YangName = "interface-detaileds"
    interfaceDetaileds.EntityData.BundleName = "cisco_ios_xr"
    interfaceDetaileds.EntityData.ParentYangName = "rsvp-standby"
    interfaceDetaileds.EntityData.SegmentPath = "interface-detaileds"
    interfaceDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + interfaceDetaileds.EntityData.SegmentPath
    interfaceDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceDetaileds.EntityData.Children = types.NewOrderedMap()
    interfaceDetaileds.EntityData.Children.Append("interface-detailed", types.YChild{"InterfaceDetailed", nil})
    for i := range interfaceDetaileds.InterfaceDetailed {
        interfaceDetaileds.EntityData.Children.Append(types.GetSegmentPath(interfaceDetaileds.InterfaceDetailed[i]), types.YChild{"InterfaceDetailed", interfaceDetaileds.InterfaceDetailed[i]})
    }
    interfaceDetaileds.EntityData.Leafs = types.NewOrderedMap()

    interfaceDetaileds.EntityData.YListKeys = []string {}

    return &(interfaceDetaileds.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed
// Detailed info about an RSVP-enabled interface
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation

    // Interface flags.
    Flags RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags

    // Neighbor array. The type is slice of
    // RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray.
    NeighborArray []*RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray
}

func (interfaceDetailed *RsvpStandby_InterfaceDetaileds_InterfaceDetailed) GetEntityData() *types.CommonEntityData {
    interfaceDetailed.EntityData.YFilter = interfaceDetailed.YFilter
    interfaceDetailed.EntityData.YangName = "interface-detailed"
    interfaceDetailed.EntityData.BundleName = "cisco_ios_xr"
    interfaceDetailed.EntityData.ParentYangName = "interface-detaileds"
    interfaceDetailed.EntityData.SegmentPath = "interface-detailed" + types.AddKeyToken(interfaceDetailed.InterfaceName, "interface-name")
    interfaceDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/" + interfaceDetailed.EntityData.SegmentPath
    interfaceDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceDetailed.EntityData.Children = types.NewOrderedMap()
    interfaceDetailed.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &interfaceDetailed.BandwidthInformation})
    interfaceDetailed.EntityData.Children.Append("flags", types.YChild{"Flags", &interfaceDetailed.Flags})
    interfaceDetailed.EntityData.Children.Append("neighbor-array", types.YChild{"NeighborArray", nil})
    for i := range interfaceDetailed.NeighborArray {
        types.SetYListKey(interfaceDetailed.NeighborArray[i], i)
        interfaceDetailed.EntityData.Children.Append(types.GetSegmentPath(interfaceDetailed.NeighborArray[i]), types.YChild{"NeighborArray", interfaceDetailed.NeighborArray[i]})
    }
    interfaceDetailed.EntityData.Leafs = types.NewOrderedMap()
    interfaceDetailed.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceDetailed.InterfaceName})
    interfaceDetailed.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceDetailed.InterfaceNameXr})
    interfaceDetailed.EntityData.Leafs.Append("signalling-ip-tos", types.YLeaf{"SignallingIpTos", interfaceDetailed.SignallingIpTos})
    interfaceDetailed.EntityData.Leafs.Append("integrity-send-password", types.YLeaf{"IntegritySendPassword", interfaceDetailed.IntegritySendPassword})
    interfaceDetailed.EntityData.Leafs.Append("integrity-receive-password", types.YLeaf{"IntegrityReceivePassword", interfaceDetailed.IntegrityReceivePassword})
    interfaceDetailed.EntityData.Leafs.Append("integrity-receive-password-optional", types.YLeaf{"IntegrityReceivePasswordOptional", interfaceDetailed.IntegrityReceivePasswordOptional})
    interfaceDetailed.EntityData.Leafs.Append("refresh-timer-state", types.YLeaf{"RefreshTimerState", interfaceDetailed.RefreshTimerState})
    interfaceDetailed.EntityData.Leafs.Append("summary-refresh-timer-state", types.YLeaf{"SummaryRefreshTimerState", interfaceDetailed.SummaryRefreshTimerState})
    interfaceDetailed.EntityData.Leafs.Append("refresh-interval", types.YLeaf{"RefreshInterval", interfaceDetailed.RefreshInterval})
    interfaceDetailed.EntityData.Leafs.Append("out-of-band-refresh-interval", types.YLeaf{"OutOfBandRefreshInterval", interfaceDetailed.OutOfBandRefreshInterval})
    interfaceDetailed.EntityData.Leafs.Append("summary-refresh-max-size", types.YLeaf{"SummaryRefreshMaxSize", interfaceDetailed.SummaryRefreshMaxSize})
    interfaceDetailed.EntityData.Leafs.Append("bundle-message-max-size", types.YLeaf{"BundleMessageMaxSize", interfaceDetailed.BundleMessageMaxSize})
    interfaceDetailed.EntityData.Leafs.Append("expiry-timer-state", types.YLeaf{"ExpiryTimerState", interfaceDetailed.ExpiryTimerState})
    interfaceDetailed.EntityData.Leafs.Append("expiry-states", types.YLeaf{"ExpiryStates", interfaceDetailed.ExpiryStates})
    interfaceDetailed.EntityData.Leafs.Append("expiry-interval", types.YLeaf{"ExpiryInterval", interfaceDetailed.ExpiryInterval})
    interfaceDetailed.EntityData.Leafs.Append("expiry-drops-tolerated", types.YLeaf{"ExpiryDropsTolerated", interfaceDetailed.ExpiryDropsTolerated})
    interfaceDetailed.EntityData.Leafs.Append("out-of-band-expiry-drops-tolerated", types.YLeaf{"OutOfBandExpiryDropsTolerated", interfaceDetailed.OutOfBandExpiryDropsTolerated})
    interfaceDetailed.EntityData.Leafs.Append("ack-hold-time", types.YLeaf{"AckHoldTime", interfaceDetailed.AckHoldTime})
    interfaceDetailed.EntityData.Leafs.Append("ack-max-size", types.YLeaf{"AckMaxSize", interfaceDetailed.AckMaxSize})
    interfaceDetailed.EntityData.Leafs.Append("retransmit-time", types.YLeaf{"RetransmitTime", interfaceDetailed.RetransmitTime})
    interfaceDetailed.EntityData.Leafs.Append("pacing-interval", types.YLeaf{"PacingInterval", interfaceDetailed.PacingInterval})
    interfaceDetailed.EntityData.Leafs.Append("pacing-message-rate", types.YLeaf{"PacingMessageRate", interfaceDetailed.PacingMessageRate})
    interfaceDetailed.EntityData.Leafs.Append("pacing-timer-state", types.YLeaf{"PacingTimerState", interfaceDetailed.PacingTimerState})
    interfaceDetailed.EntityData.Leafs.Append("pacing-messages", types.YLeaf{"PacingMessages", interfaceDetailed.PacingMessages})

    interfaceDetailed.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceDetailed.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "interface-detailed"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags
// Interface flags
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "interface-detailed"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-mpls-enabled", types.YLeaf{"IsMplsEnabled", flags.IsMplsEnabled})
    flags.EntityData.Leafs.Append("is-refresh-reduction-enabled", types.YLeaf{"IsRefreshReductionEnabled", flags.IsRefreshReductionEnabled})
    flags.EntityData.Leafs.Append("is-pacing-enabled", types.YLeaf{"IsPacingEnabled", flags.IsPacingEnabled})
    flags.EntityData.Leafs.Append("is-refresh-enabled", types.YLeaf{"IsRefreshEnabled", flags.IsRefreshEnabled})
    flags.EntityData.Leafs.Append("is-s-refresh-enabled", types.YLeaf{"IsSRefreshEnabled", flags.IsSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-interface-down", types.YLeaf{"IsInterfaceDown", flags.IsInterfaceDown})
    flags.EntityData.Leafs.Append("is-interface-created", types.YLeaf{"IsInterfaceCreated", flags.IsInterfaceCreated})
    flags.EntityData.Leafs.Append("is-rel-s-refresh-enabled", types.YLeaf{"IsRelSRefreshEnabled", flags.IsRelSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-backup-tunnel", types.YLeaf{"IsBackupTunnel", flags.IsBackupTunnel})
    flags.EntityData.Leafs.Append("is-rsvp-configured", types.YLeaf{"IsRsvpConfigured", flags.IsRsvpConfigured})
    flags.EntityData.Leafs.Append("is-non-default-vrf", types.YLeaf{"IsNonDefaultVrf", flags.IsNonDefaultVrf})
    flags.EntityData.Leafs.Append("is-message-bundling-enabled", types.YLeaf{"IsMessageBundlingEnabled", flags.IsMessageBundlingEnabled})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray
// Neighbor array
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []*RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetEntityData() *types.CommonEntityData {
    neighborArray.EntityData.YFilter = neighborArray.YFilter
    neighborArray.EntityData.YangName = "neighbor-array"
    neighborArray.EntityData.BundleName = "cisco_ios_xr"
    neighborArray.EntityData.ParentYangName = "interface-detailed"
    neighborArray.EntityData.SegmentPath = "neighbor-array" + types.AddNoKeyToken(neighborArray)
    neighborArray.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/" + neighborArray.EntityData.SegmentPath
    neighborArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborArray.EntityData.Children = types.NewOrderedMap()
    neighborArray.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &neighborArray.ExpiryTime})
    neighborArray.EntityData.Children.Append("neighbor-message-id", types.YChild{"NeighborMessageId", nil})
    for i := range neighborArray.NeighborMessageId {
        types.SetYListKey(neighborArray.NeighborMessageId[i], i)
        neighborArray.EntityData.Children.Append(types.GetSegmentPath(neighborArray.NeighborMessageId[i]), types.YChild{"NeighborMessageId", neighborArray.NeighborMessageId[i]})
    }
    neighborArray.EntityData.Leafs = types.NewOrderedMap()
    neighborArray.EntityData.Leafs.Append("is-neighbor-refresh-reduction-capable", types.YLeaf{"IsNeighborRefreshReductionCapable", neighborArray.IsNeighborRefreshReductionCapable})
    neighborArray.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborArray.NeighborAddress})
    neighborArray.EntityData.Leafs.Append("message-ids", types.YLeaf{"MessageIds", neighborArray.MessageIds})
    neighborArray.EntityData.Leafs.Append("outgoing-states", types.YLeaf{"OutgoingStates", neighborArray.OutgoingStates})

    neighborArray.EntityData.YListKeys = []string {}

    return &(neighborArray.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime
// Expiry time
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "neighbor-array"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/neighbor-array/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *RsvpStandby_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetEntityData() *types.CommonEntityData {
    neighborMessageId.EntityData.YFilter = neighborMessageId.YFilter
    neighborMessageId.EntityData.YangName = "neighbor-message-id"
    neighborMessageId.EntityData.BundleName = "cisco_ios_xr"
    neighborMessageId.EntityData.ParentYangName = "neighbor-array"
    neighborMessageId.EntityData.SegmentPath = "neighbor-message-id" + types.AddNoKeyToken(neighborMessageId)
    neighborMessageId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-detaileds/interface-detailed/neighbor-array/" + neighborMessageId.EntityData.SegmentPath
    neighborMessageId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborMessageId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborMessageId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborMessageId.EntityData.Children = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs.Append("message-id", types.YLeaf{"MessageId", neighborMessageId.MessageId})

    neighborMessageId.EntityData.YListKeys = []string {}

    return &(neighborMessageId.EntityData)
}

// RsvpStandby_ControllerBriefs
// Table of brief info about RSVP-enabled
// controller
type RsvpStandby_ControllerBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled controller. The type is slice of
    // RsvpStandby_ControllerBriefs_ControllerBrief.
    ControllerBrief []*RsvpStandby_ControllerBriefs_ControllerBrief
}

func (controllerBriefs *RsvpStandby_ControllerBriefs) GetEntityData() *types.CommonEntityData {
    controllerBriefs.EntityData.YFilter = controllerBriefs.YFilter
    controllerBriefs.EntityData.YangName = "controller-briefs"
    controllerBriefs.EntityData.BundleName = "cisco_ios_xr"
    controllerBriefs.EntityData.ParentYangName = "rsvp-standby"
    controllerBriefs.EntityData.SegmentPath = "controller-briefs"
    controllerBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + controllerBriefs.EntityData.SegmentPath
    controllerBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerBriefs.EntityData.Children = types.NewOrderedMap()
    controllerBriefs.EntityData.Children.Append("controller-brief", types.YChild{"ControllerBrief", nil})
    for i := range controllerBriefs.ControllerBrief {
        controllerBriefs.EntityData.Children.Append(types.GetSegmentPath(controllerBriefs.ControllerBrief[i]), types.YChild{"ControllerBrief", controllerBriefs.ControllerBrief[i]})
    }
    controllerBriefs.EntityData.Leafs = types.NewOrderedMap()

    controllerBriefs.EntityData.YListKeys = []string {}

    return &(controllerBriefs.EntityData)
}

// RsvpStandby_ControllerBriefs_ControllerBrief
// Brief info about an RSVP-enabled controller
type RsvpStandby_ControllerBriefs_ControllerBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Controller Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation
}

func (controllerBrief *RsvpStandby_ControllerBriefs_ControllerBrief) GetEntityData() *types.CommonEntityData {
    controllerBrief.EntityData.YFilter = controllerBrief.YFilter
    controllerBrief.EntityData.YangName = "controller-brief"
    controllerBrief.EntityData.BundleName = "cisco_ios_xr"
    controllerBrief.EntityData.ParentYangName = "controller-briefs"
    controllerBrief.EntityData.SegmentPath = "controller-brief" + types.AddKeyToken(controllerBrief.ControllerName, "controller-name")
    controllerBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-briefs/" + controllerBrief.EntityData.SegmentPath
    controllerBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerBrief.EntityData.Children = types.NewOrderedMap()
    controllerBrief.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &controllerBrief.BandwidthInformation})
    controllerBrief.EntityData.Leafs = types.NewOrderedMap()
    controllerBrief.EntityData.Leafs.Append("controller-name", types.YLeaf{"ControllerName", controllerBrief.ControllerName})
    controllerBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", controllerBrief.InterfaceNameXr})

    controllerBrief.EntityData.YListKeys = []string {"ControllerName"}

    return &(controllerBrief.EntityData)
}

// RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "controller-brief"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-briefs/controller-brief/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-briefs/controller-brief/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/controller-briefs/controller-brief/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// RsvpStandby_GracefulRestart
// Info about graceful-restart
type RsvpStandby_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether GR is enabled. The type is bool.
    IsGrEnabled interface{}

    // Global neighbor count. The type is interface{} with range: 0..4294967295.
    GlobalNeighbors interface{}

    // Restart time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Recovery time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Whether recovery timer is running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Interval at which hello messages are sent. The type is interface{} with
    // range: 0..4294967295.
    HelloInterval interface{}

    // Max number of hellos missed before hellos declared down. The type is
    // interface{} with range: 0..255.
    MissedHellos interface{}

    // Total number of pending states. The type is interface{} with range:
    // 0..4294967295.
    PendingStates interface{}

    // How much recovery timer remains.
    RecoveryTimeLeft RsvpStandby_GracefulRestart_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime RsvpStandby_GracefulRestart_RecoveryTimerExpTime

    // Local node address. The type is slice of
    // RsvpStandby_GracefulRestart_LocalNodeAddress.
    LocalNodeAddress []*RsvpStandby_GracefulRestart_LocalNodeAddress
}

func (gracefulRestart *RsvpStandby_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "rsvp-standby"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("recovery-time-left", types.YChild{"RecoveryTimeLeft", &gracefulRestart.RecoveryTimeLeft})
    gracefulRestart.EntityData.Children.Append("recovery-timer-exp-time", types.YChild{"RecoveryTimerExpTime", &gracefulRestart.RecoveryTimerExpTime})
    gracefulRestart.EntityData.Children.Append("local-node-address", types.YChild{"LocalNodeAddress", nil})
    for i := range gracefulRestart.LocalNodeAddress {
        types.SetYListKey(gracefulRestart.LocalNodeAddress[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.LocalNodeAddress[i]), types.YChild{"LocalNodeAddress", gracefulRestart.LocalNodeAddress[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", gracefulRestart.IsGrEnabled})
    gracefulRestart.EntityData.Leafs.Append("global-neighbors", types.YLeaf{"GlobalNeighbors", gracefulRestart.GlobalNeighbors})
    gracefulRestart.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", gracefulRestart.RestartTime})
    gracefulRestart.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", gracefulRestart.RecoveryTime})
    gracefulRestart.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestart.IsRecoveryTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", gracefulRestart.HelloInterval})
    gracefulRestart.EntityData.Leafs.Append("missed-hellos", types.YLeaf{"MissedHellos", gracefulRestart.MissedHellos})
    gracefulRestart.EntityData.Leafs.Append("pending-states", types.YLeaf{"PendingStates", gracefulRestart.PendingStates})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// RsvpStandby_GracefulRestart_RecoveryTimeLeft
// How much recovery timer remains
type RsvpStandby_GracefulRestart_RecoveryTimeLeft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *RsvpStandby_GracefulRestart_RecoveryTimeLeft) GetEntityData() *types.CommonEntityData {
    recoveryTimeLeft.EntityData.YFilter = recoveryTimeLeft.YFilter
    recoveryTimeLeft.EntityData.YangName = "recovery-time-left"
    recoveryTimeLeft.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimeLeft.EntityData.ParentYangName = "graceful-restart"
    recoveryTimeLeft.EntityData.SegmentPath = "recovery-time-left"
    recoveryTimeLeft.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/" + recoveryTimeLeft.EntityData.SegmentPath
    recoveryTimeLeft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimeLeft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimeLeft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimeLeft.EntityData.Children = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimeLeft.Seconds})
    recoveryTimeLeft.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimeLeft.Nanoseconds})

    recoveryTimeLeft.EntityData.YListKeys = []string {}

    return &(recoveryTimeLeft.EntityData)
}

// RsvpStandby_GracefulRestart_RecoveryTimerExpTime
// Time at which recovery timer will expire
type RsvpStandby_GracefulRestart_RecoveryTimerExpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *RsvpStandby_GracefulRestart_RecoveryTimerExpTime) GetEntityData() *types.CommonEntityData {
    recoveryTimerExpTime.EntityData.YFilter = recoveryTimerExpTime.YFilter
    recoveryTimerExpTime.EntityData.YangName = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimerExpTime.EntityData.ParentYangName = "graceful-restart"
    recoveryTimerExpTime.EntityData.SegmentPath = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/" + recoveryTimerExpTime.EntityData.SegmentPath
    recoveryTimerExpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimerExpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimerExpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimerExpTime.EntityData.Children = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimerExpTime.Seconds})
    recoveryTimerExpTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimerExpTime.Nanoseconds})

    recoveryTimerExpTime.EntityData.YListKeys = []string {}

    return &(recoveryTimerExpTime.EntityData)
}

// RsvpStandby_GracefulRestart_LocalNodeAddress
// Local node address
type RsvpStandby_GracefulRestart_LocalNodeAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LocalNodeIpAddress interface{}

    // GR local node-id app type. The type is RsvpMgmtGrApp.
    ApplicationType interface{}
}

func (localNodeAddress *RsvpStandby_GracefulRestart_LocalNodeAddress) GetEntityData() *types.CommonEntityData {
    localNodeAddress.EntityData.YFilter = localNodeAddress.YFilter
    localNodeAddress.EntityData.YangName = "local-node-address"
    localNodeAddress.EntityData.BundleName = "cisco_ios_xr"
    localNodeAddress.EntityData.ParentYangName = "graceful-restart"
    localNodeAddress.EntityData.SegmentPath = "local-node-address" + types.AddNoKeyToken(localNodeAddress)
    localNodeAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/graceful-restart/" + localNodeAddress.EntityData.SegmentPath
    localNodeAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localNodeAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localNodeAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localNodeAddress.EntityData.Children = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs.Append("local-node-ip-address", types.YLeaf{"LocalNodeIpAddress", localNodeAddress.LocalNodeIpAddress})
    localNodeAddress.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", localNodeAddress.ApplicationType})

    localNodeAddress.EntityData.YListKeys = []string {}

    return &(localNodeAddress.EntityData)
}

// RsvpStandby_HelloInterfaceInstanceBriefs
// Table of brief info about i/f-based hello
// instances
type RsvpStandby_HelloInterfaceInstanceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single interface-based hello instance. The type is slice
    // of RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief.
    HelloInterfaceInstanceBrief []*RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
}

func (helloInterfaceInstanceBriefs *RsvpStandby_HelloInterfaceInstanceBriefs) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceBriefs.EntityData.YFilter = helloInterfaceInstanceBriefs.YFilter
    helloInterfaceInstanceBriefs.EntityData.YangName = "hello-interface-instance-briefs"
    helloInterfaceInstanceBriefs.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceBriefs.EntityData.ParentYangName = "rsvp-standby"
    helloInterfaceInstanceBriefs.EntityData.SegmentPath = "hello-interface-instance-briefs"
    helloInterfaceInstanceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + helloInterfaceInstanceBriefs.EntityData.SegmentPath
    helloInterfaceInstanceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceBriefs.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceBriefs.EntityData.Children.Append("hello-interface-instance-brief", types.YChild{"HelloInterfaceInstanceBrief", nil})
    for i := range helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief {
        helloInterfaceInstanceBriefs.EntityData.Children.Append(types.GetSegmentPath(helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i]), types.YChild{"HelloInterfaceInstanceBrief", helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i]})
    }
    helloInterfaceInstanceBriefs.EntityData.Leafs = types.NewOrderedMap()

    helloInterfaceInstanceBriefs.EntityData.YListKeys = []string {}

    return &(helloInterfaceInstanceBriefs.EntityData)
}

// RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
// Brief info for a single interface-based hello
// instance
type RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}
}

func (helloInterfaceInstanceBrief *RsvpStandby_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceBrief.EntityData.YFilter = helloInterfaceInstanceBrief.YFilter
    helloInterfaceInstanceBrief.EntityData.YangName = "hello-interface-instance-brief"
    helloInterfaceInstanceBrief.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceBrief.EntityData.ParentYangName = "hello-interface-instance-briefs"
    helloInterfaceInstanceBrief.EntityData.SegmentPath = "hello-interface-instance-brief" + types.AddKeyToken(helloInterfaceInstanceBrief.SourceAddress, "source-address") + types.AddKeyToken(helloInterfaceInstanceBrief.DestinationAddress, "destination-address")
    helloInterfaceInstanceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-briefs/" + helloInterfaceInstanceBrief.EntityData.SegmentPath
    helloInterfaceInstanceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceBrief.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceBrief.EntityData.Leafs = types.NewOrderedMap()
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInterfaceInstanceBrief.SourceAddress})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInterfaceInstanceBrief.DestinationAddress})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInterfaceInstanceBrief.SourceAddressXr})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInterfaceInstanceBrief.DestinationAddressXr})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInterfaceInstanceBrief.InstanceType})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInterfaceInstanceBrief.HelloInterface})

    helloInterfaceInstanceBrief.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInterfaceInstanceBrief.EntityData)
}

// RsvpStandby_HelloInterfaceInstanceDetails
// Table of detailed info about i/f-based hello
// instances
type RsvpStandby_HelloInterfaceInstanceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single interface-based hello instance. The type is
    // slice of
    // RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail.
    HelloInterfaceInstanceDetail []*RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
}

func (helloInterfaceInstanceDetails *RsvpStandby_HelloInterfaceInstanceDetails) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceDetails.EntityData.YFilter = helloInterfaceInstanceDetails.YFilter
    helloInterfaceInstanceDetails.EntityData.YangName = "hello-interface-instance-details"
    helloInterfaceInstanceDetails.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceDetails.EntityData.ParentYangName = "rsvp-standby"
    helloInterfaceInstanceDetails.EntityData.SegmentPath = "hello-interface-instance-details"
    helloInterfaceInstanceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + helloInterfaceInstanceDetails.EntityData.SegmentPath
    helloInterfaceInstanceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceDetails.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceDetails.EntityData.Children.Append("hello-interface-instance-detail", types.YChild{"HelloInterfaceInstanceDetail", nil})
    for i := range helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail {
        helloInterfaceInstanceDetails.EntityData.Children.Append(types.GetSegmentPath(helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i]), types.YChild{"HelloInterfaceInstanceDetail", helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i]})
    }
    helloInterfaceInstanceDetails.EntityData.Leafs = types.NewOrderedMap()

    helloInterfaceInstanceDetails.EntityData.YListKeys = []string {}

    return &(helloInterfaceInstanceDetails.EntityData)
}

// RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
// Detailed info for a single interface-based
// hello instance
type RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Global Neighbor ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    HelloGlobalNeighborId interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Last Ack/msg sent time.
    LastMessageSentTime RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
}

func (helloInterfaceInstanceDetail *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceDetail.EntityData.YFilter = helloInterfaceInstanceDetail.YFilter
    helloInterfaceInstanceDetail.EntityData.YangName = "hello-interface-instance-detail"
    helloInterfaceInstanceDetail.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceDetail.EntityData.ParentYangName = "hello-interface-instance-details"
    helloInterfaceInstanceDetail.EntityData.SegmentPath = "hello-interface-instance-detail" + types.AddKeyToken(helloInterfaceInstanceDetail.SourceAddress, "source-address") + types.AddKeyToken(helloInterfaceInstanceDetail.DestinationAddress, "destination-address")
    helloInterfaceInstanceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-details/" + helloInterfaceInstanceDetail.EntityData.SegmentPath
    helloInterfaceInstanceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceDetail.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceDetail.EntityData.Children.Append("last-message-sent-time", types.YChild{"LastMessageSentTime", &helloInterfaceInstanceDetail.LastMessageSentTime})
    helloInterfaceInstanceDetail.EntityData.Leafs = types.NewOrderedMap()
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInterfaceInstanceDetail.SourceAddress})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInterfaceInstanceDetail.DestinationAddress})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInterfaceInstanceDetail.SourceAddressXr})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInterfaceInstanceDetail.DestinationAddressXr})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-global-neighbor-id", types.YLeaf{"HelloGlobalNeighborId", helloInterfaceInstanceDetail.HelloGlobalNeighborId})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInterfaceInstanceDetail.InstanceType})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInterfaceInstanceDetail.HelloInterface})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("source-instance", types.YLeaf{"SourceInstance", helloInterfaceInstanceDetail.SourceInstance})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("destination-instance", types.YLeaf{"DestinationInstance", helloInterfaceInstanceDetail.DestinationInstance})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-messages-sent", types.YLeaf{"HelloMessagesSent", helloInterfaceInstanceDetail.HelloMessagesSent})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-messages-received", types.YLeaf{"HelloMessagesReceived", helloInterfaceInstanceDetail.HelloMessagesReceived})

    helloInterfaceInstanceDetail.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInterfaceInstanceDetail.EntityData)
}

// RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
// Last Ack/msg sent time
type RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lastMessageSentTime *RsvpStandby_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetEntityData() *types.CommonEntityData {
    lastMessageSentTime.EntityData.YFilter = lastMessageSentTime.YFilter
    lastMessageSentTime.EntityData.YangName = "last-message-sent-time"
    lastMessageSentTime.EntityData.BundleName = "cisco_ios_xr"
    lastMessageSentTime.EntityData.ParentYangName = "hello-interface-instance-detail"
    lastMessageSentTime.EntityData.SegmentPath = "last-message-sent-time"
    lastMessageSentTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-interface-instance-details/hello-interface-instance-detail/" + lastMessageSentTime.EntityData.SegmentPath
    lastMessageSentTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastMessageSentTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastMessageSentTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastMessageSentTime.EntityData.Children = types.NewOrderedMap()
    lastMessageSentTime.EntityData.Leafs = types.NewOrderedMap()
    lastMessageSentTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", lastMessageSentTime.Seconds})
    lastMessageSentTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", lastMessageSentTime.Nanoseconds})

    lastMessageSentTime.EntityData.YListKeys = []string {}

    return &(lastMessageSentTime.EntityData)
}

// RsvpStandby_InterfaceNeighborDetails
// Table of detailed info about I/F neighbors
type RsvpStandby_InterfaceNeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single interface neighbor. The type is slice of
    // RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail.
    InterfaceNeighborDetail []*RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail
}

func (interfaceNeighborDetails *RsvpStandby_InterfaceNeighborDetails) GetEntityData() *types.CommonEntityData {
    interfaceNeighborDetails.EntityData.YFilter = interfaceNeighborDetails.YFilter
    interfaceNeighborDetails.EntityData.YangName = "interface-neighbor-details"
    interfaceNeighborDetails.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborDetails.EntityData.ParentYangName = "rsvp-standby"
    interfaceNeighborDetails.EntityData.SegmentPath = "interface-neighbor-details"
    interfaceNeighborDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + interfaceNeighborDetails.EntityData.SegmentPath
    interfaceNeighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborDetails.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborDetails.EntityData.Children.Append("interface-neighbor-detail", types.YChild{"InterfaceNeighborDetail", nil})
    for i := range interfaceNeighborDetails.InterfaceNeighborDetail {
        interfaceNeighborDetails.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborDetails.InterfaceNeighborDetail[i]), types.YChild{"InterfaceNeighborDetail", interfaceNeighborDetails.InterfaceNeighborDetail[i]})
    }
    interfaceNeighborDetails.EntityData.Leafs = types.NewOrderedMap()

    interfaceNeighborDetails.EntityData.YListKeys = []string {}

    return &(interfaceNeighborDetails.EntityData)
}

// RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail
// Detailed info for a single interface neighbor
type RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Detail list of I/F Neighbors. The type is slice of
    // RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail.
    InterfaceNeighborListDetail []*RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
}

func (interfaceNeighborDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail) GetEntityData() *types.CommonEntityData {
    interfaceNeighborDetail.EntityData.YFilter = interfaceNeighborDetail.YFilter
    interfaceNeighborDetail.EntityData.YangName = "interface-neighbor-detail"
    interfaceNeighborDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborDetail.EntityData.ParentYangName = "interface-neighbor-details"
    interfaceNeighborDetail.EntityData.SegmentPath = "interface-neighbor-detail" + types.AddKeyToken(interfaceNeighborDetail.NeighborAddress, "neighbor-address")
    interfaceNeighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-details/" + interfaceNeighborDetail.EntityData.SegmentPath
    interfaceNeighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborDetail.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborDetail.EntityData.Children.Append("interface-neighbor-list-detail", types.YChild{"InterfaceNeighborListDetail", nil})
    for i := range interfaceNeighborDetail.InterfaceNeighborListDetail {
        types.SetYListKey(interfaceNeighborDetail.InterfaceNeighborListDetail[i], i)
        interfaceNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborDetail.InterfaceNeighborListDetail[i]), types.YChild{"InterfaceNeighborListDetail", interfaceNeighborDetail.InterfaceNeighborListDetail[i]})
    }
    interfaceNeighborDetail.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", interfaceNeighborDetail.NeighborAddress})
    interfaceNeighborDetail.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", interfaceNeighborDetail.NodeAddress})

    interfaceNeighborDetail.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(interfaceNeighborDetail.EntityData)
}

// RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
// Detail list of I/F Neighbors
type RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    NeighborInterfaceName interface{}

    // Is Neighbor's RR enable. The type is bool.
    IsRrEnabled interface{}

    // Neighbor's epoch value. The type is interface{} with range: 0..4294967295.
    NeighborEpoch interface{}

    // Number of out of order msgs. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Number of retransmitted msgs. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}
}

func (interfaceNeighborListDetail *RsvpStandby_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetEntityData() *types.CommonEntityData {
    interfaceNeighborListDetail.EntityData.YFilter = interfaceNeighborListDetail.YFilter
    interfaceNeighborListDetail.EntityData.YangName = "interface-neighbor-list-detail"
    interfaceNeighborListDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborListDetail.EntityData.ParentYangName = "interface-neighbor-detail"
    interfaceNeighborListDetail.EntityData.SegmentPath = "interface-neighbor-list-detail" + types.AddNoKeyToken(interfaceNeighborListDetail)
    interfaceNeighborListDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-neighbor-details/interface-neighbor-detail/" + interfaceNeighborListDetail.EntityData.SegmentPath
    interfaceNeighborListDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborListDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborListDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborListDetail.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborListDetail.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborListDetail.EntityData.Leafs.Append("interface-neighbor-address", types.YLeaf{"InterfaceNeighborAddress", interfaceNeighborListDetail.InterfaceNeighborAddress})
    interfaceNeighborListDetail.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", interfaceNeighborListDetail.NeighborInterfaceName})
    interfaceNeighborListDetail.EntityData.Leafs.Append("is-rr-enabled", types.YLeaf{"IsRrEnabled", interfaceNeighborListDetail.IsRrEnabled})
    interfaceNeighborListDetail.EntityData.Leafs.Append("neighbor-epoch", types.YLeaf{"NeighborEpoch", interfaceNeighborListDetail.NeighborEpoch})
    interfaceNeighborListDetail.EntityData.Leafs.Append("out-of-order-messages", types.YLeaf{"OutOfOrderMessages", interfaceNeighborListDetail.OutOfOrderMessages})
    interfaceNeighborListDetail.EntityData.Leafs.Append("retransmitted-messages", types.YLeaf{"RetransmittedMessages", interfaceNeighborListDetail.RetransmittedMessages})

    interfaceNeighborListDetail.EntityData.YListKeys = []string {}

    return &(interfaceNeighborListDetail.EntityData)
}

// RsvpStandby_Nsr
// RSVP NSR information
type RsvpStandby_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP NSR status information.
    Status RsvpStandby_Nsr_Status
}

func (nsr *RsvpStandby_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "rsvp-standby"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("status", types.YChild{"Status", &nsr.Status})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// RsvpStandby_Nsr_Status
// RSVP NSR status information
type RsvpStandby_Nsr_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus RsvpStandby_Nsr_Status_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus RsvpStandby_Nsr_Status_PreviousIdtStatus
}

func (status *RsvpStandby_Nsr_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "nsr"
    status.EntityData.SegmentPath = "status"
    status.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/" + status.EntityData.SegmentPath
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &status.IdtStatus})
    status.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &status.PreviousIdtStatus})
    status.EntityData.Leafs = types.NewOrderedMap()
    status.EntityData.Leafs.Append("role", types.YLeaf{"Role", status.Role})

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// RsvpStandby_Nsr_Status_IdtStatus
// IDT status
type RsvpStandby_Nsr_Status_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *RsvpStandby_Nsr_Status_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// RsvpStandby_Nsr_Status_PreviousIdtStatus
// Previous IDT status
type RsvpStandby_Nsr_Status_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *RsvpStandby_Nsr_Status_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/nsr/status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// RsvpStandby_Summary
// RSVP summary information
type RsvpStandby_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}

    // Total LSPs. The type is interface{} with range: 0..4294967295.
    LsPs interface{}

    // Issu status.
    IssuStatus RsvpStandby_Summary_IssuStatus

    // NSR status.
    NsrStatus RsvpStandby_Summary_NsrStatus

    // All database counters.
    DatabaseCounters RsvpStandby_Summary_DatabaseCounters
}

func (summary *RsvpStandby_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "rsvp-standby"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("issu-status", types.YChild{"IssuStatus", &summary.IssuStatus})
    summary.EntityData.Children.Append("nsr-status", types.YChild{"NsrStatus", &summary.NsrStatus})
    summary.EntityData.Children.Append("database-counters", types.YChild{"DatabaseCounters", &summary.DatabaseCounters})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("interfaces", types.YLeaf{"Interfaces", summary.Interfaces})
    summary.EntityData.Leafs.Append("ls-ps", types.YLeaf{"LsPs", summary.LsPs})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// RsvpStandby_Summary_IssuStatus
// Issu status
type RsvpStandby_Summary_IssuStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus RsvpStandby_Summary_IssuStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus RsvpStandby_Summary_IssuStatus_PreviousIdtStatus
}

func (issuStatus *RsvpStandby_Summary_IssuStatus) GetEntityData() *types.CommonEntityData {
    issuStatus.EntityData.YFilter = issuStatus.YFilter
    issuStatus.EntityData.YangName = "issu-status"
    issuStatus.EntityData.BundleName = "cisco_ios_xr"
    issuStatus.EntityData.ParentYangName = "summary"
    issuStatus.EntityData.SegmentPath = "issu-status"
    issuStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/" + issuStatus.EntityData.SegmentPath
    issuStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issuStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issuStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issuStatus.EntityData.Children = types.NewOrderedMap()
    issuStatus.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &issuStatus.IdtStatus})
    issuStatus.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &issuStatus.PreviousIdtStatus})
    issuStatus.EntityData.Leafs = types.NewOrderedMap()
    issuStatus.EntityData.Leafs.Append("role", types.YLeaf{"Role", issuStatus.Role})

    issuStatus.EntityData.YListKeys = []string {}

    return &(issuStatus.EntityData)
}

// RsvpStandby_Summary_IssuStatus_IdtStatus
// IDT status
type RsvpStandby_Summary_IssuStatus_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *RsvpStandby_Summary_IssuStatus_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "issu-status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/issu-status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// RsvpStandby_Summary_IssuStatus_PreviousIdtStatus
// Previous IDT status
type RsvpStandby_Summary_IssuStatus_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *RsvpStandby_Summary_IssuStatus_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "issu-status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/issu-status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// RsvpStandby_Summary_NsrStatus
// NSR status
type RsvpStandby_Summary_NsrStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus RsvpStandby_Summary_NsrStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus RsvpStandby_Summary_NsrStatus_PreviousIdtStatus
}

func (nsrStatus *RsvpStandby_Summary_NsrStatus) GetEntityData() *types.CommonEntityData {
    nsrStatus.EntityData.YFilter = nsrStatus.YFilter
    nsrStatus.EntityData.YangName = "nsr-status"
    nsrStatus.EntityData.BundleName = "cisco_ios_xr"
    nsrStatus.EntityData.ParentYangName = "summary"
    nsrStatus.EntityData.SegmentPath = "nsr-status"
    nsrStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/" + nsrStatus.EntityData.SegmentPath
    nsrStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStatus.EntityData.Children = types.NewOrderedMap()
    nsrStatus.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &nsrStatus.IdtStatus})
    nsrStatus.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &nsrStatus.PreviousIdtStatus})
    nsrStatus.EntityData.Leafs = types.NewOrderedMap()
    nsrStatus.EntityData.Leafs.Append("role", types.YLeaf{"Role", nsrStatus.Role})

    nsrStatus.EntityData.YListKeys = []string {}

    return &(nsrStatus.EntityData)
}

// RsvpStandby_Summary_NsrStatus_IdtStatus
// IDT status
type RsvpStandby_Summary_NsrStatus_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *RsvpStandby_Summary_NsrStatus_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "nsr-status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/nsr-status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// RsvpStandby_Summary_NsrStatus_PreviousIdtStatus
// Previous IDT status
type RsvpStandby_Summary_NsrStatus_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *RsvpStandby_Summary_NsrStatus_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "nsr-status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/nsr-status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// RsvpStandby_Summary_DatabaseCounters
// All database counters
type RsvpStandby_Summary_DatabaseCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (databaseCounters *RsvpStandby_Summary_DatabaseCounters) GetEntityData() *types.CommonEntityData {
    databaseCounters.EntityData.YFilter = databaseCounters.YFilter
    databaseCounters.EntityData.YangName = "database-counters"
    databaseCounters.EntityData.BundleName = "cisco_ios_xr"
    databaseCounters.EntityData.ParentYangName = "summary"
    databaseCounters.EntityData.SegmentPath = "database-counters"
    databaseCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/summary/" + databaseCounters.EntityData.SegmentPath
    databaseCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseCounters.EntityData.Children = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs.Append("sessions", types.YLeaf{"Sessions", databaseCounters.Sessions})
    databaseCounters.EntityData.Leafs.Append("incoming-paths", types.YLeaf{"IncomingPaths", databaseCounters.IncomingPaths})
    databaseCounters.EntityData.Leafs.Append("outgoing-paths", types.YLeaf{"OutgoingPaths", databaseCounters.OutgoingPaths})
    databaseCounters.EntityData.Leafs.Append("incoming-reservations", types.YLeaf{"IncomingReservations", databaseCounters.IncomingReservations})
    databaseCounters.EntityData.Leafs.Append("outgoing-reservations", types.YLeaf{"OutgoingReservations", databaseCounters.OutgoingReservations})
    databaseCounters.EntityData.Leafs.Append("interfaces", types.YLeaf{"Interfaces", databaseCounters.Interfaces})

    databaseCounters.EntityData.YListKeys = []string {}

    return &(databaseCounters.EntityData)
}

// RsvpStandby_Frrs
// Table of detailed info about Fast Re-route
// states
type RsvpStandby_Frrs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single Fast Re-route state. The type is slice of
    // RsvpStandby_Frrs_Frr.
    Frr []*RsvpStandby_Frrs_Frr
}

func (frrs *RsvpStandby_Frrs) GetEntityData() *types.CommonEntityData {
    frrs.EntityData.YFilter = frrs.YFilter
    frrs.EntityData.YangName = "frrs"
    frrs.EntityData.BundleName = "cisco_ios_xr"
    frrs.EntityData.ParentYangName = "rsvp-standby"
    frrs.EntityData.SegmentPath = "frrs"
    frrs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + frrs.EntityData.SegmentPath
    frrs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrs.EntityData.Children = types.NewOrderedMap()
    frrs.EntityData.Children.Append("frr", types.YChild{"Frr", nil})
    for i := range frrs.Frr {
        types.SetYListKey(frrs.Frr[i], i)
        frrs.EntityData.Children.Append(types.GetSegmentPath(frrs.Frr[i]), types.YChild{"Frr", frrs.Frr[i]})
    }
    frrs.EntityData.Leafs = types.NewOrderedMap()

    frrs.EntityData.YListKeys = []string {}

    return &(frrs.EntityData)
}

// RsvpStandby_Frrs_Frr
// Detailed info for a single Fast Re-route state
type RsvpStandby_Frrs_Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // RSVP FRR Path States. The type is RsvpMgmtFrrStateEnum.
    PathStatus interface{}

    // RSVP FRR Reservation States. The type is RsvpMgmtFrrStateEnum.
    ReservationStatus interface{}

    // RSVP Session Information.
    Session RsvpStandby_Frrs_Frr_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_Frrs_Frr_S2lSubLsp
}

func (frr *RsvpStandby_Frrs_Frr) GetEntityData() *types.CommonEntityData {
    frr.EntityData.YFilter = frr.YFilter
    frr.EntityData.YangName = "frr"
    frr.EntityData.BundleName = "cisco_ios_xr"
    frr.EntityData.ParentYangName = "frrs"
    frr.EntityData.SegmentPath = "frr" + types.AddNoKeyToken(frr)
    frr.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/" + frr.EntityData.SegmentPath
    frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frr.EntityData.Children = types.NewOrderedMap()
    frr.EntityData.Children.Append("session", types.YChild{"Session", &frr.Session})
    frr.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &frr.S2lSubLsp})
    frr.EntityData.Leafs = types.NewOrderedMap()
    frr.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", frr.DestinationAddress})
    frr.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", frr.DestinationPort})
    frr.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", frr.Protocol})
    frr.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", frr.ExtendedTunnelId})
    frr.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", frr.SessionType})
    frr.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", frr.P2mpId})
    frr.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", frr.SourceAddress})
    frr.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", frr.SourcePort})
    frr.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", frr.SubGroupOrigin})
    frr.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", frr.SubGroupId})
    frr.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", frr.VrfName})
    frr.EntityData.Leafs.Append("path-status", types.YLeaf{"PathStatus", frr.PathStatus})
    frr.EntityData.Leafs.Append("reservation-status", types.YLeaf{"ReservationStatus", frr.ReservationStatus})

    frr.EntityData.YListKeys = []string {}

    return &(frr.EntityData)
}

// RsvpStandby_Frrs_Frr_Session
// RSVP Session Information
type RsvpStandby_Frrs_Frr_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_Frrs_Frr_Session_RsvpSession
}

func (session *RsvpStandby_Frrs_Frr_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "frr"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_Frrs_Frr_Session_RsvpSession
// RSVP Session
type RsvpStandby_Frrs_Frr_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_Frrs_Frr_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_Frrs_Frr_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_Frrs_Frr_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_Frrs_Frr_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "frr"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/frrs/frr/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_RequestBriefs
// Table of brief info about requests
type RsvpStandby_RequestBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a request. The type is slice of
    // RsvpStandby_RequestBriefs_RequestBrief.
    RequestBrief []*RsvpStandby_RequestBriefs_RequestBrief
}

func (requestBriefs *RsvpStandby_RequestBriefs) GetEntityData() *types.CommonEntityData {
    requestBriefs.EntityData.YFilter = requestBriefs.YFilter
    requestBriefs.EntityData.YangName = "request-briefs"
    requestBriefs.EntityData.BundleName = "cisco_ios_xr"
    requestBriefs.EntityData.ParentYangName = "rsvp-standby"
    requestBriefs.EntityData.SegmentPath = "request-briefs"
    requestBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + requestBriefs.EntityData.SegmentPath
    requestBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestBriefs.EntityData.Children = types.NewOrderedMap()
    requestBriefs.EntityData.Children.Append("request-brief", types.YChild{"RequestBrief", nil})
    for i := range requestBriefs.RequestBrief {
        types.SetYListKey(requestBriefs.RequestBrief[i], i)
        requestBriefs.EntityData.Children.Append(types.GetSegmentPath(requestBriefs.RequestBrief[i]), types.YChild{"RequestBrief", requestBriefs.RequestBrief[i]})
    }
    requestBriefs.EntityData.Leafs = types.NewOrderedMap()

    requestBriefs.EntityData.YListKeys = []string {}

    return &(requestBriefs.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief
// Brief info for a request
type RsvpStandby_RequestBriefs_RequestBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_RequestBriefs_RequestBrief_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_RequestBriefs_RequestBrief_S2lSubLsp

    // Flow Spec Information.
    FlowSpec RsvpStandby_RequestBriefs_RequestBrief_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec

    // RSVP Filter.
    Filter RsvpStandby_RequestBriefs_RequestBrief_Filter

    // RSVP Style.
    Style RsvpStandby_RequestBriefs_RequestBrief_Style
}

func (requestBrief *RsvpStandby_RequestBriefs_RequestBrief) GetEntityData() *types.CommonEntityData {
    requestBrief.EntityData.YFilter = requestBrief.YFilter
    requestBrief.EntityData.YangName = "request-brief"
    requestBrief.EntityData.BundleName = "cisco_ios_xr"
    requestBrief.EntityData.ParentYangName = "request-briefs"
    requestBrief.EntityData.SegmentPath = "request-brief" + types.AddNoKeyToken(requestBrief)
    requestBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/" + requestBrief.EntityData.SegmentPath
    requestBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestBrief.EntityData.Children = types.NewOrderedMap()
    requestBrief.EntityData.Children.Append("session", types.YChild{"Session", &requestBrief.Session})
    requestBrief.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &requestBrief.S2lSubLsp})
    requestBrief.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &requestBrief.FlowSpec})
    requestBrief.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &requestBrief.GenericFlowSpec})
    requestBrief.EntityData.Children.Append("filter", types.YChild{"Filter", &requestBrief.Filter})
    requestBrief.EntityData.Children.Append("style", types.YChild{"Style", &requestBrief.Style})
    requestBrief.EntityData.Leafs = types.NewOrderedMap()
    requestBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", requestBrief.DestinationAddress})
    requestBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", requestBrief.DestinationPort})
    requestBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", requestBrief.Protocol})
    requestBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", requestBrief.ExtendedTunnelId})
    requestBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", requestBrief.SessionType})
    requestBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", requestBrief.P2mpId})
    requestBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", requestBrief.SourceAddress})
    requestBrief.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", requestBrief.SourcePort})
    requestBrief.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", requestBrief.SubGroupOrigin})
    requestBrief.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", requestBrief.SubGroupId})
    requestBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", requestBrief.VrfName})
    requestBrief.EntityData.Leafs.Append("output-interface", types.YLeaf{"OutputInterface", requestBrief.OutputInterface})

    requestBrief.EntityData.YListKeys = []string {}

    return &(requestBrief.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Session
// RSVP Session Information
type RsvpStandby_RequestBriefs_RequestBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession
}

func (session *RsvpStandby_RequestBriefs_RequestBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "request-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RequestBriefs_RequestBrief_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_RequestBriefs_RequestBrief_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "request-brief"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_FlowSpec
// Flow Spec Information
type RsvpStandby_RequestBriefs_RequestBrief_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RequestBriefs_RequestBrief_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "request-brief"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec
// Generic Flow Spec Information
type RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "request-brief"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *RsvpStandby_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Filter
// RSVP Filter
type RsvpStandby_RequestBriefs_RequestBrief_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter
}

func (filter *RsvpStandby_RequestBriefs_RequestBrief_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "request-brief"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *RsvpStandby_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// RsvpStandby_RequestBriefs_RequestBrief_Style
// RSVP Style
type RsvpStandby_RequestBriefs_RequestBrief_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RequestBriefs_RequestBrief_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "request-brief"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-briefs/request-brief/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// RsvpStandby_RequestDetails
// Table of detail info about requests
type RsvpStandby_RequestDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail info for a request. The type is slice of
    // RsvpStandby_RequestDetails_RequestDetail.
    RequestDetail []*RsvpStandby_RequestDetails_RequestDetail
}

func (requestDetails *RsvpStandby_RequestDetails) GetEntityData() *types.CommonEntityData {
    requestDetails.EntityData.YFilter = requestDetails.YFilter
    requestDetails.EntityData.YangName = "request-details"
    requestDetails.EntityData.BundleName = "cisco_ios_xr"
    requestDetails.EntityData.ParentYangName = "rsvp-standby"
    requestDetails.EntityData.SegmentPath = "request-details"
    requestDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + requestDetails.EntityData.SegmentPath
    requestDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestDetails.EntityData.Children = types.NewOrderedMap()
    requestDetails.EntityData.Children.Append("request-detail", types.YChild{"RequestDetail", nil})
    for i := range requestDetails.RequestDetail {
        types.SetYListKey(requestDetails.RequestDetail[i], i)
        requestDetails.EntityData.Children.Append(types.GetSegmentPath(requestDetails.RequestDetail[i]), types.YChild{"RequestDetail", requestDetails.RequestDetail[i]})
    }
    requestDetails.EntityData.Leafs = types.NewOrderedMap()

    requestDetails.EntityData.YListKeys = []string {}

    return &(requestDetails.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail
// Detail info for a request
type RsvpStandby_RequestDetails_RequestDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_RequestDetails_RequestDetail_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_RequestDetails_RequestDetail_S2lSubLsp

    // Flow Spec Information.
    FlowSpec RsvpStandby_RequestDetails_RequestDetail_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec

    // RSVP Filter.
    Filter RsvpStandby_RequestDetails_RequestDetail_Filter

    // RSVP Style.
    Style RsvpStandby_RequestDetails_RequestDetail_Style

    // Request flags.
    ReqFlags RsvpStandby_RequestDetails_RequestDetail_ReqFlags

    // Hop Infomation.
    Hop RsvpStandby_RequestDetails_RequestDetail_Hop

    // RSVP Header Information.
    Header RsvpStandby_RequestDetails_RequestDetail_Header

    // RSVP Policy Sources.
    PolicySources RsvpStandby_RequestDetails_RequestDetail_PolicySources

    // RSVP Policy Flags.
    PolicyFlags RsvpStandby_RequestDetails_RequestDetail_PolicyFlags

    // RSVP Query Flags.
    PolicyQueryFlags RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags

    // List of RSB keys. The type is slice of
    // RsvpStandby_RequestDetails_RequestDetail_PsbKey.
    PsbKey []*RsvpStandby_RequestDetails_RequestDetail_PsbKey

    // List of RSB keys. The type is slice of
    // RsvpStandby_RequestDetails_RequestDetail_RsbKey.
    RsbKey []*RsvpStandby_RequestDetails_RequestDetail_RsbKey
}

func (requestDetail *RsvpStandby_RequestDetails_RequestDetail) GetEntityData() *types.CommonEntityData {
    requestDetail.EntityData.YFilter = requestDetail.YFilter
    requestDetail.EntityData.YangName = "request-detail"
    requestDetail.EntityData.BundleName = "cisco_ios_xr"
    requestDetail.EntityData.ParentYangName = "request-details"
    requestDetail.EntityData.SegmentPath = "request-detail" + types.AddNoKeyToken(requestDetail)
    requestDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/" + requestDetail.EntityData.SegmentPath
    requestDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestDetail.EntityData.Children = types.NewOrderedMap()
    requestDetail.EntityData.Children.Append("session", types.YChild{"Session", &requestDetail.Session})
    requestDetail.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &requestDetail.S2lSubLsp})
    requestDetail.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &requestDetail.FlowSpec})
    requestDetail.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &requestDetail.GenericFlowSpec})
    requestDetail.EntityData.Children.Append("filter", types.YChild{"Filter", &requestDetail.Filter})
    requestDetail.EntityData.Children.Append("style", types.YChild{"Style", &requestDetail.Style})
    requestDetail.EntityData.Children.Append("req-flags", types.YChild{"ReqFlags", &requestDetail.ReqFlags})
    requestDetail.EntityData.Children.Append("hop", types.YChild{"Hop", &requestDetail.Hop})
    requestDetail.EntityData.Children.Append("header", types.YChild{"Header", &requestDetail.Header})
    requestDetail.EntityData.Children.Append("policy-sources", types.YChild{"PolicySources", &requestDetail.PolicySources})
    requestDetail.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &requestDetail.PolicyFlags})
    requestDetail.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &requestDetail.PolicyQueryFlags})
    requestDetail.EntityData.Children.Append("psb-key", types.YChild{"PsbKey", nil})
    for i := range requestDetail.PsbKey {
        types.SetYListKey(requestDetail.PsbKey[i], i)
        requestDetail.EntityData.Children.Append(types.GetSegmentPath(requestDetail.PsbKey[i]), types.YChild{"PsbKey", requestDetail.PsbKey[i]})
    }
    requestDetail.EntityData.Children.Append("rsb-key", types.YChild{"RsbKey", nil})
    for i := range requestDetail.RsbKey {
        types.SetYListKey(requestDetail.RsbKey[i], i)
        requestDetail.EntityData.Children.Append(types.GetSegmentPath(requestDetail.RsbKey[i]), types.YChild{"RsbKey", requestDetail.RsbKey[i]})
    }
    requestDetail.EntityData.Leafs = types.NewOrderedMap()
    requestDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", requestDetail.DestinationAddress})
    requestDetail.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", requestDetail.DestinationPort})
    requestDetail.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", requestDetail.Protocol})
    requestDetail.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", requestDetail.ExtendedTunnelId})
    requestDetail.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", requestDetail.SessionType})
    requestDetail.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", requestDetail.P2mpId})
    requestDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", requestDetail.SourceAddress})
    requestDetail.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", requestDetail.SourcePort})
    requestDetail.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", requestDetail.SubGroupOrigin})
    requestDetail.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", requestDetail.SubGroupId})
    requestDetail.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", requestDetail.VrfName})
    requestDetail.EntityData.Leafs.Append("output-interface", types.YLeaf{"OutputInterface", requestDetail.OutputInterface})

    requestDetail.EntityData.YListKeys = []string {}

    return &(requestDetail.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Session
// RSVP Session Information
type RsvpStandby_RequestDetails_RequestDetail_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession
}

func (session *RsvpStandby_RequestDetails_RequestDetail_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "request-detail"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession
// RSVP Session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_RequestDetails_RequestDetail_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_RequestDetails_RequestDetail_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "request-detail"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_FlowSpec
// Flow Spec Information
type RsvpStandby_RequestDetails_RequestDetail_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_RequestDetails_RequestDetail_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "request-detail"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec
// Generic Flow Spec Information
type RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "request-detail"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *RsvpStandby_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Filter
// RSVP Filter
type RsvpStandby_RequestDetails_RequestDetail_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter
}

func (filter *RsvpStandby_RequestDetails_RequestDetail_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "request-detail"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter
// RSVP Filter
type RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *RsvpStandby_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Style
// RSVP Style
type RsvpStandby_RequestDetails_RequestDetail_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *RsvpStandby_RequestDetails_RequestDetail_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "request-detail"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_ReqFlags
// Request flags
type RsvpStandby_RequestDetails_RequestDetail_ReqFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // Is neighbor refreshing. The type is bool.
    IsRefreshing interface{}

    // Send Confirm message. The type is bool.
    IsSendConfirm interface{}

    // Is ACK message outstanding. The type is bool.
    IsAckOutstanding interface{}

    // Is MessageID allocated. The type is bool.
    IsMessageIdAllocated interface{}

    // A NACK message was received. The type is bool.
    IsNackReceived interface{}

    // Retransmit the message. The type is bool.
    IsRetransmit interface{}

    // Message is paced. The type is bool.
    IsPaced interface{}

    // The Path message contains Label Request. The type is bool.
    IsLabelRequestInPath interface{}

    // The Path message contains RRO. The type is bool.
    IsRroInPath interface{}

    // Path has Session-Attr object with Record Labels set. The type is bool.
    IsRecordLabelInPath interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}
}

func (reqFlags *RsvpStandby_RequestDetails_RequestDetail_ReqFlags) GetEntityData() *types.CommonEntityData {
    reqFlags.EntityData.YFilter = reqFlags.YFilter
    reqFlags.EntityData.YangName = "req-flags"
    reqFlags.EntityData.BundleName = "cisco_ios_xr"
    reqFlags.EntityData.ParentYangName = "request-detail"
    reqFlags.EntityData.SegmentPath = "req-flags"
    reqFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + reqFlags.EntityData.SegmentPath
    reqFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reqFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reqFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reqFlags.EntityData.Children = types.NewOrderedMap()
    reqFlags.EntityData.Leafs = types.NewOrderedMap()
    reqFlags.EntityData.Leafs.Append("is-local-receiver", types.YLeaf{"IsLocalReceiver", reqFlags.IsLocalReceiver})
    reqFlags.EntityData.Leafs.Append("is-refreshing", types.YLeaf{"IsRefreshing", reqFlags.IsRefreshing})
    reqFlags.EntityData.Leafs.Append("is-send-confirm", types.YLeaf{"IsSendConfirm", reqFlags.IsSendConfirm})
    reqFlags.EntityData.Leafs.Append("is-ack-outstanding", types.YLeaf{"IsAckOutstanding", reqFlags.IsAckOutstanding})
    reqFlags.EntityData.Leafs.Append("is-message-id-allocated", types.YLeaf{"IsMessageIdAllocated", reqFlags.IsMessageIdAllocated})
    reqFlags.EntityData.Leafs.Append("is-nack-received", types.YLeaf{"IsNackReceived", reqFlags.IsNackReceived})
    reqFlags.EntityData.Leafs.Append("is-retransmit", types.YLeaf{"IsRetransmit", reqFlags.IsRetransmit})
    reqFlags.EntityData.Leafs.Append("is-paced", types.YLeaf{"IsPaced", reqFlags.IsPaced})
    reqFlags.EntityData.Leafs.Append("is-label-request-in-path", types.YLeaf{"IsLabelRequestInPath", reqFlags.IsLabelRequestInPath})
    reqFlags.EntityData.Leafs.Append("is-rro-in-path", types.YLeaf{"IsRroInPath", reqFlags.IsRroInPath})
    reqFlags.EntityData.Leafs.Append("is-record-label-in-path", types.YLeaf{"IsRecordLabelInPath", reqFlags.IsRecordLabelInPath})
    reqFlags.EntityData.Leafs.Append("is-merge-point", types.YLeaf{"IsMergePoint", reqFlags.IsMergePoint})

    reqFlags.EntityData.YListKeys = []string {}

    return &(reqFlags.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Hop
// Hop Infomation
type RsvpStandby_RequestDetails_RequestDetail_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *RsvpStandby_RequestDetails_RequestDetail_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "request-detail"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_Header
// RSVP Header Information
type RsvpStandby_RequestDetails_RequestDetail_Header struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (header *RsvpStandby_RequestDetails_RequestDetail_Header) GetEntityData() *types.CommonEntityData {
    header.EntityData.YFilter = header.YFilter
    header.EntityData.YangName = "header"
    header.EntityData.BundleName = "cisco_ios_xr"
    header.EntityData.ParentYangName = "request-detail"
    header.EntityData.SegmentPath = "header"
    header.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + header.EntityData.SegmentPath
    header.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    header.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    header.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    header.EntityData.Children = types.NewOrderedMap()
    header.EntityData.Leafs = types.NewOrderedMap()
    header.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", header.RsvpVersion})
    header.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", header.RsvpHeaderFlags})
    header.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", header.RsvpTtl})
    header.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", header.RsvpMessageType})
    header.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", header.IpTos})
    header.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", header.IpTtl})
    header.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", header.IpSourceAddress})

    header.EntityData.YListKeys = []string {}

    return &(header.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_PolicySources
// RSVP Policy Sources
type RsvpStandby_RequestDetails_RequestDetail_PolicySources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *RsvpStandby_RequestDetails_RequestDetail_PolicySources) GetEntityData() *types.CommonEntityData {
    policySources.EntityData.YFilter = policySources.YFilter
    policySources.EntityData.YangName = "policy-sources"
    policySources.EntityData.BundleName = "cisco_ios_xr"
    policySources.EntityData.ParentYangName = "request-detail"
    policySources.EntityData.SegmentPath = "policy-sources"
    policySources.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + policySources.EntityData.SegmentPath
    policySources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policySources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policySources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policySources.EntityData.Children = types.NewOrderedMap()
    policySources.EntityData.Leafs = types.NewOrderedMap()
    policySources.EntityData.Leafs.Append("is-te-link", types.YLeaf{"IsTeLink", policySources.IsTeLink})
    policySources.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", policySources.IsLocal})
    policySources.EntityData.Leafs.Append("is-cops", types.YLeaf{"IsCops", policySources.IsCops})
    policySources.EntityData.Leafs.Append("is-default", types.YLeaf{"IsDefault", policySources.IsDefault})
    policySources.EntityData.Leafs.Append("is-cable", types.YLeaf{"IsCable", policySources.IsCable})

    policySources.EntityData.YListKeys = []string {}

    return &(policySources.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_PolicyFlags
// RSVP Policy Flags
type RsvpStandby_RequestDetails_RequestDetail_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "request-detail"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags
// RSVP Query Flags
type RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *RsvpStandby_RequestDetails_RequestDetail_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "request-detail"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_PsbKey
// List of RSB keys
type RsvpStandby_RequestDetails_RequestDetail_PsbKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (psbKey *RsvpStandby_RequestDetails_RequestDetail_PsbKey) GetEntityData() *types.CommonEntityData {
    psbKey.EntityData.YFilter = psbKey.YFilter
    psbKey.EntityData.YangName = "psb-key"
    psbKey.EntityData.BundleName = "cisco_ios_xr"
    psbKey.EntityData.ParentYangName = "request-detail"
    psbKey.EntityData.SegmentPath = "psb-key" + types.AddNoKeyToken(psbKey)
    psbKey.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + psbKey.EntityData.SegmentPath
    psbKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbKey.EntityData.Children = types.NewOrderedMap()
    psbKey.EntityData.Leafs = types.NewOrderedMap()
    psbKey.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", psbKey.P2mpId})
    psbKey.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbKey.DestinationAddress})
    psbKey.EntityData.Leafs.Append("destination-port-or-tunnel-id", types.YLeaf{"DestinationPortOrTunnelId", psbKey.DestinationPortOrTunnelId})
    psbKey.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", psbKey.Protocol})
    psbKey.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", psbKey.ExtendedTunnelId})
    psbKey.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", psbKey.SessionType})
    psbKey.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", psbKey.SourceAddress})
    psbKey.EntityData.Leafs.Append("source-port-or-lsp-id", types.YLeaf{"SourcePortOrLspId", psbKey.SourcePortOrLspId})
    psbKey.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", psbKey.P2mpSubGroupOrigin})
    psbKey.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbKey.SubGroupId})
    psbKey.EntityData.Leafs.Append("vrfid", types.YLeaf{"Vrfid", psbKey.Vrfid})

    psbKey.EntityData.YListKeys = []string {}

    return &(psbKey.EntityData)
}

// RsvpStandby_RequestDetails_RequestDetail_RsbKey
// List of RSB keys
type RsvpStandby_RequestDetails_RequestDetail_RsbKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (rsbKey *RsvpStandby_RequestDetails_RequestDetail_RsbKey) GetEntityData() *types.CommonEntityData {
    rsbKey.EntityData.YFilter = rsbKey.YFilter
    rsbKey.EntityData.YangName = "rsb-key"
    rsbKey.EntityData.BundleName = "cisco_ios_xr"
    rsbKey.EntityData.ParentYangName = "request-detail"
    rsbKey.EntityData.SegmentPath = "rsb-key" + types.AddNoKeyToken(rsbKey)
    rsbKey.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/request-details/request-detail/" + rsbKey.EntityData.SegmentPath
    rsbKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbKey.EntityData.Children = types.NewOrderedMap()
    rsbKey.EntityData.Leafs = types.NewOrderedMap()
    rsbKey.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rsbKey.P2mpId})
    rsbKey.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbKey.DestinationAddress})
    rsbKey.EntityData.Leafs.Append("destination-port-or-tunnel-id", types.YLeaf{"DestinationPortOrTunnelId", rsbKey.DestinationPortOrTunnelId})
    rsbKey.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rsbKey.Protocol})
    rsbKey.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rsbKey.ExtendedTunnelId})
    rsbKey.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsbKey.SessionType})
    rsbKey.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rsbKey.SourceAddress})
    rsbKey.EntityData.Leafs.Append("source-port-or-lsp-id", types.YLeaf{"SourcePortOrLspId", rsbKey.SourcePortOrLspId})
    rsbKey.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", rsbKey.P2mpSubGroupOrigin})
    rsbKey.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rsbKey.SubGroupId})
    rsbKey.EntityData.Leafs.Append("vrfid", types.YLeaf{"Vrfid", rsbKey.Vrfid})

    rsbKey.EntityData.YListKeys = []string {}

    return &(rsbKey.EntityData)
}

// RsvpStandby_InterfaceBriefs
// Table of brief info about RSVP-enabled
// interfaces
type RsvpStandby_InterfaceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled interface. The type is slice of
    // RsvpStandby_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []*RsvpStandby_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *RsvpStandby_InterfaceBriefs) GetEntityData() *types.CommonEntityData {
    interfaceBriefs.EntityData.YFilter = interfaceBriefs.YFilter
    interfaceBriefs.EntityData.YangName = "interface-briefs"
    interfaceBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefs.EntityData.ParentYangName = "rsvp-standby"
    interfaceBriefs.EntityData.SegmentPath = "interface-briefs"
    interfaceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + interfaceBriefs.EntityData.SegmentPath
    interfaceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceBriefs.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefs.InterfaceBrief {
        interfaceBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefs.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefs.InterfaceBrief[i]})
    }
    interfaceBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefs.EntityData.YListKeys = []string {}

    return &(interfaceBriefs.EntityData)
}

// RsvpStandby_InterfaceBriefs_InterfaceBrief
// Brief info about an RSVP-enabled interface
type RsvpStandby_InterfaceBriefs_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation
}

func (interfaceBrief *RsvpStandby_InterfaceBriefs_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-briefs"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-briefs/" + interfaceBrief.EntityData.SegmentPath
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &interfaceBrief.BandwidthInformation})
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceBrief.InterfaceNameXr})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation
// Interface bandwidth information
type RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "interface-brief"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-briefs/interface-brief/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-briefs/interface-brief/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *RsvpStandby_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/interface-briefs/interface-brief/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// RsvpStandby_SessionDetaileds
// Table of detailed info about sessions
type RsvpStandby_SessionDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info about session. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed.
    SessionDetailed []*RsvpStandby_SessionDetaileds_SessionDetailed
}

func (sessionDetaileds *RsvpStandby_SessionDetaileds) GetEntityData() *types.CommonEntityData {
    sessionDetaileds.EntityData.YFilter = sessionDetaileds.YFilter
    sessionDetaileds.EntityData.YangName = "session-detaileds"
    sessionDetaileds.EntityData.BundleName = "cisco_ios_xr"
    sessionDetaileds.EntityData.ParentYangName = "rsvp-standby"
    sessionDetaileds.EntityData.SegmentPath = "session-detaileds"
    sessionDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + sessionDetaileds.EntityData.SegmentPath
    sessionDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionDetaileds.EntityData.Children = types.NewOrderedMap()
    sessionDetaileds.EntityData.Children.Append("session-detailed", types.YChild{"SessionDetailed", nil})
    for i := range sessionDetaileds.SessionDetailed {
        types.SetYListKey(sessionDetaileds.SessionDetailed[i], i)
        sessionDetaileds.EntityData.Children.Append(types.GetSegmentPath(sessionDetaileds.SessionDetailed[i]), types.YChild{"SessionDetailed", sessionDetaileds.SessionDetailed[i]})
    }
    sessionDetaileds.EntityData.Leafs = types.NewOrderedMap()

    sessionDetaileds.EntityData.YListKeys = []string {}

    return &(sessionDetaileds.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed
// Detailed info about session
type RsvpStandby_SessionDetaileds_SessionDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Compact session data.
    Compact RsvpStandby_SessionDetaileds_SessionDetailed_Compact

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_SessionDetaileds_SessionDetailed_S2lSubLsp

    // Path and Reservation Info. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo.
    PsbRsbInfo []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo
}

func (sessionDetailed *RsvpStandby_SessionDetaileds_SessionDetailed) GetEntityData() *types.CommonEntityData {
    sessionDetailed.EntityData.YFilter = sessionDetailed.YFilter
    sessionDetailed.EntityData.YangName = "session-detailed"
    sessionDetailed.EntityData.BundleName = "cisco_ios_xr"
    sessionDetailed.EntityData.ParentYangName = "session-detaileds"
    sessionDetailed.EntityData.SegmentPath = "session-detailed" + types.AddNoKeyToken(sessionDetailed)
    sessionDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/" + sessionDetailed.EntityData.SegmentPath
    sessionDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionDetailed.EntityData.Children = types.NewOrderedMap()
    sessionDetailed.EntityData.Children.Append("compact", types.YChild{"Compact", &sessionDetailed.Compact})
    sessionDetailed.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &sessionDetailed.S2lSubLsp})
    sessionDetailed.EntityData.Children.Append("psb-rsb-info", types.YChild{"PsbRsbInfo", nil})
    for i := range sessionDetailed.PsbRsbInfo {
        types.SetYListKey(sessionDetailed.PsbRsbInfo[i], i)
        sessionDetailed.EntityData.Children.Append(types.GetSegmentPath(sessionDetailed.PsbRsbInfo[i]), types.YChild{"PsbRsbInfo", sessionDetailed.PsbRsbInfo[i]})
    }
    sessionDetailed.EntityData.Leafs = types.NewOrderedMap()
    sessionDetailed.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", sessionDetailed.DestinationAddress})
    sessionDetailed.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", sessionDetailed.DestinationPort})
    sessionDetailed.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", sessionDetailed.Protocol})
    sessionDetailed.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", sessionDetailed.ExtendedTunnelId})
    sessionDetailed.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", sessionDetailed.SessionType})
    sessionDetailed.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", sessionDetailed.P2mpId})
    sessionDetailed.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", sessionDetailed.VrfName})

    sessionDetailed.EntityData.YListKeys = []string {}

    return &(sessionDetailed.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact
// Compact session data
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session
}

func (compact *RsvpStandby_SessionDetaileds_SessionDetailed_Compact) GetEntityData() *types.CommonEntityData {
    compact.EntityData.YFilter = compact.YFilter
    compact.EntityData.YangName = "compact"
    compact.EntityData.BundleName = "cisco_ios_xr"
    compact.EntityData.ParentYangName = "session-detailed"
    compact.EntityData.SegmentPath = "compact"
    compact.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/" + compact.EntityData.SegmentPath
    compact.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    compact.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    compact.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    compact.EntityData.Children = types.NewOrderedMap()
    compact.EntityData.Children.Append("session", types.YChild{"Session", &compact.Session})
    compact.EntityData.Leafs = types.NewOrderedMap()
    compact.EntityData.Leafs.Append("ps-bs", types.YLeaf{"PsBs", compact.PsBs})
    compact.EntityData.Leafs.Append("rs-bs", types.YLeaf{"RsBs", compact.RsBs})
    compact.EntityData.Leafs.Append("requests", types.YLeaf{"Requests", compact.Requests})
    compact.EntityData.Leafs.Append("detail-list-size", types.YLeaf{"DetailListSize", compact.DetailListSize})

    compact.EntityData.YListKeys = []string {}

    return &(compact.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session
// RSVP Session Information
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
}

func (session *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "compact"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
// RSVP Session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_SessionDetaileds_SessionDetailed_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_SessionDetaileds_SessionDetailed_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "session-detailed"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo
// Path and Reservation Info
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Path Info. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo.
    PsbInfo []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo

    // Reservation Info. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo.
    RsbInfo []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
}

func (psbRsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetEntityData() *types.CommonEntityData {
    psbRsbInfo.EntityData.YFilter = psbRsbInfo.YFilter
    psbRsbInfo.EntityData.YangName = "psb-rsb-info"
    psbRsbInfo.EntityData.BundleName = "cisco_ios_xr"
    psbRsbInfo.EntityData.ParentYangName = "session-detailed"
    psbRsbInfo.EntityData.SegmentPath = "psb-rsb-info" + types.AddNoKeyToken(psbRsbInfo)
    psbRsbInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/" + psbRsbInfo.EntityData.SegmentPath
    psbRsbInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbRsbInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbRsbInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbRsbInfo.EntityData.Children = types.NewOrderedMap()
    psbRsbInfo.EntityData.Children.Append("psb-info", types.YChild{"PsbInfo", nil})
    for i := range psbRsbInfo.PsbInfo {
        types.SetYListKey(psbRsbInfo.PsbInfo[i], i)
        psbRsbInfo.EntityData.Children.Append(types.GetSegmentPath(psbRsbInfo.PsbInfo[i]), types.YChild{"PsbInfo", psbRsbInfo.PsbInfo[i]})
    }
    psbRsbInfo.EntityData.Children.Append("rsb-info", types.YChild{"RsbInfo", nil})
    for i := range psbRsbInfo.RsbInfo {
        types.SetYListKey(psbRsbInfo.RsbInfo[i], i)
        psbRsbInfo.EntityData.Children.Append(types.GetSegmentPath(psbRsbInfo.RsbInfo[i]), types.YChild{"RsbInfo", psbRsbInfo.RsbInfo[i]})
    }
    psbRsbInfo.EntityData.Leafs = types.NewOrderedMap()

    psbRsbInfo.EntityData.YListKeys = []string {}

    return &(psbRsbInfo.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo
// Path Info
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    LspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Interface on which inbound message was received. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    InInterface interface{}

    // Label for inbound traffic. The type is interface{} with range:
    // 0..4294967295.
    InLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Address validity. The type is bool.
    IsBadAddress interface{}

    // IP address of Path's incoming interface. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IncomingInterfaceAddress interface{}

    // ERO validity. The type is bool.
    IsEroValid interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // Traffic Spec validity. The type is bool.
    IsTrafficSpecValid interface{}

    // Tunnel name. The type is string.
    TunnelName interface{}

    // Generic Label for inbound traffic.
    GenericInLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel

    // Traffic Spec object.
    TrafficSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec

    // Generic Traffic Spec object.
    GenericTrafficSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec

    // Association object.
    Association RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association

    // Protection object.
    Protection RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection

    // Reverse LSP object.
    ReverseLsp RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp

    // Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero.
    Ero []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero

    // Record Route Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro.
    Rro []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
}

func (psbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetEntityData() *types.CommonEntityData {
    psbInfo.EntityData.YFilter = psbInfo.YFilter
    psbInfo.EntityData.YangName = "psb-info"
    psbInfo.EntityData.BundleName = "cisco_ios_xr"
    psbInfo.EntityData.ParentYangName = "psb-rsb-info"
    psbInfo.EntityData.SegmentPath = "psb-info" + types.AddNoKeyToken(psbInfo)
    psbInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/" + psbInfo.EntityData.SegmentPath
    psbInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbInfo.EntityData.Children = types.NewOrderedMap()
    psbInfo.EntityData.Children.Append("generic-in-label", types.YChild{"GenericInLabel", &psbInfo.GenericInLabel})
    psbInfo.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &psbInfo.TrafficSpec})
    psbInfo.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &psbInfo.GenericTrafficSpec})
    psbInfo.EntityData.Children.Append("association", types.YChild{"Association", &psbInfo.Association})
    psbInfo.EntityData.Children.Append("protection", types.YChild{"Protection", &psbInfo.Protection})
    psbInfo.EntityData.Children.Append("reverse-lsp", types.YChild{"ReverseLsp", &psbInfo.ReverseLsp})
    psbInfo.EntityData.Children.Append("ero", types.YChild{"Ero", nil})
    for i := range psbInfo.Ero {
        types.SetYListKey(psbInfo.Ero[i], i)
        psbInfo.EntityData.Children.Append(types.GetSegmentPath(psbInfo.Ero[i]), types.YChild{"Ero", psbInfo.Ero[i]})
    }
    psbInfo.EntityData.Children.Append("rro", types.YChild{"Rro", nil})
    for i := range psbInfo.Rro {
        types.SetYListKey(psbInfo.Rro[i], i)
        psbInfo.EntityData.Children.Append(types.GetSegmentPath(psbInfo.Rro[i]), types.YChild{"Rro", psbInfo.Rro[i]})
    }
    psbInfo.EntityData.Leafs = types.NewOrderedMap()
    psbInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", psbInfo.IsValid})
    psbInfo.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbInfo.DestinationAddress})
    psbInfo.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", psbInfo.LspId})
    psbInfo.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", psbInfo.P2mpSubGroupOrigin})
    psbInfo.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbInfo.SubGroupId})
    psbInfo.EntityData.Leafs.Append("in-interface", types.YLeaf{"InInterface", psbInfo.InInterface})
    psbInfo.EntityData.Leafs.Append("in-label", types.YLeaf{"InLabel", psbInfo.InLabel})
    psbInfo.EntityData.Leafs.Append("lsp-wrap-label", types.YLeaf{"LspWrapLabel", psbInfo.LspWrapLabel})
    psbInfo.EntityData.Leafs.Append("is-bad-address", types.YLeaf{"IsBadAddress", psbInfo.IsBadAddress})
    psbInfo.EntityData.Leafs.Append("incoming-interface-address", types.YLeaf{"IncomingInterfaceAddress", psbInfo.IncomingInterfaceAddress})
    psbInfo.EntityData.Leafs.Append("is-ero-valid", types.YLeaf{"IsEroValid", psbInfo.IsEroValid})
    psbInfo.EntityData.Leafs.Append("is-rro-valid", types.YLeaf{"IsRroValid", psbInfo.IsRroValid})
    psbInfo.EntityData.Leafs.Append("is-traffic-spec-valid", types.YLeaf{"IsTrafficSpecValid", psbInfo.IsTrafficSpecValid})
    psbInfo.EntityData.Leafs.Append("tunnel-name", types.YLeaf{"TunnelName", psbInfo.TunnelName})

    psbInfo.EntityData.YListKeys = []string {}

    return &(psbInfo.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel
// Generic Label for inbound traffic
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
}

func (genericInLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetEntityData() *types.CommonEntityData {
    genericInLabel.EntityData.YFilter = genericInLabel.YFilter
    genericInLabel.EntityData.YangName = "generic-in-label"
    genericInLabel.EntityData.BundleName = "cisco_ios_xr"
    genericInLabel.EntityData.ParentYangName = "psb-info"
    genericInLabel.EntityData.SegmentPath = "generic-in-label"
    genericInLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + genericInLabel.EntityData.SegmentPath
    genericInLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericInLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericInLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericInLabel.EntityData.Children = types.NewOrderedMap()
    genericInLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericInLabel.GeneralizedLabel})
    genericInLabel.EntityData.Leafs = types.NewOrderedMap()
    genericInLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericInLabel.GenericLabelType})

    genericInLabel.EntityData.YListKeys = []string {}

    return &(genericInLabel.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-in-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec
// Traffic Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "psb-info"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec
// Generic Traffic Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "psb-info"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association
// Association object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AssociationType. The type is RsvpMgmtAssociation.
    AssociationType interface{}

    // IPV4 ASSOCIATION Object.
    Ipv4 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4

    // IPV6 ASSOCIATION Object.
    Ipv6 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6

    // EXTENDED IPV4 ASSOCIATION Object.
    ExtendedIpv4 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4

    // EXTENDED IPV6 ASSOCIATION Object.
    ExtendedIpv6 RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
}

func (association *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetEntityData() *types.CommonEntityData {
    association.EntityData.YFilter = association.YFilter
    association.EntityData.YangName = "association"
    association.EntityData.BundleName = "cisco_ios_xr"
    association.EntityData.ParentYangName = "psb-info"
    association.EntityData.SegmentPath = "association"
    association.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + association.EntityData.SegmentPath
    association.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    association.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    association.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    association.EntityData.Children = types.NewOrderedMap()
    association.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &association.Ipv4})
    association.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &association.Ipv6})
    association.EntityData.Children.Append("extended-ipv4", types.YChild{"ExtendedIpv4", &association.ExtendedIpv4})
    association.EntityData.Children.Append("extended-ipv6", types.YChild{"ExtendedIpv6", &association.ExtendedIpv6})
    association.EntityData.Leafs = types.NewOrderedMap()
    association.EntityData.Leafs.Append("association-type", types.YLeaf{"AssociationType", association.AssociationType})

    association.EntityData.YListKeys = []string {}

    return &(association.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4
// IPV4 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}
}

func (ipv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "association"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv4.Type})
    ipv4.EntityData.Leafs.Append("id", types.YLeaf{"Id", ipv4.Id})
    ipv4.EntityData.Leafs.Append("source", types.YLeaf{"Source", ipv4.Source})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6
// IPV6 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Source interface{}
}

func (ipv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "association"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv6.Type})
    ipv6.EntityData.Leafs.Append("id", types.YLeaf{"Id", ipv6.Id})
    ipv6.EntityData.Leafs.Append("source", types.YLeaf{"Source", ipv6.Source})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4
// EXTENDED IPV4 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId.
    ExtendedId []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId
}

func (extendedIpv4 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetEntityData() *types.CommonEntityData {
    extendedIpv4.EntityData.YFilter = extendedIpv4.YFilter
    extendedIpv4.EntityData.YangName = "extended-ipv4"
    extendedIpv4.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv4.EntityData.ParentYangName = "association"
    extendedIpv4.EntityData.SegmentPath = "extended-ipv4"
    extendedIpv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + extendedIpv4.EntityData.SegmentPath
    extendedIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv4.EntityData.Children = types.NewOrderedMap()
    extendedIpv4.EntityData.Children.Append("extended-id", types.YChild{"ExtendedId", nil})
    for i := range extendedIpv4.ExtendedId {
        types.SetYListKey(extendedIpv4.ExtendedId[i], i)
        extendedIpv4.EntityData.Children.Append(types.GetSegmentPath(extendedIpv4.ExtendedId[i]), types.YChild{"ExtendedId", extendedIpv4.ExtendedId[i]})
    }
    extendedIpv4.EntityData.Leafs = types.NewOrderedMap()
    extendedIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", extendedIpv4.Type})
    extendedIpv4.EntityData.Leafs.Append("id", types.YLeaf{"Id", extendedIpv4.Id})
    extendedIpv4.EntityData.Leafs.Append("source", types.YLeaf{"Source", extendedIpv4.Source})
    extendedIpv4.EntityData.Leafs.Append("global-source", types.YLeaf{"GlobalSource", extendedIpv4.GlobalSource})

    extendedIpv4.EntityData.YListKeys = []string {}

    return &(extendedIpv4.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId
// Extended Association ID
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Extended Association ID. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extendedId *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId) GetEntityData() *types.CommonEntityData {
    extendedId.EntityData.YFilter = extendedId.YFilter
    extendedId.EntityData.YangName = "extended-id"
    extendedId.EntityData.BundleName = "cisco_ios_xr"
    extendedId.EntityData.ParentYangName = "extended-ipv4"
    extendedId.EntityData.SegmentPath = "extended-id" + types.AddNoKeyToken(extendedId)
    extendedId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/extended-ipv4/" + extendedId.EntityData.SegmentPath
    extendedId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedId.EntityData.Children = types.NewOrderedMap()
    extendedId.EntityData.Leafs = types.NewOrderedMap()
    extendedId.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extendedId.Entry})

    extendedId.EntityData.YListKeys = []string {}

    return &(extendedId.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
// EXTENDED IPV6 ASSOCIATION Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId.
    ExtendedId []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId
}

func (extendedIpv6 *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetEntityData() *types.CommonEntityData {
    extendedIpv6.EntityData.YFilter = extendedIpv6.YFilter
    extendedIpv6.EntityData.YangName = "extended-ipv6"
    extendedIpv6.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv6.EntityData.ParentYangName = "association"
    extendedIpv6.EntityData.SegmentPath = "extended-ipv6"
    extendedIpv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + extendedIpv6.EntityData.SegmentPath
    extendedIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv6.EntityData.Children = types.NewOrderedMap()
    extendedIpv6.EntityData.Children.Append("extended-id", types.YChild{"ExtendedId", nil})
    for i := range extendedIpv6.ExtendedId {
        types.SetYListKey(extendedIpv6.ExtendedId[i], i)
        extendedIpv6.EntityData.Children.Append(types.GetSegmentPath(extendedIpv6.ExtendedId[i]), types.YChild{"ExtendedId", extendedIpv6.ExtendedId[i]})
    }
    extendedIpv6.EntityData.Leafs = types.NewOrderedMap()
    extendedIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", extendedIpv6.Type})
    extendedIpv6.EntityData.Leafs.Append("id", types.YLeaf{"Id", extendedIpv6.Id})
    extendedIpv6.EntityData.Leafs.Append("source", types.YLeaf{"Source", extendedIpv6.Source})
    extendedIpv6.EntityData.Leafs.Append("global-source", types.YLeaf{"GlobalSource", extendedIpv6.GlobalSource})

    extendedIpv6.EntityData.YListKeys = []string {}

    return &(extendedIpv6.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId
// Extended Association ID
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Extended Association ID. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extendedId *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId) GetEntityData() *types.CommonEntityData {
    extendedId.EntityData.YFilter = extendedId.YFilter
    extendedId.EntityData.YangName = "extended-id"
    extendedId.EntityData.BundleName = "cisco_ios_xr"
    extendedId.EntityData.ParentYangName = "extended-ipv6"
    extendedId.EntityData.SegmentPath = "extended-id" + types.AddNoKeyToken(extendedId)
    extendedId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/extended-ipv6/" + extendedId.EntityData.SegmentPath
    extendedId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedId.EntityData.Children = types.NewOrderedMap()
    extendedId.EntityData.Leafs = types.NewOrderedMap()
    extendedId.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extendedId.Entry})

    extendedId.EntityData.YListKeys = []string {}

    return &(extendedId.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection
// Protection object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Secondary Bit. The type is bool.
    S interface{}

    // Protecting Bit. The type is bool.
    P interface{}

    // Notification Bit. The type is bool.
    N interface{}

    // Operational Bit. The type is bool.
    O interface{}

    // PROTECTION Object LSP Flags.
    LspFlags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags

    // PROTECTION Object Link Flags.
    LinkFlags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
}

func (protection *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetEntityData() *types.CommonEntityData {
    protection.EntityData.YFilter = protection.YFilter
    protection.EntityData.YangName = "protection"
    protection.EntityData.BundleName = "cisco_ios_xr"
    protection.EntityData.ParentYangName = "psb-info"
    protection.EntityData.SegmentPath = "protection"
    protection.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + protection.EntityData.SegmentPath
    protection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protection.EntityData.Children = types.NewOrderedMap()
    protection.EntityData.Children.Append("lsp-flags", types.YChild{"LspFlags", &protection.LspFlags})
    protection.EntityData.Children.Append("link-flags", types.YChild{"LinkFlags", &protection.LinkFlags})
    protection.EntityData.Leafs = types.NewOrderedMap()
    protection.EntityData.Leafs.Append("s", types.YLeaf{"S", protection.S})
    protection.EntityData.Leafs.Append("p", types.YLeaf{"P", protection.P})
    protection.EntityData.Leafs.Append("n", types.YLeaf{"N", protection.N})
    protection.EntityData.Leafs.Append("o", types.YLeaf{"O", protection.O})

    protection.EntityData.YListKeys = []string {}

    return &(protection.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags
// PROTECTION Object LSP Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Full Rerouting. The type is bool.
    Rerouting interface{}

    // Rerouting Without Extra-Traffic. The type is bool.
    ReroutingNoEt interface{}

    // 1:N Protection with Extra-Traffic. The type is bool.
    OneToNProtectionEt interface{}

    // 1+1 Unidirectional Protection. The type is bool.
    OnePlusOneUni interface{}

    // 1+1 Bidirectional Protection. The type is bool.
    OnePlusOneBi interface{}
}

func (lspFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetEntityData() *types.CommonEntityData {
    lspFlags.EntityData.YFilter = lspFlags.YFilter
    lspFlags.EntityData.YangName = "lsp-flags"
    lspFlags.EntityData.BundleName = "cisco_ios_xr"
    lspFlags.EntityData.ParentYangName = "protection"
    lspFlags.EntityData.SegmentPath = "lsp-flags"
    lspFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" + lspFlags.EntityData.SegmentPath
    lspFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspFlags.EntityData.Children = types.NewOrderedMap()
    lspFlags.EntityData.Leafs = types.NewOrderedMap()
    lspFlags.EntityData.Leafs.Append("rerouting", types.YLeaf{"Rerouting", lspFlags.Rerouting})
    lspFlags.EntityData.Leafs.Append("rerouting-no-et", types.YLeaf{"ReroutingNoEt", lspFlags.ReroutingNoEt})
    lspFlags.EntityData.Leafs.Append("one-to-n-protection-et", types.YLeaf{"OneToNProtectionEt", lspFlags.OneToNProtectionEt})
    lspFlags.EntityData.Leafs.Append("one-plus-one-uni", types.YLeaf{"OnePlusOneUni", lspFlags.OnePlusOneUni})
    lspFlags.EntityData.Leafs.Append("one-plus-one-bi", types.YLeaf{"OnePlusOneBi", lspFlags.OnePlusOneBi})

    lspFlags.EntityData.YListKeys = []string {}

    return &(lspFlags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
// PROTECTION Object Link Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates Enhanced Protection Scheme. The type is bool.
    Enhanced interface{}

    // Dedicated 1+1 Protection. The type is bool.
    Ded1Plus1 interface{}

    // Dedicated 1:1 Protection. The type is bool.
    Ded1To1 interface{}

    // Shared Link Layer Protection. The type is bool.
    Shared interface{}

    // LSP should not use any Link Layer Protection. The type is bool.
    Unprotected interface{}

    // LSP should use Links that are protecting other (primary) traffic. The type
    // is bool.
    ExtraTraffic interface{}

    // Reserved Bit 1. The type is bool.
    ReservedBit1 interface{}

    // Reserved Bit 2. The type is bool.
    ReservedBit2 interface{}
}

func (linkFlags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetEntityData() *types.CommonEntityData {
    linkFlags.EntityData.YFilter = linkFlags.YFilter
    linkFlags.EntityData.YangName = "link-flags"
    linkFlags.EntityData.BundleName = "cisco_ios_xr"
    linkFlags.EntityData.ParentYangName = "protection"
    linkFlags.EntityData.SegmentPath = "link-flags"
    linkFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" + linkFlags.EntityData.SegmentPath
    linkFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkFlags.EntityData.Children = types.NewOrderedMap()
    linkFlags.EntityData.Leafs = types.NewOrderedMap()
    linkFlags.EntityData.Leafs.Append("enhanced", types.YLeaf{"Enhanced", linkFlags.Enhanced})
    linkFlags.EntityData.Leafs.Append("ded1-plus1", types.YLeaf{"Ded1Plus1", linkFlags.Ded1Plus1})
    linkFlags.EntityData.Leafs.Append("ded1-to1", types.YLeaf{"Ded1To1", linkFlags.Ded1To1})
    linkFlags.EntityData.Leafs.Append("shared", types.YLeaf{"Shared", linkFlags.Shared})
    linkFlags.EntityData.Leafs.Append("unprotected", types.YLeaf{"Unprotected", linkFlags.Unprotected})
    linkFlags.EntityData.Leafs.Append("extra-traffic", types.YLeaf{"ExtraTraffic", linkFlags.ExtraTraffic})
    linkFlags.EntityData.Leafs.Append("reserved-bit1", types.YLeaf{"ReservedBit1", linkFlags.ReservedBit1})
    linkFlags.EntityData.Leafs.Append("reserved-bit2", types.YLeaf{"ReservedBit2", linkFlags.ReservedBit2})

    linkFlags.EntityData.YListKeys = []string {}

    return &(linkFlags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp
// Reverse LSP object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic Traffic Spec object.
    GenericTrafficSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec

    // Explicit Route Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero.
    Ero []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero

    // Unsupported REVERSE_LSP Sub Objects. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject.
    UnsupSubObject []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
}

func (reverseLsp *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetEntityData() *types.CommonEntityData {
    reverseLsp.EntityData.YFilter = reverseLsp.YFilter
    reverseLsp.EntityData.YangName = "reverse-lsp"
    reverseLsp.EntityData.BundleName = "cisco_ios_xr"
    reverseLsp.EntityData.ParentYangName = "psb-info"
    reverseLsp.EntityData.SegmentPath = "reverse-lsp"
    reverseLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + reverseLsp.EntityData.SegmentPath
    reverseLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reverseLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reverseLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reverseLsp.EntityData.Children = types.NewOrderedMap()
    reverseLsp.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &reverseLsp.GenericTrafficSpec})
    reverseLsp.EntityData.Children.Append("ero", types.YChild{"Ero", nil})
    for i := range reverseLsp.Ero {
        types.SetYListKey(reverseLsp.Ero[i], i)
        reverseLsp.EntityData.Children.Append(types.GetSegmentPath(reverseLsp.Ero[i]), types.YChild{"Ero", reverseLsp.Ero[i]})
    }
    reverseLsp.EntityData.Children.Append("unsup-sub-object", types.YChild{"UnsupSubObject", nil})
    for i := range reverseLsp.UnsupSubObject {
        types.SetYListKey(reverseLsp.UnsupSubObject[i], i)
        reverseLsp.EntityData.Children.Append(types.GetSegmentPath(reverseLsp.UnsupSubObject[i]), types.YChild{"UnsupSubObject", reverseLsp.UnsupSubObject[i]})
    }
    reverseLsp.EntityData.Leafs = types.NewOrderedMap()

    reverseLsp.EntityData.YListKeys = []string {}

    return &(reverseLsp.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec
// Generic Traffic Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "reverse-lsp"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero
// Explicit Route Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetEntityData() *types.CommonEntityData {
    ero.EntityData.YFilter = ero.YFilter
    ero.EntityData.YangName = "ero"
    ero.EntityData.BundleName = "cisco_ios_xr"
    ero.EntityData.ParentYangName = "reverse-lsp"
    ero.EntityData.SegmentPath = "ero" + types.AddNoKeyToken(ero)
    ero.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" + ero.EntityData.SegmentPath
    ero.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ero.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ero.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ero.EntityData.Children = types.NewOrderedMap()
    ero.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &ero.Ipv4eroSubObject})
    ero.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &ero.UnnumberedEroSubObject})
    ero.EntityData.Leafs = types.NewOrderedMap()
    ero.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", ero.EroType})

    ero.EntityData.YListKeys = []string {}

    return &(ero.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
// Unsupported REVERSE_LSP Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // rsvp mgmt rev lsp unsupported subobj. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj.
    RsvpMgmtRevLspUnsupportedSubobj []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj
}

func (unsupSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetEntityData() *types.CommonEntityData {
    unsupSubObject.EntityData.YFilter = unsupSubObject.YFilter
    unsupSubObject.EntityData.YangName = "unsup-sub-object"
    unsupSubObject.EntityData.BundleName = "cisco_ios_xr"
    unsupSubObject.EntityData.ParentYangName = "reverse-lsp"
    unsupSubObject.EntityData.SegmentPath = "unsup-sub-object" + types.AddNoKeyToken(unsupSubObject)
    unsupSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" + unsupSubObject.EntityData.SegmentPath
    unsupSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unsupSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unsupSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unsupSubObject.EntityData.Children = types.NewOrderedMap()
    unsupSubObject.EntityData.Children.Append("rsvp-mgmt-rev-lsp-unsupported-subobj", types.YChild{"RsvpMgmtRevLspUnsupportedSubobj", nil})
    for i := range unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj {
        types.SetYListKey(unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj[i], i)
        unsupSubObject.EntityData.Children.Append(types.GetSegmentPath(unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj[i]), types.YChild{"RsvpMgmtRevLspUnsupportedSubobj", unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj[i]})
    }
    unsupSubObject.EntityData.Leafs = types.NewOrderedMap()

    unsupSubObject.EntityData.YListKeys = []string {}

    return &(unsupSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj
// rsvp mgmt rev lsp unsupported subobj
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // rsvp mgmt rev lsp unsupported subobj. The type is interface{} with range:
    // 0..255.
    Entry interface{}
}

func (rsvpMgmtRevLspUnsupportedSubobj *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj) GetEntityData() *types.CommonEntityData {
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.YFilter = rsvpMgmtRevLspUnsupportedSubobj.YFilter
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.YangName = "rsvp-mgmt-rev-lsp-unsupported-subobj"
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.BundleName = "cisco_ios_xr"
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.ParentYangName = "unsup-sub-object"
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.SegmentPath = "rsvp-mgmt-rev-lsp-unsupported-subobj" + types.AddNoKeyToken(rsvpMgmtRevLspUnsupportedSubobj)
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/unsup-sub-object/" + rsvpMgmtRevLspUnsupportedSubobj.EntityData.SegmentPath
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpMgmtRevLspUnsupportedSubobj.EntityData.Children = types.NewOrderedMap()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.Leafs = types.NewOrderedMap()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", rsvpMgmtRevLspUnsupportedSubobj.Entry})

    rsvpMgmtRevLspUnsupportedSubobj.EntityData.YListKeys = []string {}

    return &(rsvpMgmtRevLspUnsupportedSubobj.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero
// Explicit Route Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
}

func (ero *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetEntityData() *types.CommonEntityData {
    ero.EntityData.YFilter = ero.YFilter
    ero.EntityData.YangName = "ero"
    ero.EntityData.BundleName = "cisco_ios_xr"
    ero.EntityData.ParentYangName = "psb-info"
    ero.EntityData.SegmentPath = "ero" + types.AddNoKeyToken(ero)
    ero.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + ero.EntityData.SegmentPath
    ero.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ero.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ero.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ero.EntityData.Children = types.NewOrderedMap()
    ero.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &ero.Ipv4eroSubObject})
    ero.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &ero.UnnumberedEroSubObject})
    ero.EntityData.Leafs = types.NewOrderedMap()
    ero.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", ero.EroType})

    ero.EntityData.YListKeys = []string {}

    return &(ero.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject
// IPV4 ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
// Record Route Sub Objects
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4rroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetEntityData() *types.CommonEntityData {
    rro.EntityData.YFilter = rro.YFilter
    rro.EntityData.YangName = "rro"
    rro.EntityData.BundleName = "cisco_ios_xr"
    rro.EntityData.ParentYangName = "psb-info"
    rro.EntityData.SegmentPath = "rro" + types.AddNoKeyToken(rro)
    rro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + rro.EntityData.SegmentPath
    rro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rro.EntityData.Children = types.NewOrderedMap()
    rro.EntityData.Children.Append("ipv4rro-sub-object", types.YChild{"Ipv4rroSubObject", &rro.Ipv4rroSubObject})
    rro.EntityData.Children.Append("label-rro-sub-object", types.YChild{"LabelRroSubObject", &rro.LabelRroSubObject})
    rro.EntityData.Children.Append("unnumbered-rro-sub-object", types.YChild{"UnnumberedRroSubObject", &rro.UnnumberedRroSubObject})
    rro.EntityData.Children.Append("srlg-rro-sub-object", types.YChild{"SrlgRroSubObject", &rro.SrlgRroSubObject})
    rro.EntityData.Leafs = types.NewOrderedMap()
    rro.EntityData.Leafs.Append("rro-type", types.YLeaf{"RroType", rro.RroType})

    rro.EntityData.YListKeys = []string {}

    return &(rro.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject
// IPV4 RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags
}

func (ipv4rroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4rroSubObject.EntityData.YFilter = ipv4rroSubObject.YFilter
    ipv4rroSubObject.EntityData.YangName = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4rroSubObject.EntityData.ParentYangName = "rro"
    ipv4rroSubObject.EntityData.SegmentPath = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + ipv4rroSubObject.EntityData.SegmentPath
    ipv4rroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4rroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4rroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4rroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &ipv4rroSubObject.Flags})
    ipv4rroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Leafs.Append("rro-address", types.YLeaf{"RroAddress", ipv4rroSubObject.RroAddress})

    ipv4rroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4rroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags
// The RRO IPV4 Subobject Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "ipv4rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/ipv4rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Label Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags

    // The RRO Subobject Variable Length Label. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel.
    VariableLengthLabel []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetEntityData() *types.CommonEntityData {
    labelRroSubObject.EntityData.YFilter = labelRroSubObject.YFilter
    labelRroSubObject.EntityData.YangName = "label-rro-sub-object"
    labelRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    labelRroSubObject.EntityData.ParentYangName = "rro"
    labelRroSubObject.EntityData.SegmentPath = "label-rro-sub-object"
    labelRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + labelRroSubObject.EntityData.SegmentPath
    labelRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelRroSubObject.EntityData.Children = types.NewOrderedMap()
    labelRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &labelRroSubObject.Flags})
    labelRroSubObject.EntityData.Children.Append("variable-length-label", types.YChild{"VariableLengthLabel", nil})
    for i := range labelRroSubObject.VariableLengthLabel {
        types.SetYListKey(labelRroSubObject.VariableLengthLabel[i], i)
        labelRroSubObject.EntityData.Children.Append(types.GetSegmentPath(labelRroSubObject.VariableLengthLabel[i]), types.YChild{"VariableLengthLabel", labelRroSubObject.VariableLengthLabel[i]})
    }
    labelRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    labelRroSubObject.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelRroSubObject.Label})
    labelRroSubObject.EntityData.Leafs.Append("is-label-variable-length", types.YLeaf{"IsLabelVariableLength", labelRroSubObject.IsLabelVariableLength})

    labelRroSubObject.EntityData.YListKeys = []string {}

    return &(labelRroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "label-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-global-label", types.YLeaf{"IsGlobalLabel", flags.IsGlobalLabel})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
// The RRO Subobject Variable Length Label
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject Variable Length Label. The type is interface{} with
    // range: 0..4294967295.
    Entry interface{}
}

func (variableLengthLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel) GetEntityData() *types.CommonEntityData {
    variableLengthLabel.EntityData.YFilter = variableLengthLabel.YFilter
    variableLengthLabel.EntityData.YangName = "variable-length-label"
    variableLengthLabel.EntityData.BundleName = "cisco_ios_xr"
    variableLengthLabel.EntityData.ParentYangName = "label-rro-sub-object"
    variableLengthLabel.EntityData.SegmentPath = "variable-length-label" + types.AddNoKeyToken(variableLengthLabel)
    variableLengthLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/" + variableLengthLabel.EntityData.SegmentPath
    variableLengthLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    variableLengthLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    variableLengthLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    variableLengthLabel.EntityData.Children = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", variableLengthLabel.Entry})

    variableLengthLabel.EntityData.YListKeys = []string {}

    return &(variableLengthLabel.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedRroSubObject.EntityData.YFilter = unnumberedRroSubObject.YFilter
    unnumberedRroSubObject.EntityData.YangName = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedRroSubObject.EntityData.ParentYangName = "rro"
    unnumberedRroSubObject.EntityData.SegmentPath = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + unnumberedRroSubObject.EntityData.SegmentPath
    unnumberedRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedRroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &unnumberedRroSubObject.Flags})
    unnumberedRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", unnumberedRroSubObject.InterfaceAddress})
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", unnumberedRroSubObject.InterfaceId})

    unnumberedRroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedRroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "unnumbered-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/unnumbered-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs.
    SrlGs []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetEntityData() *types.CommonEntityData {
    srlgRroSubObject.EntityData.YFilter = srlgRroSubObject.YFilter
    srlgRroSubObject.EntityData.YangName = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    srlgRroSubObject.EntityData.ParentYangName = "rro"
    srlgRroSubObject.EntityData.SegmentPath = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + srlgRroSubObject.EntityData.SegmentPath
    srlgRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgRroSubObject.EntityData.Children = types.NewOrderedMap()
    srlgRroSubObject.EntityData.Children.Append("srl-gs", types.YChild{"SrlGs", nil})
    for i := range srlgRroSubObject.SrlGs {
        types.SetYListKey(srlgRroSubObject.SrlGs[i], i)
        srlgRroSubObject.EntityData.Children.Append(types.GetSegmentPath(srlgRroSubObject.SrlGs[i]), types.YChild{"SrlGs", srlgRroSubObject.SrlGs[i]})
    }
    srlgRroSubObject.EntityData.Leafs = types.NewOrderedMap()

    srlgRroSubObject.EntityData.YListKeys = []string {}

    return &(srlgRroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs
// The RRO Subobject SRLGs
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject SRLGs. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlGs *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs) GetEntityData() *types.CommonEntityData {
    srlGs.EntityData.YFilter = srlGs.YFilter
    srlGs.EntityData.YangName = "srl-gs"
    srlGs.EntityData.BundleName = "cisco_ios_xr"
    srlGs.EntityData.ParentYangName = "srlg-rro-sub-object"
    srlGs.EntityData.SegmentPath = "srl-gs" + types.AddNoKeyToken(srlGs)
    srlGs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/srlg-rro-sub-object/" + srlGs.EntityData.SegmentPath
    srlGs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlGs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlGs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlGs.EntityData.Children = types.NewOrderedMap()
    srlGs.EntityData.Leafs = types.NewOrderedMap()
    srlGs.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlGs.Entry})

    srlGs.EntityData.YListKeys = []string {}

    return &(srlGs.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
// Reservation Info
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Interface on which outbound message was sent. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    OutInterface interface{}

    // Label for outbound traffic. The type is interface{} with range:
    // 0..4294967295.
    OutLabel interface{}

    // Backup tunnel interface. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    BackupInterface interface{}

    // Backup label. The type is interface{} with range: 0..4294967295.
    BackupLabel interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // FlowSpec validity. The type is bool.
    IsFlowSpecValid interface{}

    // Generic Label for outbound traffic.
    GenericOutLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel

    // Flow spec object.
    FlowSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec

    // Generic Flow Spec object.
    GenericFlowSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec

    // Record route object. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro.
    Rro []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
}

func (rsbInfo *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetEntityData() *types.CommonEntityData {
    rsbInfo.EntityData.YFilter = rsbInfo.YFilter
    rsbInfo.EntityData.YangName = "rsb-info"
    rsbInfo.EntityData.BundleName = "cisco_ios_xr"
    rsbInfo.EntityData.ParentYangName = "psb-rsb-info"
    rsbInfo.EntityData.SegmentPath = "rsb-info" + types.AddNoKeyToken(rsbInfo)
    rsbInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/" + rsbInfo.EntityData.SegmentPath
    rsbInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbInfo.EntityData.Children = types.NewOrderedMap()
    rsbInfo.EntityData.Children.Append("generic-out-label", types.YChild{"GenericOutLabel", &rsbInfo.GenericOutLabel})
    rsbInfo.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rsbInfo.FlowSpec})
    rsbInfo.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rsbInfo.GenericFlowSpec})
    rsbInfo.EntityData.Children.Append("rro", types.YChild{"Rro", nil})
    for i := range rsbInfo.Rro {
        types.SetYListKey(rsbInfo.Rro[i], i)
        rsbInfo.EntityData.Children.Append(types.GetSegmentPath(rsbInfo.Rro[i]), types.YChild{"Rro", rsbInfo.Rro[i]})
    }
    rsbInfo.EntityData.Leafs = types.NewOrderedMap()
    rsbInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", rsbInfo.IsValid})
    rsbInfo.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbInfo.DestinationAddress})
    rsbInfo.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", rsbInfo.OutInterface})
    rsbInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", rsbInfo.OutLabel})
    rsbInfo.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", rsbInfo.BackupInterface})
    rsbInfo.EntityData.Leafs.Append("backup-label", types.YLeaf{"BackupLabel", rsbInfo.BackupLabel})
    rsbInfo.EntityData.Leafs.Append("is-rro-valid", types.YLeaf{"IsRroValid", rsbInfo.IsRroValid})
    rsbInfo.EntityData.Leafs.Append("is-flow-spec-valid", types.YLeaf{"IsFlowSpecValid", rsbInfo.IsFlowSpecValid})

    rsbInfo.EntityData.YListKeys = []string {}

    return &(rsbInfo.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel
// Generic Label for outbound traffic
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
}

func (genericOutLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetEntityData() *types.CommonEntityData {
    genericOutLabel.EntityData.YFilter = genericOutLabel.YFilter
    genericOutLabel.EntityData.YangName = "generic-out-label"
    genericOutLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutLabel.EntityData.ParentYangName = "rsb-info"
    genericOutLabel.EntityData.SegmentPath = "generic-out-label"
    genericOutLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + genericOutLabel.EntityData.SegmentPath
    genericOutLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutLabel.EntityData.Children = types.NewOrderedMap()
    genericOutLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutLabel.GeneralizedLabel})
    genericOutLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutLabel.GenericLabelType})

    genericOutLabel.EntityData.YListKeys = []string {}

    return &(genericOutLabel.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
// Generalized Label
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value.
    Value []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value
}

func (generalizedLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-out-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value
// Generalized Label Value
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec
// Flow spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rsb-info"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec
// Generic Flow Spec object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rsb-info"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
// Record route object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4rroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
}

func (rro *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetEntityData() *types.CommonEntityData {
    rro.EntityData.YFilter = rro.YFilter
    rro.EntityData.YangName = "rro"
    rro.EntityData.BundleName = "cisco_ios_xr"
    rro.EntityData.ParentYangName = "rsb-info"
    rro.EntityData.SegmentPath = "rro" + types.AddNoKeyToken(rro)
    rro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + rro.EntityData.SegmentPath
    rro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rro.EntityData.Children = types.NewOrderedMap()
    rro.EntityData.Children.Append("ipv4rro-sub-object", types.YChild{"Ipv4rroSubObject", &rro.Ipv4rroSubObject})
    rro.EntityData.Children.Append("label-rro-sub-object", types.YChild{"LabelRroSubObject", &rro.LabelRroSubObject})
    rro.EntityData.Children.Append("unnumbered-rro-sub-object", types.YChild{"UnnumberedRroSubObject", &rro.UnnumberedRroSubObject})
    rro.EntityData.Children.Append("srlg-rro-sub-object", types.YChild{"SrlgRroSubObject", &rro.SrlgRroSubObject})
    rro.EntityData.Leafs = types.NewOrderedMap()
    rro.EntityData.Leafs.Append("rro-type", types.YLeaf{"RroType", rro.RroType})

    rro.EntityData.YListKeys = []string {}

    return &(rro.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject
// IPV4 RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags
}

func (ipv4rroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4rroSubObject.EntityData.YFilter = ipv4rroSubObject.YFilter
    ipv4rroSubObject.EntityData.YangName = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4rroSubObject.EntityData.ParentYangName = "rro"
    ipv4rroSubObject.EntityData.SegmentPath = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + ipv4rroSubObject.EntityData.SegmentPath
    ipv4rroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4rroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4rroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4rroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &ipv4rroSubObject.Flags})
    ipv4rroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Leafs.Append("rro-address", types.YLeaf{"RroAddress", ipv4rroSubObject.RroAddress})

    ipv4rroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4rroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags
// The RRO IPV4 Subobject Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "ipv4rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/ipv4rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Label Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags

    // The RRO Subobject Variable Length Label. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel.
    VariableLengthLabel []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
}

func (labelRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetEntityData() *types.CommonEntityData {
    labelRroSubObject.EntityData.YFilter = labelRroSubObject.YFilter
    labelRroSubObject.EntityData.YangName = "label-rro-sub-object"
    labelRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    labelRroSubObject.EntityData.ParentYangName = "rro"
    labelRroSubObject.EntityData.SegmentPath = "label-rro-sub-object"
    labelRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + labelRroSubObject.EntityData.SegmentPath
    labelRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelRroSubObject.EntityData.Children = types.NewOrderedMap()
    labelRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &labelRroSubObject.Flags})
    labelRroSubObject.EntityData.Children.Append("variable-length-label", types.YChild{"VariableLengthLabel", nil})
    for i := range labelRroSubObject.VariableLengthLabel {
        types.SetYListKey(labelRroSubObject.VariableLengthLabel[i], i)
        labelRroSubObject.EntityData.Children.Append(types.GetSegmentPath(labelRroSubObject.VariableLengthLabel[i]), types.YChild{"VariableLengthLabel", labelRroSubObject.VariableLengthLabel[i]})
    }
    labelRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    labelRroSubObject.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelRroSubObject.Label})
    labelRroSubObject.EntityData.Leafs.Append("is-label-variable-length", types.YLeaf{"IsLabelVariableLength", labelRroSubObject.IsLabelVariableLength})

    labelRroSubObject.EntityData.YListKeys = []string {}

    return &(labelRroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "label-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-global-label", types.YLeaf{"IsGlobalLabel", flags.IsGlobalLabel})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
// The RRO Subobject Variable Length Label
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject Variable Length Label. The type is interface{} with
    // range: 0..4294967295.
    Entry interface{}
}

func (variableLengthLabel *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel) GetEntityData() *types.CommonEntityData {
    variableLengthLabel.EntityData.YFilter = variableLengthLabel.YFilter
    variableLengthLabel.EntityData.YangName = "variable-length-label"
    variableLengthLabel.EntityData.BundleName = "cisco_ios_xr"
    variableLengthLabel.EntityData.ParentYangName = "label-rro-sub-object"
    variableLengthLabel.EntityData.SegmentPath = "variable-length-label" + types.AddNoKeyToken(variableLengthLabel)
    variableLengthLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/" + variableLengthLabel.EntityData.SegmentPath
    variableLengthLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    variableLengthLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    variableLengthLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    variableLengthLabel.EntityData.Children = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", variableLengthLabel.Entry})

    variableLengthLabel.EntityData.YListKeys = []string {}

    return &(variableLengthLabel.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedRroSubObject.EntityData.YFilter = unnumberedRroSubObject.YFilter
    unnumberedRroSubObject.EntityData.YangName = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedRroSubObject.EntityData.ParentYangName = "rro"
    unnumberedRroSubObject.EntityData.SegmentPath = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + unnumberedRroSubObject.EntityData.SegmentPath
    unnumberedRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedRroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &unnumberedRroSubObject.Flags})
    unnumberedRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", unnumberedRroSubObject.InterfaceAddress})
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", unnumberedRroSubObject.InterfaceId})

    unnumberedRroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedRroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "unnumbered-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/unnumbered-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of
    // RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs.
    SrlGs []*RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs
}

func (srlgRroSubObject *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetEntityData() *types.CommonEntityData {
    srlgRroSubObject.EntityData.YFilter = srlgRroSubObject.YFilter
    srlgRroSubObject.EntityData.YangName = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    srlgRroSubObject.EntityData.ParentYangName = "rro"
    srlgRroSubObject.EntityData.SegmentPath = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + srlgRroSubObject.EntityData.SegmentPath
    srlgRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgRroSubObject.EntityData.Children = types.NewOrderedMap()
    srlgRroSubObject.EntityData.Children.Append("srl-gs", types.YChild{"SrlGs", nil})
    for i := range srlgRroSubObject.SrlGs {
        types.SetYListKey(srlgRroSubObject.SrlGs[i], i)
        srlgRroSubObject.EntityData.Children.Append(types.GetSegmentPath(srlgRroSubObject.SrlGs[i]), types.YChild{"SrlGs", srlgRroSubObject.SrlGs[i]})
    }
    srlgRroSubObject.EntityData.Leafs = types.NewOrderedMap()

    srlgRroSubObject.EntityData.YListKeys = []string {}

    return &(srlgRroSubObject.EntityData)
}

// RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs
// The RRO Subobject SRLGs
type RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject SRLGs. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlGs *RsvpStandby_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs) GetEntityData() *types.CommonEntityData {
    srlGs.EntityData.YFilter = srlGs.YFilter
    srlGs.EntityData.YangName = "srl-gs"
    srlGs.EntityData.BundleName = "cisco_ios_xr"
    srlGs.EntityData.ParentYangName = "srlg-rro-sub-object"
    srlGs.EntityData.SegmentPath = "srl-gs" + types.AddNoKeyToken(srlGs)
    srlGs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/srlg-rro-sub-object/" + srlGs.EntityData.SegmentPath
    srlGs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlGs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlGs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlGs.EntityData.Children = types.NewOrderedMap()
    srlGs.EntityData.Leafs = types.NewOrderedMap()
    srlGs.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlGs.Entry})

    srlGs.EntityData.YListKeys = []string {}

    return &(srlGs.EntityData)
}

// RsvpStandby_HelloInstanceDetails
// Table of detailed info about hello instances
type RsvpStandby_HelloInstanceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single hello instance. The type is slice of
    // RsvpStandby_HelloInstanceDetails_HelloInstanceDetail.
    HelloInstanceDetail []*RsvpStandby_HelloInstanceDetails_HelloInstanceDetail
}

func (helloInstanceDetails *RsvpStandby_HelloInstanceDetails) GetEntityData() *types.CommonEntityData {
    helloInstanceDetails.EntityData.YFilter = helloInstanceDetails.YFilter
    helloInstanceDetails.EntityData.YangName = "hello-instance-details"
    helloInstanceDetails.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceDetails.EntityData.ParentYangName = "rsvp-standby"
    helloInstanceDetails.EntityData.SegmentPath = "hello-instance-details"
    helloInstanceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + helloInstanceDetails.EntityData.SegmentPath
    helloInstanceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceDetails.EntityData.Children = types.NewOrderedMap()
    helloInstanceDetails.EntityData.Children.Append("hello-instance-detail", types.YChild{"HelloInstanceDetail", nil})
    for i := range helloInstanceDetails.HelloInstanceDetail {
        helloInstanceDetails.EntityData.Children.Append(types.GetSegmentPath(helloInstanceDetails.HelloInstanceDetail[i]), types.YChild{"HelloInstanceDetail", helloInstanceDetails.HelloInstanceDetail[i]})
    }
    helloInstanceDetails.EntityData.Leafs = types.NewOrderedMap()

    helloInstanceDetails.EntityData.YListKeys = []string {}

    return &(helloInstanceDetails.EntityData)
}

// RsvpStandby_HelloInstanceDetails_HelloInstanceDetail
// Detailed info for a single hello instance
type RsvpStandby_HelloInstanceDetails_HelloInstanceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Hello instance owner. The type is RsvpMgmtHelloInstanceOwner.
    HelloInstanceOwner interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}

    // Hello Interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Number of missed Hello allowed. The type is interface{} with range:
    // 0..4294967295.
    MissedAcksAllowed interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    CommunicationLostReason interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    TotalCommunicationLost interface{}

    // Lost Comm. Hello missed count. The type is interface{} with range:
    // 0..65535.
    CommunicationLostHelloMissed interface{}

    // Count of lost comm. due to wrong Source Inst. The type is interface{} with
    // range: 0..65535.
    CommunicationLostWrongSourceInst interface{}

    // Count of lost comm. due to wrong Destination Inst. The type is interface{}
    // with range: 0..65535.
    CommunicationLostWrongDestinationInst interface{}

    // Count of lost comm. due to interface down. The type is interface{} with
    // range: 0..65535.
    CommunicationLostInterfaceDown interface{}

    // Count of lost comm. due to nbor disabling Hellos. The type is interface{}
    // with range: 0..65535.
    CommunicationLostNeighborDisabledHello interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Count of Hello Requests suppessed. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloRequestSuppressed interface{}

    // Hello up time.
    UpTime RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime

    // Time when communication was lost.
    CommunicationLostTime RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
}

func (helloInstanceDetail *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail) GetEntityData() *types.CommonEntityData {
    helloInstanceDetail.EntityData.YFilter = helloInstanceDetail.YFilter
    helloInstanceDetail.EntityData.YangName = "hello-instance-detail"
    helloInstanceDetail.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceDetail.EntityData.ParentYangName = "hello-instance-details"
    helloInstanceDetail.EntityData.SegmentPath = "hello-instance-detail" + types.AddKeyToken(helloInstanceDetail.SourceAddress, "source-address") + types.AddKeyToken(helloInstanceDetail.DestinationAddress, "destination-address")
    helloInstanceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-details/" + helloInstanceDetail.EntityData.SegmentPath
    helloInstanceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceDetail.EntityData.Children = types.NewOrderedMap()
    helloInstanceDetail.EntityData.Children.Append("up-time", types.YChild{"UpTime", &helloInstanceDetail.UpTime})
    helloInstanceDetail.EntityData.Children.Append("communication-lost-time", types.YChild{"CommunicationLostTime", &helloInstanceDetail.CommunicationLostTime})
    helloInstanceDetail.EntityData.Leafs = types.NewOrderedMap()
    helloInstanceDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInstanceDetail.SourceAddress})
    helloInstanceDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInstanceDetail.DestinationAddress})
    helloInstanceDetail.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInstanceDetail.SourceAddressXr})
    helloInstanceDetail.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInstanceDetail.DestinationAddressXr})
    helloInstanceDetail.EntityData.Leafs.Append("hello-instance-owner", types.YLeaf{"HelloInstanceOwner", helloInstanceDetail.HelloInstanceOwner})
    helloInstanceDetail.EntityData.Leafs.Append("neighbor-hello-state", types.YLeaf{"NeighborHelloState", helloInstanceDetail.NeighborHelloState})
    helloInstanceDetail.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInstanceDetail.InstanceType})
    helloInstanceDetail.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInstanceDetail.HelloInterface})
    helloInstanceDetail.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", helloInstanceDetail.HelloInterval})
    helloInstanceDetail.EntityData.Leafs.Append("missed-acks-allowed", types.YLeaf{"MissedAcksAllowed", helloInstanceDetail.MissedAcksAllowed})
    helloInstanceDetail.EntityData.Leafs.Append("source-instance", types.YLeaf{"SourceInstance", helloInstanceDetail.SourceInstance})
    helloInstanceDetail.EntityData.Leafs.Append("destination-instance", types.YLeaf{"DestinationInstance", helloInstanceDetail.DestinationInstance})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-reason", types.YLeaf{"CommunicationLostReason", helloInstanceDetail.CommunicationLostReason})
    helloInstanceDetail.EntityData.Leafs.Append("total-communication-lost", types.YLeaf{"TotalCommunicationLost", helloInstanceDetail.TotalCommunicationLost})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-hello-missed", types.YLeaf{"CommunicationLostHelloMissed", helloInstanceDetail.CommunicationLostHelloMissed})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-wrong-source-inst", types.YLeaf{"CommunicationLostWrongSourceInst", helloInstanceDetail.CommunicationLostWrongSourceInst})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-wrong-destination-inst", types.YLeaf{"CommunicationLostWrongDestinationInst", helloInstanceDetail.CommunicationLostWrongDestinationInst})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-interface-down", types.YLeaf{"CommunicationLostInterfaceDown", helloInstanceDetail.CommunicationLostInterfaceDown})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-neighbor-disabled-hello", types.YLeaf{"CommunicationLostNeighborDisabledHello", helloInstanceDetail.CommunicationLostNeighborDisabledHello})
    helloInstanceDetail.EntityData.Leafs.Append("hello-messages-sent", types.YLeaf{"HelloMessagesSent", helloInstanceDetail.HelloMessagesSent})
    helloInstanceDetail.EntityData.Leafs.Append("hello-messages-received", types.YLeaf{"HelloMessagesReceived", helloInstanceDetail.HelloMessagesReceived})
    helloInstanceDetail.EntityData.Leafs.Append("hello-request-suppressed", types.YLeaf{"HelloRequestSuppressed", helloInstanceDetail.HelloRequestSuppressed})

    helloInstanceDetail.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInstanceDetail.EntityData)
}

// RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime
// Hello up time
type RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetEntityData() *types.CommonEntityData {
    upTime.EntityData.YFilter = upTime.YFilter
    upTime.EntityData.YangName = "up-time"
    upTime.EntityData.BundleName = "cisco_ios_xr"
    upTime.EntityData.ParentYangName = "hello-instance-detail"
    upTime.EntityData.SegmentPath = "up-time"
    upTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-details/hello-instance-detail/" + upTime.EntityData.SegmentPath
    upTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    upTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    upTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    upTime.EntityData.Children = types.NewOrderedMap()
    upTime.EntityData.Leafs = types.NewOrderedMap()
    upTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", upTime.Seconds})
    upTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", upTime.Nanoseconds})

    upTime.EntityData.YListKeys = []string {}

    return &(upTime.EntityData)
}

// RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
// Time when communication was lost
type RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (communicationLostTime *RsvpStandby_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetEntityData() *types.CommonEntityData {
    communicationLostTime.EntityData.YFilter = communicationLostTime.YFilter
    communicationLostTime.EntityData.YangName = "communication-lost-time"
    communicationLostTime.EntityData.BundleName = "cisco_ios_xr"
    communicationLostTime.EntityData.ParentYangName = "hello-instance-detail"
    communicationLostTime.EntityData.SegmentPath = "communication-lost-time"
    communicationLostTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/hello-instance-details/hello-instance-detail/" + communicationLostTime.EntityData.SegmentPath
    communicationLostTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    communicationLostTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    communicationLostTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    communicationLostTime.EntityData.Children = types.NewOrderedMap()
    communicationLostTime.EntityData.Leafs = types.NewOrderedMap()
    communicationLostTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", communicationLostTime.Seconds})
    communicationLostTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", communicationLostTime.Nanoseconds})

    communicationLostTime.EntityData.YListKeys = []string {}

    return &(communicationLostTime.EntityData)
}

// RsvpStandby_GlobalNeighborDetails
// Table of detailed info about global neighbors
type RsvpStandby_GlobalNeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail info for a single global neighbor. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail.
    GlobalNeighborDetail []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail
}

func (globalNeighborDetails *RsvpStandby_GlobalNeighborDetails) GetEntityData() *types.CommonEntityData {
    globalNeighborDetails.EntityData.YFilter = globalNeighborDetails.YFilter
    globalNeighborDetails.EntityData.YangName = "global-neighbor-details"
    globalNeighborDetails.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborDetails.EntityData.ParentYangName = "rsvp-standby"
    globalNeighborDetails.EntityData.SegmentPath = "global-neighbor-details"
    globalNeighborDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + globalNeighborDetails.EntityData.SegmentPath
    globalNeighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborDetails.EntityData.Children = types.NewOrderedMap()
    globalNeighborDetails.EntityData.Children.Append("global-neighbor-detail", types.YChild{"GlobalNeighborDetail", nil})
    for i := range globalNeighborDetails.GlobalNeighborDetail {
        globalNeighborDetails.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetails.GlobalNeighborDetail[i]), types.YChild{"GlobalNeighborDetail", globalNeighborDetails.GlobalNeighborDetail[i]})
    }
    globalNeighborDetails.EntityData.Leafs = types.NewOrderedMap()

    globalNeighborDetails.EntityData.YListKeys = []string {}

    return &(globalNeighborDetails.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail
// Detail info for a single global neighbor
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Current restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // GR Restart Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Is GR restart timer running. The type is bool.
    IsRestartTimerRunning interface{}

    // GR Recovery Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Is RSVP recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Hello Interval (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    HelloInterval interface{}

    // Hello missed count. The type is interface{} with range: 0..255.
    MissedHellos interface{}

    // Number of pending states for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    PendingStates interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags

    // How much restart time remains.
    RestartTimeLeft RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft

    // When will restart timer expire.
    RestartTimerExpiryTime RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime

    // How much recovery timer remains.
    RecoveryTimeLeft RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime

    // Local node address. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress.
    LocalNodeAddress []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress

    // Interface Neighbor List. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor.
    InterfaceNeighbor []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor

    // Neighbor's hello state. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState.
    NeighborHelloState []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState

    // Reason why communication was lost. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason.
    LostCommunicationReason []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason

    // Total number of times communication got lost. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal.
    LostCommunicationTotal []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal

    // Hello up time. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime.
    UpTime []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime

    // Time when communication was lost. The type is slice of
    // RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime.
    LostCommunicationTime []*RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
}

func (globalNeighborDetail *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail) GetEntityData() *types.CommonEntityData {
    globalNeighborDetail.EntityData.YFilter = globalNeighborDetail.YFilter
    globalNeighborDetail.EntityData.YangName = "global-neighbor-detail"
    globalNeighborDetail.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborDetail.EntityData.ParentYangName = "global-neighbor-details"
    globalNeighborDetail.EntityData.SegmentPath = "global-neighbor-detail" + types.AddKeyToken(globalNeighborDetail.NeighborAddress, "neighbor-address")
    globalNeighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/" + globalNeighborDetail.EntityData.SegmentPath
    globalNeighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborDetail.EntityData.Children = types.NewOrderedMap()
    globalNeighborDetail.EntityData.Children.Append("global-neighbor-flags", types.YChild{"GlobalNeighborFlags", &globalNeighborDetail.GlobalNeighborFlags})
    globalNeighborDetail.EntityData.Children.Append("restart-time-left", types.YChild{"RestartTimeLeft", &globalNeighborDetail.RestartTimeLeft})
    globalNeighborDetail.EntityData.Children.Append("restart-timer-expiry-time", types.YChild{"RestartTimerExpiryTime", &globalNeighborDetail.RestartTimerExpiryTime})
    globalNeighborDetail.EntityData.Children.Append("recovery-time-left", types.YChild{"RecoveryTimeLeft", &globalNeighborDetail.RecoveryTimeLeft})
    globalNeighborDetail.EntityData.Children.Append("recovery-timer-exp-time", types.YChild{"RecoveryTimerExpTime", &globalNeighborDetail.RecoveryTimerExpTime})
    globalNeighborDetail.EntityData.Children.Append("local-node-address", types.YChild{"LocalNodeAddress", nil})
    for i := range globalNeighborDetail.LocalNodeAddress {
        types.SetYListKey(globalNeighborDetail.LocalNodeAddress[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LocalNodeAddress[i]), types.YChild{"LocalNodeAddress", globalNeighborDetail.LocalNodeAddress[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range globalNeighborDetail.InterfaceNeighbor {
        types.SetYListKey(globalNeighborDetail.InterfaceNeighbor[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", globalNeighborDetail.InterfaceNeighbor[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("neighbor-hello-state", types.YChild{"NeighborHelloState", nil})
    for i := range globalNeighborDetail.NeighborHelloState {
        types.SetYListKey(globalNeighborDetail.NeighborHelloState[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.NeighborHelloState[i]), types.YChild{"NeighborHelloState", globalNeighborDetail.NeighborHelloState[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("lost-communication-reason", types.YChild{"LostCommunicationReason", nil})
    for i := range globalNeighborDetail.LostCommunicationReason {
        types.SetYListKey(globalNeighborDetail.LostCommunicationReason[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LostCommunicationReason[i]), types.YChild{"LostCommunicationReason", globalNeighborDetail.LostCommunicationReason[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("lost-communication-total", types.YChild{"LostCommunicationTotal", nil})
    for i := range globalNeighborDetail.LostCommunicationTotal {
        types.SetYListKey(globalNeighborDetail.LostCommunicationTotal[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LostCommunicationTotal[i]), types.YChild{"LostCommunicationTotal", globalNeighborDetail.LostCommunicationTotal[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("up-time", types.YChild{"UpTime", nil})
    for i := range globalNeighborDetail.UpTime {
        types.SetYListKey(globalNeighborDetail.UpTime[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.UpTime[i]), types.YChild{"UpTime", globalNeighborDetail.UpTime[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("lost-communication-time", types.YChild{"LostCommunicationTime", nil})
    for i := range globalNeighborDetail.LostCommunicationTime {
        types.SetYListKey(globalNeighborDetail.LostCommunicationTime[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LostCommunicationTime[i]), types.YChild{"LostCommunicationTime", globalNeighborDetail.LostCommunicationTime[i]})
    }
    globalNeighborDetail.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", globalNeighborDetail.NeighborAddress})
    globalNeighborDetail.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", globalNeighborDetail.IsGrEnabled})
    globalNeighborDetail.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", globalNeighborDetail.NodeAddress})
    globalNeighborDetail.EntityData.Leafs.Append("restart-state", types.YLeaf{"RestartState", globalNeighborDetail.RestartState})
    globalNeighborDetail.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", globalNeighborDetail.RestartTime})
    globalNeighborDetail.EntityData.Leafs.Append("is-restart-timer-running", types.YLeaf{"IsRestartTimerRunning", globalNeighborDetail.IsRestartTimerRunning})
    globalNeighborDetail.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", globalNeighborDetail.RecoveryTime})
    globalNeighborDetail.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", globalNeighborDetail.IsRecoveryTimerRunning})
    globalNeighborDetail.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", globalNeighborDetail.HelloInterval})
    globalNeighborDetail.EntityData.Leafs.Append("missed-hellos", types.YLeaf{"MissedHellos", globalNeighborDetail.MissedHellos})
    globalNeighborDetail.EntityData.Leafs.Append("pending-states", types.YLeaf{"PendingStates", globalNeighborDetail.PendingStates})

    globalNeighborDetail.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(globalNeighborDetail.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags
// Global Neighbor Flags
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetEntityData() *types.CommonEntityData {
    globalNeighborFlags.EntityData.YFilter = globalNeighborFlags.YFilter
    globalNeighborFlags.EntityData.YangName = "global-neighbor-flags"
    globalNeighborFlags.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborFlags.EntityData.ParentYangName = "global-neighbor-detail"
    globalNeighborFlags.EntityData.SegmentPath = "global-neighbor-flags"
    globalNeighborFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + globalNeighborFlags.EntityData.SegmentPath
    globalNeighborFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborFlags.EntityData.Children = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs.Append("is-application-ouni", types.YLeaf{"IsApplicationOuni", globalNeighborFlags.IsApplicationOuni})
    globalNeighborFlags.EntityData.Leafs.Append("is-application-mpls", types.YLeaf{"IsApplicationMpls", globalNeighborFlags.IsApplicationMpls})

    globalNeighborFlags.EntityData.YListKeys = []string {}

    return &(globalNeighborFlags.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft
// How much restart time remains
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetEntityData() *types.CommonEntityData {
    restartTimeLeft.EntityData.YFilter = restartTimeLeft.YFilter
    restartTimeLeft.EntityData.YangName = "restart-time-left"
    restartTimeLeft.EntityData.BundleName = "cisco_ios_xr"
    restartTimeLeft.EntityData.ParentYangName = "global-neighbor-detail"
    restartTimeLeft.EntityData.SegmentPath = "restart-time-left"
    restartTimeLeft.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + restartTimeLeft.EntityData.SegmentPath
    restartTimeLeft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    restartTimeLeft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    restartTimeLeft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    restartTimeLeft.EntityData.Children = types.NewOrderedMap()
    restartTimeLeft.EntityData.Leafs = types.NewOrderedMap()
    restartTimeLeft.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", restartTimeLeft.Seconds})
    restartTimeLeft.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", restartTimeLeft.Nanoseconds})

    restartTimeLeft.EntityData.YListKeys = []string {}

    return &(restartTimeLeft.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime
// When will restart timer expire
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimerExpiryTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetEntityData() *types.CommonEntityData {
    restartTimerExpiryTime.EntityData.YFilter = restartTimerExpiryTime.YFilter
    restartTimerExpiryTime.EntityData.YangName = "restart-timer-expiry-time"
    restartTimerExpiryTime.EntityData.BundleName = "cisco_ios_xr"
    restartTimerExpiryTime.EntityData.ParentYangName = "global-neighbor-detail"
    restartTimerExpiryTime.EntityData.SegmentPath = "restart-timer-expiry-time"
    restartTimerExpiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + restartTimerExpiryTime.EntityData.SegmentPath
    restartTimerExpiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    restartTimerExpiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    restartTimerExpiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    restartTimerExpiryTime.EntityData.Children = types.NewOrderedMap()
    restartTimerExpiryTime.EntityData.Leafs = types.NewOrderedMap()
    restartTimerExpiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", restartTimerExpiryTime.Seconds})
    restartTimerExpiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", restartTimerExpiryTime.Nanoseconds})

    restartTimerExpiryTime.EntityData.YListKeys = []string {}

    return &(restartTimerExpiryTime.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft
// How much recovery timer remains
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetEntityData() *types.CommonEntityData {
    recoveryTimeLeft.EntityData.YFilter = recoveryTimeLeft.YFilter
    recoveryTimeLeft.EntityData.YangName = "recovery-time-left"
    recoveryTimeLeft.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimeLeft.EntityData.ParentYangName = "global-neighbor-detail"
    recoveryTimeLeft.EntityData.SegmentPath = "recovery-time-left"
    recoveryTimeLeft.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + recoveryTimeLeft.EntityData.SegmentPath
    recoveryTimeLeft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimeLeft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimeLeft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimeLeft.EntityData.Children = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimeLeft.Seconds})
    recoveryTimeLeft.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimeLeft.Nanoseconds})

    recoveryTimeLeft.EntityData.YListKeys = []string {}

    return &(recoveryTimeLeft.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime
// Time at which recovery timer will expire
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetEntityData() *types.CommonEntityData {
    recoveryTimerExpTime.EntityData.YFilter = recoveryTimerExpTime.YFilter
    recoveryTimerExpTime.EntityData.YangName = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimerExpTime.EntityData.ParentYangName = "global-neighbor-detail"
    recoveryTimerExpTime.EntityData.SegmentPath = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + recoveryTimerExpTime.EntityData.SegmentPath
    recoveryTimerExpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimerExpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimerExpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimerExpTime.EntityData.Children = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimerExpTime.Seconds})
    recoveryTimerExpTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimerExpTime.Nanoseconds})

    recoveryTimerExpTime.EntityData.YListKeys = []string {}

    return &(recoveryTimerExpTime.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress
// Local node address
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (localNodeAddress *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress) GetEntityData() *types.CommonEntityData {
    localNodeAddress.EntityData.YFilter = localNodeAddress.YFilter
    localNodeAddress.EntityData.YangName = "local-node-address"
    localNodeAddress.EntityData.BundleName = "cisco_ios_xr"
    localNodeAddress.EntityData.ParentYangName = "global-neighbor-detail"
    localNodeAddress.EntityData.SegmentPath = "local-node-address" + types.AddNoKeyToken(localNodeAddress)
    localNodeAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + localNodeAddress.EntityData.SegmentPath
    localNodeAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localNodeAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localNodeAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localNodeAddress.EntityData.Children = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", localNodeAddress.Entry})

    localNodeAddress.EntityData.YListKeys = []string {}

    return &(localNodeAddress.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor
// Interface Neighbor List
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface Neighbor List. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (interfaceNeighbor *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "global-neighbor-detail"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor" + types.AddNoKeyToken(interfaceNeighbor)
    interfaceNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + interfaceNeighbor.EntityData.SegmentPath
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceNeighbor.Entry})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState
// Neighbor's hello state
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor's hello state. The type is RsvpMgmtHelloState.
    Entry interface{}
}

func (neighborHelloState *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState) GetEntityData() *types.CommonEntityData {
    neighborHelloState.EntityData.YFilter = neighborHelloState.YFilter
    neighborHelloState.EntityData.YangName = "neighbor-hello-state"
    neighborHelloState.EntityData.BundleName = "cisco_ios_xr"
    neighborHelloState.EntityData.ParentYangName = "global-neighbor-detail"
    neighborHelloState.EntityData.SegmentPath = "neighbor-hello-state" + types.AddNoKeyToken(neighborHelloState)
    neighborHelloState.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + neighborHelloState.EntityData.SegmentPath
    neighborHelloState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborHelloState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborHelloState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborHelloState.EntityData.Children = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborHelloState.Entry})

    neighborHelloState.EntityData.YListKeys = []string {}

    return &(neighborHelloState.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason
// Reason why communication was lost
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    Entry interface{}
}

func (lostCommunicationReason *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason) GetEntityData() *types.CommonEntityData {
    lostCommunicationReason.EntityData.YFilter = lostCommunicationReason.YFilter
    lostCommunicationReason.EntityData.YangName = "lost-communication-reason"
    lostCommunicationReason.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationReason.EntityData.ParentYangName = "global-neighbor-detail"
    lostCommunicationReason.EntityData.SegmentPath = "lost-communication-reason" + types.AddNoKeyToken(lostCommunicationReason)
    lostCommunicationReason.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + lostCommunicationReason.EntityData.SegmentPath
    lostCommunicationReason.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationReason.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationReason.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationReason.EntityData.Children = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationReason.Entry})

    lostCommunicationReason.EntityData.YListKeys = []string {}

    return &(lostCommunicationReason.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal
// Total number of times communication got lost
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    Entry interface{}
}

func (lostCommunicationTotal *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal) GetEntityData() *types.CommonEntityData {
    lostCommunicationTotal.EntityData.YFilter = lostCommunicationTotal.YFilter
    lostCommunicationTotal.EntityData.YangName = "lost-communication-total"
    lostCommunicationTotal.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTotal.EntityData.ParentYangName = "global-neighbor-detail"
    lostCommunicationTotal.EntityData.SegmentPath = "lost-communication-total" + types.AddNoKeyToken(lostCommunicationTotal)
    lostCommunicationTotal.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + lostCommunicationTotal.EntityData.SegmentPath
    lostCommunicationTotal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTotal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTotal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTotal.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationTotal.Entry})

    lostCommunicationTotal.EntityData.YListKeys = []string {}

    return &(lostCommunicationTotal.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime
// Hello up time
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetEntityData() *types.CommonEntityData {
    upTime.EntityData.YFilter = upTime.YFilter
    upTime.EntityData.YangName = "up-time"
    upTime.EntityData.BundleName = "cisco_ios_xr"
    upTime.EntityData.ParentYangName = "global-neighbor-detail"
    upTime.EntityData.SegmentPath = "up-time" + types.AddNoKeyToken(upTime)
    upTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + upTime.EntityData.SegmentPath
    upTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    upTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    upTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    upTime.EntityData.Children = types.NewOrderedMap()
    upTime.EntityData.Leafs = types.NewOrderedMap()
    upTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", upTime.Seconds})
    upTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", upTime.Nanoseconds})

    upTime.EntityData.YListKeys = []string {}

    return &(upTime.EntityData)
}

// RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
// Time when communication was lost
type RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetEntityData() *types.CommonEntityData {
    lostCommunicationTime.EntityData.YFilter = lostCommunicationTime.YFilter
    lostCommunicationTime.EntityData.YangName = "lost-communication-time"
    lostCommunicationTime.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTime.EntityData.ParentYangName = "global-neighbor-detail"
    lostCommunicationTime.EntityData.SegmentPath = "lost-communication-time" + types.AddNoKeyToken(lostCommunicationTime)
    lostCommunicationTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-details/global-neighbor-detail/" + lostCommunicationTime.EntityData.SegmentPath
    lostCommunicationTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTime.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", lostCommunicationTime.Seconds})
    lostCommunicationTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", lostCommunicationTime.Nanoseconds})

    lostCommunicationTime.EntityData.YListKeys = []string {}

    return &(lostCommunicationTime.EntityData)
}

// RsvpStandby_PsbBriefs
// Table of brief info about path state blocks
type RsvpStandby_PsbBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single path state block. The type is slice of
    // RsvpStandby_PsbBriefs_PsbBrief.
    PsbBrief []*RsvpStandby_PsbBriefs_PsbBrief
}

func (psbBriefs *RsvpStandby_PsbBriefs) GetEntityData() *types.CommonEntityData {
    psbBriefs.EntityData.YFilter = psbBriefs.YFilter
    psbBriefs.EntityData.YangName = "psb-briefs"
    psbBriefs.EntityData.BundleName = "cisco_ios_xr"
    psbBriefs.EntityData.ParentYangName = "rsvp-standby"
    psbBriefs.EntityData.SegmentPath = "psb-briefs"
    psbBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + psbBriefs.EntityData.SegmentPath
    psbBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbBriefs.EntityData.Children = types.NewOrderedMap()
    psbBriefs.EntityData.Children.Append("psb-brief", types.YChild{"PsbBrief", nil})
    for i := range psbBriefs.PsbBrief {
        types.SetYListKey(psbBriefs.PsbBrief[i], i)
        psbBriefs.EntityData.Children.Append(types.GetSegmentPath(psbBriefs.PsbBrief[i]), types.YChild{"PsbBrief", psbBriefs.PsbBrief[i]})
    }
    psbBriefs.EntityData.Leafs = types.NewOrderedMap()

    psbBriefs.EntityData.YListKeys = []string {}

    return &(psbBriefs.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief
// Brief info for a single path state block
type RsvpStandby_PsbBriefs_PsbBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session RsvpStandby_PsbBriefs_PsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp RsvpStandby_PsbBriefs_PsbBrief_S2lSubLsp

    // RSVP Template.
    Template RsvpStandby_PsbBriefs_PsbBrief_Template

    // RSVP Session Attribute.
    SessionAttribute RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec
}

func (psbBrief *RsvpStandby_PsbBriefs_PsbBrief) GetEntityData() *types.CommonEntityData {
    psbBrief.EntityData.YFilter = psbBrief.YFilter
    psbBrief.EntityData.YangName = "psb-brief"
    psbBrief.EntityData.BundleName = "cisco_ios_xr"
    psbBrief.EntityData.ParentYangName = "psb-briefs"
    psbBrief.EntityData.SegmentPath = "psb-brief" + types.AddNoKeyToken(psbBrief)
    psbBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/" + psbBrief.EntityData.SegmentPath
    psbBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbBrief.EntityData.Children = types.NewOrderedMap()
    psbBrief.EntityData.Children.Append("session", types.YChild{"Session", &psbBrief.Session})
    psbBrief.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &psbBrief.S2lSubLsp})
    psbBrief.EntityData.Children.Append("template", types.YChild{"Template", &psbBrief.Template})
    psbBrief.EntityData.Children.Append("session-attribute", types.YChild{"SessionAttribute", &psbBrief.SessionAttribute})
    psbBrief.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &psbBrief.TrafficSpec})
    psbBrief.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &psbBrief.GenericTrafficSpec})
    psbBrief.EntityData.Leafs = types.NewOrderedMap()
    psbBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbBrief.DestinationAddress})
    psbBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", psbBrief.DestinationPort})
    psbBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", psbBrief.Protocol})
    psbBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", psbBrief.ExtendedTunnelId})
    psbBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", psbBrief.SessionType})
    psbBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", psbBrief.P2mpId})
    psbBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", psbBrief.SourceAddress})
    psbBrief.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", psbBrief.SourcePort})
    psbBrief.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", psbBrief.SubGroupOrigin})
    psbBrief.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbBrief.SubGroupId})
    psbBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", psbBrief.VrfName})
    psbBrief.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", psbBrief.InputInterface})

    psbBrief.EntityData.YListKeys = []string {}

    return &(psbBrief.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Session
// RSVP Session Information
type RsvpStandby_PsbBriefs_PsbBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession
}

func (session *RsvpStandby_PsbBriefs_PsbBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "psb-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession
// RSVP Session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *RsvpStandby_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_S2lSubLsp
// RSVP S2L Sub-LSP information
type RsvpStandby_PsbBriefs_PsbBrief_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *RsvpStandby_PsbBriefs_PsbBrief_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "psb-brief"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Template
// RSVP Template
type RsvpStandby_PsbBriefs_PsbBrief_Template struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter
}

func (template *RsvpStandby_PsbBriefs_PsbBrief_Template) GetEntityData() *types.CommonEntityData {
    template.EntityData.YFilter = template.YFilter
    template.EntityData.YangName = "template"
    template.EntityData.BundleName = "cisco_ios_xr"
    template.EntityData.ParentYangName = "psb-brief"
    template.EntityData.SegmentPath = "template"
    template.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" + template.EntityData.SegmentPath
    template.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    template.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    template.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    template.EntityData.Children = types.NewOrderedMap()
    template.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &template.RsvpFilter})
    template.EntityData.Leafs = types.NewOrderedMap()

    template.EntityData.YListKeys = []string {}

    return &(template.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter
// RSVP Filter
type RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "template"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *RsvpStandby_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/template/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute
// RSVP Session Attribute
type RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute) GetEntityData() *types.CommonEntityData {
    sessionAttribute.EntityData.YFilter = sessionAttribute.YFilter
    sessionAttribute.EntityData.YangName = "session-attribute"
    sessionAttribute.EntityData.BundleName = "cisco_ios_xr"
    sessionAttribute.EntityData.ParentYangName = "psb-brief"
    sessionAttribute.EntityData.SegmentPath = "session-attribute"
    sessionAttribute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" + sessionAttribute.EntityData.SegmentPath
    sessionAttribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionAttribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionAttribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionAttribute.EntityData.Children = types.NewOrderedMap()
    sessionAttribute.EntityData.Children.Append("sess-attribute-flags", types.YChild{"SessAttributeFlags", &sessionAttribute.SessAttributeFlags})
    sessionAttribute.EntityData.Leafs = types.NewOrderedMap()
    sessionAttribute.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", sessionAttribute.SetupPriority})
    sessionAttribute.EntityData.Leafs.Append("reservation-priority", types.YLeaf{"ReservationPriority", sessionAttribute.ReservationPriority})

    sessionAttribute.EntityData.YListKeys = []string {}

    return &(sessionAttribute.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
// Session Attributes
type RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *RsvpStandby_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetEntityData() *types.CommonEntityData {
    sessAttributeFlags.EntityData.YFilter = sessAttributeFlags.YFilter
    sessAttributeFlags.EntityData.YangName = "sess-attribute-flags"
    sessAttributeFlags.EntityData.BundleName = "cisco_ios_xr"
    sessAttributeFlags.EntityData.ParentYangName = "session-attribute"
    sessAttributeFlags.EntityData.SegmentPath = "sess-attribute-flags"
    sessAttributeFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/session-attribute/" + sessAttributeFlags.EntityData.SegmentPath
    sessAttributeFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessAttributeFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessAttributeFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessAttributeFlags.EntityData.Children = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs.Append("is-local-protect", types.YLeaf{"IsLocalProtect", sessAttributeFlags.IsLocalProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-node-protect", types.YLeaf{"IsNodeProtect", sessAttributeFlags.IsNodeProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-bandwidth-protect", types.YLeaf{"IsBandwidthProtect", sessAttributeFlags.IsBandwidthProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-record-labels", types.YLeaf{"IsRecordLabels", sessAttributeFlags.IsRecordLabels})
    sessAttributeFlags.EntityData.Leafs.Append("is-shared-explicit-requested", types.YLeaf{"IsSharedExplicitRequested", sessAttributeFlags.IsSharedExplicitRequested})

    sessAttributeFlags.EntityData.YListKeys = []string {}

    return &(sessAttributeFlags.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec
// RSVP Traffic Spec Info
type RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *RsvpStandby_PsbBriefs_PsbBrief_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "psb-brief"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "psb-brief"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *RsvpStandby_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/psb-briefs/psb-brief/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs
// Table of brief info about global neighbors
type RsvpStandby_GlobalNeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single global neighbor. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief.
    GlobalNeighborBrief []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief
}

func (globalNeighborBriefs *RsvpStandby_GlobalNeighborBriefs) GetEntityData() *types.CommonEntityData {
    globalNeighborBriefs.EntityData.YFilter = globalNeighborBriefs.YFilter
    globalNeighborBriefs.EntityData.YangName = "global-neighbor-briefs"
    globalNeighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborBriefs.EntityData.ParentYangName = "rsvp-standby"
    globalNeighborBriefs.EntityData.SegmentPath = "global-neighbor-briefs"
    globalNeighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/" + globalNeighborBriefs.EntityData.SegmentPath
    globalNeighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborBriefs.EntityData.Children = types.NewOrderedMap()
    globalNeighborBriefs.EntityData.Children.Append("global-neighbor-brief", types.YChild{"GlobalNeighborBrief", nil})
    for i := range globalNeighborBriefs.GlobalNeighborBrief {
        globalNeighborBriefs.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBriefs.GlobalNeighborBrief[i]), types.YChild{"GlobalNeighborBrief", globalNeighborBriefs.GlobalNeighborBrief[i]})
    }
    globalNeighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    globalNeighborBriefs.EntityData.YListKeys = []string {}

    return &(globalNeighborBriefs.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief
// Brief info for a single global neighbor
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags

    // Local node address. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress.
    LocalNodeAddress []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress

    // Neighbor Hello state. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState.
    NeighborHelloState []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState

    // Reason why communication was lost. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason.
    LostCommunicationReason []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason

    // Total number of times communication got lost. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal.
    LostCommunicationTotal []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal

    // Time hellos have been up. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime.
    UpTime []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime

    // Time when communication was lost. The type is slice of
    // RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime.
    LostCommunicationTime []*RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
}

func (globalNeighborBrief *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief) GetEntityData() *types.CommonEntityData {
    globalNeighborBrief.EntityData.YFilter = globalNeighborBrief.YFilter
    globalNeighborBrief.EntityData.YangName = "global-neighbor-brief"
    globalNeighborBrief.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborBrief.EntityData.ParentYangName = "global-neighbor-briefs"
    globalNeighborBrief.EntityData.SegmentPath = "global-neighbor-brief" + types.AddKeyToken(globalNeighborBrief.NeighborAddress, "neighbor-address")
    globalNeighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/" + globalNeighborBrief.EntityData.SegmentPath
    globalNeighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborBrief.EntityData.Children = types.NewOrderedMap()
    globalNeighborBrief.EntityData.Children.Append("global-neighbor-flags", types.YChild{"GlobalNeighborFlags", &globalNeighborBrief.GlobalNeighborFlags})
    globalNeighborBrief.EntityData.Children.Append("local-node-address", types.YChild{"LocalNodeAddress", nil})
    for i := range globalNeighborBrief.LocalNodeAddress {
        types.SetYListKey(globalNeighborBrief.LocalNodeAddress[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LocalNodeAddress[i]), types.YChild{"LocalNodeAddress", globalNeighborBrief.LocalNodeAddress[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("neighbor-hello-state", types.YChild{"NeighborHelloState", nil})
    for i := range globalNeighborBrief.NeighborHelloState {
        types.SetYListKey(globalNeighborBrief.NeighborHelloState[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.NeighborHelloState[i]), types.YChild{"NeighborHelloState", globalNeighborBrief.NeighborHelloState[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("lost-communication-reason", types.YChild{"LostCommunicationReason", nil})
    for i := range globalNeighborBrief.LostCommunicationReason {
        types.SetYListKey(globalNeighborBrief.LostCommunicationReason[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LostCommunicationReason[i]), types.YChild{"LostCommunicationReason", globalNeighborBrief.LostCommunicationReason[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("lost-communication-total", types.YChild{"LostCommunicationTotal", nil})
    for i := range globalNeighborBrief.LostCommunicationTotal {
        types.SetYListKey(globalNeighborBrief.LostCommunicationTotal[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LostCommunicationTotal[i]), types.YChild{"LostCommunicationTotal", globalNeighborBrief.LostCommunicationTotal[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("up-time", types.YChild{"UpTime", nil})
    for i := range globalNeighborBrief.UpTime {
        types.SetYListKey(globalNeighborBrief.UpTime[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.UpTime[i]), types.YChild{"UpTime", globalNeighborBrief.UpTime[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("lost-communication-time", types.YChild{"LostCommunicationTime", nil})
    for i := range globalNeighborBrief.LostCommunicationTime {
        types.SetYListKey(globalNeighborBrief.LostCommunicationTime[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LostCommunicationTime[i]), types.YChild{"LostCommunicationTime", globalNeighborBrief.LostCommunicationTime[i]})
    }
    globalNeighborBrief.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborBrief.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", globalNeighborBrief.NeighborAddress})
    globalNeighborBrief.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", globalNeighborBrief.IsGrEnabled})
    globalNeighborBrief.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", globalNeighborBrief.NodeAddress})
    globalNeighborBrief.EntityData.Leafs.Append("restart-state", types.YLeaf{"RestartState", globalNeighborBrief.RestartState})

    globalNeighborBrief.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(globalNeighborBrief.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags
// Global Neighbor Flags
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetEntityData() *types.CommonEntityData {
    globalNeighborFlags.EntityData.YFilter = globalNeighborFlags.YFilter
    globalNeighborFlags.EntityData.YangName = "global-neighbor-flags"
    globalNeighborFlags.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborFlags.EntityData.ParentYangName = "global-neighbor-brief"
    globalNeighborFlags.EntityData.SegmentPath = "global-neighbor-flags"
    globalNeighborFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + globalNeighborFlags.EntityData.SegmentPath
    globalNeighborFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborFlags.EntityData.Children = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs.Append("is-application-ouni", types.YLeaf{"IsApplicationOuni", globalNeighborFlags.IsApplicationOuni})
    globalNeighborFlags.EntityData.Leafs.Append("is-application-mpls", types.YLeaf{"IsApplicationMpls", globalNeighborFlags.IsApplicationMpls})

    globalNeighborFlags.EntityData.YListKeys = []string {}

    return &(globalNeighborFlags.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress
// Local node address
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (localNodeAddress *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress) GetEntityData() *types.CommonEntityData {
    localNodeAddress.EntityData.YFilter = localNodeAddress.YFilter
    localNodeAddress.EntityData.YangName = "local-node-address"
    localNodeAddress.EntityData.BundleName = "cisco_ios_xr"
    localNodeAddress.EntityData.ParentYangName = "global-neighbor-brief"
    localNodeAddress.EntityData.SegmentPath = "local-node-address" + types.AddNoKeyToken(localNodeAddress)
    localNodeAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + localNodeAddress.EntityData.SegmentPath
    localNodeAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localNodeAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localNodeAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localNodeAddress.EntityData.Children = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", localNodeAddress.Entry})

    localNodeAddress.EntityData.YListKeys = []string {}

    return &(localNodeAddress.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState
// Neighbor Hello state
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    Entry interface{}
}

func (neighborHelloState *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState) GetEntityData() *types.CommonEntityData {
    neighborHelloState.EntityData.YFilter = neighborHelloState.YFilter
    neighborHelloState.EntityData.YangName = "neighbor-hello-state"
    neighborHelloState.EntityData.BundleName = "cisco_ios_xr"
    neighborHelloState.EntityData.ParentYangName = "global-neighbor-brief"
    neighborHelloState.EntityData.SegmentPath = "neighbor-hello-state" + types.AddNoKeyToken(neighborHelloState)
    neighborHelloState.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + neighborHelloState.EntityData.SegmentPath
    neighborHelloState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborHelloState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborHelloState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborHelloState.EntityData.Children = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborHelloState.Entry})

    neighborHelloState.EntityData.YListKeys = []string {}

    return &(neighborHelloState.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason
// Reason why communication was lost
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    Entry interface{}
}

func (lostCommunicationReason *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason) GetEntityData() *types.CommonEntityData {
    lostCommunicationReason.EntityData.YFilter = lostCommunicationReason.YFilter
    lostCommunicationReason.EntityData.YangName = "lost-communication-reason"
    lostCommunicationReason.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationReason.EntityData.ParentYangName = "global-neighbor-brief"
    lostCommunicationReason.EntityData.SegmentPath = "lost-communication-reason" + types.AddNoKeyToken(lostCommunicationReason)
    lostCommunicationReason.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + lostCommunicationReason.EntityData.SegmentPath
    lostCommunicationReason.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationReason.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationReason.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationReason.EntityData.Children = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationReason.Entry})

    lostCommunicationReason.EntityData.YListKeys = []string {}

    return &(lostCommunicationReason.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal
// Total number of times communication got lost
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    Entry interface{}
}

func (lostCommunicationTotal *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal) GetEntityData() *types.CommonEntityData {
    lostCommunicationTotal.EntityData.YFilter = lostCommunicationTotal.YFilter
    lostCommunicationTotal.EntityData.YangName = "lost-communication-total"
    lostCommunicationTotal.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTotal.EntityData.ParentYangName = "global-neighbor-brief"
    lostCommunicationTotal.EntityData.SegmentPath = "lost-communication-total" + types.AddNoKeyToken(lostCommunicationTotal)
    lostCommunicationTotal.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + lostCommunicationTotal.EntityData.SegmentPath
    lostCommunicationTotal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTotal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTotal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTotal.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationTotal.Entry})

    lostCommunicationTotal.EntityData.YListKeys = []string {}

    return &(lostCommunicationTotal.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime
// Time hellos have been up
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetEntityData() *types.CommonEntityData {
    upTime.EntityData.YFilter = upTime.YFilter
    upTime.EntityData.YangName = "up-time"
    upTime.EntityData.BundleName = "cisco_ios_xr"
    upTime.EntityData.ParentYangName = "global-neighbor-brief"
    upTime.EntityData.SegmentPath = "up-time" + types.AddNoKeyToken(upTime)
    upTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + upTime.EntityData.SegmentPath
    upTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    upTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    upTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    upTime.EntityData.Children = types.NewOrderedMap()
    upTime.EntityData.Leafs = types.NewOrderedMap()
    upTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", upTime.Seconds})
    upTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", upTime.Nanoseconds})

    upTime.EntityData.YListKeys = []string {}

    return &(upTime.EntityData)
}

// RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
// Time when communication was lost
type RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *RsvpStandby_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetEntityData() *types.CommonEntityData {
    lostCommunicationTime.EntityData.YFilter = lostCommunicationTime.YFilter
    lostCommunicationTime.EntityData.YangName = "lost-communication-time"
    lostCommunicationTime.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTime.EntityData.ParentYangName = "global-neighbor-brief"
    lostCommunicationTime.EntityData.SegmentPath = "lost-communication-time" + types.AddNoKeyToken(lostCommunicationTime)
    lostCommunicationTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp-standby/global-neighbor-briefs/global-neighbor-brief/" + lostCommunicationTime.EntityData.SegmentPath
    lostCommunicationTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTime.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", lostCommunicationTime.Seconds})
    lostCommunicationTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", lostCommunicationTime.Nanoseconds})

    lostCommunicationTime.EntityData.YListKeys = []string {}

    return &(lostCommunicationTime.EntityData)
}

// Rsvp
// rsvp
type Rsvp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP ISSU information.
    Issu Rsvp_Issu

    // All B/W Pool info.
    BwPoolInfo Rsvp_BwPoolInfo

    // Table of detailed PXSB info.
    PxsbDetails Rsvp_PxsbDetails

    // Table of detailed RXSB info.
    RxsbDetails Rsvp_RxsbDetails

    // Table of brief info about I/F neighbors.
    InterfaceNeighborBriefs Rsvp_InterfaceNeighborBriefs

    // Table of summary info about RSVP-enabled controllers.
    ControllerSummaries Rsvp_ControllerSummaries

    // Table for Authentication related information.
    AuthenticationBriefs Rsvp_AuthenticationBriefs

    // Table of brief info about sessions.
    SessionBriefs Rsvp_SessionBriefs

    // Table of detailed info about path state blocks.
    PsbDetaileds Rsvp_PsbDetaileds

    // Table of detailed info about RSVP-enabled controllers.
    ControllerDetaileds Rsvp_ControllerDetaileds

    // Fast Re-Route Summary State Information.
    FrrSummary Rsvp_FrrSummary

    // Table of detailed info about reservation state blocks.
    RsbDetaileds Rsvp_RsbDetaileds

    // Table of summary info about RSVP-enabled interfaces.
    InterfaceSummaries Rsvp_InterfaceSummaries

    // Table of brief info about hello instances.
    HelloInstanceBriefs Rsvp_HelloInstanceBriefs

    // Table for detailed authentication related information.
    AuthenticationDetails Rsvp_AuthenticationDetails

    // Table of brief info about reservation state blocks.
    RsbBriefs Rsvp_RsbBriefs

    // Counters.
    Counters Rsvp_Counters

    // Table of detailed info about RSVP-enabled interfaces.
    InterfaceDetaileds Rsvp_InterfaceDetaileds

    // Table of brief info about RSVP-enabled controller.
    ControllerBriefs Rsvp_ControllerBriefs

    // Info about graceful-restart.
    GracefulRestart Rsvp_GracefulRestart

    // Table of brief info about i/f-based hello instances.
    HelloInterfaceInstanceBriefs Rsvp_HelloInterfaceInstanceBriefs

    // Table of detailed info about i/f-based hello instances.
    HelloInterfaceInstanceDetails Rsvp_HelloInterfaceInstanceDetails

    // Table of detailed info about I/F neighbors.
    InterfaceNeighborDetails Rsvp_InterfaceNeighborDetails

    // RSVP NSR information.
    Nsr Rsvp_Nsr

    // RSVP summary information.
    Summary Rsvp_Summary

    // Table of detailed info about Fast Re-route states.
    Frrs Rsvp_Frrs

    // Table of brief info about requests.
    RequestBriefs Rsvp_RequestBriefs

    // Table of detail info about requests.
    RequestDetails Rsvp_RequestDetails

    // Table of brief info about RSVP-enabled interfaces.
    InterfaceBriefs Rsvp_InterfaceBriefs

    // Table of detailed info about sessions.
    SessionDetaileds Rsvp_SessionDetaileds

    // Table of detailed info about hello instances.
    HelloInstanceDetails Rsvp_HelloInstanceDetails

    // Table of detailed info about global neighbors.
    GlobalNeighborDetails Rsvp_GlobalNeighborDetails

    // Table of brief info about path state blocks.
    PsbBriefs Rsvp_PsbBriefs

    // Table of brief info about global neighbors.
    GlobalNeighborBriefs Rsvp_GlobalNeighborBriefs
}

func (rsvp *Rsvp) GetEntityData() *types.CommonEntityData {
    rsvp.EntityData.YFilter = rsvp.YFilter
    rsvp.EntityData.YangName = "rsvp"
    rsvp.EntityData.BundleName = "cisco_ios_xr"
    rsvp.EntityData.ParentYangName = "Cisco-IOS-XR-ip-rsvp-oper"
    rsvp.EntityData.SegmentPath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp"
    rsvp.EntityData.AbsolutePath = rsvp.EntityData.SegmentPath
    rsvp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvp.EntityData.Children = types.NewOrderedMap()
    rsvp.EntityData.Children.Append("issu", types.YChild{"Issu", &rsvp.Issu})
    rsvp.EntityData.Children.Append("bw-pool-info", types.YChild{"BwPoolInfo", &rsvp.BwPoolInfo})
    rsvp.EntityData.Children.Append("pxsb-details", types.YChild{"PxsbDetails", &rsvp.PxsbDetails})
    rsvp.EntityData.Children.Append("rxsb-details", types.YChild{"RxsbDetails", &rsvp.RxsbDetails})
    rsvp.EntityData.Children.Append("interface-neighbor-briefs", types.YChild{"InterfaceNeighborBriefs", &rsvp.InterfaceNeighborBriefs})
    rsvp.EntityData.Children.Append("controller-summaries", types.YChild{"ControllerSummaries", &rsvp.ControllerSummaries})
    rsvp.EntityData.Children.Append("authentication-briefs", types.YChild{"AuthenticationBriefs", &rsvp.AuthenticationBriefs})
    rsvp.EntityData.Children.Append("session-briefs", types.YChild{"SessionBriefs", &rsvp.SessionBriefs})
    rsvp.EntityData.Children.Append("psb-detaileds", types.YChild{"PsbDetaileds", &rsvp.PsbDetaileds})
    rsvp.EntityData.Children.Append("controller-detaileds", types.YChild{"ControllerDetaileds", &rsvp.ControllerDetaileds})
    rsvp.EntityData.Children.Append("frr-summary", types.YChild{"FrrSummary", &rsvp.FrrSummary})
    rsvp.EntityData.Children.Append("rsb-detaileds", types.YChild{"RsbDetaileds", &rsvp.RsbDetaileds})
    rsvp.EntityData.Children.Append("interface-summaries", types.YChild{"InterfaceSummaries", &rsvp.InterfaceSummaries})
    rsvp.EntityData.Children.Append("hello-instance-briefs", types.YChild{"HelloInstanceBriefs", &rsvp.HelloInstanceBriefs})
    rsvp.EntityData.Children.Append("authentication-details", types.YChild{"AuthenticationDetails", &rsvp.AuthenticationDetails})
    rsvp.EntityData.Children.Append("rsb-briefs", types.YChild{"RsbBriefs", &rsvp.RsbBriefs})
    rsvp.EntityData.Children.Append("counters", types.YChild{"Counters", &rsvp.Counters})
    rsvp.EntityData.Children.Append("interface-detaileds", types.YChild{"InterfaceDetaileds", &rsvp.InterfaceDetaileds})
    rsvp.EntityData.Children.Append("controller-briefs", types.YChild{"ControllerBriefs", &rsvp.ControllerBriefs})
    rsvp.EntityData.Children.Append("graceful-restart", types.YChild{"GracefulRestart", &rsvp.GracefulRestart})
    rsvp.EntityData.Children.Append("hello-interface-instance-briefs", types.YChild{"HelloInterfaceInstanceBriefs", &rsvp.HelloInterfaceInstanceBriefs})
    rsvp.EntityData.Children.Append("hello-interface-instance-details", types.YChild{"HelloInterfaceInstanceDetails", &rsvp.HelloInterfaceInstanceDetails})
    rsvp.EntityData.Children.Append("interface-neighbor-details", types.YChild{"InterfaceNeighborDetails", &rsvp.InterfaceNeighborDetails})
    rsvp.EntityData.Children.Append("nsr", types.YChild{"Nsr", &rsvp.Nsr})
    rsvp.EntityData.Children.Append("summary", types.YChild{"Summary", &rsvp.Summary})
    rsvp.EntityData.Children.Append("frrs", types.YChild{"Frrs", &rsvp.Frrs})
    rsvp.EntityData.Children.Append("request-briefs", types.YChild{"RequestBriefs", &rsvp.RequestBriefs})
    rsvp.EntityData.Children.Append("request-details", types.YChild{"RequestDetails", &rsvp.RequestDetails})
    rsvp.EntityData.Children.Append("interface-briefs", types.YChild{"InterfaceBriefs", &rsvp.InterfaceBriefs})
    rsvp.EntityData.Children.Append("session-detaileds", types.YChild{"SessionDetaileds", &rsvp.SessionDetaileds})
    rsvp.EntityData.Children.Append("hello-instance-details", types.YChild{"HelloInstanceDetails", &rsvp.HelloInstanceDetails})
    rsvp.EntityData.Children.Append("global-neighbor-details", types.YChild{"GlobalNeighborDetails", &rsvp.GlobalNeighborDetails})
    rsvp.EntityData.Children.Append("psb-briefs", types.YChild{"PsbBriefs", &rsvp.PsbBriefs})
    rsvp.EntityData.Children.Append("global-neighbor-briefs", types.YChild{"GlobalNeighborBriefs", &rsvp.GlobalNeighborBriefs})
    rsvp.EntityData.Leafs = types.NewOrderedMap()

    rsvp.EntityData.YListKeys = []string {}

    return &(rsvp.EntityData)
}

// Rsvp_Issu
// RSVP ISSU information
type Rsvp_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP ISSU status information.
    Status Rsvp_Issu_Status
}

func (issu *Rsvp_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "rsvp"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Children.Append("status", types.YChild{"Status", &issu.Status})
    issu.EntityData.Leafs = types.NewOrderedMap()

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// Rsvp_Issu_Status
// RSVP ISSU status information
type Rsvp_Issu_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Issu_Status_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Issu_Status_PreviousIdtStatus
}

func (status *Rsvp_Issu_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "issu"
    status.EntityData.SegmentPath = "status"
    status.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/" + status.EntityData.SegmentPath
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &status.IdtStatus})
    status.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &status.PreviousIdtStatus})
    status.EntityData.Leafs = types.NewOrderedMap()
    status.EntityData.Leafs.Append("role", types.YLeaf{"Role", status.Role})

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Rsvp_Issu_Status_IdtStatus
// IDT status
type Rsvp_Issu_Status_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Issu_Status_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// Rsvp_Issu_Status_PreviousIdtStatus
// Previous IDT status
type Rsvp_Issu_Status_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Issu_Status_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/issu/status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// Rsvp_BwPoolInfo
// All B/W Pool info
type Rsvp_BwPoolInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maxium reservable I/F percent B/W. The type is interface{} with range:
    // 0..4294967295. Units are percentage.
    MaxResPoolPercent interface{}

    // BC0 I/F percent B/W. The type is interface{} with range: 0..4294967295.
    // Units are percentage.
    Bc0Percent interface{}

    // BC1 I/F percent B/W. The type is interface{} with range: 0..4294967295.
    // Units are percentage.
    Bc1Percent interface{}

    // Is maximum reservable default I/F percent configured. The type is bool.
    IsMaxResPoolPercentConfigured interface{}

    // Is BC0 default I/F percent configured. The type is bool.
    IsBc0PercentConfigured interface{}

    // Is BC1 default I/F percent configured. The type is bool.
    IsBc1PercentConfigured interface{}

    // Bandwith configuration model currently in use (MAM/RDM). The type is
    // IgpteLibBwModel.
    BandwidthConfigurationModel interface{}
}

func (bwPoolInfo *Rsvp_BwPoolInfo) GetEntityData() *types.CommonEntityData {
    bwPoolInfo.EntityData.YFilter = bwPoolInfo.YFilter
    bwPoolInfo.EntityData.YangName = "bw-pool-info"
    bwPoolInfo.EntityData.BundleName = "cisco_ios_xr"
    bwPoolInfo.EntityData.ParentYangName = "rsvp"
    bwPoolInfo.EntityData.SegmentPath = "bw-pool-info"
    bwPoolInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + bwPoolInfo.EntityData.SegmentPath
    bwPoolInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bwPoolInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bwPoolInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bwPoolInfo.EntityData.Children = types.NewOrderedMap()
    bwPoolInfo.EntityData.Leafs = types.NewOrderedMap()
    bwPoolInfo.EntityData.Leafs.Append("max-res-pool-percent", types.YLeaf{"MaxResPoolPercent", bwPoolInfo.MaxResPoolPercent})
    bwPoolInfo.EntityData.Leafs.Append("bc0-percent", types.YLeaf{"Bc0Percent", bwPoolInfo.Bc0Percent})
    bwPoolInfo.EntityData.Leafs.Append("bc1-percent", types.YLeaf{"Bc1Percent", bwPoolInfo.Bc1Percent})
    bwPoolInfo.EntityData.Leafs.Append("is-max-res-pool-percent-configured", types.YLeaf{"IsMaxResPoolPercentConfigured", bwPoolInfo.IsMaxResPoolPercentConfigured})
    bwPoolInfo.EntityData.Leafs.Append("is-bc0-percent-configured", types.YLeaf{"IsBc0PercentConfigured", bwPoolInfo.IsBc0PercentConfigured})
    bwPoolInfo.EntityData.Leafs.Append("is-bc1-percent-configured", types.YLeaf{"IsBc1PercentConfigured", bwPoolInfo.IsBc1PercentConfigured})
    bwPoolInfo.EntityData.Leafs.Append("bandwidth-configuration-model", types.YLeaf{"BandwidthConfigurationModel", bwPoolInfo.BandwidthConfigurationModel})

    bwPoolInfo.EntityData.YListKeys = []string {}

    return &(bwPoolInfo.EntityData)
}

// Rsvp_PxsbDetails
// Table of detailed PXSB info
type Rsvp_PxsbDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed PXSB info. The type is slice of Rsvp_PxsbDetails_PxsbDetail.
    PxsbDetail []*Rsvp_PxsbDetails_PxsbDetail
}

func (pxsbDetails *Rsvp_PxsbDetails) GetEntityData() *types.CommonEntityData {
    pxsbDetails.EntityData.YFilter = pxsbDetails.YFilter
    pxsbDetails.EntityData.YangName = "pxsb-details"
    pxsbDetails.EntityData.BundleName = "cisco_ios_xr"
    pxsbDetails.EntityData.ParentYangName = "rsvp"
    pxsbDetails.EntityData.SegmentPath = "pxsb-details"
    pxsbDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + pxsbDetails.EntityData.SegmentPath
    pxsbDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pxsbDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pxsbDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pxsbDetails.EntityData.Children = types.NewOrderedMap()
    pxsbDetails.EntityData.Children.Append("pxsb-detail", types.YChild{"PxsbDetail", nil})
    for i := range pxsbDetails.PxsbDetail {
        types.SetYListKey(pxsbDetails.PxsbDetail[i], i)
        pxsbDetails.EntityData.Children.Append(types.GetSegmentPath(pxsbDetails.PxsbDetail[i]), types.YChild{"PxsbDetail", pxsbDetails.PxsbDetail[i]})
    }
    pxsbDetails.EntityData.Leafs = types.NewOrderedMap()

    pxsbDetails.EntityData.YListKeys = []string {}

    return &(pxsbDetails.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail
// Detailed PXSB info
type Rsvp_PxsbDetails_PxsbDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Dynamic State Handle. The type is interface{} with range: 0..4294967295.
    DynamicState interface{}

    // RSVP Session Information.
    Session Rsvp_PxsbDetails_PxsbDetail_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_PxsbDetails_PxsbDetail_S2lSubLsp

    // RSVP Template.
    Template Rsvp_PxsbDetails_PxsbDetail_Template

    // RSVP Traffic Spec Info.
    TrafficSpec Rsvp_PxsbDetails_PxsbDetail_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec

    // Path Hop Info.
    Hop Rsvp_PxsbDetails_PxsbDetail_Hop

    // RSVP Header.
    RsvpHeader Rsvp_PxsbDetails_PxsbDetail_RsvpHeader
}

func (pxsbDetail *Rsvp_PxsbDetails_PxsbDetail) GetEntityData() *types.CommonEntityData {
    pxsbDetail.EntityData.YFilter = pxsbDetail.YFilter
    pxsbDetail.EntityData.YangName = "pxsb-detail"
    pxsbDetail.EntityData.BundleName = "cisco_ios_xr"
    pxsbDetail.EntityData.ParentYangName = "pxsb-details"
    pxsbDetail.EntityData.SegmentPath = "pxsb-detail" + types.AddNoKeyToken(pxsbDetail)
    pxsbDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/" + pxsbDetail.EntityData.SegmentPath
    pxsbDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pxsbDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pxsbDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pxsbDetail.EntityData.Children = types.NewOrderedMap()
    pxsbDetail.EntityData.Children.Append("session", types.YChild{"Session", &pxsbDetail.Session})
    pxsbDetail.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &pxsbDetail.S2lSubLsp})
    pxsbDetail.EntityData.Children.Append("template", types.YChild{"Template", &pxsbDetail.Template})
    pxsbDetail.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &pxsbDetail.TrafficSpec})
    pxsbDetail.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &pxsbDetail.GenericTrafficSpec})
    pxsbDetail.EntityData.Children.Append("hop", types.YChild{"Hop", &pxsbDetail.Hop})
    pxsbDetail.EntityData.Children.Append("rsvp-header", types.YChild{"RsvpHeader", &pxsbDetail.RsvpHeader})
    pxsbDetail.EntityData.Leafs = types.NewOrderedMap()
    pxsbDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", pxsbDetail.DestinationAddress})
    pxsbDetail.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", pxsbDetail.DestinationPort})
    pxsbDetail.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", pxsbDetail.Protocol})
    pxsbDetail.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", pxsbDetail.ExtendedTunnelId})
    pxsbDetail.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", pxsbDetail.SessionType})
    pxsbDetail.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", pxsbDetail.P2mpId})
    pxsbDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", pxsbDetail.SourceAddress})
    pxsbDetail.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", pxsbDetail.SourcePort})
    pxsbDetail.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", pxsbDetail.SubGroupOrigin})
    pxsbDetail.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", pxsbDetail.SubGroupId})
    pxsbDetail.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", pxsbDetail.VrfName})
    pxsbDetail.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", pxsbDetail.InputInterface})
    pxsbDetail.EntityData.Leafs.Append("dynamic-state", types.YLeaf{"DynamicState", pxsbDetail.DynamicState})

    pxsbDetail.EntityData.YListKeys = []string {}

    return &(pxsbDetail.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Session
// RSVP Session Information
type Rsvp_PxsbDetails_PxsbDetail_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession
}

func (session *Rsvp_PxsbDetails_PxsbDetail_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "pxsb-detail"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession
// RSVP Session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_PxsbDetails_PxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_PxsbDetails_PxsbDetail_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_PxsbDetails_PxsbDetail_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "pxsb-detail"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Template
// RSVP Template
type Rsvp_PxsbDetails_PxsbDetail_Template struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter
}

func (template *Rsvp_PxsbDetails_PxsbDetail_Template) GetEntityData() *types.CommonEntityData {
    template.EntityData.YFilter = template.YFilter
    template.EntityData.YangName = "template"
    template.EntityData.BundleName = "cisco_ios_xr"
    template.EntityData.ParentYangName = "pxsb-detail"
    template.EntityData.SegmentPath = "template"
    template.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + template.EntityData.SegmentPath
    template.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    template.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    template.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    template.EntityData.Children = types.NewOrderedMap()
    template.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &template.RsvpFilter})
    template.EntityData.Leafs = types.NewOrderedMap()

    template.EntityData.YListKeys = []string {}

    return &(template.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter
// RSVP Filter
type Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "template"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_PxsbDetails_PxsbDetail_Template_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/template/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_TrafficSpec
// RSVP Traffic Spec Info
type Rsvp_PxsbDetails_PxsbDetail_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_PxsbDetails_PxsbDetail_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "pxsb-detail"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "pxsb-detail"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_PxsbDetails_PxsbDetail_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_Hop
// Path Hop Info
type Rsvp_PxsbDetails_PxsbDetail_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *Rsvp_PxsbDetails_PxsbDetail_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "pxsb-detail"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// Rsvp_PxsbDetails_PxsbDetail_RsvpHeader
// RSVP Header
type Rsvp_PxsbDetails_PxsbDetail_RsvpHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (rsvpHeader *Rsvp_PxsbDetails_PxsbDetail_RsvpHeader) GetEntityData() *types.CommonEntityData {
    rsvpHeader.EntityData.YFilter = rsvpHeader.YFilter
    rsvpHeader.EntityData.YangName = "rsvp-header"
    rsvpHeader.EntityData.BundleName = "cisco_ios_xr"
    rsvpHeader.EntityData.ParentYangName = "pxsb-detail"
    rsvpHeader.EntityData.SegmentPath = "rsvp-header"
    rsvpHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/pxsb-details/pxsb-detail/" + rsvpHeader.EntityData.SegmentPath
    rsvpHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpHeader.EntityData.Children = types.NewOrderedMap()
    rsvpHeader.EntityData.Leafs = types.NewOrderedMap()
    rsvpHeader.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", rsvpHeader.RsvpVersion})
    rsvpHeader.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", rsvpHeader.RsvpHeaderFlags})
    rsvpHeader.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", rsvpHeader.RsvpTtl})
    rsvpHeader.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", rsvpHeader.RsvpMessageType})
    rsvpHeader.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", rsvpHeader.IpTos})
    rsvpHeader.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", rsvpHeader.IpTtl})
    rsvpHeader.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", rsvpHeader.IpSourceAddress})

    rsvpHeader.EntityData.YListKeys = []string {}

    return &(rsvpHeader.EntityData)
}

// Rsvp_RxsbDetails
// Table of detailed RXSB info
type Rsvp_RxsbDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed RXSB info. The type is slice of Rsvp_RxsbDetails_RxsbDetail.
    RxsbDetail []*Rsvp_RxsbDetails_RxsbDetail
}

func (rxsbDetails *Rsvp_RxsbDetails) GetEntityData() *types.CommonEntityData {
    rxsbDetails.EntityData.YFilter = rxsbDetails.YFilter
    rxsbDetails.EntityData.YangName = "rxsb-details"
    rxsbDetails.EntityData.BundleName = "cisco_ios_xr"
    rxsbDetails.EntityData.ParentYangName = "rsvp"
    rxsbDetails.EntityData.SegmentPath = "rxsb-details"
    rxsbDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + rxsbDetails.EntityData.SegmentPath
    rxsbDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxsbDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxsbDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxsbDetails.EntityData.Children = types.NewOrderedMap()
    rxsbDetails.EntityData.Children.Append("rxsb-detail", types.YChild{"RxsbDetail", nil})
    for i := range rxsbDetails.RxsbDetail {
        types.SetYListKey(rxsbDetails.RxsbDetail[i], i)
        rxsbDetails.EntityData.Children.Append(types.GetSegmentPath(rxsbDetails.RxsbDetail[i]), types.YChild{"RxsbDetail", rxsbDetails.RxsbDetail[i]})
    }
    rxsbDetails.EntityData.Leafs = types.NewOrderedMap()

    rxsbDetails.EntityData.YListKeys = []string {}

    return &(rxsbDetails.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail
// Detailed RXSB info
type Rsvp_RxsbDetails_RxsbDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Dynamic State Handle. The type is interface{} with range: 0..4294967295.
    DynamicState interface{}

    // RSVP Session Information.
    Session Rsvp_RxsbDetails_RxsbDetail_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_RxsbDetails_RxsbDetail_S2lSubLsp

    // RSVP Style.
    Style Rsvp_RxsbDetails_RxsbDetail_Style

    // RSVP Filter.
    Filter Rsvp_RxsbDetails_RxsbDetail_Filter

    // Flow Spec Information.
    FlowSpec Rsvp_RxsbDetails_RxsbDetail_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec

    // Path Hop Info.
    Hop Rsvp_RxsbDetails_RxsbDetail_Hop

    // RSVP Header.
    RsvpHeader Rsvp_RxsbDetails_RxsbDetail_RsvpHeader
}

func (rxsbDetail *Rsvp_RxsbDetails_RxsbDetail) GetEntityData() *types.CommonEntityData {
    rxsbDetail.EntityData.YFilter = rxsbDetail.YFilter
    rxsbDetail.EntityData.YangName = "rxsb-detail"
    rxsbDetail.EntityData.BundleName = "cisco_ios_xr"
    rxsbDetail.EntityData.ParentYangName = "rxsb-details"
    rxsbDetail.EntityData.SegmentPath = "rxsb-detail" + types.AddNoKeyToken(rxsbDetail)
    rxsbDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/" + rxsbDetail.EntityData.SegmentPath
    rxsbDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rxsbDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rxsbDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rxsbDetail.EntityData.Children = types.NewOrderedMap()
    rxsbDetail.EntityData.Children.Append("session", types.YChild{"Session", &rxsbDetail.Session})
    rxsbDetail.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &rxsbDetail.S2lSubLsp})
    rxsbDetail.EntityData.Children.Append("style", types.YChild{"Style", &rxsbDetail.Style})
    rxsbDetail.EntityData.Children.Append("filter", types.YChild{"Filter", &rxsbDetail.Filter})
    rxsbDetail.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rxsbDetail.FlowSpec})
    rxsbDetail.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rxsbDetail.GenericFlowSpec})
    rxsbDetail.EntityData.Children.Append("hop", types.YChild{"Hop", &rxsbDetail.Hop})
    rxsbDetail.EntityData.Children.Append("rsvp-header", types.YChild{"RsvpHeader", &rxsbDetail.RsvpHeader})
    rxsbDetail.EntityData.Leafs = types.NewOrderedMap()
    rxsbDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rxsbDetail.DestinationAddress})
    rxsbDetail.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", rxsbDetail.DestinationPort})
    rxsbDetail.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rxsbDetail.Protocol})
    rxsbDetail.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rxsbDetail.ExtendedTunnelId})
    rxsbDetail.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rxsbDetail.SessionType})
    rxsbDetail.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rxsbDetail.P2mpId})
    rxsbDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rxsbDetail.SourceAddress})
    rxsbDetail.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", rxsbDetail.SourcePort})
    rxsbDetail.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", rxsbDetail.SubGroupOrigin})
    rxsbDetail.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rxsbDetail.SubGroupId})
    rxsbDetail.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rxsbDetail.VrfName})
    rxsbDetail.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", rxsbDetail.InputInterface})
    rxsbDetail.EntityData.Leafs.Append("dynamic-state", types.YLeaf{"DynamicState", rxsbDetail.DynamicState})

    rxsbDetail.EntityData.YListKeys = []string {}

    return &(rxsbDetail.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Session
// RSVP Session Information
type Rsvp_RxsbDetails_RxsbDetail_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession
}

func (session *Rsvp_RxsbDetails_RxsbDetail_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "rxsb-detail"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession
// RSVP Session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_RxsbDetails_RxsbDetail_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RxsbDetails_RxsbDetail_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_RxsbDetails_RxsbDetail_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "rxsb-detail"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Style
// RSVP Style
type Rsvp_RxsbDetails_RxsbDetail_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RxsbDetails_RxsbDetail_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "rxsb-detail"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Filter
// RSVP Filter
type Rsvp_RxsbDetails_RxsbDetail_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter
}

func (filter *Rsvp_RxsbDetails_RxsbDetail_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "rxsb-detail"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_RxsbDetails_RxsbDetail_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_FlowSpec
// Flow Spec Information
type Rsvp_RxsbDetails_RxsbDetail_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RxsbDetails_RxsbDetail_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rxsb-detail"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rxsb-detail"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *Rsvp_RxsbDetails_RxsbDetail_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_Hop
// Path Hop Info
type Rsvp_RxsbDetails_RxsbDetail_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *Rsvp_RxsbDetails_RxsbDetail_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "rxsb-detail"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// Rsvp_RxsbDetails_RxsbDetail_RsvpHeader
// RSVP Header
type Rsvp_RxsbDetails_RxsbDetail_RsvpHeader struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (rsvpHeader *Rsvp_RxsbDetails_RxsbDetail_RsvpHeader) GetEntityData() *types.CommonEntityData {
    rsvpHeader.EntityData.YFilter = rsvpHeader.YFilter
    rsvpHeader.EntityData.YangName = "rsvp-header"
    rsvpHeader.EntityData.BundleName = "cisco_ios_xr"
    rsvpHeader.EntityData.ParentYangName = "rxsb-detail"
    rsvpHeader.EntityData.SegmentPath = "rsvp-header"
    rsvpHeader.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rxsb-details/rxsb-detail/" + rsvpHeader.EntityData.SegmentPath
    rsvpHeader.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpHeader.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpHeader.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpHeader.EntityData.Children = types.NewOrderedMap()
    rsvpHeader.EntityData.Leafs = types.NewOrderedMap()
    rsvpHeader.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", rsvpHeader.RsvpVersion})
    rsvpHeader.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", rsvpHeader.RsvpHeaderFlags})
    rsvpHeader.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", rsvpHeader.RsvpTtl})
    rsvpHeader.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", rsvpHeader.RsvpMessageType})
    rsvpHeader.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", rsvpHeader.IpTos})
    rsvpHeader.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", rsvpHeader.IpTtl})
    rsvpHeader.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", rsvpHeader.IpSourceAddress})

    rsvpHeader.EntityData.YListKeys = []string {}

    return &(rsvpHeader.EntityData)
}

// Rsvp_InterfaceNeighborBriefs
// Table of brief info about I/F neighbors
type Rsvp_InterfaceNeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single interface neighbor. The type is slice of
    // Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief.
    InterfaceNeighborBrief []*Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief
}

func (interfaceNeighborBriefs *Rsvp_InterfaceNeighborBriefs) GetEntityData() *types.CommonEntityData {
    interfaceNeighborBriefs.EntityData.YFilter = interfaceNeighborBriefs.YFilter
    interfaceNeighborBriefs.EntityData.YangName = "interface-neighbor-briefs"
    interfaceNeighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborBriefs.EntityData.ParentYangName = "rsvp"
    interfaceNeighborBriefs.EntityData.SegmentPath = "interface-neighbor-briefs"
    interfaceNeighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + interfaceNeighborBriefs.EntityData.SegmentPath
    interfaceNeighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborBriefs.EntityData.Children.Append("interface-neighbor-brief", types.YChild{"InterfaceNeighborBrief", nil})
    for i := range interfaceNeighborBriefs.InterfaceNeighborBrief {
        interfaceNeighborBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborBriefs.InterfaceNeighborBrief[i]), types.YChild{"InterfaceNeighborBrief", interfaceNeighborBriefs.InterfaceNeighborBrief[i]})
    }
    interfaceNeighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceNeighborBriefs.EntityData.YListKeys = []string {}

    return &(interfaceNeighborBriefs.EntityData)
}

// Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief
// Brief info for a single interface neighbor
type Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Compact list of I/F Neighbors. The type is slice of
    // Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact.
    InterfaceNeighborListCompact []*Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
}

func (interfaceNeighborBrief *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief) GetEntityData() *types.CommonEntityData {
    interfaceNeighborBrief.EntityData.YFilter = interfaceNeighborBrief.YFilter
    interfaceNeighborBrief.EntityData.YangName = "interface-neighbor-brief"
    interfaceNeighborBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborBrief.EntityData.ParentYangName = "interface-neighbor-briefs"
    interfaceNeighborBrief.EntityData.SegmentPath = "interface-neighbor-brief" + types.AddKeyToken(interfaceNeighborBrief.NeighborAddress, "neighbor-address")
    interfaceNeighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-briefs/" + interfaceNeighborBrief.EntityData.SegmentPath
    interfaceNeighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborBrief.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborBrief.EntityData.Children.Append("interface-neighbor-list-compact", types.YChild{"InterfaceNeighborListCompact", nil})
    for i := range interfaceNeighborBrief.InterfaceNeighborListCompact {
        types.SetYListKey(interfaceNeighborBrief.InterfaceNeighborListCompact[i], i)
        interfaceNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborBrief.InterfaceNeighborListCompact[i]), types.YChild{"InterfaceNeighborListCompact", interfaceNeighborBrief.InterfaceNeighborListCompact[i]})
    }
    interfaceNeighborBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborBrief.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", interfaceNeighborBrief.NeighborAddress})
    interfaceNeighborBrief.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", interfaceNeighborBrief.NodeAddress})

    interfaceNeighborBrief.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(interfaceNeighborBrief.EntityData)
}

// Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact
// Compact list of I/F Neighbors
type Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    NeighborInterfaceName interface{}
}

func (interfaceNeighborListCompact *Rsvp_InterfaceNeighborBriefs_InterfaceNeighborBrief_InterfaceNeighborListCompact) GetEntityData() *types.CommonEntityData {
    interfaceNeighborListCompact.EntityData.YFilter = interfaceNeighborListCompact.YFilter
    interfaceNeighborListCompact.EntityData.YangName = "interface-neighbor-list-compact"
    interfaceNeighborListCompact.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborListCompact.EntityData.ParentYangName = "interface-neighbor-brief"
    interfaceNeighborListCompact.EntityData.SegmentPath = "interface-neighbor-list-compact" + types.AddNoKeyToken(interfaceNeighborListCompact)
    interfaceNeighborListCompact.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-briefs/interface-neighbor-brief/" + interfaceNeighborListCompact.EntityData.SegmentPath
    interfaceNeighborListCompact.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborListCompact.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborListCompact.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborListCompact.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborListCompact.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborListCompact.EntityData.Leafs.Append("interface-neighbor-address", types.YLeaf{"InterfaceNeighborAddress", interfaceNeighborListCompact.InterfaceNeighborAddress})
    interfaceNeighborListCompact.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", interfaceNeighborListCompact.NeighborInterfaceName})

    interfaceNeighborListCompact.EntityData.YListKeys = []string {}

    return &(interfaceNeighborListCompact.EntityData)
}

// Rsvp_ControllerSummaries
// Table of summary info about RSVP-enabled
// controllers
type Rsvp_ControllerSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled controller. The type is slice of
    // Rsvp_ControllerSummaries_ControllerSummary.
    ControllerSummary []*Rsvp_ControllerSummaries_ControllerSummary
}

func (controllerSummaries *Rsvp_ControllerSummaries) GetEntityData() *types.CommonEntityData {
    controllerSummaries.EntityData.YFilter = controllerSummaries.YFilter
    controllerSummaries.EntityData.YangName = "controller-summaries"
    controllerSummaries.EntityData.BundleName = "cisco_ios_xr"
    controllerSummaries.EntityData.ParentYangName = "rsvp"
    controllerSummaries.EntityData.SegmentPath = "controller-summaries"
    controllerSummaries.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + controllerSummaries.EntityData.SegmentPath
    controllerSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerSummaries.EntityData.Children = types.NewOrderedMap()
    controllerSummaries.EntityData.Children.Append("controller-summary", types.YChild{"ControllerSummary", nil})
    for i := range controllerSummaries.ControllerSummary {
        controllerSummaries.EntityData.Children.Append(types.GetSegmentPath(controllerSummaries.ControllerSummary[i]), types.YChild{"ControllerSummary", controllerSummaries.ControllerSummary[i]})
    }
    controllerSummaries.EntityData.Leafs = types.NewOrderedMap()

    controllerSummaries.EntityData.YListKeys = []string {}

    return &(controllerSummaries.EntityData)
}

// Rsvp_ControllerSummaries_ControllerSummary
// Summary info about an RSVP-enabled controller
type Rsvp_ControllerSummaries_ControllerSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Controller Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation
}

func (controllerSummary *Rsvp_ControllerSummaries_ControllerSummary) GetEntityData() *types.CommonEntityData {
    controllerSummary.EntityData.YFilter = controllerSummary.YFilter
    controllerSummary.EntityData.YangName = "controller-summary"
    controllerSummary.EntityData.BundleName = "cisco_ios_xr"
    controllerSummary.EntityData.ParentYangName = "controller-summaries"
    controllerSummary.EntityData.SegmentPath = "controller-summary" + types.AddKeyToken(controllerSummary.ControllerName, "controller-name")
    controllerSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-summaries/" + controllerSummary.EntityData.SegmentPath
    controllerSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerSummary.EntityData.Children = types.NewOrderedMap()
    controllerSummary.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &controllerSummary.BandwidthInformation})
    controllerSummary.EntityData.Leafs = types.NewOrderedMap()
    controllerSummary.EntityData.Leafs.Append("controller-name", types.YLeaf{"ControllerName", controllerSummary.ControllerName})
    controllerSummary.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", controllerSummary.InterfaceNameXr})
    controllerSummary.EntityData.Leafs.Append("paths-in", types.YLeaf{"PathsIn", controllerSummary.PathsIn})
    controllerSummary.EntityData.Leafs.Append("paths-out", types.YLeaf{"PathsOut", controllerSummary.PathsOut})
    controllerSummary.EntityData.Leafs.Append("reservations-in", types.YLeaf{"ReservationsIn", controllerSummary.ReservationsIn})
    controllerSummary.EntityData.Leafs.Append("reservations-out", types.YLeaf{"ReservationsOut", controllerSummary.ReservationsOut})

    controllerSummary.EntityData.YListKeys = []string {"ControllerName"}

    return &(controllerSummary.EntityData)
}

// Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation
// Interface bandwidth information
type Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "controller-summary"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-summaries/controller-summary/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-summaries/controller-summary/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_ControllerSummaries_ControllerSummary_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-summaries/controller-summary/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// Rsvp_AuthenticationBriefs
// Table for Authentication related information
type Rsvp_AuthenticationBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // Rsvp_AuthenticationBriefs_AuthenticationBrief.
    AuthenticationBrief []*Rsvp_AuthenticationBriefs_AuthenticationBrief
}

func (authenticationBriefs *Rsvp_AuthenticationBriefs) GetEntityData() *types.CommonEntityData {
    authenticationBriefs.EntityData.YFilter = authenticationBriefs.YFilter
    authenticationBriefs.EntityData.YangName = "authentication-briefs"
    authenticationBriefs.EntityData.BundleName = "cisco_ios_xr"
    authenticationBriefs.EntityData.ParentYangName = "rsvp"
    authenticationBriefs.EntityData.SegmentPath = "authentication-briefs"
    authenticationBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + authenticationBriefs.EntityData.SegmentPath
    authenticationBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationBriefs.EntityData.Children = types.NewOrderedMap()
    authenticationBriefs.EntityData.Children.Append("authentication-brief", types.YChild{"AuthenticationBrief", nil})
    for i := range authenticationBriefs.AuthenticationBrief {
        authenticationBriefs.EntityData.Children.Append(types.GetSegmentPath(authenticationBriefs.AuthenticationBrief[i]), types.YChild{"AuthenticationBrief", authenticationBriefs.AuthenticationBrief[i]})
    }
    authenticationBriefs.EntityData.Leafs = types.NewOrderedMap()

    authenticationBriefs.EntityData.YListKeys = []string {}

    return &(authenticationBriefs.EntityData)
}

// Rsvp_AuthenticationBriefs_AuthenticationBrief
// Brief Authentication information
type Rsvp_AuthenticationBriefs_AuthenticationBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authenticationBrief *Rsvp_AuthenticationBriefs_AuthenticationBrief) GetEntityData() *types.CommonEntityData {
    authenticationBrief.EntityData.YFilter = authenticationBrief.YFilter
    authenticationBrief.EntityData.YangName = "authentication-brief"
    authenticationBrief.EntityData.BundleName = "cisco_ios_xr"
    authenticationBrief.EntityData.ParentYangName = "authentication-briefs"
    authenticationBrief.EntityData.SegmentPath = "authentication-brief" + types.AddKeyToken(authenticationBrief.SourceAddress, "source-address") + types.AddKeyToken(authenticationBrief.DestinationAddress, "destination-address") + types.AddKeyToken(authenticationBrief.ModeId, "mode-id") + types.AddKeyToken(authenticationBrief.InterfaceName, "interface-name")
    authenticationBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-briefs/" + authenticationBrief.EntityData.SegmentPath
    authenticationBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationBrief.EntityData.Children = types.NewOrderedMap()
    authenticationBrief.EntityData.Leafs = types.NewOrderedMap()
    authenticationBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", authenticationBrief.SourceAddress})
    authenticationBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", authenticationBrief.DestinationAddress})
    authenticationBrief.EntityData.Leafs.Append("mode-id", types.YLeaf{"ModeId", authenticationBrief.ModeId})
    authenticationBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", authenticationBrief.InterfaceName})
    authenticationBrief.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", authenticationBrief.SourceAddressXr})
    authenticationBrief.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", authenticationBrief.DestinationAddressXr})
    authenticationBrief.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", authenticationBrief.NeighborAddress})
    authenticationBrief.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", authenticationBrief.Direction})
    authenticationBrief.EntityData.Leafs.Append("key-type", types.YLeaf{"KeyType", authenticationBrief.KeyType})
    authenticationBrief.EntityData.Leafs.Append("key-source", types.YLeaf{"KeySource", authenticationBrief.KeySource})
    authenticationBrief.EntityData.Leafs.Append("key-id", types.YLeaf{"KeyId", authenticationBrief.KeyId})
    authenticationBrief.EntityData.Leafs.Append("key-id-valid", types.YLeaf{"KeyIdValid", authenticationBrief.KeyIdValid})

    authenticationBrief.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress", "ModeId", "InterfaceName"}

    return &(authenticationBrief.EntityData)
}

// Rsvp_SessionBriefs
// Table of brief info about sessions
type Rsvp_SessionBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info about session. The type is slice of
    // Rsvp_SessionBriefs_SessionBrief.
    SessionBrief []*Rsvp_SessionBriefs_SessionBrief
}

func (sessionBriefs *Rsvp_SessionBriefs) GetEntityData() *types.CommonEntityData {
    sessionBriefs.EntityData.YFilter = sessionBriefs.YFilter
    sessionBriefs.EntityData.YangName = "session-briefs"
    sessionBriefs.EntityData.BundleName = "cisco_ios_xr"
    sessionBriefs.EntityData.ParentYangName = "rsvp"
    sessionBriefs.EntityData.SegmentPath = "session-briefs"
    sessionBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + sessionBriefs.EntityData.SegmentPath
    sessionBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionBriefs.EntityData.Children = types.NewOrderedMap()
    sessionBriefs.EntityData.Children.Append("session-brief", types.YChild{"SessionBrief", nil})
    for i := range sessionBriefs.SessionBrief {
        types.SetYListKey(sessionBriefs.SessionBrief[i], i)
        sessionBriefs.EntityData.Children.Append(types.GetSegmentPath(sessionBriefs.SessionBrief[i]), types.YChild{"SessionBrief", sessionBriefs.SessionBrief[i]})
    }
    sessionBriefs.EntityData.Leafs = types.NewOrderedMap()

    sessionBriefs.EntityData.YListKeys = []string {}

    return &(sessionBriefs.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief
// Brief info about session
type Rsvp_SessionBriefs_SessionBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session Rsvp_SessionBriefs_SessionBrief_Session
}

func (sessionBrief *Rsvp_SessionBriefs_SessionBrief) GetEntityData() *types.CommonEntityData {
    sessionBrief.EntityData.YFilter = sessionBrief.YFilter
    sessionBrief.EntityData.YangName = "session-brief"
    sessionBrief.EntityData.BundleName = "cisco_ios_xr"
    sessionBrief.EntityData.ParentYangName = "session-briefs"
    sessionBrief.EntityData.SegmentPath = "session-brief" + types.AddNoKeyToken(sessionBrief)
    sessionBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/" + sessionBrief.EntityData.SegmentPath
    sessionBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionBrief.EntityData.Children = types.NewOrderedMap()
    sessionBrief.EntityData.Children.Append("session", types.YChild{"Session", &sessionBrief.Session})
    sessionBrief.EntityData.Leafs = types.NewOrderedMap()
    sessionBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", sessionBrief.DestinationAddress})
    sessionBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", sessionBrief.DestinationPort})
    sessionBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", sessionBrief.Protocol})
    sessionBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", sessionBrief.ExtendedTunnelId})
    sessionBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", sessionBrief.SessionType})
    sessionBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", sessionBrief.P2mpId})
    sessionBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", sessionBrief.VrfName})
    sessionBrief.EntityData.Leafs.Append("ps-bs", types.YLeaf{"PsBs", sessionBrief.PsBs})
    sessionBrief.EntityData.Leafs.Append("rs-bs", types.YLeaf{"RsBs", sessionBrief.RsBs})
    sessionBrief.EntityData.Leafs.Append("requests", types.YLeaf{"Requests", sessionBrief.Requests})
    sessionBrief.EntityData.Leafs.Append("detail-list-size", types.YLeaf{"DetailListSize", sessionBrief.DetailListSize})

    sessionBrief.EntityData.YListKeys = []string {}

    return &(sessionBrief.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief_Session
// RSVP Session Information
type Rsvp_SessionBriefs_SessionBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession
}

func (session *Rsvp_SessionBriefs_SessionBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "session-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession
// RSVP Session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_SessionBriefs_SessionBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-briefs/session-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_PsbDetaileds
// Table of detailed info about path state blocks
type Rsvp_PsbDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single path state block. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed.
    PsbDetailed []*Rsvp_PsbDetaileds_PsbDetailed
}

func (psbDetaileds *Rsvp_PsbDetaileds) GetEntityData() *types.CommonEntityData {
    psbDetaileds.EntityData.YFilter = psbDetaileds.YFilter
    psbDetaileds.EntityData.YangName = "psb-detaileds"
    psbDetaileds.EntityData.BundleName = "cisco_ios_xr"
    psbDetaileds.EntityData.ParentYangName = "rsvp"
    psbDetaileds.EntityData.SegmentPath = "psb-detaileds"
    psbDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + psbDetaileds.EntityData.SegmentPath
    psbDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbDetaileds.EntityData.Children = types.NewOrderedMap()
    psbDetaileds.EntityData.Children.Append("psb-detailed", types.YChild{"PsbDetailed", nil})
    for i := range psbDetaileds.PsbDetailed {
        types.SetYListKey(psbDetaileds.PsbDetailed[i], i)
        psbDetaileds.EntityData.Children.Append(types.GetSegmentPath(psbDetaileds.PsbDetailed[i]), types.YChild{"PsbDetailed", psbDetaileds.PsbDetailed[i]})
    }
    psbDetaileds.EntityData.Leafs = types.NewOrderedMap()

    psbDetaileds.EntityData.YListKeys = []string {}

    return &(psbDetaileds.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed
// Detailed info for a single path state block
type Rsvp_PsbDetaileds_PsbDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // Path Backup Tunnel. The type is string.
    BackupTunnelName interface{}

    // Incoming ERO validity. The type is bool.
    IsInEroValid interface{}

    // Outgoing ERO validity. The type is bool.
    IsOutEroValid interface{}

    // RSVP Session Information.
    Session Rsvp_PsbDetaileds_PsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_PsbDetaileds_PsbDetailed_S2lSubLsp

    // RSVP Template.
    Template Rsvp_PsbDetaileds_PsbDetailed_Template

    // RSVP Session Attribute.
    SessionAttribute Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec

    // Path Flags.
    PathFlags Rsvp_PsbDetaileds_PsbDetailed_PathFlags

    // Path Hop Info.
    Hop Rsvp_PsbDetaileds_PsbDetailed_Hop

    // Policy Sources Info.
    PolicySourceInfo Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo

    // RSVP Header Info.
    Header Rsvp_PsbDetaileds_PsbDetailed_Header

    // Expiry Time.
    ExpiryTime Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime

    // Policy Flags.
    PolicyFlags Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo Rsvp_PsbDetaileds_PsbDetailed_LabelInfo

    // DS-TE Class-Type.
    ClassType Rsvp_PsbDetaileds_PsbDetailed_ClassType

    // Path Forwarding Contexts. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_Pfc.
    Pfc []*Rsvp_PsbDetaileds_PsbDetailed_Pfc

    // Incoming Explicit Route Sub Objects. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_InEro.
    InEro []*Rsvp_PsbDetaileds_PsbDetailed_InEro

    // Outgoing Explicit Route Sub Objects. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_OutEro.
    OutEro []*Rsvp_PsbDetaileds_PsbDetailed_OutEro
}

func (psbDetailed *Rsvp_PsbDetaileds_PsbDetailed) GetEntityData() *types.CommonEntityData {
    psbDetailed.EntityData.YFilter = psbDetailed.YFilter
    psbDetailed.EntityData.YangName = "psb-detailed"
    psbDetailed.EntityData.BundleName = "cisco_ios_xr"
    psbDetailed.EntityData.ParentYangName = "psb-detaileds"
    psbDetailed.EntityData.SegmentPath = "psb-detailed" + types.AddNoKeyToken(psbDetailed)
    psbDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/" + psbDetailed.EntityData.SegmentPath
    psbDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbDetailed.EntityData.Children = types.NewOrderedMap()
    psbDetailed.EntityData.Children.Append("session", types.YChild{"Session", &psbDetailed.Session})
    psbDetailed.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &psbDetailed.S2lSubLsp})
    psbDetailed.EntityData.Children.Append("template", types.YChild{"Template", &psbDetailed.Template})
    psbDetailed.EntityData.Children.Append("session-attribute", types.YChild{"SessionAttribute", &psbDetailed.SessionAttribute})
    psbDetailed.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &psbDetailed.TrafficSpec})
    psbDetailed.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &psbDetailed.GenericTrafficSpec})
    psbDetailed.EntityData.Children.Append("path-flags", types.YChild{"PathFlags", &psbDetailed.PathFlags})
    psbDetailed.EntityData.Children.Append("hop", types.YChild{"Hop", &psbDetailed.Hop})
    psbDetailed.EntityData.Children.Append("policy-source-info", types.YChild{"PolicySourceInfo", &psbDetailed.PolicySourceInfo})
    psbDetailed.EntityData.Children.Append("header", types.YChild{"Header", &psbDetailed.Header})
    psbDetailed.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &psbDetailed.ExpiryTime})
    psbDetailed.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &psbDetailed.PolicyFlags})
    psbDetailed.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &psbDetailed.PolicyQueryFlags})
    psbDetailed.EntityData.Children.Append("label-info", types.YChild{"LabelInfo", &psbDetailed.LabelInfo})
    psbDetailed.EntityData.Children.Append("class-type", types.YChild{"ClassType", &psbDetailed.ClassType})
    psbDetailed.EntityData.Children.Append("pfc", types.YChild{"Pfc", nil})
    for i := range psbDetailed.Pfc {
        types.SetYListKey(psbDetailed.Pfc[i], i)
        psbDetailed.EntityData.Children.Append(types.GetSegmentPath(psbDetailed.Pfc[i]), types.YChild{"Pfc", psbDetailed.Pfc[i]})
    }
    psbDetailed.EntityData.Children.Append("in-ero", types.YChild{"InEro", nil})
    for i := range psbDetailed.InEro {
        types.SetYListKey(psbDetailed.InEro[i], i)
        psbDetailed.EntityData.Children.Append(types.GetSegmentPath(psbDetailed.InEro[i]), types.YChild{"InEro", psbDetailed.InEro[i]})
    }
    psbDetailed.EntityData.Children.Append("out-ero", types.YChild{"OutEro", nil})
    for i := range psbDetailed.OutEro {
        types.SetYListKey(psbDetailed.OutEro[i], i)
        psbDetailed.EntityData.Children.Append(types.GetSegmentPath(psbDetailed.OutEro[i]), types.YChild{"OutEro", psbDetailed.OutEro[i]})
    }
    psbDetailed.EntityData.Leafs = types.NewOrderedMap()
    psbDetailed.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbDetailed.DestinationAddress})
    psbDetailed.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", psbDetailed.DestinationPort})
    psbDetailed.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", psbDetailed.Protocol})
    psbDetailed.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", psbDetailed.ExtendedTunnelId})
    psbDetailed.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", psbDetailed.SessionType})
    psbDetailed.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", psbDetailed.P2mpId})
    psbDetailed.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", psbDetailed.SourceAddress})
    psbDetailed.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", psbDetailed.SourcePort})
    psbDetailed.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", psbDetailed.SubGroupOrigin})
    psbDetailed.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbDetailed.SubGroupId})
    psbDetailed.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", psbDetailed.VrfName})
    psbDetailed.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", psbDetailed.InputInterface})
    psbDetailed.EntityData.Leafs.Append("backup-tunnel-name", types.YLeaf{"BackupTunnelName", psbDetailed.BackupTunnelName})
    psbDetailed.EntityData.Leafs.Append("is-in-ero-valid", types.YLeaf{"IsInEroValid", psbDetailed.IsInEroValid})
    psbDetailed.EntityData.Leafs.Append("is-out-ero-valid", types.YLeaf{"IsOutEroValid", psbDetailed.IsOutEroValid})

    psbDetailed.EntityData.YListKeys = []string {}

    return &(psbDetailed.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Session
// RSVP Session Information
type Rsvp_PsbDetaileds_PsbDetailed_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession
}

func (session *Rsvp_PsbDetaileds_PsbDetailed_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "psb-detailed"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession
// RSVP Session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_PsbDetaileds_PsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_PsbDetaileds_PsbDetailed_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_PsbDetaileds_PsbDetailed_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "psb-detailed"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Template
// RSVP Template
type Rsvp_PsbDetaileds_PsbDetailed_Template struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter
}

func (template *Rsvp_PsbDetaileds_PsbDetailed_Template) GetEntityData() *types.CommonEntityData {
    template.EntityData.YFilter = template.YFilter
    template.EntityData.YangName = "template"
    template.EntityData.BundleName = "cisco_ios_xr"
    template.EntityData.ParentYangName = "psb-detailed"
    template.EntityData.SegmentPath = "template"
    template.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + template.EntityData.SegmentPath
    template.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    template.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    template.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    template.EntityData.Children = types.NewOrderedMap()
    template.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &template.RsvpFilter})
    template.EntityData.Leafs = types.NewOrderedMap()

    template.EntityData.YListKeys = []string {}

    return &(template.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter
// RSVP Filter
type Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "template"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_PsbDetaileds_PsbDetailed_Template_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/template/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute
// RSVP Session Attribute
type Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute) GetEntityData() *types.CommonEntityData {
    sessionAttribute.EntityData.YFilter = sessionAttribute.YFilter
    sessionAttribute.EntityData.YangName = "session-attribute"
    sessionAttribute.EntityData.BundleName = "cisco_ios_xr"
    sessionAttribute.EntityData.ParentYangName = "psb-detailed"
    sessionAttribute.EntityData.SegmentPath = "session-attribute"
    sessionAttribute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + sessionAttribute.EntityData.SegmentPath
    sessionAttribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionAttribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionAttribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionAttribute.EntityData.Children = types.NewOrderedMap()
    sessionAttribute.EntityData.Children.Append("sess-attribute-flags", types.YChild{"SessAttributeFlags", &sessionAttribute.SessAttributeFlags})
    sessionAttribute.EntityData.Leafs = types.NewOrderedMap()
    sessionAttribute.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", sessionAttribute.SetupPriority})
    sessionAttribute.EntityData.Leafs.Append("reservation-priority", types.YLeaf{"ReservationPriority", sessionAttribute.ReservationPriority})

    sessionAttribute.EntityData.YListKeys = []string {}

    return &(sessionAttribute.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags
// Session Attributes
type Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *Rsvp_PsbDetaileds_PsbDetailed_SessionAttribute_SessAttributeFlags) GetEntityData() *types.CommonEntityData {
    sessAttributeFlags.EntityData.YFilter = sessAttributeFlags.YFilter
    sessAttributeFlags.EntityData.YangName = "sess-attribute-flags"
    sessAttributeFlags.EntityData.BundleName = "cisco_ios_xr"
    sessAttributeFlags.EntityData.ParentYangName = "session-attribute"
    sessAttributeFlags.EntityData.SegmentPath = "sess-attribute-flags"
    sessAttributeFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/session-attribute/" + sessAttributeFlags.EntityData.SegmentPath
    sessAttributeFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessAttributeFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessAttributeFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessAttributeFlags.EntityData.Children = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs.Append("is-local-protect", types.YLeaf{"IsLocalProtect", sessAttributeFlags.IsLocalProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-node-protect", types.YLeaf{"IsNodeProtect", sessAttributeFlags.IsNodeProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-bandwidth-protect", types.YLeaf{"IsBandwidthProtect", sessAttributeFlags.IsBandwidthProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-record-labels", types.YLeaf{"IsRecordLabels", sessAttributeFlags.IsRecordLabels})
    sessAttributeFlags.EntityData.Leafs.Append("is-shared-explicit-requested", types.YLeaf{"IsSharedExplicitRequested", sessAttributeFlags.IsSharedExplicitRequested})

    sessAttributeFlags.EntityData.YListKeys = []string {}

    return &(sessAttributeFlags.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec
// RSVP Traffic Spec Info
type Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_PsbDetaileds_PsbDetailed_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "psb-detailed"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "psb-detailed"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_PsbDetaileds_PsbDetailed_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_PathFlags
// Path Flags
type Rsvp_PsbDetaileds_PsbDetailed_PathFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Non-RSVP Hop Upstream. The type is bool.
    IsNonRsvpHopUpstream interface{}

    // Local Sender. The type is bool.
    IsLocalSender interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Bidirectional. The type is bool.
    IsBidirectional interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (pathFlags *Rsvp_PsbDetaileds_PsbDetailed_PathFlags) GetEntityData() *types.CommonEntityData {
    pathFlags.EntityData.YFilter = pathFlags.YFilter
    pathFlags.EntityData.YangName = "path-flags"
    pathFlags.EntityData.BundleName = "cisco_ios_xr"
    pathFlags.EntityData.ParentYangName = "psb-detailed"
    pathFlags.EntityData.SegmentPath = "path-flags"
    pathFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + pathFlags.EntityData.SegmentPath
    pathFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathFlags.EntityData.Children = types.NewOrderedMap()
    pathFlags.EntityData.Leafs = types.NewOrderedMap()
    pathFlags.EntityData.Leafs.Append("is-non-rsvp-hop-upstream", types.YLeaf{"IsNonRsvpHopUpstream", pathFlags.IsNonRsvpHopUpstream})
    pathFlags.EntityData.Leafs.Append("is-local-sender", types.YLeaf{"IsLocalSender", pathFlags.IsLocalSender})
    pathFlags.EntityData.Leafs.Append("is-message-id-valid", types.YLeaf{"IsMessageIdValid", pathFlags.IsMessageIdValid})
    pathFlags.EntityData.Leafs.Append("is-local-repair", types.YLeaf{"IsLocalRepair", pathFlags.IsLocalRepair})
    pathFlags.EntityData.Leafs.Append("is-bidirectional", types.YLeaf{"IsBidirectional", pathFlags.IsBidirectional})
    pathFlags.EntityData.Leafs.Append("is-lockout", types.YLeaf{"IsLockout", pathFlags.IsLockout})

    pathFlags.EntityData.YListKeys = []string {}

    return &(pathFlags.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Hop
// Path Hop Info
type Rsvp_PsbDetaileds_PsbDetailed_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *Rsvp_PsbDetaileds_PsbDetailed_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "psb-detailed"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo
// Policy Sources Info
type Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySourceInfo *Rsvp_PsbDetaileds_PsbDetailed_PolicySourceInfo) GetEntityData() *types.CommonEntityData {
    policySourceInfo.EntityData.YFilter = policySourceInfo.YFilter
    policySourceInfo.EntityData.YangName = "policy-source-info"
    policySourceInfo.EntityData.BundleName = "cisco_ios_xr"
    policySourceInfo.EntityData.ParentYangName = "psb-detailed"
    policySourceInfo.EntityData.SegmentPath = "policy-source-info"
    policySourceInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + policySourceInfo.EntityData.SegmentPath
    policySourceInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policySourceInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policySourceInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policySourceInfo.EntityData.Children = types.NewOrderedMap()
    policySourceInfo.EntityData.Leafs = types.NewOrderedMap()
    policySourceInfo.EntityData.Leafs.Append("is-te-link", types.YLeaf{"IsTeLink", policySourceInfo.IsTeLink})
    policySourceInfo.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", policySourceInfo.IsLocal})
    policySourceInfo.EntityData.Leafs.Append("is-cops", types.YLeaf{"IsCops", policySourceInfo.IsCops})
    policySourceInfo.EntityData.Leafs.Append("is-default", types.YLeaf{"IsDefault", policySourceInfo.IsDefault})
    policySourceInfo.EntityData.Leafs.Append("is-cable", types.YLeaf{"IsCable", policySourceInfo.IsCable})

    policySourceInfo.EntityData.YListKeys = []string {}

    return &(policySourceInfo.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Header
// RSVP Header Info
type Rsvp_PsbDetaileds_PsbDetailed_Header struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (header *Rsvp_PsbDetaileds_PsbDetailed_Header) GetEntityData() *types.CommonEntityData {
    header.EntityData.YFilter = header.YFilter
    header.EntityData.YangName = "header"
    header.EntityData.BundleName = "cisco_ios_xr"
    header.EntityData.ParentYangName = "psb-detailed"
    header.EntityData.SegmentPath = "header"
    header.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + header.EntityData.SegmentPath
    header.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    header.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    header.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    header.EntityData.Children = types.NewOrderedMap()
    header.EntityData.Leafs = types.NewOrderedMap()
    header.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", header.RsvpVersion})
    header.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", header.RsvpHeaderFlags})
    header.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", header.RsvpTtl})
    header.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", header.RsvpMessageType})
    header.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", header.IpTos})
    header.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", header.IpTtl})
    header.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", header.IpSourceAddress})

    header.EntityData.YListKeys = []string {}

    return &(header.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime
// Expiry Time
type Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_PsbDetaileds_PsbDetailed_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "psb-detailed"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags
// Policy Flags
type Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "psb-detailed"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags
// Policy Query Flags
type Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "psb-detailed"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo
// Label Information
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo) GetEntityData() *types.CommonEntityData {
    labelInfo.EntityData.YFilter = labelInfo.YFilter
    labelInfo.EntityData.YangName = "label-info"
    labelInfo.EntityData.BundleName = "cisco_ios_xr"
    labelInfo.EntityData.ParentYangName = "psb-detailed"
    labelInfo.EntityData.SegmentPath = "label-info"
    labelInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + labelInfo.EntityData.SegmentPath
    labelInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInfo.EntityData.Children = types.NewOrderedMap()
    labelInfo.EntityData.Children.Append("generic-local-downstream-label", types.YChild{"GenericLocalDownstreamLabel", &labelInfo.GenericLocalDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-downstream-label", types.YChild{"GenericOutgoingDownstreamLabel", &labelInfo.GenericOutgoingDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-merge-point-label", types.YChild{"GenericMergePointLabel", &labelInfo.GenericMergePointLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-upstream-label", types.YChild{"GenericOutgoingUpstreamLabel", &labelInfo.GenericOutgoingUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-local-upstream-label", types.YChild{"GenericLocalUpstreamLabel", &labelInfo.GenericLocalUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-recovery-label", types.YChild{"GenericRecoveryLabel", &labelInfo.GenericRecoveryLabel})
    labelInfo.EntityData.Leafs = types.NewOrderedMap()
    labelInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", labelInfo.IsValid})
    labelInfo.EntityData.Leafs.Append("local-downstream-label", types.YLeaf{"LocalDownstreamLabel", labelInfo.LocalDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-downstream-label", types.YLeaf{"OutgoingDownstreamLabel", labelInfo.OutgoingDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", labelInfo.MergePointLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-upstream-label", types.YLeaf{"OutgoingUpstreamLabel", labelInfo.OutgoingUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("local-upstream-label", types.YLeaf{"LocalUpstreamLabel", labelInfo.LocalUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("recovery-label", types.YLeaf{"RecoveryLabel", labelInfo.RecoveryLabel})
    labelInfo.EntityData.Leafs.Append("lsp-wrap-label", types.YLeaf{"LspWrapLabel", labelInfo.LspWrapLabel})

    labelInfo.EntityData.YListKeys = []string {}

    return &(labelInfo.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalDownstreamLabel.EntityData.YFilter = genericLocalDownstreamLabel.YFilter
    genericLocalDownstreamLabel.EntityData.YangName = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalDownstreamLabel.EntityData.SegmentPath = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" + genericLocalDownstreamLabel.EntityData.SegmentPath
    genericLocalDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalDownstreamLabel.GeneralizedLabel})
    genericLocalDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalDownstreamLabel.GenericLabelType})

    genericLocalDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalDownstreamLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingDownstreamLabel.EntityData.YFilter = genericOutgoingDownstreamLabel.YFilter
    genericOutgoingDownstreamLabel.EntityData.YangName = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingDownstreamLabel.EntityData.SegmentPath = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" + genericOutgoingDownstreamLabel.EntityData.SegmentPath
    genericOutgoingDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingDownstreamLabel.GeneralizedLabel})
    genericOutgoingDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingDownstreamLabel.GenericLabelType})

    genericOutgoingDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingDownstreamLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel) GetEntityData() *types.CommonEntityData {
    genericMergePointLabel.EntityData.YFilter = genericMergePointLabel.YFilter
    genericMergePointLabel.EntityData.YangName = "generic-merge-point-label"
    genericMergePointLabel.EntityData.BundleName = "cisco_ios_xr"
    genericMergePointLabel.EntityData.ParentYangName = "label-info"
    genericMergePointLabel.EntityData.SegmentPath = "generic-merge-point-label"
    genericMergePointLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" + genericMergePointLabel.EntityData.SegmentPath
    genericMergePointLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericMergePointLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericMergePointLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericMergePointLabel.EntityData.Children = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericMergePointLabel.GeneralizedLabel})
    genericMergePointLabel.EntityData.Leafs = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericMergePointLabel.GenericLabelType})

    genericMergePointLabel.EntityData.YListKeys = []string {}

    return &(genericMergePointLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value.
    Value []*Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-merge-point-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-merge-point-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingUpstreamLabel.EntityData.YFilter = genericOutgoingUpstreamLabel.YFilter
    genericOutgoingUpstreamLabel.EntityData.YangName = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingUpstreamLabel.EntityData.SegmentPath = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" + genericOutgoingUpstreamLabel.EntityData.SegmentPath
    genericOutgoingUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingUpstreamLabel.GeneralizedLabel})
    genericOutgoingUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingUpstreamLabel.GenericLabelType})

    genericOutgoingUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingUpstreamLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-outgoing-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalUpstreamLabel.EntityData.YFilter = genericLocalUpstreamLabel.YFilter
    genericLocalUpstreamLabel.EntityData.YangName = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalUpstreamLabel.EntityData.SegmentPath = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" + genericLocalUpstreamLabel.EntityData.SegmentPath
    genericLocalUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalUpstreamLabel.GeneralizedLabel})
    genericLocalUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalUpstreamLabel.GenericLabelType})

    genericLocalUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalUpstreamLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-local-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel) GetEntityData() *types.CommonEntityData {
    genericRecoveryLabel.EntityData.YFilter = genericRecoveryLabel.YFilter
    genericRecoveryLabel.EntityData.YangName = "generic-recovery-label"
    genericRecoveryLabel.EntityData.BundleName = "cisco_ios_xr"
    genericRecoveryLabel.EntityData.ParentYangName = "label-info"
    genericRecoveryLabel.EntityData.SegmentPath = "generic-recovery-label"
    genericRecoveryLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/" + genericRecoveryLabel.EntityData.SegmentPath
    genericRecoveryLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRecoveryLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRecoveryLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRecoveryLabel.EntityData.Children = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericRecoveryLabel.GeneralizedLabel})
    genericRecoveryLabel.EntityData.Leafs = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericRecoveryLabel.GenericLabelType})

    genericRecoveryLabel.EntityData.YListKeys = []string {}

    return &(genericRecoveryLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value.
    Value []*Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-recovery-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-recovery-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_PsbDetaileds_PsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/label-info/generic-recovery-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_ClassType
// DS-TE Class-Type
type Rsvp_PsbDetaileds_PsbDetailed_ClassType struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the Class-Type information valid. The type is bool.
    IsClassTypeInfoValid interface{}

    // DS-TE Class-Type. The type is interface{} with range: 0..255.
    ClassType interface{}
}

func (classType *Rsvp_PsbDetaileds_PsbDetailed_ClassType) GetEntityData() *types.CommonEntityData {
    classType.EntityData.YFilter = classType.YFilter
    classType.EntityData.YangName = "class-type"
    classType.EntityData.BundleName = "cisco_ios_xr"
    classType.EntityData.ParentYangName = "psb-detailed"
    classType.EntityData.SegmentPath = "class-type"
    classType.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + classType.EntityData.SegmentPath
    classType.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    classType.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    classType.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    classType.EntityData.Children = types.NewOrderedMap()
    classType.EntityData.Leafs = types.NewOrderedMap()
    classType.EntityData.Leafs.Append("is-class-type-info-valid", types.YLeaf{"IsClassTypeInfoValid", classType.IsClassTypeInfoValid})
    classType.EntityData.Leafs.Append("class-type", types.YLeaf{"ClassType", classType.ClassType})

    classType.EntityData.YListKeys = []string {}

    return &(classType.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Pfc
// Path Forwarding Contexts
type Rsvp_PsbDetaileds_PsbDetailed_Pfc struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Output interface. The type is string.
    OutputInterface interface{}

    // Policy Flags.
    PolicyFlags Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags

    // Policy Query Flags.
    PolicyQueryFlags Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
}

func (pfc *Rsvp_PsbDetaileds_PsbDetailed_Pfc) GetEntityData() *types.CommonEntityData {
    pfc.EntityData.YFilter = pfc.YFilter
    pfc.EntityData.YangName = "pfc"
    pfc.EntityData.BundleName = "cisco_ios_xr"
    pfc.EntityData.ParentYangName = "psb-detailed"
    pfc.EntityData.SegmentPath = "pfc" + types.AddNoKeyToken(pfc)
    pfc.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + pfc.EntityData.SegmentPath
    pfc.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pfc.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pfc.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pfc.EntityData.Children = types.NewOrderedMap()
    pfc.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &pfc.PolicyFlags})
    pfc.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &pfc.PolicyQueryFlags})
    pfc.EntityData.Leafs = types.NewOrderedMap()
    pfc.EntityData.Leafs.Append("output-interface", types.YLeaf{"OutputInterface", pfc.OutputInterface})

    pfc.EntityData.YListKeys = []string {}

    return &(pfc.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags
// Policy Flags
type Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "pfc"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/pfc/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags
// Policy Query Flags
type Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_PsbDetaileds_PsbDetailed_Pfc_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "pfc"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/pfc/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_InEro
// Incoming Explicit Route Sub Objects
type Rsvp_PsbDetaileds_PsbDetailed_InEro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
}

func (inEro *Rsvp_PsbDetaileds_PsbDetailed_InEro) GetEntityData() *types.CommonEntityData {
    inEro.EntityData.YFilter = inEro.YFilter
    inEro.EntityData.YangName = "in-ero"
    inEro.EntityData.BundleName = "cisco_ios_xr"
    inEro.EntityData.ParentYangName = "psb-detailed"
    inEro.EntityData.SegmentPath = "in-ero" + types.AddNoKeyToken(inEro)
    inEro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + inEro.EntityData.SegmentPath
    inEro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    inEro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    inEro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    inEro.EntityData.Children = types.NewOrderedMap()
    inEro.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &inEro.Ipv4eroSubObject})
    inEro.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &inEro.UnnumberedEroSubObject})
    inEro.EntityData.Leafs = types.NewOrderedMap()
    inEro.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", inEro.EroType})

    inEro.EntityData.YListKeys = []string {}

    return &(inEro.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject
// IPV4 ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "in-ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/in-ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_InEro_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "in-ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/in-ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_OutEro
// Outgoing Explicit Route Sub Objects
type Rsvp_PsbDetaileds_PsbDetailed_OutEro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
}

func (outEro *Rsvp_PsbDetaileds_PsbDetailed_OutEro) GetEntityData() *types.CommonEntityData {
    outEro.EntityData.YFilter = outEro.YFilter
    outEro.EntityData.YangName = "out-ero"
    outEro.EntityData.BundleName = "cisco_ios_xr"
    outEro.EntityData.ParentYangName = "psb-detailed"
    outEro.EntityData.SegmentPath = "out-ero" + types.AddNoKeyToken(outEro)
    outEro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/" + outEro.EntityData.SegmentPath
    outEro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outEro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outEro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outEro.EntityData.Children = types.NewOrderedMap()
    outEro.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &outEro.Ipv4eroSubObject})
    outEro.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &outEro.UnnumberedEroSubObject})
    outEro.EntityData.Leafs = types.NewOrderedMap()
    outEro.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", outEro.EroType})

    outEro.EntityData.YListKeys = []string {}

    return &(outEro.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject
// IPV4 ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "out-ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/out-ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_PsbDetaileds_PsbDetailed_OutEro_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "out-ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-detaileds/psb-detailed/out-ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// Rsvp_ControllerDetaileds
// Table of detailed info about RSVP-enabled
// controllers
type Rsvp_ControllerDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled controller. The type is slice of
    // Rsvp_ControllerDetaileds_ControllerDetailed.
    ControllerDetailed []*Rsvp_ControllerDetaileds_ControllerDetailed
}

func (controllerDetaileds *Rsvp_ControllerDetaileds) GetEntityData() *types.CommonEntityData {
    controllerDetaileds.EntityData.YFilter = controllerDetaileds.YFilter
    controllerDetaileds.EntityData.YangName = "controller-detaileds"
    controllerDetaileds.EntityData.BundleName = "cisco_ios_xr"
    controllerDetaileds.EntityData.ParentYangName = "rsvp"
    controllerDetaileds.EntityData.SegmentPath = "controller-detaileds"
    controllerDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + controllerDetaileds.EntityData.SegmentPath
    controllerDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerDetaileds.EntityData.Children = types.NewOrderedMap()
    controllerDetaileds.EntityData.Children.Append("controller-detailed", types.YChild{"ControllerDetailed", nil})
    for i := range controllerDetaileds.ControllerDetailed {
        controllerDetaileds.EntityData.Children.Append(types.GetSegmentPath(controllerDetaileds.ControllerDetailed[i]), types.YChild{"ControllerDetailed", controllerDetaileds.ControllerDetailed[i]})
    }
    controllerDetaileds.EntityData.Leafs = types.NewOrderedMap()

    controllerDetaileds.EntityData.YListKeys = []string {}

    return &(controllerDetaileds.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed
// Detailed info about an RSVP-enabled controller
type Rsvp_ControllerDetaileds_ControllerDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Controller Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation

    // Interface flags.
    Flags Rsvp_ControllerDetaileds_ControllerDetailed_Flags

    // Neighbor array. The type is slice of
    // Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray.
    NeighborArray []*Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray
}

func (controllerDetailed *Rsvp_ControllerDetaileds_ControllerDetailed) GetEntityData() *types.CommonEntityData {
    controllerDetailed.EntityData.YFilter = controllerDetailed.YFilter
    controllerDetailed.EntityData.YangName = "controller-detailed"
    controllerDetailed.EntityData.BundleName = "cisco_ios_xr"
    controllerDetailed.EntityData.ParentYangName = "controller-detaileds"
    controllerDetailed.EntityData.SegmentPath = "controller-detailed" + types.AddKeyToken(controllerDetailed.ControllerName, "controller-name")
    controllerDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/" + controllerDetailed.EntityData.SegmentPath
    controllerDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerDetailed.EntityData.Children = types.NewOrderedMap()
    controllerDetailed.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &controllerDetailed.BandwidthInformation})
    controllerDetailed.EntityData.Children.Append("flags", types.YChild{"Flags", &controllerDetailed.Flags})
    controllerDetailed.EntityData.Children.Append("neighbor-array", types.YChild{"NeighborArray", nil})
    for i := range controllerDetailed.NeighborArray {
        types.SetYListKey(controllerDetailed.NeighborArray[i], i)
        controllerDetailed.EntityData.Children.Append(types.GetSegmentPath(controllerDetailed.NeighborArray[i]), types.YChild{"NeighborArray", controllerDetailed.NeighborArray[i]})
    }
    controllerDetailed.EntityData.Leafs = types.NewOrderedMap()
    controllerDetailed.EntityData.Leafs.Append("controller-name", types.YLeaf{"ControllerName", controllerDetailed.ControllerName})
    controllerDetailed.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", controllerDetailed.InterfaceNameXr})
    controllerDetailed.EntityData.Leafs.Append("signalling-ip-tos", types.YLeaf{"SignallingIpTos", controllerDetailed.SignallingIpTos})
    controllerDetailed.EntityData.Leafs.Append("integrity-send-password", types.YLeaf{"IntegritySendPassword", controllerDetailed.IntegritySendPassword})
    controllerDetailed.EntityData.Leafs.Append("integrity-receive-password", types.YLeaf{"IntegrityReceivePassword", controllerDetailed.IntegrityReceivePassword})
    controllerDetailed.EntityData.Leafs.Append("integrity-receive-password-optional", types.YLeaf{"IntegrityReceivePasswordOptional", controllerDetailed.IntegrityReceivePasswordOptional})
    controllerDetailed.EntityData.Leafs.Append("refresh-timer-state", types.YLeaf{"RefreshTimerState", controllerDetailed.RefreshTimerState})
    controllerDetailed.EntityData.Leafs.Append("summary-refresh-timer-state", types.YLeaf{"SummaryRefreshTimerState", controllerDetailed.SummaryRefreshTimerState})
    controllerDetailed.EntityData.Leafs.Append("refresh-interval", types.YLeaf{"RefreshInterval", controllerDetailed.RefreshInterval})
    controllerDetailed.EntityData.Leafs.Append("out-of-band-refresh-interval", types.YLeaf{"OutOfBandRefreshInterval", controllerDetailed.OutOfBandRefreshInterval})
    controllerDetailed.EntityData.Leafs.Append("summary-refresh-max-size", types.YLeaf{"SummaryRefreshMaxSize", controllerDetailed.SummaryRefreshMaxSize})
    controllerDetailed.EntityData.Leafs.Append("bundle-message-max-size", types.YLeaf{"BundleMessageMaxSize", controllerDetailed.BundleMessageMaxSize})
    controllerDetailed.EntityData.Leafs.Append("expiry-timer-state", types.YLeaf{"ExpiryTimerState", controllerDetailed.ExpiryTimerState})
    controllerDetailed.EntityData.Leafs.Append("expiry-states", types.YLeaf{"ExpiryStates", controllerDetailed.ExpiryStates})
    controllerDetailed.EntityData.Leafs.Append("expiry-interval", types.YLeaf{"ExpiryInterval", controllerDetailed.ExpiryInterval})
    controllerDetailed.EntityData.Leafs.Append("expiry-drops-tolerated", types.YLeaf{"ExpiryDropsTolerated", controllerDetailed.ExpiryDropsTolerated})
    controllerDetailed.EntityData.Leafs.Append("out-of-band-expiry-drops-tolerated", types.YLeaf{"OutOfBandExpiryDropsTolerated", controllerDetailed.OutOfBandExpiryDropsTolerated})
    controllerDetailed.EntityData.Leafs.Append("ack-hold-time", types.YLeaf{"AckHoldTime", controllerDetailed.AckHoldTime})
    controllerDetailed.EntityData.Leafs.Append("ack-max-size", types.YLeaf{"AckMaxSize", controllerDetailed.AckMaxSize})
    controllerDetailed.EntityData.Leafs.Append("retransmit-time", types.YLeaf{"RetransmitTime", controllerDetailed.RetransmitTime})
    controllerDetailed.EntityData.Leafs.Append("pacing-interval", types.YLeaf{"PacingInterval", controllerDetailed.PacingInterval})
    controllerDetailed.EntityData.Leafs.Append("pacing-message-rate", types.YLeaf{"PacingMessageRate", controllerDetailed.PacingMessageRate})
    controllerDetailed.EntityData.Leafs.Append("pacing-timer-state", types.YLeaf{"PacingTimerState", controllerDetailed.PacingTimerState})
    controllerDetailed.EntityData.Leafs.Append("pacing-messages", types.YLeaf{"PacingMessages", controllerDetailed.PacingMessages})

    controllerDetailed.EntityData.YListKeys = []string {"ControllerName"}

    return &(controllerDetailed.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation
// Interface bandwidth information
type Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "controller-detailed"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_ControllerDetaileds_ControllerDetailed_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_Flags
// Interface flags
type Rsvp_ControllerDetaileds_ControllerDetailed_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *Rsvp_ControllerDetaileds_ControllerDetailed_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "controller-detailed"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-mpls-enabled", types.YLeaf{"IsMplsEnabled", flags.IsMplsEnabled})
    flags.EntityData.Leafs.Append("is-refresh-reduction-enabled", types.YLeaf{"IsRefreshReductionEnabled", flags.IsRefreshReductionEnabled})
    flags.EntityData.Leafs.Append("is-pacing-enabled", types.YLeaf{"IsPacingEnabled", flags.IsPacingEnabled})
    flags.EntityData.Leafs.Append("is-refresh-enabled", types.YLeaf{"IsRefreshEnabled", flags.IsRefreshEnabled})
    flags.EntityData.Leafs.Append("is-s-refresh-enabled", types.YLeaf{"IsSRefreshEnabled", flags.IsSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-interface-down", types.YLeaf{"IsInterfaceDown", flags.IsInterfaceDown})
    flags.EntityData.Leafs.Append("is-interface-created", types.YLeaf{"IsInterfaceCreated", flags.IsInterfaceCreated})
    flags.EntityData.Leafs.Append("is-rel-s-refresh-enabled", types.YLeaf{"IsRelSRefreshEnabled", flags.IsRelSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-backup-tunnel", types.YLeaf{"IsBackupTunnel", flags.IsBackupTunnel})
    flags.EntityData.Leafs.Append("is-rsvp-configured", types.YLeaf{"IsRsvpConfigured", flags.IsRsvpConfigured})
    flags.EntityData.Leafs.Append("is-non-default-vrf", types.YLeaf{"IsNonDefaultVrf", flags.IsNonDefaultVrf})
    flags.EntityData.Leafs.Append("is-message-bundling-enabled", types.YLeaf{"IsMessageBundlingEnabled", flags.IsMessageBundlingEnabled})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray
// Neighbor array
type Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []*Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray) GetEntityData() *types.CommonEntityData {
    neighborArray.EntityData.YFilter = neighborArray.YFilter
    neighborArray.EntityData.YangName = "neighbor-array"
    neighborArray.EntityData.BundleName = "cisco_ios_xr"
    neighborArray.EntityData.ParentYangName = "controller-detailed"
    neighborArray.EntityData.SegmentPath = "neighbor-array" + types.AddNoKeyToken(neighborArray)
    neighborArray.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/" + neighborArray.EntityData.SegmentPath
    neighborArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborArray.EntityData.Children = types.NewOrderedMap()
    neighborArray.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &neighborArray.ExpiryTime})
    neighborArray.EntityData.Children.Append("neighbor-message-id", types.YChild{"NeighborMessageId", nil})
    for i := range neighborArray.NeighborMessageId {
        types.SetYListKey(neighborArray.NeighborMessageId[i], i)
        neighborArray.EntityData.Children.Append(types.GetSegmentPath(neighborArray.NeighborMessageId[i]), types.YChild{"NeighborMessageId", neighborArray.NeighborMessageId[i]})
    }
    neighborArray.EntityData.Leafs = types.NewOrderedMap()
    neighborArray.EntityData.Leafs.Append("is-neighbor-refresh-reduction-capable", types.YLeaf{"IsNeighborRefreshReductionCapable", neighborArray.IsNeighborRefreshReductionCapable})
    neighborArray.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborArray.NeighborAddress})
    neighborArray.EntityData.Leafs.Append("message-ids", types.YLeaf{"MessageIds", neighborArray.MessageIds})
    neighborArray.EntityData.Leafs.Append("outgoing-states", types.YLeaf{"OutgoingStates", neighborArray.OutgoingStates})

    neighborArray.EntityData.YListKeys = []string {}

    return &(neighborArray.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime
// Expiry time
type Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "neighbor-array"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/neighbor-array/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *Rsvp_ControllerDetaileds_ControllerDetailed_NeighborArray_NeighborMessageId) GetEntityData() *types.CommonEntityData {
    neighborMessageId.EntityData.YFilter = neighborMessageId.YFilter
    neighborMessageId.EntityData.YangName = "neighbor-message-id"
    neighborMessageId.EntityData.BundleName = "cisco_ios_xr"
    neighborMessageId.EntityData.ParentYangName = "neighbor-array"
    neighborMessageId.EntityData.SegmentPath = "neighbor-message-id" + types.AddNoKeyToken(neighborMessageId)
    neighborMessageId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-detaileds/controller-detailed/neighbor-array/" + neighborMessageId.EntityData.SegmentPath
    neighborMessageId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborMessageId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborMessageId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborMessageId.EntityData.Children = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs.Append("message-id", types.YLeaf{"MessageId", neighborMessageId.MessageId})

    neighborMessageId.EntityData.YListKeys = []string {}

    return &(neighborMessageId.EntityData)
}

// Rsvp_FrrSummary
// Fast Re-Route Summary State Information
type Rsvp_FrrSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Path state counters.
    PathStates Rsvp_FrrSummary_PathStates

    // Rerservation state counters.
    ReservationStates Rsvp_FrrSummary_ReservationStates
}

func (frrSummary *Rsvp_FrrSummary) GetEntityData() *types.CommonEntityData {
    frrSummary.EntityData.YFilter = frrSummary.YFilter
    frrSummary.EntityData.YangName = "frr-summary"
    frrSummary.EntityData.BundleName = "cisco_ios_xr"
    frrSummary.EntityData.ParentYangName = "rsvp"
    frrSummary.EntityData.SegmentPath = "frr-summary"
    frrSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + frrSummary.EntityData.SegmentPath
    frrSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrSummary.EntityData.Children = types.NewOrderedMap()
    frrSummary.EntityData.Children.Append("path-states", types.YChild{"PathStates", &frrSummary.PathStates})
    frrSummary.EntityData.Children.Append("reservation-states", types.YChild{"ReservationStates", &frrSummary.ReservationStates})
    frrSummary.EntityData.Leafs = types.NewOrderedMap()

    frrSummary.EntityData.YListKeys = []string {}

    return &(frrSummary.EntityData)
}

// Rsvp_FrrSummary_PathStates
// Path state counters
type Rsvp_FrrSummary_PathStates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (pathStates *Rsvp_FrrSummary_PathStates) GetEntityData() *types.CommonEntityData {
    pathStates.EntityData.YFilter = pathStates.YFilter
    pathStates.EntityData.YangName = "path-states"
    pathStates.EntityData.BundleName = "cisco_ios_xr"
    pathStates.EntityData.ParentYangName = "frr-summary"
    pathStates.EntityData.SegmentPath = "path-states"
    pathStates.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frr-summary/" + pathStates.EntityData.SegmentPath
    pathStates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    pathStates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    pathStates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    pathStates.EntityData.Children = types.NewOrderedMap()
    pathStates.EntityData.Leafs = types.NewOrderedMap()
    pathStates.EntityData.Leafs.Append("total", types.YLeaf{"Total", pathStates.Total})
    pathStates.EntityData.Leafs.Append("active-instances", types.YLeaf{"ActiveInstances", pathStates.ActiveInstances})
    pathStates.EntityData.Leafs.Append("ready-instances", types.YLeaf{"ReadyInstances", pathStates.ReadyInstances})
    pathStates.EntityData.Leafs.Append("active-wait-instances", types.YLeaf{"ActiveWaitInstances", pathStates.ActiveWaitInstances})

    pathStates.EntityData.YListKeys = []string {}

    return &(pathStates.EntityData)
}

// Rsvp_FrrSummary_ReservationStates
// Rerservation state counters
type Rsvp_FrrSummary_ReservationStates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total number of instances of this state. The type is interface{} with
    // range: 0..4294967295.
    Total interface{}

    // Number of active instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ActiveInstances interface{}

    // Number of ready instances of this state. The type is interface{} with
    // range: 0..4294967295.
    ReadyInstances interface{}

    // Number of instances of this state awaiting Path messages to be sent out or
    // Resv messages to be received. The type is interface{} with range:
    // 0..4294967295.
    ActiveWaitInstances interface{}
}

func (reservationStates *Rsvp_FrrSummary_ReservationStates) GetEntityData() *types.CommonEntityData {
    reservationStates.EntityData.YFilter = reservationStates.YFilter
    reservationStates.EntityData.YangName = "reservation-states"
    reservationStates.EntityData.BundleName = "cisco_ios_xr"
    reservationStates.EntityData.ParentYangName = "frr-summary"
    reservationStates.EntityData.SegmentPath = "reservation-states"
    reservationStates.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frr-summary/" + reservationStates.EntityData.SegmentPath
    reservationStates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reservationStates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reservationStates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reservationStates.EntityData.Children = types.NewOrderedMap()
    reservationStates.EntityData.Leafs = types.NewOrderedMap()
    reservationStates.EntityData.Leafs.Append("total", types.YLeaf{"Total", reservationStates.Total})
    reservationStates.EntityData.Leafs.Append("active-instances", types.YLeaf{"ActiveInstances", reservationStates.ActiveInstances})
    reservationStates.EntityData.Leafs.Append("ready-instances", types.YLeaf{"ReadyInstances", reservationStates.ReadyInstances})
    reservationStates.EntityData.Leafs.Append("active-wait-instances", types.YLeaf{"ActiveWaitInstances", reservationStates.ActiveWaitInstances})

    reservationStates.EntityData.YListKeys = []string {}

    return &(reservationStates.EntityData)
}

// Rsvp_RsbDetaileds
// Table of detailed info about reservation state
// blocks
type Rsvp_RsbDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single reservation state block. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed.
    RsbDetailed []*Rsvp_RsbDetaileds_RsbDetailed
}

func (rsbDetaileds *Rsvp_RsbDetaileds) GetEntityData() *types.CommonEntityData {
    rsbDetaileds.EntityData.YFilter = rsbDetaileds.YFilter
    rsbDetaileds.EntityData.YangName = "rsb-detaileds"
    rsbDetaileds.EntityData.BundleName = "cisco_ios_xr"
    rsbDetaileds.EntityData.ParentYangName = "rsvp"
    rsbDetaileds.EntityData.SegmentPath = "rsb-detaileds"
    rsbDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + rsbDetaileds.EntityData.SegmentPath
    rsbDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbDetaileds.EntityData.Children = types.NewOrderedMap()
    rsbDetaileds.EntityData.Children.Append("rsb-detailed", types.YChild{"RsbDetailed", nil})
    for i := range rsbDetaileds.RsbDetailed {
        types.SetYListKey(rsbDetaileds.RsbDetailed[i], i)
        rsbDetaileds.EntityData.Children.Append(types.GetSegmentPath(rsbDetaileds.RsbDetailed[i]), types.YChild{"RsbDetailed", rsbDetaileds.RsbDetailed[i]})
    }
    rsbDetaileds.EntityData.Leafs = types.NewOrderedMap()

    rsbDetaileds.EntityData.YListKeys = []string {}

    return &(rsbDetaileds.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed
// Detailed info for a single reservation state
// block
type Rsvp_RsbDetaileds_RsbDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Input Adjusted Interface. The type is string.
    InputAdjustedInterface interface{}

    // Input Physical Interface. The type is string.
    InputPhysicalInterface interface{}

    // Flow Spec Information.
    FlowSpec Rsvp_RsbDetaileds_RsbDetailed_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec

    // RSVP Session Information.
    Session Rsvp_RsbDetaileds_RsbDetailed_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_RsbDetaileds_RsbDetailed_S2lSubLsp

    // RSVP Style.
    Style Rsvp_RsbDetaileds_RsbDetailed_Style

    // RSVP Filter.
    Filter Rsvp_RsbDetaileds_RsbDetailed_Filter

    // Reservation State Block Flags.
    RsbFlags Rsvp_RsbDetaileds_RsbDetailed_RsbFlags

    // Hop Infomation.
    Hop Rsvp_RsbDetaileds_RsbDetailed_Hop

    // RSVP Policy Sources.
    PolicySources Rsvp_RsbDetaileds_RsbDetailed_PolicySources

    // RSVP Header Information.
    Header Rsvp_RsbDetaileds_RsbDetailed_Header

    // RSVP Policy Flags.
    PolicyFlags Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags

    // Expiry Time.
    ExpiryTime Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime

    // RSVP Query Flags.
    PolicyQueryFlags Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags

    // Label Information.
    LabelInfo Rsvp_RsbDetaileds_RsbDetailed_LabelInfo
}

func (rsbDetailed *Rsvp_RsbDetaileds_RsbDetailed) GetEntityData() *types.CommonEntityData {
    rsbDetailed.EntityData.YFilter = rsbDetailed.YFilter
    rsbDetailed.EntityData.YangName = "rsb-detailed"
    rsbDetailed.EntityData.BundleName = "cisco_ios_xr"
    rsbDetailed.EntityData.ParentYangName = "rsb-detaileds"
    rsbDetailed.EntityData.SegmentPath = "rsb-detailed" + types.AddNoKeyToken(rsbDetailed)
    rsbDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/" + rsbDetailed.EntityData.SegmentPath
    rsbDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbDetailed.EntityData.Children = types.NewOrderedMap()
    rsbDetailed.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rsbDetailed.FlowSpec})
    rsbDetailed.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rsbDetailed.GenericFlowSpec})
    rsbDetailed.EntityData.Children.Append("session", types.YChild{"Session", &rsbDetailed.Session})
    rsbDetailed.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &rsbDetailed.S2lSubLsp})
    rsbDetailed.EntityData.Children.Append("style", types.YChild{"Style", &rsbDetailed.Style})
    rsbDetailed.EntityData.Children.Append("filter", types.YChild{"Filter", &rsbDetailed.Filter})
    rsbDetailed.EntityData.Children.Append("rsb-flags", types.YChild{"RsbFlags", &rsbDetailed.RsbFlags})
    rsbDetailed.EntityData.Children.Append("hop", types.YChild{"Hop", &rsbDetailed.Hop})
    rsbDetailed.EntityData.Children.Append("policy-sources", types.YChild{"PolicySources", &rsbDetailed.PolicySources})
    rsbDetailed.EntityData.Children.Append("header", types.YChild{"Header", &rsbDetailed.Header})
    rsbDetailed.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &rsbDetailed.PolicyFlags})
    rsbDetailed.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &rsbDetailed.ExpiryTime})
    rsbDetailed.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &rsbDetailed.PolicyQueryFlags})
    rsbDetailed.EntityData.Children.Append("label-info", types.YChild{"LabelInfo", &rsbDetailed.LabelInfo})
    rsbDetailed.EntityData.Leafs = types.NewOrderedMap()
    rsbDetailed.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbDetailed.DestinationAddress})
    rsbDetailed.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", rsbDetailed.DestinationPort})
    rsbDetailed.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rsbDetailed.Protocol})
    rsbDetailed.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rsbDetailed.ExtendedTunnelId})
    rsbDetailed.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsbDetailed.SessionType})
    rsbDetailed.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rsbDetailed.P2mpId})
    rsbDetailed.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rsbDetailed.SourceAddress})
    rsbDetailed.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", rsbDetailed.SourcePort})
    rsbDetailed.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", rsbDetailed.SubGroupOrigin})
    rsbDetailed.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rsbDetailed.SubGroupId})
    rsbDetailed.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rsbDetailed.VrfName})
    rsbDetailed.EntityData.Leafs.Append("input-adjusted-interface", types.YLeaf{"InputAdjustedInterface", rsbDetailed.InputAdjustedInterface})
    rsbDetailed.EntityData.Leafs.Append("input-physical-interface", types.YLeaf{"InputPhysicalInterface", rsbDetailed.InputPhysicalInterface})

    rsbDetailed.EntityData.YListKeys = []string {}

    return &(rsbDetailed.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_FlowSpec
// Flow Spec Information
type Rsvp_RsbDetaileds_RsbDetailed_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RsbDetaileds_RsbDetailed_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rsb-detailed"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rsb-detailed"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *Rsvp_RsbDetaileds_RsbDetailed_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Session
// RSVP Session Information
type Rsvp_RsbDetaileds_RsbDetailed_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession
}

func (session *Rsvp_RsbDetaileds_RsbDetailed_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "rsb-detailed"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession
// RSVP Session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_RsbDetaileds_RsbDetailed_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RsbDetaileds_RsbDetailed_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_RsbDetaileds_RsbDetailed_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "rsb-detailed"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Style
// RSVP Style
type Rsvp_RsbDetaileds_RsbDetailed_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RsbDetaileds_RsbDetailed_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "rsb-detailed"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Filter
// RSVP Filter
type Rsvp_RsbDetaileds_RsbDetailed_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
}

func (filter *Rsvp_RsbDetaileds_RsbDetailed_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "rsb-detailed"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_RsbDetaileds_RsbDetailed_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_RsbFlags
// Reservation State Block Flags
type Rsvp_RsbDetaileds_RsbDetailed_RsbFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // MessageID Valid. The type is bool.
    IsMessageIdValid interface{}

    // Rerouted. The type is bool.
    IsLocalRepair interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}

    // Locked Out. The type is bool.
    IsLockout interface{}
}

func (rsbFlags *Rsvp_RsbDetaileds_RsbDetailed_RsbFlags) GetEntityData() *types.CommonEntityData {
    rsbFlags.EntityData.YFilter = rsbFlags.YFilter
    rsbFlags.EntityData.YangName = "rsb-flags"
    rsbFlags.EntityData.BundleName = "cisco_ios_xr"
    rsbFlags.EntityData.ParentYangName = "rsb-detailed"
    rsbFlags.EntityData.SegmentPath = "rsb-flags"
    rsbFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + rsbFlags.EntityData.SegmentPath
    rsbFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbFlags.EntityData.Children = types.NewOrderedMap()
    rsbFlags.EntityData.Leafs = types.NewOrderedMap()
    rsbFlags.EntityData.Leafs.Append("is-local-receiver", types.YLeaf{"IsLocalReceiver", rsbFlags.IsLocalReceiver})
    rsbFlags.EntityData.Leafs.Append("is-message-id-valid", types.YLeaf{"IsMessageIdValid", rsbFlags.IsMessageIdValid})
    rsbFlags.EntityData.Leafs.Append("is-local-repair", types.YLeaf{"IsLocalRepair", rsbFlags.IsLocalRepair})
    rsbFlags.EntityData.Leafs.Append("is-merge-point", types.YLeaf{"IsMergePoint", rsbFlags.IsMergePoint})
    rsbFlags.EntityData.Leafs.Append("is-lockout", types.YLeaf{"IsLockout", rsbFlags.IsLockout})

    rsbFlags.EntityData.YListKeys = []string {}

    return &(rsbFlags.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Hop
// Hop Infomation
type Rsvp_RsbDetaileds_RsbDetailed_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *Rsvp_RsbDetaileds_RsbDetailed_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "rsb-detailed"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_PolicySources
// RSVP Policy Sources
type Rsvp_RsbDetaileds_RsbDetailed_PolicySources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *Rsvp_RsbDetaileds_RsbDetailed_PolicySources) GetEntityData() *types.CommonEntityData {
    policySources.EntityData.YFilter = policySources.YFilter
    policySources.EntityData.YangName = "policy-sources"
    policySources.EntityData.BundleName = "cisco_ios_xr"
    policySources.EntityData.ParentYangName = "rsb-detailed"
    policySources.EntityData.SegmentPath = "policy-sources"
    policySources.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + policySources.EntityData.SegmentPath
    policySources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policySources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policySources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policySources.EntityData.Children = types.NewOrderedMap()
    policySources.EntityData.Leafs = types.NewOrderedMap()
    policySources.EntityData.Leafs.Append("is-te-link", types.YLeaf{"IsTeLink", policySources.IsTeLink})
    policySources.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", policySources.IsLocal})
    policySources.EntityData.Leafs.Append("is-cops", types.YLeaf{"IsCops", policySources.IsCops})
    policySources.EntityData.Leafs.Append("is-default", types.YLeaf{"IsDefault", policySources.IsDefault})
    policySources.EntityData.Leafs.Append("is-cable", types.YLeaf{"IsCable", policySources.IsCable})

    policySources.EntityData.YListKeys = []string {}

    return &(policySources.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_Header
// RSVP Header Information
type Rsvp_RsbDetaileds_RsbDetailed_Header struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (header *Rsvp_RsbDetaileds_RsbDetailed_Header) GetEntityData() *types.CommonEntityData {
    header.EntityData.YFilter = header.YFilter
    header.EntityData.YangName = "header"
    header.EntityData.BundleName = "cisco_ios_xr"
    header.EntityData.ParentYangName = "rsb-detailed"
    header.EntityData.SegmentPath = "header"
    header.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + header.EntityData.SegmentPath
    header.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    header.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    header.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    header.EntityData.Children = types.NewOrderedMap()
    header.EntityData.Leafs = types.NewOrderedMap()
    header.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", header.RsvpVersion})
    header.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", header.RsvpHeaderFlags})
    header.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", header.RsvpTtl})
    header.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", header.RsvpMessageType})
    header.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", header.IpTos})
    header.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", header.IpTtl})
    header.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", header.IpSourceAddress})

    header.EntityData.YListKeys = []string {}

    return &(header.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags
// RSVP Policy Flags
type Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "rsb-detailed"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime
// Expiry Time
type Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_RsbDetaileds_RsbDetailed_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "rsb-detailed"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags
// RSVP Query Flags
type Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_RsbDetaileds_RsbDetailed_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "rsb-detailed"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo
// Label Information
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Is the label information valid. The type is bool.
    IsValid interface{}

    // Local Downstream Label. The type is interface{} with range: 0..4294967295.
    LocalDownstreamLabel interface{}

    // Outgoing Downstream Label. The type is interface{} with range:
    // 0..4294967295.
    OutgoingDownstreamLabel interface{}

    // MergePoint Label. The type is interface{} with range: 0..4294967295.
    MergePointLabel interface{}

    // Outgoing Upstream Label. The type is interface{} with range: 0..4294967295.
    OutgoingUpstreamLabel interface{}

    // Local Upstream Label. The type is interface{} with range: 0..4294967295.
    LocalUpstreamLabel interface{}

    // Recovery Label. The type is interface{} with range: 0..4294967295.
    RecoveryLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Generic Local Downstream Label.
    GenericLocalDownstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel

    // Generic Outgoing Downstream Label.
    GenericOutgoingDownstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel

    // Generic MergePoint Label.
    GenericMergePointLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel

    // Generic Outgoing Upstream Label.
    GenericOutgoingUpstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel

    // Generic Local Upstream Label.
    GenericLocalUpstreamLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel

    // Generic Recovery Label.
    GenericRecoveryLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
}

func (labelInfo *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo) GetEntityData() *types.CommonEntityData {
    labelInfo.EntityData.YFilter = labelInfo.YFilter
    labelInfo.EntityData.YangName = "label-info"
    labelInfo.EntityData.BundleName = "cisco_ios_xr"
    labelInfo.EntityData.ParentYangName = "rsb-detailed"
    labelInfo.EntityData.SegmentPath = "label-info"
    labelInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/" + labelInfo.EntityData.SegmentPath
    labelInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelInfo.EntityData.Children = types.NewOrderedMap()
    labelInfo.EntityData.Children.Append("generic-local-downstream-label", types.YChild{"GenericLocalDownstreamLabel", &labelInfo.GenericLocalDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-downstream-label", types.YChild{"GenericOutgoingDownstreamLabel", &labelInfo.GenericOutgoingDownstreamLabel})
    labelInfo.EntityData.Children.Append("generic-merge-point-label", types.YChild{"GenericMergePointLabel", &labelInfo.GenericMergePointLabel})
    labelInfo.EntityData.Children.Append("generic-outgoing-upstream-label", types.YChild{"GenericOutgoingUpstreamLabel", &labelInfo.GenericOutgoingUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-local-upstream-label", types.YChild{"GenericLocalUpstreamLabel", &labelInfo.GenericLocalUpstreamLabel})
    labelInfo.EntityData.Children.Append("generic-recovery-label", types.YChild{"GenericRecoveryLabel", &labelInfo.GenericRecoveryLabel})
    labelInfo.EntityData.Leafs = types.NewOrderedMap()
    labelInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", labelInfo.IsValid})
    labelInfo.EntityData.Leafs.Append("local-downstream-label", types.YLeaf{"LocalDownstreamLabel", labelInfo.LocalDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-downstream-label", types.YLeaf{"OutgoingDownstreamLabel", labelInfo.OutgoingDownstreamLabel})
    labelInfo.EntityData.Leafs.Append("merge-point-label", types.YLeaf{"MergePointLabel", labelInfo.MergePointLabel})
    labelInfo.EntityData.Leafs.Append("outgoing-upstream-label", types.YLeaf{"OutgoingUpstreamLabel", labelInfo.OutgoingUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("local-upstream-label", types.YLeaf{"LocalUpstreamLabel", labelInfo.LocalUpstreamLabel})
    labelInfo.EntityData.Leafs.Append("recovery-label", types.YLeaf{"RecoveryLabel", labelInfo.RecoveryLabel})
    labelInfo.EntityData.Leafs.Append("lsp-wrap-label", types.YLeaf{"LspWrapLabel", labelInfo.LspWrapLabel})

    labelInfo.EntityData.YListKeys = []string {}

    return &(labelInfo.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel
// Generic Local Downstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
}

func (genericLocalDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalDownstreamLabel.EntityData.YFilter = genericLocalDownstreamLabel.YFilter
    genericLocalDownstreamLabel.EntityData.YangName = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalDownstreamLabel.EntityData.SegmentPath = "generic-local-downstream-label"
    genericLocalDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" + genericLocalDownstreamLabel.EntityData.SegmentPath
    genericLocalDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalDownstreamLabel.GeneralizedLabel})
    genericLocalDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalDownstreamLabel.GenericLabelType})

    genericLocalDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalDownstreamLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel
// Generic Outgoing Downstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
}

func (genericOutgoingDownstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingDownstreamLabel.EntityData.YFilter = genericOutgoingDownstreamLabel.YFilter
    genericOutgoingDownstreamLabel.EntityData.YangName = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingDownstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingDownstreamLabel.EntityData.SegmentPath = "generic-outgoing-downstream-label"
    genericOutgoingDownstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" + genericOutgoingDownstreamLabel.EntityData.SegmentPath
    genericOutgoingDownstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingDownstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingDownstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingDownstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingDownstreamLabel.GeneralizedLabel})
    genericOutgoingDownstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingDownstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingDownstreamLabel.GenericLabelType})

    genericOutgoingDownstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingDownstreamLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-downstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingDownstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-downstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel
// Generic MergePoint Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
}

func (genericMergePointLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel) GetEntityData() *types.CommonEntityData {
    genericMergePointLabel.EntityData.YFilter = genericMergePointLabel.YFilter
    genericMergePointLabel.EntityData.YangName = "generic-merge-point-label"
    genericMergePointLabel.EntityData.BundleName = "cisco_ios_xr"
    genericMergePointLabel.EntityData.ParentYangName = "label-info"
    genericMergePointLabel.EntityData.SegmentPath = "generic-merge-point-label"
    genericMergePointLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" + genericMergePointLabel.EntityData.SegmentPath
    genericMergePointLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericMergePointLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericMergePointLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericMergePointLabel.EntityData.Children = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericMergePointLabel.GeneralizedLabel})
    genericMergePointLabel.EntityData.Leafs = types.NewOrderedMap()
    genericMergePointLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericMergePointLabel.GenericLabelType})

    genericMergePointLabel.EntityData.YListKeys = []string {}

    return &(genericMergePointLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value.
    Value []*Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-merge-point-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericMergePointLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-merge-point-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel
// Generic Outgoing Upstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
}

func (genericOutgoingUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericOutgoingUpstreamLabel.EntityData.YFilter = genericOutgoingUpstreamLabel.YFilter
    genericOutgoingUpstreamLabel.EntityData.YangName = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutgoingUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericOutgoingUpstreamLabel.EntityData.SegmentPath = "generic-outgoing-upstream-label"
    genericOutgoingUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" + genericOutgoingUpstreamLabel.EntityData.SegmentPath
    genericOutgoingUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutgoingUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutgoingUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutgoingUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutgoingUpstreamLabel.GeneralizedLabel})
    genericOutgoingUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutgoingUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutgoingUpstreamLabel.GenericLabelType})

    genericOutgoingUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericOutgoingUpstreamLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-outgoing-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericOutgoingUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-outgoing-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel
// Generic Local Upstream Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
}

func (genericLocalUpstreamLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel) GetEntityData() *types.CommonEntityData {
    genericLocalUpstreamLabel.EntityData.YFilter = genericLocalUpstreamLabel.YFilter
    genericLocalUpstreamLabel.EntityData.YangName = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.BundleName = "cisco_ios_xr"
    genericLocalUpstreamLabel.EntityData.ParentYangName = "label-info"
    genericLocalUpstreamLabel.EntityData.SegmentPath = "generic-local-upstream-label"
    genericLocalUpstreamLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" + genericLocalUpstreamLabel.EntityData.SegmentPath
    genericLocalUpstreamLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericLocalUpstreamLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericLocalUpstreamLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericLocalUpstreamLabel.EntityData.Children = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericLocalUpstreamLabel.GeneralizedLabel})
    genericLocalUpstreamLabel.EntityData.Leafs = types.NewOrderedMap()
    genericLocalUpstreamLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericLocalUpstreamLabel.GenericLabelType})

    genericLocalUpstreamLabel.EntityData.YListKeys = []string {}

    return &(genericLocalUpstreamLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value.
    Value []*Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-local-upstream-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericLocalUpstreamLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-local-upstream-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel
// Generic Recovery Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
}

func (genericRecoveryLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel) GetEntityData() *types.CommonEntityData {
    genericRecoveryLabel.EntityData.YFilter = genericRecoveryLabel.YFilter
    genericRecoveryLabel.EntityData.YangName = "generic-recovery-label"
    genericRecoveryLabel.EntityData.BundleName = "cisco_ios_xr"
    genericRecoveryLabel.EntityData.ParentYangName = "label-info"
    genericRecoveryLabel.EntityData.SegmentPath = "generic-recovery-label"
    genericRecoveryLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/" + genericRecoveryLabel.EntityData.SegmentPath
    genericRecoveryLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericRecoveryLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericRecoveryLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericRecoveryLabel.EntityData.Children = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericRecoveryLabel.GeneralizedLabel})
    genericRecoveryLabel.EntityData.Leafs = types.NewOrderedMap()
    genericRecoveryLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericRecoveryLabel.GenericLabelType})

    genericRecoveryLabel.EntityData.YListKeys = []string {}

    return &(genericRecoveryLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel
// Generalized Label
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value.
    Value []*Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-recovery-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_RsbDetaileds_RsbDetailed_LabelInfo_GenericRecoveryLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-detaileds/rsb-detailed/label-info/generic-recovery-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_InterfaceSummaries
// Table of summary info about RSVP-enabled
// interfaces
type Rsvp_InterfaceSummaries struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary info about an RSVP-enabled interface. The type is slice of
    // Rsvp_InterfaceSummaries_InterfaceSummary.
    InterfaceSummary []*Rsvp_InterfaceSummaries_InterfaceSummary
}

func (interfaceSummaries *Rsvp_InterfaceSummaries) GetEntityData() *types.CommonEntityData {
    interfaceSummaries.EntityData.YFilter = interfaceSummaries.YFilter
    interfaceSummaries.EntityData.YangName = "interface-summaries"
    interfaceSummaries.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummaries.EntityData.ParentYangName = "rsvp"
    interfaceSummaries.EntityData.SegmentPath = "interface-summaries"
    interfaceSummaries.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + interfaceSummaries.EntityData.SegmentPath
    interfaceSummaries.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummaries.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummaries.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummaries.EntityData.Children = types.NewOrderedMap()
    interfaceSummaries.EntityData.Children.Append("interface-summary", types.YChild{"InterfaceSummary", nil})
    for i := range interfaceSummaries.InterfaceSummary {
        interfaceSummaries.EntityData.Children.Append(types.GetSegmentPath(interfaceSummaries.InterfaceSummary[i]), types.YChild{"InterfaceSummary", interfaceSummaries.InterfaceSummary[i]})
    }
    interfaceSummaries.EntityData.Leafs = types.NewOrderedMap()

    interfaceSummaries.EntityData.YListKeys = []string {}

    return &(interfaceSummaries.EntityData)
}

// Rsvp_InterfaceSummaries_InterfaceSummary
// Summary info about an RSVP-enabled interface
type Rsvp_InterfaceSummaries_InterfaceSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    PathsIn interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    PathsOut interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    ReservationsIn interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    ReservationsOut interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation
}

func (interfaceSummary *Rsvp_InterfaceSummaries_InterfaceSummary) GetEntityData() *types.CommonEntityData {
    interfaceSummary.EntityData.YFilter = interfaceSummary.YFilter
    interfaceSummary.EntityData.YangName = "interface-summary"
    interfaceSummary.EntityData.BundleName = "cisco_ios_xr"
    interfaceSummary.EntityData.ParentYangName = "interface-summaries"
    interfaceSummary.EntityData.SegmentPath = "interface-summary" + types.AddKeyToken(interfaceSummary.InterfaceName, "interface-name")
    interfaceSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-summaries/" + interfaceSummary.EntityData.SegmentPath
    interfaceSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceSummary.EntityData.Children = types.NewOrderedMap()
    interfaceSummary.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &interfaceSummary.BandwidthInformation})
    interfaceSummary.EntityData.Leafs = types.NewOrderedMap()
    interfaceSummary.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceSummary.InterfaceName})
    interfaceSummary.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceSummary.InterfaceNameXr})
    interfaceSummary.EntityData.Leafs.Append("paths-in", types.YLeaf{"PathsIn", interfaceSummary.PathsIn})
    interfaceSummary.EntityData.Leafs.Append("paths-out", types.YLeaf{"PathsOut", interfaceSummary.PathsOut})
    interfaceSummary.EntityData.Leafs.Append("reservations-in", types.YLeaf{"ReservationsIn", interfaceSummary.ReservationsIn})
    interfaceSummary.EntityData.Leafs.Append("reservations-out", types.YLeaf{"ReservationsOut", interfaceSummary.ReservationsOut})

    interfaceSummary.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceSummary.EntityData)
}

// Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation
// Interface bandwidth information
type Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "interface-summary"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-summaries/interface-summary/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-summaries/interface-summary/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_InterfaceSummaries_InterfaceSummary_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-summaries/interface-summary/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// Rsvp_HelloInstanceBriefs
// Table of brief info about hello instances
type Rsvp_HelloInstanceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single hello instance. The type is slice of
    // Rsvp_HelloInstanceBriefs_HelloInstanceBrief.
    HelloInstanceBrief []*Rsvp_HelloInstanceBriefs_HelloInstanceBrief
}

func (helloInstanceBriefs *Rsvp_HelloInstanceBriefs) GetEntityData() *types.CommonEntityData {
    helloInstanceBriefs.EntityData.YFilter = helloInstanceBriefs.YFilter
    helloInstanceBriefs.EntityData.YangName = "hello-instance-briefs"
    helloInstanceBriefs.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceBriefs.EntityData.ParentYangName = "rsvp"
    helloInstanceBriefs.EntityData.SegmentPath = "hello-instance-briefs"
    helloInstanceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + helloInstanceBriefs.EntityData.SegmentPath
    helloInstanceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceBriefs.EntityData.Children = types.NewOrderedMap()
    helloInstanceBriefs.EntityData.Children.Append("hello-instance-brief", types.YChild{"HelloInstanceBrief", nil})
    for i := range helloInstanceBriefs.HelloInstanceBrief {
        helloInstanceBriefs.EntityData.Children.Append(types.GetSegmentPath(helloInstanceBriefs.HelloInstanceBrief[i]), types.YChild{"HelloInstanceBrief", helloInstanceBriefs.HelloInstanceBrief[i]})
    }
    helloInstanceBriefs.EntityData.Leafs = types.NewOrderedMap()

    helloInstanceBriefs.EntityData.YListKeys = []string {}

    return &(helloInstanceBriefs.EntityData)
}

// Rsvp_HelloInstanceBriefs_HelloInstanceBrief
// Brief info for a single hello instance
type Rsvp_HelloInstanceBriefs_HelloInstanceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    LostCommunicationTotal interface{}
}

func (helloInstanceBrief *Rsvp_HelloInstanceBriefs_HelloInstanceBrief) GetEntityData() *types.CommonEntityData {
    helloInstanceBrief.EntityData.YFilter = helloInstanceBrief.YFilter
    helloInstanceBrief.EntityData.YangName = "hello-instance-brief"
    helloInstanceBrief.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceBrief.EntityData.ParentYangName = "hello-instance-briefs"
    helloInstanceBrief.EntityData.SegmentPath = "hello-instance-brief" + types.AddKeyToken(helloInstanceBrief.SourceAddress, "source-address") + types.AddKeyToken(helloInstanceBrief.DestinationAddress, "destination-address")
    helloInstanceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-briefs/" + helloInstanceBrief.EntityData.SegmentPath
    helloInstanceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceBrief.EntityData.Children = types.NewOrderedMap()
    helloInstanceBrief.EntityData.Leafs = types.NewOrderedMap()
    helloInstanceBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInstanceBrief.SourceAddress})
    helloInstanceBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInstanceBrief.DestinationAddress})
    helloInstanceBrief.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInstanceBrief.SourceAddressXr})
    helloInstanceBrief.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInstanceBrief.DestinationAddressXr})
    helloInstanceBrief.EntityData.Leafs.Append("neighbor-hello-state", types.YLeaf{"NeighborHelloState", helloInstanceBrief.NeighborHelloState})
    helloInstanceBrief.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInstanceBrief.InstanceType})
    helloInstanceBrief.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInstanceBrief.HelloInterface})
    helloInstanceBrief.EntityData.Leafs.Append("lost-communication-total", types.YLeaf{"LostCommunicationTotal", helloInstanceBrief.LostCommunicationTotal})

    helloInstanceBrief.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInstanceBrief.EntityData)
}

// Rsvp_AuthenticationDetails
// Table for detailed authentication related
// information
type Rsvp_AuthenticationDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief Authentication information. The type is slice of
    // Rsvp_AuthenticationDetails_AuthenticationDetail.
    AuthenticationDetail []*Rsvp_AuthenticationDetails_AuthenticationDetail
}

func (authenticationDetails *Rsvp_AuthenticationDetails) GetEntityData() *types.CommonEntityData {
    authenticationDetails.EntityData.YFilter = authenticationDetails.YFilter
    authenticationDetails.EntityData.YangName = "authentication-details"
    authenticationDetails.EntityData.BundleName = "cisco_ios_xr"
    authenticationDetails.EntityData.ParentYangName = "rsvp"
    authenticationDetails.EntityData.SegmentPath = "authentication-details"
    authenticationDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + authenticationDetails.EntityData.SegmentPath
    authenticationDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationDetails.EntityData.Children = types.NewOrderedMap()
    authenticationDetails.EntityData.Children.Append("authentication-detail", types.YChild{"AuthenticationDetail", nil})
    for i := range authenticationDetails.AuthenticationDetail {
        authenticationDetails.EntityData.Children.Append(types.GetSegmentPath(authenticationDetails.AuthenticationDetail[i]), types.YChild{"AuthenticationDetail", authenticationDetails.AuthenticationDetail[i]})
    }
    authenticationDetails.EntityData.Leafs = types.NewOrderedMap()

    authenticationDetails.EntityData.YListKeys = []string {}

    return &(authenticationDetails.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail
// Brief Authentication information
type Rsvp_AuthenticationDetails_AuthenticationDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // This attribute is a key. Mode (Tx or Rx). The type is RsvpMode.
    ModeId interface{}

    // This attribute is a key. InterfaceName. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Key status. The type is interface{} with range: 0..4294967295.
    KeyStatus interface{}

    // Direction. The type is interface{} with range: 0..4294967295.
    KeyDigestInfo interface{}

    // Lifetime (seconds). The type is interface{} with range: 0..4294967295.
    // Units are second.
    Lifetime interface{}

    // Remaining lifetime (seconds). The type is interface{} with range:
    // 0..4294967295. Units are second.
    LifetimeLeft interface{}

    // Challenge status. The type is RsvpMgmtAuthChallengeStatus.
    ChallengeStatus interface{}

    // Basic authentication data.
    AuthCompact Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact

    // direction info.
    DirectionInfo Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo
}

func (authenticationDetail *Rsvp_AuthenticationDetails_AuthenticationDetail) GetEntityData() *types.CommonEntityData {
    authenticationDetail.EntityData.YFilter = authenticationDetail.YFilter
    authenticationDetail.EntityData.YangName = "authentication-detail"
    authenticationDetail.EntityData.BundleName = "cisco_ios_xr"
    authenticationDetail.EntityData.ParentYangName = "authentication-details"
    authenticationDetail.EntityData.SegmentPath = "authentication-detail" + types.AddKeyToken(authenticationDetail.SourceAddress, "source-address") + types.AddKeyToken(authenticationDetail.DestinationAddress, "destination-address") + types.AddKeyToken(authenticationDetail.ModeId, "mode-id") + types.AddKeyToken(authenticationDetail.InterfaceName, "interface-name")
    authenticationDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/" + authenticationDetail.EntityData.SegmentPath
    authenticationDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authenticationDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authenticationDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authenticationDetail.EntityData.Children = types.NewOrderedMap()
    authenticationDetail.EntityData.Children.Append("auth-compact", types.YChild{"AuthCompact", &authenticationDetail.AuthCompact})
    authenticationDetail.EntityData.Children.Append("direction-info", types.YChild{"DirectionInfo", &authenticationDetail.DirectionInfo})
    authenticationDetail.EntityData.Leafs = types.NewOrderedMap()
    authenticationDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", authenticationDetail.SourceAddress})
    authenticationDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", authenticationDetail.DestinationAddress})
    authenticationDetail.EntityData.Leafs.Append("mode-id", types.YLeaf{"ModeId", authenticationDetail.ModeId})
    authenticationDetail.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", authenticationDetail.InterfaceName})
    authenticationDetail.EntityData.Leafs.Append("key-status", types.YLeaf{"KeyStatus", authenticationDetail.KeyStatus})
    authenticationDetail.EntityData.Leafs.Append("key-digest-info", types.YLeaf{"KeyDigestInfo", authenticationDetail.KeyDigestInfo})
    authenticationDetail.EntityData.Leafs.Append("lifetime", types.YLeaf{"Lifetime", authenticationDetail.Lifetime})
    authenticationDetail.EntityData.Leafs.Append("lifetime-left", types.YLeaf{"LifetimeLeft", authenticationDetail.LifetimeLeft})
    authenticationDetail.EntityData.Leafs.Append("challenge-status", types.YLeaf{"ChallengeStatus", authenticationDetail.ChallengeStatus})

    authenticationDetail.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress", "ModeId", "InterfaceName"}

    return &(authenticationDetail.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact
// Basic authentication data
type Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Direction. The type is RsvpMgmtAuthDirection.
    Direction interface{}

    // Key type. The type is RsvpMgmtAuthKi.
    KeyType interface{}

    // Key source. The type is string.
    KeySource interface{}

    // Key ID. The type is interface{} with range: 0..18446744073709551615.
    KeyId interface{}

    // Key validity. The type is interface{} with range: 0..4294967295.
    KeyIdValid interface{}
}

func (authCompact *Rsvp_AuthenticationDetails_AuthenticationDetail_AuthCompact) GetEntityData() *types.CommonEntityData {
    authCompact.EntityData.YFilter = authCompact.YFilter
    authCompact.EntityData.YangName = "auth-compact"
    authCompact.EntityData.BundleName = "cisco_ios_xr"
    authCompact.EntityData.ParentYangName = "authentication-detail"
    authCompact.EntityData.SegmentPath = "auth-compact"
    authCompact.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/" + authCompact.EntityData.SegmentPath
    authCompact.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    authCompact.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    authCompact.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    authCompact.EntityData.Children = types.NewOrderedMap()
    authCompact.EntityData.Leafs = types.NewOrderedMap()
    authCompact.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", authCompact.SourceAddressXr})
    authCompact.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", authCompact.DestinationAddressXr})
    authCompact.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", authCompact.NeighborAddress})
    authCompact.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", authCompact.Direction})
    authCompact.EntityData.Leafs.Append("key-type", types.YLeaf{"KeyType", authCompact.KeyType})
    authCompact.EntityData.Leafs.Append("key-source", types.YLeaf{"KeySource", authCompact.KeySource})
    authCompact.EntityData.Leafs.Append("key-id", types.YLeaf{"KeyId", authCompact.KeyId})
    authCompact.EntityData.Leafs.Append("key-id-valid", types.YLeaf{"KeyIdValid", authCompact.KeyIdValid})

    authCompact.EntityData.YListKeys = []string {}

    return &(authCompact.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo
// direction info
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AuthDirection. The type is RsvpMgmtAuthDirection.
    AuthDirection interface{}

    // send info.
    SendInfo Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo

    // receive info.
    ReceiveInfo Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
}

func (directionInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo) GetEntityData() *types.CommonEntityData {
    directionInfo.EntityData.YFilter = directionInfo.YFilter
    directionInfo.EntityData.YangName = "direction-info"
    directionInfo.EntityData.BundleName = "cisco_ios_xr"
    directionInfo.EntityData.ParentYangName = "authentication-detail"
    directionInfo.EntityData.SegmentPath = "direction-info"
    directionInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/" + directionInfo.EntityData.SegmentPath
    directionInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    directionInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    directionInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    directionInfo.EntityData.Children = types.NewOrderedMap()
    directionInfo.EntityData.Children.Append("send-info", types.YChild{"SendInfo", &directionInfo.SendInfo})
    directionInfo.EntityData.Children.Append("receive-info", types.YChild{"ReceiveInfo", &directionInfo.ReceiveInfo})
    directionInfo.EntityData.Leafs = types.NewOrderedMap()
    directionInfo.EntityData.Leafs.Append("auth-direction", types.YLeaf{"AuthDirection", directionInfo.AuthDirection})

    directionInfo.EntityData.YListKeys = []string {}

    return &(directionInfo.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo
// send info
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Counters.
    Counters Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
}

func (sendInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo) GetEntityData() *types.CommonEntityData {
    sendInfo.EntityData.YFilter = sendInfo.YFilter
    sendInfo.EntityData.YangName = "send-info"
    sendInfo.EntityData.BundleName = "cisco_ios_xr"
    sendInfo.EntityData.ParentYangName = "direction-info"
    sendInfo.EntityData.SegmentPath = "send-info"
    sendInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/direction-info/" + sendInfo.EntityData.SegmentPath
    sendInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendInfo.EntityData.Children = types.NewOrderedMap()
    sendInfo.EntityData.Children.Append("counters", types.YChild{"Counters", &sendInfo.Counters})
    sendInfo.EntityData.Leafs = types.NewOrderedMap()
    sendInfo.EntityData.Leafs.Append("sequence", types.YLeaf{"Sequence", sendInfo.Sequence})

    sendInfo.EntityData.YListKeys = []string {}

    return &(sendInfo.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters
// Counters
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Messages sent. The type is interface{} with range: 0..4294967295.
    AuthenticationSent interface{}

    // Failures. The type is interface{} with range: 0..4294967295.
    AuthenticationFailures interface{}

    // Challenges received. The type is interface{} with range: 0..4294967295.
    AuthenticationSendChallengesReceived interface{}

    // Challenge responses sent. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationChallengeResponsesSent interface{}
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_SendInfo_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "send-info"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/direction-info/send-info/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("authentication-sent", types.YLeaf{"AuthenticationSent", counters.AuthenticationSent})
    counters.EntityData.Leafs.Append("authentication-failures", types.YLeaf{"AuthenticationFailures", counters.AuthenticationFailures})
    counters.EntityData.Leafs.Append("authentication-send-challenges-received", types.YLeaf{"AuthenticationSendChallengesReceived", counters.AuthenticationSendChallengesReceived})
    counters.EntityData.Leafs.Append("authentication-challenge-responses-sent", types.YLeaf{"AuthenticationChallengeResponsesSent", counters.AuthenticationChallengeResponsesSent})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo
// receive info
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sequence number. The type is interface{} with range:
    // 0..18446744073709551615.
    Sequence interface{}

    // Sequence window size. The type is interface{} with range: 0..4294967295.
    SequenceWindowSize interface{}

    // Sequence window count. The type is interface{} with range: 0..4294967295.
    SequenceWindowCount interface{}

    // Counters.
    Counters Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters

    // Sequence window. The type is slice of
    // Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow.
    SequenceWindow []*Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow
}

func (receiveInfo *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo) GetEntityData() *types.CommonEntityData {
    receiveInfo.EntityData.YFilter = receiveInfo.YFilter
    receiveInfo.EntityData.YangName = "receive-info"
    receiveInfo.EntityData.BundleName = "cisco_ios_xr"
    receiveInfo.EntityData.ParentYangName = "direction-info"
    receiveInfo.EntityData.SegmentPath = "receive-info"
    receiveInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/direction-info/" + receiveInfo.EntityData.SegmentPath
    receiveInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveInfo.EntityData.Children = types.NewOrderedMap()
    receiveInfo.EntityData.Children.Append("counters", types.YChild{"Counters", &receiveInfo.Counters})
    receiveInfo.EntityData.Children.Append("sequence-window", types.YChild{"SequenceWindow", nil})
    for i := range receiveInfo.SequenceWindow {
        types.SetYListKey(receiveInfo.SequenceWindow[i], i)
        receiveInfo.EntityData.Children.Append(types.GetSegmentPath(receiveInfo.SequenceWindow[i]), types.YChild{"SequenceWindow", receiveInfo.SequenceWindow[i]})
    }
    receiveInfo.EntityData.Leafs = types.NewOrderedMap()
    receiveInfo.EntityData.Leafs.Append("sequence", types.YLeaf{"Sequence", receiveInfo.Sequence})
    receiveInfo.EntityData.Leafs.Append("sequence-window-size", types.YLeaf{"SequenceWindowSize", receiveInfo.SequenceWindowSize})
    receiveInfo.EntityData.Leafs.Append("sequence-window-count", types.YLeaf{"SequenceWindowCount", receiveInfo.SequenceWindowCount})

    receiveInfo.EntityData.YListKeys = []string {}

    return &(receiveInfo.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters
// Counters
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Valid messages. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedValidMessages interface{}

    // Challenges sent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesSent interface{}

    // Challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengeResponse interface{}

    // Challenges resent. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengesResent interface{}

    // Challenge timeouts. The type is interface{} with range: 0..4294967295.
    AuthenticationReceivedChallengeTimeouts interface{}

    // Authentication received during challenge. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedDuringChallenge interface{}

    // Authentication received incomplete. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedIncomplete interface{}

    // Authentication received with no integrity. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedNoIntegrity interface{}

    // Authentication received with bad digest. The type is interface{} with
    // range: 0..4294967295.
    AuthenticationReceivedBadDigest interface{}

    // Authentication received with wrong digest type. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedWrongDigestType interface{}

    // Authentication received with duplicate sequence number. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberDuplicate interface{}

    // Authentication received with sequence number out of range. The type is
    // interface{} with range: 0..4294967295.
    AuthenticationReceivedSequenceNumberOutofRange interface{}

    // Incorect challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedWrongChallengesResponse interface{}

    // Duplicate challenge responses received. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedChallengesResponseDuplicate interface{}

    // Challenge responses received late. The type is interface{} with range:
    // 0..4294967295.
    AuthenticationReceivedResponseLate interface{}

    // Authentication received with bad mesage format. The type is interface{}
    // with range: 0..4294967295.
    AuthenticationReceivedBadMessageFormat interface{}
}

func (counters *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "receive-info"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/direction-info/receive-info/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Leafs = types.NewOrderedMap()
    counters.EntityData.Leafs.Append("authentication-received-valid-messages", types.YLeaf{"AuthenticationReceivedValidMessages", counters.AuthenticationReceivedValidMessages})
    counters.EntityData.Leafs.Append("authentication-received-challenges-sent", types.YLeaf{"AuthenticationReceivedChallengesSent", counters.AuthenticationReceivedChallengesSent})
    counters.EntityData.Leafs.Append("authentication-received-challenge-response", types.YLeaf{"AuthenticationReceivedChallengeResponse", counters.AuthenticationReceivedChallengeResponse})
    counters.EntityData.Leafs.Append("authentication-received-challenges-resent", types.YLeaf{"AuthenticationReceivedChallengesResent", counters.AuthenticationReceivedChallengesResent})
    counters.EntityData.Leafs.Append("authentication-received-challenge-timeouts", types.YLeaf{"AuthenticationReceivedChallengeTimeouts", counters.AuthenticationReceivedChallengeTimeouts})
    counters.EntityData.Leafs.Append("authentication-received-during-challenge", types.YLeaf{"AuthenticationReceivedDuringChallenge", counters.AuthenticationReceivedDuringChallenge})
    counters.EntityData.Leafs.Append("authentication-received-incomplete", types.YLeaf{"AuthenticationReceivedIncomplete", counters.AuthenticationReceivedIncomplete})
    counters.EntityData.Leafs.Append("authentication-received-no-integrity", types.YLeaf{"AuthenticationReceivedNoIntegrity", counters.AuthenticationReceivedNoIntegrity})
    counters.EntityData.Leafs.Append("authentication-received-bad-digest", types.YLeaf{"AuthenticationReceivedBadDigest", counters.AuthenticationReceivedBadDigest})
    counters.EntityData.Leafs.Append("authentication-received-wrong-digest-type", types.YLeaf{"AuthenticationReceivedWrongDigestType", counters.AuthenticationReceivedWrongDigestType})
    counters.EntityData.Leafs.Append("authentication-received-sequence-number-duplicate", types.YLeaf{"AuthenticationReceivedSequenceNumberDuplicate", counters.AuthenticationReceivedSequenceNumberDuplicate})
    counters.EntityData.Leafs.Append("authentication-received-sequence-number-outof-range", types.YLeaf{"AuthenticationReceivedSequenceNumberOutofRange", counters.AuthenticationReceivedSequenceNumberOutofRange})
    counters.EntityData.Leafs.Append("authentication-received-wrong-challenges-response", types.YLeaf{"AuthenticationReceivedWrongChallengesResponse", counters.AuthenticationReceivedWrongChallengesResponse})
    counters.EntityData.Leafs.Append("authentication-received-challenges-response-duplicate", types.YLeaf{"AuthenticationReceivedChallengesResponseDuplicate", counters.AuthenticationReceivedChallengesResponseDuplicate})
    counters.EntityData.Leafs.Append("authentication-received-response-late", types.YLeaf{"AuthenticationReceivedResponseLate", counters.AuthenticationReceivedResponseLate})
    counters.EntityData.Leafs.Append("authentication-received-bad-message-format", types.YLeaf{"AuthenticationReceivedBadMessageFormat", counters.AuthenticationReceivedBadMessageFormat})

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow
// Sequence window
type Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Sequence window. The type is interface{} with range:
    // 0..18446744073709551615.
    Entry interface{}
}

func (sequenceWindow *Rsvp_AuthenticationDetails_AuthenticationDetail_DirectionInfo_ReceiveInfo_SequenceWindow) GetEntityData() *types.CommonEntityData {
    sequenceWindow.EntityData.YFilter = sequenceWindow.YFilter
    sequenceWindow.EntityData.YangName = "sequence-window"
    sequenceWindow.EntityData.BundleName = "cisco_ios_xr"
    sequenceWindow.EntityData.ParentYangName = "receive-info"
    sequenceWindow.EntityData.SegmentPath = "sequence-window" + types.AddNoKeyToken(sequenceWindow)
    sequenceWindow.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/authentication-details/authentication-detail/direction-info/receive-info/" + sequenceWindow.EntityData.SegmentPath
    sequenceWindow.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sequenceWindow.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sequenceWindow.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sequenceWindow.EntityData.Children = types.NewOrderedMap()
    sequenceWindow.EntityData.Leafs = types.NewOrderedMap()
    sequenceWindow.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", sequenceWindow.Entry})

    sequenceWindow.EntityData.YListKeys = []string {}

    return &(sequenceWindow.EntityData)
}

// Rsvp_RsbBriefs
// Table of brief info about reservation state
// blocks
type Rsvp_RsbBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single reservation state block. The type is slice of
    // Rsvp_RsbBriefs_RsbBrief.
    RsbBrief []*Rsvp_RsbBriefs_RsbBrief
}

func (rsbBriefs *Rsvp_RsbBriefs) GetEntityData() *types.CommonEntityData {
    rsbBriefs.EntityData.YFilter = rsbBriefs.YFilter
    rsbBriefs.EntityData.YangName = "rsb-briefs"
    rsbBriefs.EntityData.BundleName = "cisco_ios_xr"
    rsbBriefs.EntityData.ParentYangName = "rsvp"
    rsbBriefs.EntityData.SegmentPath = "rsb-briefs"
    rsbBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + rsbBriefs.EntityData.SegmentPath
    rsbBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbBriefs.EntityData.Children = types.NewOrderedMap()
    rsbBriefs.EntityData.Children.Append("rsb-brief", types.YChild{"RsbBrief", nil})
    for i := range rsbBriefs.RsbBrief {
        types.SetYListKey(rsbBriefs.RsbBrief[i], i)
        rsbBriefs.EntityData.Children.Append(types.GetSegmentPath(rsbBriefs.RsbBrief[i]), types.YChild{"RsbBrief", rsbBriefs.RsbBrief[i]})
    }
    rsbBriefs.EntityData.Leafs = types.NewOrderedMap()

    rsbBriefs.EntityData.YListKeys = []string {}

    return &(rsbBriefs.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief
// Brief info for a single reservation state block
type Rsvp_RsbBriefs_RsbBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Reservation Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_RsbBriefs_RsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_RsbBriefs_RsbBrief_S2lSubLsp

    // Flow Spec Information.
    FlowSpec Rsvp_RsbBriefs_RsbBrief_FlowSpec

    // Generic Flow Spec Info.
    GenericFlowSpec Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec

    // RSVP Style.
    Style Rsvp_RsbBriefs_RsbBrief_Style

    // RSVP Filter.
    Filter Rsvp_RsbBriefs_RsbBrief_Filter
}

func (rsbBrief *Rsvp_RsbBriefs_RsbBrief) GetEntityData() *types.CommonEntityData {
    rsbBrief.EntityData.YFilter = rsbBrief.YFilter
    rsbBrief.EntityData.YangName = "rsb-brief"
    rsbBrief.EntityData.BundleName = "cisco_ios_xr"
    rsbBrief.EntityData.ParentYangName = "rsb-briefs"
    rsbBrief.EntityData.SegmentPath = "rsb-brief" + types.AddNoKeyToken(rsbBrief)
    rsbBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/" + rsbBrief.EntityData.SegmentPath
    rsbBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbBrief.EntityData.Children = types.NewOrderedMap()
    rsbBrief.EntityData.Children.Append("session", types.YChild{"Session", &rsbBrief.Session})
    rsbBrief.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &rsbBrief.S2lSubLsp})
    rsbBrief.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rsbBrief.FlowSpec})
    rsbBrief.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rsbBrief.GenericFlowSpec})
    rsbBrief.EntityData.Children.Append("style", types.YChild{"Style", &rsbBrief.Style})
    rsbBrief.EntityData.Children.Append("filter", types.YChild{"Filter", &rsbBrief.Filter})
    rsbBrief.EntityData.Leafs = types.NewOrderedMap()
    rsbBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbBrief.DestinationAddress})
    rsbBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", rsbBrief.DestinationPort})
    rsbBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rsbBrief.Protocol})
    rsbBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rsbBrief.ExtendedTunnelId})
    rsbBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsbBrief.SessionType})
    rsbBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rsbBrief.P2mpId})
    rsbBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rsbBrief.SourceAddress})
    rsbBrief.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", rsbBrief.SourcePort})
    rsbBrief.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", rsbBrief.SubGroupOrigin})
    rsbBrief.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rsbBrief.SubGroupId})
    rsbBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", rsbBrief.VrfName})
    rsbBrief.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", rsbBrief.InputInterface})

    rsbBrief.EntityData.YListKeys = []string {}

    return &(rsbBrief.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Session
// RSVP Session Information
type Rsvp_RsbBriefs_RsbBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession
}

func (session *Rsvp_RsbBriefs_RsbBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "rsb-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession
// RSVP Session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_RsbBriefs_RsbBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RsbBriefs_RsbBrief_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_RsbBriefs_RsbBrief_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "rsb-brief"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_FlowSpec
// Flow Spec Information
type Rsvp_RsbBriefs_RsbBrief_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RsbBriefs_RsbBrief_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rsb-brief"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec
// Generic Flow Spec Info
type Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rsb-brief"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *Rsvp_RsbBriefs_RsbBrief_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Style
// RSVP Style
type Rsvp_RsbBriefs_RsbBrief_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RsbBriefs_RsbBrief_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "rsb-brief"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Filter
// RSVP Filter
type Rsvp_RsbBriefs_RsbBrief_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter
}

func (filter *Rsvp_RsbBriefs_RsbBrief_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "rsb-brief"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_RsbBriefs_RsbBrief_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/rsb-briefs/rsb-brief/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_Counters
// Counters
type Rsvp_Counters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Table of message counters.
    InterfaceMessages Rsvp_Counters_InterfaceMessages

    // Summary information for all RSVP message counters.
    MessageSummary Rsvp_Counters_MessageSummary

    // Prefix filtering counters.
    PrefixFiltering Rsvp_Counters_PrefixFiltering

    // Out of resource counters.
    OutOfResource Rsvp_Counters_OutOfResource

    // Event counters.
    InterfaceEvents Rsvp_Counters_InterfaceEvents

    // Summary information for all RSVP NSR counters.
    Nsr Rsvp_Counters_Nsr

    // Summary information for all RSVP ISSU counters.
    Issu Rsvp_Counters_Issu

    // Summary information for all RSVP database counters.
    Database Rsvp_Counters_Database

    // Table containing event sync counters.
    EventSyncs Rsvp_Counters_EventSyncs
}

func (counters *Rsvp_Counters) GetEntityData() *types.CommonEntityData {
    counters.EntityData.YFilter = counters.YFilter
    counters.EntityData.YangName = "counters"
    counters.EntityData.BundleName = "cisco_ios_xr"
    counters.EntityData.ParentYangName = "rsvp"
    counters.EntityData.SegmentPath = "counters"
    counters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + counters.EntityData.SegmentPath
    counters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    counters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    counters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    counters.EntityData.Children = types.NewOrderedMap()
    counters.EntityData.Children.Append("interface-messages", types.YChild{"InterfaceMessages", &counters.InterfaceMessages})
    counters.EntityData.Children.Append("message-summary", types.YChild{"MessageSummary", &counters.MessageSummary})
    counters.EntityData.Children.Append("prefix-filtering", types.YChild{"PrefixFiltering", &counters.PrefixFiltering})
    counters.EntityData.Children.Append("out-of-resource", types.YChild{"OutOfResource", &counters.OutOfResource})
    counters.EntityData.Children.Append("interface-events", types.YChild{"InterfaceEvents", &counters.InterfaceEvents})
    counters.EntityData.Children.Append("nsr", types.YChild{"Nsr", &counters.Nsr})
    counters.EntityData.Children.Append("issu", types.YChild{"Issu", &counters.Issu})
    counters.EntityData.Children.Append("database", types.YChild{"Database", &counters.Database})
    counters.EntityData.Children.Append("event-syncs", types.YChild{"EventSyncs", &counters.EventSyncs})
    counters.EntityData.Leafs = types.NewOrderedMap()

    counters.EntityData.YListKeys = []string {}

    return &(counters.EntityData)
}

// Rsvp_Counters_InterfaceMessages
// Table of message counters
type Rsvp_Counters_InterfaceMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface message counters. The type is slice of
    // Rsvp_Counters_InterfaceMessages_InterfaceMessage.
    InterfaceMessage []*Rsvp_Counters_InterfaceMessages_InterfaceMessage
}

func (interfaceMessages *Rsvp_Counters_InterfaceMessages) GetEntityData() *types.CommonEntityData {
    interfaceMessages.EntityData.YFilter = interfaceMessages.YFilter
    interfaceMessages.EntityData.YangName = "interface-messages"
    interfaceMessages.EntityData.BundleName = "cisco_ios_xr"
    interfaceMessages.EntityData.ParentYangName = "counters"
    interfaceMessages.EntityData.SegmentPath = "interface-messages"
    interfaceMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + interfaceMessages.EntityData.SegmentPath
    interfaceMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMessages.EntityData.Children = types.NewOrderedMap()
    interfaceMessages.EntityData.Children.Append("interface-message", types.YChild{"InterfaceMessage", nil})
    for i := range interfaceMessages.InterfaceMessage {
        interfaceMessages.EntityData.Children.Append(types.GetSegmentPath(interfaceMessages.InterfaceMessage[i]), types.YChild{"InterfaceMessage", interfaceMessages.InterfaceMessage[i]})
    }
    interfaceMessages.EntityData.Leafs = types.NewOrderedMap()

    interfaceMessages.EntityData.YListKeys = []string {}

    return &(interfaceMessages.EntityData)
}

// Rsvp_Counters_InterfaceMessages_InterfaceMessage
// Interface message counters
type Rsvp_Counters_InterfaceMessages_InterfaceMessage struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
}

func (interfaceMessage *Rsvp_Counters_InterfaceMessages_InterfaceMessage) GetEntityData() *types.CommonEntityData {
    interfaceMessage.EntityData.YFilter = interfaceMessage.YFilter
    interfaceMessage.EntityData.YangName = "interface-message"
    interfaceMessage.EntityData.BundleName = "cisco_ios_xr"
    interfaceMessage.EntityData.ParentYangName = "interface-messages"
    interfaceMessage.EntityData.SegmentPath = "interface-message" + types.AddKeyToken(interfaceMessage.InterfaceName, "interface-name")
    interfaceMessage.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/" + interfaceMessage.EntityData.SegmentPath
    interfaceMessage.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceMessage.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceMessage.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceMessage.EntityData.Children = types.NewOrderedMap()
    interfaceMessage.EntityData.Children.Append("received-messages", types.YChild{"ReceivedMessages", &interfaceMessage.ReceivedMessages})
    interfaceMessage.EntityData.Children.Append("transmitted-messages", types.YChild{"TransmittedMessages", &interfaceMessage.TransmittedMessages})
    interfaceMessage.EntityData.Children.Append("bundle-received-messages", types.YChild{"BundleReceivedMessages", &interfaceMessage.BundleReceivedMessages})
    interfaceMessage.EntityData.Children.Append("bundle-transmitted-messages", types.YChild{"BundleTransmittedMessages", &interfaceMessage.BundleTransmittedMessages})
    interfaceMessage.EntityData.Leafs = types.NewOrderedMap()
    interfaceMessage.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceMessage.InterfaceName})
    interfaceMessage.EntityData.Leafs.Append("retransmitted-messages", types.YLeaf{"RetransmittedMessages", interfaceMessage.RetransmittedMessages})
    interfaceMessage.EntityData.Leafs.Append("out-of-order-messages", types.YLeaf{"OutOfOrderMessages", interfaceMessage.OutOfOrderMessages})
    interfaceMessage.EntityData.Leafs.Append("rate-limited-messages", types.YLeaf{"RateLimitedMessages", interfaceMessage.RateLimitedMessages})

    interfaceMessage.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceMessage.EntityData)
}

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages
// Count of messages received
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_ReceivedMessages) GetEntityData() *types.CommonEntityData {
    receivedMessages.EntityData.YFilter = receivedMessages.YFilter
    receivedMessages.EntityData.YangName = "received-messages"
    receivedMessages.EntityData.BundleName = "cisco_ios_xr"
    receivedMessages.EntityData.ParentYangName = "interface-message"
    receivedMessages.EntityData.SegmentPath = "received-messages"
    receivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/interface-message/" + receivedMessages.EntityData.SegmentPath
    receivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedMessages.EntityData.Children = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", receivedMessages.Path})
    receivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", receivedMessages.Reservation})
    receivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", receivedMessages.PathError})
    receivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", receivedMessages.ReservationError})
    receivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", receivedMessages.PathTear})
    receivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", receivedMessages.ReservationTear})
    receivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", receivedMessages.ReservationConfirm})
    receivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", receivedMessages.Bundle})
    receivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", receivedMessages.Ack})
    receivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", receivedMessages.Srefresh})
    receivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", receivedMessages.Hello})
    receivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", receivedMessages.Challenge})
    receivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", receivedMessages.Response})

    receivedMessages.EntityData.YListKeys = []string {}

    return &(receivedMessages.EntityData)
}

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages
// Count of messages transmitted
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_TransmittedMessages) GetEntityData() *types.CommonEntityData {
    transmittedMessages.EntityData.YFilter = transmittedMessages.YFilter
    transmittedMessages.EntityData.YangName = "transmitted-messages"
    transmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    transmittedMessages.EntityData.ParentYangName = "interface-message"
    transmittedMessages.EntityData.SegmentPath = "transmitted-messages"
    transmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/interface-message/" + transmittedMessages.EntityData.SegmentPath
    transmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmittedMessages.EntityData.Children = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", transmittedMessages.Path})
    transmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", transmittedMessages.Reservation})
    transmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", transmittedMessages.PathError})
    transmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", transmittedMessages.ReservationError})
    transmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", transmittedMessages.PathTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", transmittedMessages.ReservationTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", transmittedMessages.ReservationConfirm})
    transmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", transmittedMessages.Bundle})
    transmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", transmittedMessages.Ack})
    transmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", transmittedMessages.Srefresh})
    transmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", transmittedMessages.Hello})
    transmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", transmittedMessages.Challenge})
    transmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", transmittedMessages.Response})

    transmittedMessages.EntityData.YListKeys = []string {}

    return &(transmittedMessages.EntityData)
}

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages
// Count of Bundle messages received
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleReceivedMessages) GetEntityData() *types.CommonEntityData {
    bundleReceivedMessages.EntityData.YFilter = bundleReceivedMessages.YFilter
    bundleReceivedMessages.EntityData.YangName = "bundle-received-messages"
    bundleReceivedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleReceivedMessages.EntityData.ParentYangName = "interface-message"
    bundleReceivedMessages.EntityData.SegmentPath = "bundle-received-messages"
    bundleReceivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/interface-message/" + bundleReceivedMessages.EntityData.SegmentPath
    bundleReceivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleReceivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleReceivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleReceivedMessages.EntityData.Children = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleReceivedMessages.Path})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleReceivedMessages.Reservation})
    bundleReceivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleReceivedMessages.PathError})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleReceivedMessages.ReservationError})
    bundleReceivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleReceivedMessages.PathTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleReceivedMessages.ReservationTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleReceivedMessages.ReservationConfirm})
    bundleReceivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleReceivedMessages.Bundle})
    bundleReceivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleReceivedMessages.Ack})
    bundleReceivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleReceivedMessages.Srefresh})
    bundleReceivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleReceivedMessages.Hello})
    bundleReceivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleReceivedMessages.Challenge})
    bundleReceivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleReceivedMessages.Response})

    bundleReceivedMessages.EntityData.YListKeys = []string {}

    return &(bundleReceivedMessages.EntityData)
}

// Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages
// Count of Bundle messages transmitted
type Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *Rsvp_Counters_InterfaceMessages_InterfaceMessage_BundleTransmittedMessages) GetEntityData() *types.CommonEntityData {
    bundleTransmittedMessages.EntityData.YFilter = bundleTransmittedMessages.YFilter
    bundleTransmittedMessages.EntityData.YangName = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleTransmittedMessages.EntityData.ParentYangName = "interface-message"
    bundleTransmittedMessages.EntityData.SegmentPath = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-messages/interface-message/" + bundleTransmittedMessages.EntityData.SegmentPath
    bundleTransmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleTransmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleTransmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleTransmittedMessages.EntityData.Children = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleTransmittedMessages.Path})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleTransmittedMessages.Reservation})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleTransmittedMessages.PathError})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleTransmittedMessages.ReservationError})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleTransmittedMessages.PathTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleTransmittedMessages.ReservationTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleTransmittedMessages.ReservationConfirm})
    bundleTransmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleTransmittedMessages.Bundle})
    bundleTransmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleTransmittedMessages.Ack})
    bundleTransmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleTransmittedMessages.Srefresh})
    bundleTransmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleTransmittedMessages.Hello})
    bundleTransmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleTransmittedMessages.Challenge})
    bundleTransmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleTransmittedMessages.Response})

    bundleTransmittedMessages.EntityData.YListKeys = []string {}

    return &(bundleTransmittedMessages.EntityData)
}

// Rsvp_Counters_MessageSummary
// Summary information for all RSVP message
// counters
type Rsvp_Counters_MessageSummary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of messages retransmitted. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}

    // Count of Out of Order messages. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Count of Rate Limited messages. The type is interface{} with range:
    // 0..4294967295.
    RateLimitedMessages interface{}

    // Count of messages received.
    ReceivedMessages Rsvp_Counters_MessageSummary_ReceivedMessages

    // Count of messages transmitted.
    TransmittedMessages Rsvp_Counters_MessageSummary_TransmittedMessages

    // Count of Bundle messages received.
    BundleReceivedMessages Rsvp_Counters_MessageSummary_BundleReceivedMessages

    // Count of Bundle messages transmitted.
    BundleTransmittedMessages Rsvp_Counters_MessageSummary_BundleTransmittedMessages
}

func (messageSummary *Rsvp_Counters_MessageSummary) GetEntityData() *types.CommonEntityData {
    messageSummary.EntityData.YFilter = messageSummary.YFilter
    messageSummary.EntityData.YangName = "message-summary"
    messageSummary.EntityData.BundleName = "cisco_ios_xr"
    messageSummary.EntityData.ParentYangName = "counters"
    messageSummary.EntityData.SegmentPath = "message-summary"
    messageSummary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + messageSummary.EntityData.SegmentPath
    messageSummary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    messageSummary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    messageSummary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    messageSummary.EntityData.Children = types.NewOrderedMap()
    messageSummary.EntityData.Children.Append("received-messages", types.YChild{"ReceivedMessages", &messageSummary.ReceivedMessages})
    messageSummary.EntityData.Children.Append("transmitted-messages", types.YChild{"TransmittedMessages", &messageSummary.TransmittedMessages})
    messageSummary.EntityData.Children.Append("bundle-received-messages", types.YChild{"BundleReceivedMessages", &messageSummary.BundleReceivedMessages})
    messageSummary.EntityData.Children.Append("bundle-transmitted-messages", types.YChild{"BundleTransmittedMessages", &messageSummary.BundleTransmittedMessages})
    messageSummary.EntityData.Leafs = types.NewOrderedMap()
    messageSummary.EntityData.Leafs.Append("retransmitted-messages", types.YLeaf{"RetransmittedMessages", messageSummary.RetransmittedMessages})
    messageSummary.EntityData.Leafs.Append("out-of-order-messages", types.YLeaf{"OutOfOrderMessages", messageSummary.OutOfOrderMessages})
    messageSummary.EntityData.Leafs.Append("rate-limited-messages", types.YLeaf{"RateLimitedMessages", messageSummary.RateLimitedMessages})

    messageSummary.EntityData.YListKeys = []string {}

    return &(messageSummary.EntityData)
}

// Rsvp_Counters_MessageSummary_ReceivedMessages
// Count of messages received
type Rsvp_Counters_MessageSummary_ReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (receivedMessages *Rsvp_Counters_MessageSummary_ReceivedMessages) GetEntityData() *types.CommonEntityData {
    receivedMessages.EntityData.YFilter = receivedMessages.YFilter
    receivedMessages.EntityData.YangName = "received-messages"
    receivedMessages.EntityData.BundleName = "cisco_ios_xr"
    receivedMessages.EntityData.ParentYangName = "message-summary"
    receivedMessages.EntityData.SegmentPath = "received-messages"
    receivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" + receivedMessages.EntityData.SegmentPath
    receivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receivedMessages.EntityData.Children = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs = types.NewOrderedMap()
    receivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", receivedMessages.Path})
    receivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", receivedMessages.Reservation})
    receivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", receivedMessages.PathError})
    receivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", receivedMessages.ReservationError})
    receivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", receivedMessages.PathTear})
    receivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", receivedMessages.ReservationTear})
    receivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", receivedMessages.ReservationConfirm})
    receivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", receivedMessages.Bundle})
    receivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", receivedMessages.Ack})
    receivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", receivedMessages.Srefresh})
    receivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", receivedMessages.Hello})
    receivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", receivedMessages.Challenge})
    receivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", receivedMessages.Response})

    receivedMessages.EntityData.YListKeys = []string {}

    return &(receivedMessages.EntityData)
}

// Rsvp_Counters_MessageSummary_TransmittedMessages
// Count of messages transmitted
type Rsvp_Counters_MessageSummary_TransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (transmittedMessages *Rsvp_Counters_MessageSummary_TransmittedMessages) GetEntityData() *types.CommonEntityData {
    transmittedMessages.EntityData.YFilter = transmittedMessages.YFilter
    transmittedMessages.EntityData.YangName = "transmitted-messages"
    transmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    transmittedMessages.EntityData.ParentYangName = "message-summary"
    transmittedMessages.EntityData.SegmentPath = "transmitted-messages"
    transmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" + transmittedMessages.EntityData.SegmentPath
    transmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transmittedMessages.EntityData.Children = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    transmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", transmittedMessages.Path})
    transmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", transmittedMessages.Reservation})
    transmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", transmittedMessages.PathError})
    transmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", transmittedMessages.ReservationError})
    transmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", transmittedMessages.PathTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", transmittedMessages.ReservationTear})
    transmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", transmittedMessages.ReservationConfirm})
    transmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", transmittedMessages.Bundle})
    transmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", transmittedMessages.Ack})
    transmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", transmittedMessages.Srefresh})
    transmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", transmittedMessages.Hello})
    transmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", transmittedMessages.Challenge})
    transmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", transmittedMessages.Response})

    transmittedMessages.EntityData.YListKeys = []string {}

    return &(transmittedMessages.EntityData)
}

// Rsvp_Counters_MessageSummary_BundleReceivedMessages
// Count of Bundle messages received
type Rsvp_Counters_MessageSummary_BundleReceivedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleReceivedMessages *Rsvp_Counters_MessageSummary_BundleReceivedMessages) GetEntityData() *types.CommonEntityData {
    bundleReceivedMessages.EntityData.YFilter = bundleReceivedMessages.YFilter
    bundleReceivedMessages.EntityData.YangName = "bundle-received-messages"
    bundleReceivedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleReceivedMessages.EntityData.ParentYangName = "message-summary"
    bundleReceivedMessages.EntityData.SegmentPath = "bundle-received-messages"
    bundleReceivedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" + bundleReceivedMessages.EntityData.SegmentPath
    bundleReceivedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleReceivedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleReceivedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleReceivedMessages.EntityData.Children = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleReceivedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleReceivedMessages.Path})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleReceivedMessages.Reservation})
    bundleReceivedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleReceivedMessages.PathError})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleReceivedMessages.ReservationError})
    bundleReceivedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleReceivedMessages.PathTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleReceivedMessages.ReservationTear})
    bundleReceivedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleReceivedMessages.ReservationConfirm})
    bundleReceivedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleReceivedMessages.Bundle})
    bundleReceivedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleReceivedMessages.Ack})
    bundleReceivedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleReceivedMessages.Srefresh})
    bundleReceivedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleReceivedMessages.Hello})
    bundleReceivedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleReceivedMessages.Challenge})
    bundleReceivedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleReceivedMessages.Response})

    bundleReceivedMessages.EntityData.YListKeys = []string {}

    return &(bundleReceivedMessages.EntityData)
}

// Rsvp_Counters_MessageSummary_BundleTransmittedMessages
// Count of Bundle messages transmitted
type Rsvp_Counters_MessageSummary_BundleTransmittedMessages struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of Reservation messages. The type is interface{} with range:
    // 0..4294967295.
    Reservation interface{}

    // Count of PathError messages. The type is interface{} with range:
    // 0..4294967295.
    PathError interface{}

    // Count of ReservationError messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationError interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationTear messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Count of Bundle messages. The type is interface{} with range:
    // 0..4294967295.
    Bundle interface{}

    // Count of ACK messages. The type is interface{} with range: 0..4294967295.
    Ack interface{}

    // Count of Srefresh messages. The type is interface{} with range:
    // 0..4294967295.
    Srefresh interface{}

    // Count of Hello messages. The type is interface{} with range: 0..4294967295.
    Hello interface{}

    // Count of Integrity Challenge messages. The type is interface{} with range:
    // 0..4294967295.
    Challenge interface{}

    // Count of Integrity Response messages. The type is interface{} with range:
    // 0..4294967295.
    Response interface{}
}

func (bundleTransmittedMessages *Rsvp_Counters_MessageSummary_BundleTransmittedMessages) GetEntityData() *types.CommonEntityData {
    bundleTransmittedMessages.EntityData.YFilter = bundleTransmittedMessages.YFilter
    bundleTransmittedMessages.EntityData.YangName = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.BundleName = "cisco_ios_xr"
    bundleTransmittedMessages.EntityData.ParentYangName = "message-summary"
    bundleTransmittedMessages.EntityData.SegmentPath = "bundle-transmitted-messages"
    bundleTransmittedMessages.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/message-summary/" + bundleTransmittedMessages.EntityData.SegmentPath
    bundleTransmittedMessages.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bundleTransmittedMessages.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bundleTransmittedMessages.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bundleTransmittedMessages.EntityData.Children = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs = types.NewOrderedMap()
    bundleTransmittedMessages.EntityData.Leafs.Append("path", types.YLeaf{"Path", bundleTransmittedMessages.Path})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation", types.YLeaf{"Reservation", bundleTransmittedMessages.Reservation})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-error", types.YLeaf{"PathError", bundleTransmittedMessages.PathError})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-error", types.YLeaf{"ReservationError", bundleTransmittedMessages.ReservationError})
    bundleTransmittedMessages.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", bundleTransmittedMessages.PathTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-tear", types.YLeaf{"ReservationTear", bundleTransmittedMessages.ReservationTear})
    bundleTransmittedMessages.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", bundleTransmittedMessages.ReservationConfirm})
    bundleTransmittedMessages.EntityData.Leafs.Append("bundle", types.YLeaf{"Bundle", bundleTransmittedMessages.Bundle})
    bundleTransmittedMessages.EntityData.Leafs.Append("ack", types.YLeaf{"Ack", bundleTransmittedMessages.Ack})
    bundleTransmittedMessages.EntityData.Leafs.Append("srefresh", types.YLeaf{"Srefresh", bundleTransmittedMessages.Srefresh})
    bundleTransmittedMessages.EntityData.Leafs.Append("hello", types.YLeaf{"Hello", bundleTransmittedMessages.Hello})
    bundleTransmittedMessages.EntityData.Leafs.Append("challenge", types.YLeaf{"Challenge", bundleTransmittedMessages.Challenge})
    bundleTransmittedMessages.EntityData.Leafs.Append("response", types.YLeaf{"Response", bundleTransmittedMessages.Response})

    bundleTransmittedMessages.EntityData.YListKeys = []string {}

    return &(bundleTransmittedMessages.EntityData)
}

// Rsvp_Counters_PrefixFiltering
// Prefix filtering counters
type Rsvp_Counters_PrefixFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AccessList specific prefix filtering counters.
    Accesses Rsvp_Counters_PrefixFiltering_Accesses

    // Interface specific prefix filtering counters.
    Interfaces Rsvp_Counters_PrefixFiltering_Interfaces
}

func (prefixFiltering *Rsvp_Counters_PrefixFiltering) GetEntityData() *types.CommonEntityData {
    prefixFiltering.EntityData.YFilter = prefixFiltering.YFilter
    prefixFiltering.EntityData.YangName = "prefix-filtering"
    prefixFiltering.EntityData.BundleName = "cisco_ios_xr"
    prefixFiltering.EntityData.ParentYangName = "counters"
    prefixFiltering.EntityData.SegmentPath = "prefix-filtering"
    prefixFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + prefixFiltering.EntityData.SegmentPath
    prefixFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    prefixFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    prefixFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    prefixFiltering.EntityData.Children = types.NewOrderedMap()
    prefixFiltering.EntityData.Children.Append("accesses", types.YChild{"Accesses", &prefixFiltering.Accesses})
    prefixFiltering.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &prefixFiltering.Interfaces})
    prefixFiltering.EntityData.Leafs = types.NewOrderedMap()

    prefixFiltering.EntityData.YListKeys = []string {}

    return &(prefixFiltering.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Accesses
// AccessList specific prefix filtering counters
type Rsvp_Counters_PrefixFiltering_Accesses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific AccessList. The type is slice of
    // Rsvp_Counters_PrefixFiltering_Accesses_Access.
    Access []*Rsvp_Counters_PrefixFiltering_Accesses_Access
}

func (accesses *Rsvp_Counters_PrefixFiltering_Accesses) GetEntityData() *types.CommonEntityData {
    accesses.EntityData.YFilter = accesses.YFilter
    accesses.EntityData.YangName = "accesses"
    accesses.EntityData.BundleName = "cisco_ios_xr"
    accesses.EntityData.ParentYangName = "prefix-filtering"
    accesses.EntityData.SegmentPath = "accesses"
    accesses.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/" + accesses.EntityData.SegmentPath
    accesses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    accesses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    accesses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    accesses.EntityData.Children = types.NewOrderedMap()
    accesses.EntityData.Children.Append("access", types.YChild{"Access", nil})
    for i := range accesses.Access {
        accesses.EntityData.Children.Append(types.GetSegmentPath(accesses.Access[i]), types.YChild{"Access", accesses.Access[i]})
    }
    accesses.EntityData.Leafs = types.NewOrderedMap()

    accesses.EntityData.YListKeys = []string {}

    return &(accesses.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Accesses_Access
// Prefix filtering counters for a specific
// AccessList
type Rsvp_Counters_PrefixFiltering_Accesses_Access struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. AccessList Name. The type is string with length:
    // 1..65.
    AccessListName interface{}

    // Count of messages which got forwarded.
    Forwarded Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded

    // Count of locally destined messages.
    LocallyDestined Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined

    // Count of messages dropped.
    Dropped Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped

    // Count of total messages.
    Total Rsvp_Counters_PrefixFiltering_Accesses_Access_Total
}

func (access *Rsvp_Counters_PrefixFiltering_Accesses_Access) GetEntityData() *types.CommonEntityData {
    access.EntityData.YFilter = access.YFilter
    access.EntityData.YangName = "access"
    access.EntityData.BundleName = "cisco_ios_xr"
    access.EntityData.ParentYangName = "accesses"
    access.EntityData.SegmentPath = "access" + types.AddKeyToken(access.AccessListName, "access-list-name")
    access.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/" + access.EntityData.SegmentPath
    access.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    access.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    access.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    access.EntityData.Children = types.NewOrderedMap()
    access.EntityData.Children.Append("forwarded", types.YChild{"Forwarded", &access.Forwarded})
    access.EntityData.Children.Append("locally-destined", types.YChild{"LocallyDestined", &access.LocallyDestined})
    access.EntityData.Children.Append("dropped", types.YChild{"Dropped", &access.Dropped})
    access.EntityData.Children.Append("total", types.YChild{"Total", &access.Total})
    access.EntityData.Leafs = types.NewOrderedMap()
    access.EntityData.Leafs.Append("access-list-name", types.YLeaf{"AccessListName", access.AccessListName})

    access.EntityData.YListKeys = []string {"AccessListName"}

    return &(access.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded
// Count of messages which got forwarded
type Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Accesses_Access_Forwarded) GetEntityData() *types.CommonEntityData {
    forwarded.EntityData.YFilter = forwarded.YFilter
    forwarded.EntityData.YangName = "forwarded"
    forwarded.EntityData.BundleName = "cisco_ios_xr"
    forwarded.EntityData.ParentYangName = "access"
    forwarded.EntityData.SegmentPath = "forwarded"
    forwarded.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/access/" + forwarded.EntityData.SegmentPath
    forwarded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarded.EntityData.Children = types.NewOrderedMap()
    forwarded.EntityData.Leafs = types.NewOrderedMap()
    forwarded.EntityData.Leafs.Append("path", types.YLeaf{"Path", forwarded.Path})
    forwarded.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", forwarded.PathTear})
    forwarded.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", forwarded.ReservationConfirm})
    forwarded.EntityData.Leafs.Append("total", types.YLeaf{"Total", forwarded.Total})

    forwarded.EntityData.YListKeys = []string {}

    return &(forwarded.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined
// Count of locally destined messages
type Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Accesses_Access_LocallyDestined) GetEntityData() *types.CommonEntityData {
    locallyDestined.EntityData.YFilter = locallyDestined.YFilter
    locallyDestined.EntityData.YangName = "locally-destined"
    locallyDestined.EntityData.BundleName = "cisco_ios_xr"
    locallyDestined.EntityData.ParentYangName = "access"
    locallyDestined.EntityData.SegmentPath = "locally-destined"
    locallyDestined.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/access/" + locallyDestined.EntityData.SegmentPath
    locallyDestined.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locallyDestined.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locallyDestined.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locallyDestined.EntityData.Children = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs.Append("path", types.YLeaf{"Path", locallyDestined.Path})
    locallyDestined.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", locallyDestined.PathTear})
    locallyDestined.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", locallyDestined.ReservationConfirm})
    locallyDestined.EntityData.Leafs.Append("total", types.YLeaf{"Total", locallyDestined.Total})

    locallyDestined.EntityData.YListKeys = []string {}

    return &(locallyDestined.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped
// Count of messages dropped
type Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *Rsvp_Counters_PrefixFiltering_Accesses_Access_Dropped) GetEntityData() *types.CommonEntityData {
    dropped.EntityData.YFilter = dropped.YFilter
    dropped.EntityData.YangName = "dropped"
    dropped.EntityData.BundleName = "cisco_ios_xr"
    dropped.EntityData.ParentYangName = "access"
    dropped.EntityData.SegmentPath = "dropped"
    dropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/access/" + dropped.EntityData.SegmentPath
    dropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dropped.EntityData.Children = types.NewOrderedMap()
    dropped.EntityData.Leafs = types.NewOrderedMap()
    dropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", dropped.Path})
    dropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", dropped.PathTear})
    dropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", dropped.ReservationConfirm})
    dropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", dropped.Total})

    dropped.EntityData.YListKeys = []string {}

    return &(dropped.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Accesses_Access_Total
// Count of total messages
type Rsvp_Counters_PrefixFiltering_Accesses_Access_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *Rsvp_Counters_PrefixFiltering_Accesses_Access_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "access"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/accesses/access/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("path", types.YLeaf{"Path", total.Path})
    total.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", total.PathTear})
    total.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", total.ReservationConfirm})
    total.EntityData.Leafs.Append("total", types.YLeaf{"Total", total.Total})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces
// Interface specific prefix filtering counters
type Rsvp_Counters_PrefixFiltering_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary of prefix filtering counts for all interfaces.
    Summary Rsvp_Counters_PrefixFiltering_Interfaces_Summary

    // Table of interface specific prefix filtering counters.
    Interfaces Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "prefix-filtering"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("summary", types.YChild{"Summary", &interfaces.Summary})
    interfaces.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaces.Interfaces})
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary
// Summary of prefix filtering counts for all
// interfaces
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of messages which got forwarded.
    Forwarded Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded

    // Count of locally destined messages.
    LocallyDestined Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined

    // Count of messages dropped.
    Dropped Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed

    // Count of total messages.
    Total Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total
}

func (summary *Rsvp_Counters_PrefixFiltering_Interfaces_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "interfaces"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("forwarded", types.YChild{"Forwarded", &summary.Forwarded})
    summary.EntityData.Children.Append("locally-destined", types.YChild{"LocallyDestined", &summary.LocallyDestined})
    summary.EntityData.Children.Append("dropped", types.YChild{"Dropped", &summary.Dropped})
    summary.EntityData.Children.Append("default-action-dropped", types.YChild{"DefaultActionDropped", &summary.DefaultActionDropped})
    summary.EntityData.Children.Append("default-action-processed", types.YChild{"DefaultActionProcessed", &summary.DefaultActionProcessed})
    summary.EntityData.Children.Append("total", types.YChild{"Total", &summary.Total})
    summary.EntityData.Leafs = types.NewOrderedMap()

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded
// Count of messages which got forwarded
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Forwarded) GetEntityData() *types.CommonEntityData {
    forwarded.EntityData.YFilter = forwarded.YFilter
    forwarded.EntityData.YangName = "forwarded"
    forwarded.EntityData.BundleName = "cisco_ios_xr"
    forwarded.EntityData.ParentYangName = "summary"
    forwarded.EntityData.SegmentPath = "forwarded"
    forwarded.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" + forwarded.EntityData.SegmentPath
    forwarded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarded.EntityData.Children = types.NewOrderedMap()
    forwarded.EntityData.Leafs = types.NewOrderedMap()
    forwarded.EntityData.Leafs.Append("path", types.YLeaf{"Path", forwarded.Path})
    forwarded.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", forwarded.PathTear})
    forwarded.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", forwarded.ReservationConfirm})
    forwarded.EntityData.Leafs.Append("total", types.YLeaf{"Total", forwarded.Total})

    forwarded.EntityData.YListKeys = []string {}

    return &(forwarded.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined
// Count of locally destined messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_LocallyDestined) GetEntityData() *types.CommonEntityData {
    locallyDestined.EntityData.YFilter = locallyDestined.YFilter
    locallyDestined.EntityData.YangName = "locally-destined"
    locallyDestined.EntityData.BundleName = "cisco_ios_xr"
    locallyDestined.EntityData.ParentYangName = "summary"
    locallyDestined.EntityData.SegmentPath = "locally-destined"
    locallyDestined.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" + locallyDestined.EntityData.SegmentPath
    locallyDestined.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locallyDestined.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locallyDestined.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locallyDestined.EntityData.Children = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs.Append("path", types.YLeaf{"Path", locallyDestined.Path})
    locallyDestined.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", locallyDestined.PathTear})
    locallyDestined.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", locallyDestined.ReservationConfirm})
    locallyDestined.EntityData.Leafs.Append("total", types.YLeaf{"Total", locallyDestined.Total})

    locallyDestined.EntityData.YListKeys = []string {}

    return &(locallyDestined.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped
// Count of messages dropped
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Dropped) GetEntityData() *types.CommonEntityData {
    dropped.EntityData.YFilter = dropped.YFilter
    dropped.EntityData.YangName = "dropped"
    dropped.EntityData.BundleName = "cisco_ios_xr"
    dropped.EntityData.ParentYangName = "summary"
    dropped.EntityData.SegmentPath = "dropped"
    dropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" + dropped.EntityData.SegmentPath
    dropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dropped.EntityData.Children = types.NewOrderedMap()
    dropped.EntityData.Leafs = types.NewOrderedMap()
    dropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", dropped.Path})
    dropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", dropped.PathTear})
    dropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", dropped.ReservationConfirm})
    dropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", dropped.Total})

    dropped.EntityData.YListKeys = []string {}

    return &(dropped.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionDropped) GetEntityData() *types.CommonEntityData {
    defaultActionDropped.EntityData.YFilter = defaultActionDropped.YFilter
    defaultActionDropped.EntityData.YangName = "default-action-dropped"
    defaultActionDropped.EntityData.BundleName = "cisco_ios_xr"
    defaultActionDropped.EntityData.ParentYangName = "summary"
    defaultActionDropped.EntityData.SegmentPath = "default-action-dropped"
    defaultActionDropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" + defaultActionDropped.EntityData.SegmentPath
    defaultActionDropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionDropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionDropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionDropped.EntityData.Children = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionDropped.Path})
    defaultActionDropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionDropped.PathTear})
    defaultActionDropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionDropped.ReservationConfirm})
    defaultActionDropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionDropped.Total})

    defaultActionDropped.EntityData.YListKeys = []string {}

    return &(defaultActionDropped.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_DefaultActionProcessed) GetEntityData() *types.CommonEntityData {
    defaultActionProcessed.EntityData.YFilter = defaultActionProcessed.YFilter
    defaultActionProcessed.EntityData.YangName = "default-action-processed"
    defaultActionProcessed.EntityData.BundleName = "cisco_ios_xr"
    defaultActionProcessed.EntityData.ParentYangName = "summary"
    defaultActionProcessed.EntityData.SegmentPath = "default-action-processed"
    defaultActionProcessed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" + defaultActionProcessed.EntityData.SegmentPath
    defaultActionProcessed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionProcessed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionProcessed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionProcessed.EntityData.Children = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionProcessed.Path})
    defaultActionProcessed.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionProcessed.PathTear})
    defaultActionProcessed.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionProcessed.ReservationConfirm})
    defaultActionProcessed.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionProcessed.Total})

    defaultActionProcessed.EntityData.YListKeys = []string {}

    return &(defaultActionProcessed.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total
// Count of total messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Summary_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "summary"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/summary/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("path", types.YLeaf{"Path", total.Path})
    total.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", total.PathTear})
    total.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", total.ReservationConfirm})
    total.EntityData.Leafs.Append("total", types.YLeaf{"Total", total.Total})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces
// Table of interface specific prefix filtering
// counters
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Prefix filtering counters for a specific interface. The type is slice of
    // Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface.
    Interface []*Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
}

func (interfaces *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interfaces"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface
// Prefix filtering counters for a specific
// interface
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InterfaceName interface{}

    // Count of messages which got forwarded.
    Forwarded Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded

    // Count of locally destined messages.
    LocallyDestined Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined

    // Count of messages dropped.
    Dropped Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped

    // Count of messages which got dropped due to default ACL action.
    DefaultActionDropped Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped

    // Count of messages which were processed due to default ACL action.
    DefaultActionProcessed Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed

    // Count of total messages.
    Total Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
}

func (self *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Children.Append("forwarded", types.YChild{"Forwarded", &self.Forwarded})
    self.EntityData.Children.Append("locally-destined", types.YChild{"LocallyDestined", &self.LocallyDestined})
    self.EntityData.Children.Append("dropped", types.YChild{"Dropped", &self.Dropped})
    self.EntityData.Children.Append("default-action-dropped", types.YChild{"DefaultActionDropped", &self.DefaultActionDropped})
    self.EntityData.Children.Append("default-action-processed", types.YChild{"DefaultActionProcessed", &self.DefaultActionProcessed})
    self.EntityData.Children.Append("total", types.YChild{"Total", &self.Total})
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded
// Count of messages which got forwarded
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (forwarded *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Forwarded) GetEntityData() *types.CommonEntityData {
    forwarded.EntityData.YFilter = forwarded.YFilter
    forwarded.EntityData.YangName = "forwarded"
    forwarded.EntityData.BundleName = "cisco_ios_xr"
    forwarded.EntityData.ParentYangName = "interface"
    forwarded.EntityData.SegmentPath = "forwarded"
    forwarded.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/interface/" + forwarded.EntityData.SegmentPath
    forwarded.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    forwarded.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    forwarded.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    forwarded.EntityData.Children = types.NewOrderedMap()
    forwarded.EntityData.Leafs = types.NewOrderedMap()
    forwarded.EntityData.Leafs.Append("path", types.YLeaf{"Path", forwarded.Path})
    forwarded.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", forwarded.PathTear})
    forwarded.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", forwarded.ReservationConfirm})
    forwarded.EntityData.Leafs.Append("total", types.YLeaf{"Total", forwarded.Total})

    forwarded.EntityData.YListKeys = []string {}

    return &(forwarded.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined
// Count of locally destined messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (locallyDestined *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_LocallyDestined) GetEntityData() *types.CommonEntityData {
    locallyDestined.EntityData.YFilter = locallyDestined.YFilter
    locallyDestined.EntityData.YangName = "locally-destined"
    locallyDestined.EntityData.BundleName = "cisco_ios_xr"
    locallyDestined.EntityData.ParentYangName = "interface"
    locallyDestined.EntityData.SegmentPath = "locally-destined"
    locallyDestined.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/interface/" + locallyDestined.EntityData.SegmentPath
    locallyDestined.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    locallyDestined.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    locallyDestined.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    locallyDestined.EntityData.Children = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs = types.NewOrderedMap()
    locallyDestined.EntityData.Leafs.Append("path", types.YLeaf{"Path", locallyDestined.Path})
    locallyDestined.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", locallyDestined.PathTear})
    locallyDestined.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", locallyDestined.ReservationConfirm})
    locallyDestined.EntityData.Leafs.Append("total", types.YLeaf{"Total", locallyDestined.Total})

    locallyDestined.EntityData.YListKeys = []string {}

    return &(locallyDestined.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped
// Count of messages dropped
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (dropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Dropped) GetEntityData() *types.CommonEntityData {
    dropped.EntityData.YFilter = dropped.YFilter
    dropped.EntityData.YangName = "dropped"
    dropped.EntityData.BundleName = "cisco_ios_xr"
    dropped.EntityData.ParentYangName = "interface"
    dropped.EntityData.SegmentPath = "dropped"
    dropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/interface/" + dropped.EntityData.SegmentPath
    dropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dropped.EntityData.Children = types.NewOrderedMap()
    dropped.EntityData.Leafs = types.NewOrderedMap()
    dropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", dropped.Path})
    dropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", dropped.PathTear})
    dropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", dropped.ReservationConfirm})
    dropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", dropped.Total})

    dropped.EntityData.YListKeys = []string {}

    return &(dropped.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped
// Count of messages which got dropped due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionDropped *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionDropped) GetEntityData() *types.CommonEntityData {
    defaultActionDropped.EntityData.YFilter = defaultActionDropped.YFilter
    defaultActionDropped.EntityData.YangName = "default-action-dropped"
    defaultActionDropped.EntityData.BundleName = "cisco_ios_xr"
    defaultActionDropped.EntityData.ParentYangName = "interface"
    defaultActionDropped.EntityData.SegmentPath = "default-action-dropped"
    defaultActionDropped.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/interface/" + defaultActionDropped.EntityData.SegmentPath
    defaultActionDropped.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionDropped.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionDropped.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionDropped.EntityData.Children = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs = types.NewOrderedMap()
    defaultActionDropped.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionDropped.Path})
    defaultActionDropped.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionDropped.PathTear})
    defaultActionDropped.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionDropped.ReservationConfirm})
    defaultActionDropped.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionDropped.Total})

    defaultActionDropped.EntityData.YListKeys = []string {}

    return &(defaultActionDropped.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed
// Count of messages which were processed due to
// default ACL action
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (defaultActionProcessed *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_DefaultActionProcessed) GetEntityData() *types.CommonEntityData {
    defaultActionProcessed.EntityData.YFilter = defaultActionProcessed.YFilter
    defaultActionProcessed.EntityData.YangName = "default-action-processed"
    defaultActionProcessed.EntityData.BundleName = "cisco_ios_xr"
    defaultActionProcessed.EntityData.ParentYangName = "interface"
    defaultActionProcessed.EntityData.SegmentPath = "default-action-processed"
    defaultActionProcessed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/interface/" + defaultActionProcessed.EntityData.SegmentPath
    defaultActionProcessed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultActionProcessed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultActionProcessed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultActionProcessed.EntityData.Children = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs = types.NewOrderedMap()
    defaultActionProcessed.EntityData.Leafs.Append("path", types.YLeaf{"Path", defaultActionProcessed.Path})
    defaultActionProcessed.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", defaultActionProcessed.PathTear})
    defaultActionProcessed.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", defaultActionProcessed.ReservationConfirm})
    defaultActionProcessed.EntityData.Leafs.Append("total", types.YLeaf{"Total", defaultActionProcessed.Total})

    defaultActionProcessed.EntityData.YListKeys = []string {}

    return &(defaultActionProcessed.EntityData)
}

// Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total
// Count of total messages
type Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages. The type is interface{} with range: 0..4294967295.
    Path interface{}

    // Count of PathTear messages. The type is interface{} with range:
    // 0..4294967295.
    PathTear interface{}

    // Count of ReservationConfirm messages. The type is interface{} with range:
    // 0..4294967295.
    ReservationConfirm interface{}

    // Total count of messages. The type is interface{} with range: 0..4294967295.
    Total interface{}
}

func (total *Rsvp_Counters_PrefixFiltering_Interfaces_Interfaces_Interface_Total) GetEntityData() *types.CommonEntityData {
    total.EntityData.YFilter = total.YFilter
    total.EntityData.YangName = "total"
    total.EntityData.BundleName = "cisco_ios_xr"
    total.EntityData.ParentYangName = "interface"
    total.EntityData.SegmentPath = "total"
    total.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/prefix-filtering/interfaces/interfaces/interface/" + total.EntityData.SegmentPath
    total.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    total.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    total.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    total.EntityData.Children = types.NewOrderedMap()
    total.EntityData.Leafs = types.NewOrderedMap()
    total.EntityData.Leafs.Append("path", types.YLeaf{"Path", total.Path})
    total.EntityData.Leafs.Append("path-tear", types.YLeaf{"PathTear", total.PathTear})
    total.EntityData.Leafs.Append("reservation-confirm", types.YLeaf{"ReservationConfirm", total.ReservationConfirm})
    total.EntityData.Leafs.Append("total", types.YLeaf{"Total", total.Total})

    total.EntityData.YListKeys = []string {}

    return &(total.EntityData)
}

// Rsvp_Counters_OutOfResource
// Out of resource counters
type Rsvp_Counters_OutOfResource struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Interface specific out of resource counters.
    Interfaces Rsvp_Counters_OutOfResource_Interfaces
}

func (outOfResource *Rsvp_Counters_OutOfResource) GetEntityData() *types.CommonEntityData {
    outOfResource.EntityData.YFilter = outOfResource.YFilter
    outOfResource.EntityData.YangName = "out-of-resource"
    outOfResource.EntityData.BundleName = "cisco_ios_xr"
    outOfResource.EntityData.ParentYangName = "counters"
    outOfResource.EntityData.SegmentPath = "out-of-resource"
    outOfResource.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + outOfResource.EntityData.SegmentPath
    outOfResource.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    outOfResource.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    outOfResource.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    outOfResource.EntityData.Children = types.NewOrderedMap()
    outOfResource.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &outOfResource.Interfaces})
    outOfResource.EntityData.Leafs = types.NewOrderedMap()

    outOfResource.EntityData.YListKeys = []string {}

    return &(outOfResource.EntityData)
}

// Rsvp_Counters_OutOfResource_Interfaces
// Interface specific out of resource counters
type Rsvp_Counters_OutOfResource_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Summary of out of resource counts for all interfaces.
    Summary Rsvp_Counters_OutOfResource_Interfaces_Summary

    // Table of interface specific out of resource counters.
    Interfaces Rsvp_Counters_OutOfResource_Interfaces_Interfaces
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "out-of-resource"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("summary", types.YChild{"Summary", &interfaces.Summary})
    interfaces.EntityData.Children.Append("interfaces", types.YChild{"Interfaces", &interfaces.Interfaces})
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Rsvp_Counters_OutOfResource_Interfaces_Summary
// Summary of out of resource counts for all
// interfaces
type Rsvp_Counters_OutOfResource_Interfaces_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (summary *Rsvp_Counters_OutOfResource_Interfaces_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "interfaces"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("dropped-path-messages", types.YLeaf{"DroppedPathMessages", summary.DroppedPathMessages})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Rsvp_Counters_OutOfResource_Interfaces_Interfaces
// Table of interface specific out of resource
// counters
type Rsvp_Counters_OutOfResource_Interfaces_Interfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Out of resource counters for a specific interface. The type is slice of
    // Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface.
    Interface []*Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface
}

func (interfaces *Rsvp_Counters_OutOfResource_Interfaces_Interfaces) GetEntityData() *types.CommonEntityData {
    interfaces.EntityData.YFilter = interfaces.YFilter
    interfaces.EntityData.YangName = "interfaces"
    interfaces.EntityData.BundleName = "cisco_ios_xr"
    interfaces.EntityData.ParentYangName = "interfaces"
    interfaces.EntityData.SegmentPath = "interfaces"
    interfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/" + interfaces.EntityData.SegmentPath
    interfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaces.EntityData.Children = types.NewOrderedMap()
    interfaces.EntityData.Children.Append("interface", types.YChild{"Interface", nil})
    for i := range interfaces.Interface {
        interfaces.EntityData.Children.Append(types.GetSegmentPath(interfaces.Interface[i]), types.YChild{"Interface", interfaces.Interface[i]})
    }
    interfaces.EntityData.Leafs = types.NewOrderedMap()

    interfaces.EntityData.YListKeys = []string {}

    return &(interfaces.EntityData)
}

// Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface
// Out of resource counters for a specific
// interface
type Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    InterfaceName interface{}

    // Count of Path messages dropped due to an out of resource condition. The
    // type is interface{} with range: 0..4294967295.
    DroppedPathMessages interface{}
}

func (self *Rsvp_Counters_OutOfResource_Interfaces_Interfaces_Interface) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "interface"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "interfaces"
    self.EntityData.SegmentPath = "interface" + types.AddKeyToken(self.InterfaceName, "interface-name")
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/out-of-resource/interfaces/interfaces/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", self.InterfaceName})
    self.EntityData.Leafs.Append("dropped-path-messages", types.YLeaf{"DroppedPathMessages", self.DroppedPathMessages})

    self.EntityData.YListKeys = []string {"InterfaceName"}

    return &(self.EntityData)
}

// Rsvp_Counters_InterfaceEvents
// Event counters
type Rsvp_Counters_InterfaceEvents struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event counters for an interface. The type is slice of
    // Rsvp_Counters_InterfaceEvents_InterfaceEvent.
    InterfaceEvent []*Rsvp_Counters_InterfaceEvents_InterfaceEvent
}

func (interfaceEvents *Rsvp_Counters_InterfaceEvents) GetEntityData() *types.CommonEntityData {
    interfaceEvents.EntityData.YFilter = interfaceEvents.YFilter
    interfaceEvents.EntityData.YangName = "interface-events"
    interfaceEvents.EntityData.BundleName = "cisco_ios_xr"
    interfaceEvents.EntityData.ParentYangName = "counters"
    interfaceEvents.EntityData.SegmentPath = "interface-events"
    interfaceEvents.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + interfaceEvents.EntityData.SegmentPath
    interfaceEvents.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceEvents.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceEvents.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceEvents.EntityData.Children = types.NewOrderedMap()
    interfaceEvents.EntityData.Children.Append("interface-event", types.YChild{"InterfaceEvent", nil})
    for i := range interfaceEvents.InterfaceEvent {
        interfaceEvents.EntityData.Children.Append(types.GetSegmentPath(interfaceEvents.InterfaceEvent[i]), types.YChild{"InterfaceEvent", interfaceEvents.InterfaceEvent[i]})
    }
    interfaceEvents.EntityData.Leafs = types.NewOrderedMap()

    interfaceEvents.EntityData.YListKeys = []string {}

    return &(interfaceEvents.EntityData)
}

// Rsvp_Counters_InterfaceEvents_InterfaceEvent
// Event counters for an interface
type Rsvp_Counters_InterfaceEvents_InterfaceEvent struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. 'None' is used internally where
    // the true interface is unknown (e.g. for routed packets). The type is string
    // with pattern: b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (interfaceEvent *Rsvp_Counters_InterfaceEvents_InterfaceEvent) GetEntityData() *types.CommonEntityData {
    interfaceEvent.EntityData.YFilter = interfaceEvent.YFilter
    interfaceEvent.EntityData.YangName = "interface-event"
    interfaceEvent.EntityData.BundleName = "cisco_ios_xr"
    interfaceEvent.EntityData.ParentYangName = "interface-events"
    interfaceEvent.EntityData.SegmentPath = "interface-event" + types.AddKeyToken(interfaceEvent.InterfaceName, "interface-name")
    interfaceEvent.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/interface-events/" + interfaceEvent.EntityData.SegmentPath
    interfaceEvent.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceEvent.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceEvent.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceEvent.EntityData.Children = types.NewOrderedMap()
    interfaceEvent.EntityData.Leafs = types.NewOrderedMap()
    interfaceEvent.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceEvent.InterfaceName})
    interfaceEvent.EntityData.Leafs.Append("expired-paths", types.YLeaf{"ExpiredPaths", interfaceEvent.ExpiredPaths})
    interfaceEvent.EntityData.Leafs.Append("expired-reservations", types.YLeaf{"ExpiredReservations", interfaceEvent.ExpiredReservations})
    interfaceEvent.EntityData.Leafs.Append("nac-ks", types.YLeaf{"NacKs", interfaceEvent.NacKs})

    interfaceEvent.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceEvent.EntityData)
}

// Rsvp_Counters_Nsr
// Summary information for all RSVP NSR counters
type Rsvp_Counters_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (nsr *Rsvp_Counters_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "counters"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Leafs = types.NewOrderedMap()
    nsr.EntityData.Leafs.Append("last-cleared-timestamp", types.YLeaf{"LastClearedTimestamp", nsr.LastClearedTimestamp})
    nsr.EntityData.Leafs.Append("rsvp-process-role", types.YLeaf{"RsvpProcessRole", nsr.RsvpProcessRole})
    nsr.EntityData.Leafs.Append("last-idt-states", types.YLeaf{"LastIdtStates", nsr.LastIdtStates})
    nsr.EntityData.Leafs.Append("total-states", types.YLeaf{"TotalStates", nsr.TotalStates})
    nsr.EntityData.Leafs.Append("total-deletions", types.YLeaf{"TotalDeletions", nsr.TotalDeletions})
    nsr.EntityData.Leafs.Append("total-nacks", types.YLeaf{"TotalNacks", nsr.TotalNacks})
    nsr.EntityData.Leafs.Append("total-id-ts", types.YLeaf{"TotalIdTs", nsr.TotalIdTs})

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// Rsvp_Counters_Issu
// Summary information for all RSVP ISSU counters
type Rsvp_Counters_Issu struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The timestamp, in seconds, when these statistics are cleared             
    // since 00:00:00 UTC, January 1, 1970. The type is interface{} with range:
    // 0..4294967295. Units are second.
    LastClearedTimestamp interface{}

    // Process role. The type is RsvpProcRole.
    RsvpProcessRole interface{}

    // Last IDT number of states. The type is interface{} with range:
    // 0..4294967295.
    LastIdtStates interface{}

    // Total number of states. The type is interface{} with range: 0..4294967295.
    TotalStates interface{}

    // Total number of deletions. The type is interface{} with range:
    // 0..4294967295.
    TotalDeletions interface{}

    // Total number of NACKs. The type is interface{} with range:
    // 0..18446744073709551615.
    TotalNacks interface{}

    // Total number of IDTs. The type is interface{} with range: 0..4294967295.
    TotalIdTs interface{}
}

func (issu *Rsvp_Counters_Issu) GetEntityData() *types.CommonEntityData {
    issu.EntityData.YFilter = issu.YFilter
    issu.EntityData.YangName = "issu"
    issu.EntityData.BundleName = "cisco_ios_xr"
    issu.EntityData.ParentYangName = "counters"
    issu.EntityData.SegmentPath = "issu"
    issu.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + issu.EntityData.SegmentPath
    issu.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issu.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issu.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issu.EntityData.Children = types.NewOrderedMap()
    issu.EntityData.Leafs = types.NewOrderedMap()
    issu.EntityData.Leafs.Append("last-cleared-timestamp", types.YLeaf{"LastClearedTimestamp", issu.LastClearedTimestamp})
    issu.EntityData.Leafs.Append("rsvp-process-role", types.YLeaf{"RsvpProcessRole", issu.RsvpProcessRole})
    issu.EntityData.Leafs.Append("last-idt-states", types.YLeaf{"LastIdtStates", issu.LastIdtStates})
    issu.EntityData.Leafs.Append("total-states", types.YLeaf{"TotalStates", issu.TotalStates})
    issu.EntityData.Leafs.Append("total-deletions", types.YLeaf{"TotalDeletions", issu.TotalDeletions})
    issu.EntityData.Leafs.Append("total-nacks", types.YLeaf{"TotalNacks", issu.TotalNacks})
    issu.EntityData.Leafs.Append("total-id-ts", types.YLeaf{"TotalIdTs", issu.TotalIdTs})

    issu.EntityData.YListKeys = []string {}

    return &(issu.EntityData)
}

// Rsvp_Counters_Database
// Summary information for all RSVP database
// counters
type Rsvp_Counters_Database struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (database *Rsvp_Counters_Database) GetEntityData() *types.CommonEntityData {
    database.EntityData.YFilter = database.YFilter
    database.EntityData.YangName = "database"
    database.EntityData.BundleName = "cisco_ios_xr"
    database.EntityData.ParentYangName = "counters"
    database.EntityData.SegmentPath = "database"
    database.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + database.EntityData.SegmentPath
    database.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    database.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    database.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    database.EntityData.Children = types.NewOrderedMap()
    database.EntityData.Leafs = types.NewOrderedMap()
    database.EntityData.Leafs.Append("sessions", types.YLeaf{"Sessions", database.Sessions})
    database.EntityData.Leafs.Append("incoming-paths", types.YLeaf{"IncomingPaths", database.IncomingPaths})
    database.EntityData.Leafs.Append("outgoing-paths", types.YLeaf{"OutgoingPaths", database.OutgoingPaths})
    database.EntityData.Leafs.Append("incoming-reservations", types.YLeaf{"IncomingReservations", database.IncomingReservations})
    database.EntityData.Leafs.Append("outgoing-reservations", types.YLeaf{"OutgoingReservations", database.OutgoingReservations})
    database.EntityData.Leafs.Append("interfaces", types.YLeaf{"Interfaces", database.Interfaces})

    database.EntityData.YListKeys = []string {}

    return &(database.EntityData)
}

// Rsvp_Counters_EventSyncs
// Table containing event sync counters
type Rsvp_Counters_EventSyncs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Event sync counters. The type is slice of
    // Rsvp_Counters_EventSyncs_EventSync.
    EventSync []*Rsvp_Counters_EventSyncs_EventSync
}

func (eventSyncs *Rsvp_Counters_EventSyncs) GetEntityData() *types.CommonEntityData {
    eventSyncs.EntityData.YFilter = eventSyncs.YFilter
    eventSyncs.EntityData.YangName = "event-syncs"
    eventSyncs.EntityData.BundleName = "cisco_ios_xr"
    eventSyncs.EntityData.ParentYangName = "counters"
    eventSyncs.EntityData.SegmentPath = "event-syncs"
    eventSyncs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/" + eventSyncs.EntityData.SegmentPath
    eventSyncs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventSyncs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventSyncs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventSyncs.EntityData.Children = types.NewOrderedMap()
    eventSyncs.EntityData.Children.Append("event-sync", types.YChild{"EventSync", nil})
    for i := range eventSyncs.EventSync {
        eventSyncs.EntityData.Children.Append(types.GetSegmentPath(eventSyncs.EventSync[i]), types.YChild{"EventSync", eventSyncs.EventSync[i]})
    }
    eventSyncs.EntityData.Leafs = types.NewOrderedMap()

    eventSyncs.EntityData.YListKeys = []string {}

    return &(eventSyncs.EntityData)
}

// Rsvp_Counters_EventSyncs_EventSync
// Event sync counters
type Rsvp_Counters_EventSyncs_EventSync struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Counter for Expired Path states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredPaths interface{}

    // Counter for Expired Reservation states. The type is interface{} with range:
    // 0..4294967295.
    ExpiredReservations interface{}

    // Counter for NACKs received. The type is interface{} with range:
    // 0..4294967295.
    NacKs interface{}
}

func (eventSync *Rsvp_Counters_EventSyncs_EventSync) GetEntityData() *types.CommonEntityData {
    eventSync.EntityData.YFilter = eventSync.YFilter
    eventSync.EntityData.YangName = "event-sync"
    eventSync.EntityData.BundleName = "cisco_ios_xr"
    eventSync.EntityData.ParentYangName = "event-syncs"
    eventSync.EntityData.SegmentPath = "event-sync" + types.AddKeyToken(eventSync.InterfaceName, "interface-name")
    eventSync.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/counters/event-syncs/" + eventSync.EntityData.SegmentPath
    eventSync.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eventSync.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eventSync.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eventSync.EntityData.Children = types.NewOrderedMap()
    eventSync.EntityData.Leafs = types.NewOrderedMap()
    eventSync.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", eventSync.InterfaceName})
    eventSync.EntityData.Leafs.Append("expired-paths", types.YLeaf{"ExpiredPaths", eventSync.ExpiredPaths})
    eventSync.EntityData.Leafs.Append("expired-reservations", types.YLeaf{"ExpiredReservations", eventSync.ExpiredReservations})
    eventSync.EntityData.Leafs.Append("nac-ks", types.YLeaf{"NacKs", eventSync.NacKs})

    eventSync.EntityData.YListKeys = []string {"InterfaceName"}

    return &(eventSync.EntityData)
}

// Rsvp_InterfaceDetaileds
// Table of detailed info about RSVP-enabled
// interfaces
type Rsvp_InterfaceDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info about an RSVP-enabled interface. The type is slice of
    // Rsvp_InterfaceDetaileds_InterfaceDetailed.
    InterfaceDetailed []*Rsvp_InterfaceDetaileds_InterfaceDetailed
}

func (interfaceDetaileds *Rsvp_InterfaceDetaileds) GetEntityData() *types.CommonEntityData {
    interfaceDetaileds.EntityData.YFilter = interfaceDetaileds.YFilter
    interfaceDetaileds.EntityData.YangName = "interface-detaileds"
    interfaceDetaileds.EntityData.BundleName = "cisco_ios_xr"
    interfaceDetaileds.EntityData.ParentYangName = "rsvp"
    interfaceDetaileds.EntityData.SegmentPath = "interface-detaileds"
    interfaceDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + interfaceDetaileds.EntityData.SegmentPath
    interfaceDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceDetaileds.EntityData.Children = types.NewOrderedMap()
    interfaceDetaileds.EntityData.Children.Append("interface-detailed", types.YChild{"InterfaceDetailed", nil})
    for i := range interfaceDetaileds.InterfaceDetailed {
        interfaceDetaileds.EntityData.Children.Append(types.GetSegmentPath(interfaceDetaileds.InterfaceDetailed[i]), types.YChild{"InterfaceDetailed", interfaceDetaileds.InterfaceDetailed[i]})
    }
    interfaceDetaileds.EntityData.Leafs = types.NewOrderedMap()

    interfaceDetaileds.EntityData.YListKeys = []string {}

    return &(interfaceDetaileds.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed
// Detailed info about an RSVP-enabled interface
type Rsvp_InterfaceDetaileds_InterfaceDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // IP TOS (precedence/DSCP) to use in signalling messages. The type is
    // interface{} with range: 0..255.
    SignallingIpTos interface{}

    // Integrity send password. The type is string with length: 0..40.
    IntegritySendPassword interface{}

    // Integrity receive password. The type is string with length: 0..40.
    IntegrityReceivePassword interface{}

    // Integrity recv password optional. The type is interface{} with range:
    // 0..255.
    IntegrityReceivePasswordOptional interface{}

    // Refresh timer state. The type is RsvpTimerState.
    RefreshTimerState interface{}

    // Summary refresh timer state. The type is RsvpTimerState.
    SummaryRefreshTimerState interface{}

    // Refresh interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    RefreshInterval interface{}

    // Out-of-band Refresh interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    OutOfBandRefreshInterval interface{}

    // Max size in bytes of a single SRefresh. The type is interface{} with range:
    // 0..4294967295. Units are byte.
    SummaryRefreshMaxSize interface{}

    // Max size in bytes of a single Bundle message. The type is interface{} with
    // range: 0..4294967295. Units are byte.
    BundleMessageMaxSize interface{}

    // Expiry timer state. The type is RsvpTimerState.
    ExpiryTimerState interface{}

    // Number of states for expiry check. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryStates interface{}

    // Expiry interval in msecs. The type is interface{} with range:
    // -2147483648..2147483647. Units are millisecond.
    ExpiryInterval interface{}

    // Number of missed messages tolerated. The type is interface{} with range:
    // -2147483648..2147483647.
    ExpiryDropsTolerated interface{}

    // Number of out-of-band missed messages tolerated. The type is interface{}
    // with range: 0..4294967295.
    OutOfBandExpiryDropsTolerated interface{}

    // ACK hold time in msec. The type is interface{} with range: 0..4294967295.
    AckHoldTime interface{}

    // Max size for ACK message. The type is interface{} with range:
    // 0..4294967295.
    AckMaxSize interface{}

    // Retransmit time in msec. The type is interface{} with range: 0..4294967295.
    RetransmitTime interface{}

    // Pacing interval in msecs. The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    PacingInterval interface{}

    // No. of messages per interval. The type is interface{} with range:
    // 0..4294967295.
    PacingMessageRate interface{}

    // State of pacing timer. The type is RsvpTimerState.
    PacingTimerState interface{}

    // Number of messages deferred for pacing. The type is interface{} with range:
    // -2147483648..2147483647.
    PacingMessages interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation

    // Interface flags.
    Flags Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags

    // Neighbor array. The type is slice of
    // Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray.
    NeighborArray []*Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray
}

func (interfaceDetailed *Rsvp_InterfaceDetaileds_InterfaceDetailed) GetEntityData() *types.CommonEntityData {
    interfaceDetailed.EntityData.YFilter = interfaceDetailed.YFilter
    interfaceDetailed.EntityData.YangName = "interface-detailed"
    interfaceDetailed.EntityData.BundleName = "cisco_ios_xr"
    interfaceDetailed.EntityData.ParentYangName = "interface-detaileds"
    interfaceDetailed.EntityData.SegmentPath = "interface-detailed" + types.AddKeyToken(interfaceDetailed.InterfaceName, "interface-name")
    interfaceDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/" + interfaceDetailed.EntityData.SegmentPath
    interfaceDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceDetailed.EntityData.Children = types.NewOrderedMap()
    interfaceDetailed.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &interfaceDetailed.BandwidthInformation})
    interfaceDetailed.EntityData.Children.Append("flags", types.YChild{"Flags", &interfaceDetailed.Flags})
    interfaceDetailed.EntityData.Children.Append("neighbor-array", types.YChild{"NeighborArray", nil})
    for i := range interfaceDetailed.NeighborArray {
        types.SetYListKey(interfaceDetailed.NeighborArray[i], i)
        interfaceDetailed.EntityData.Children.Append(types.GetSegmentPath(interfaceDetailed.NeighborArray[i]), types.YChild{"NeighborArray", interfaceDetailed.NeighborArray[i]})
    }
    interfaceDetailed.EntityData.Leafs = types.NewOrderedMap()
    interfaceDetailed.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceDetailed.InterfaceName})
    interfaceDetailed.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceDetailed.InterfaceNameXr})
    interfaceDetailed.EntityData.Leafs.Append("signalling-ip-tos", types.YLeaf{"SignallingIpTos", interfaceDetailed.SignallingIpTos})
    interfaceDetailed.EntityData.Leafs.Append("integrity-send-password", types.YLeaf{"IntegritySendPassword", interfaceDetailed.IntegritySendPassword})
    interfaceDetailed.EntityData.Leafs.Append("integrity-receive-password", types.YLeaf{"IntegrityReceivePassword", interfaceDetailed.IntegrityReceivePassword})
    interfaceDetailed.EntityData.Leafs.Append("integrity-receive-password-optional", types.YLeaf{"IntegrityReceivePasswordOptional", interfaceDetailed.IntegrityReceivePasswordOptional})
    interfaceDetailed.EntityData.Leafs.Append("refresh-timer-state", types.YLeaf{"RefreshTimerState", interfaceDetailed.RefreshTimerState})
    interfaceDetailed.EntityData.Leafs.Append("summary-refresh-timer-state", types.YLeaf{"SummaryRefreshTimerState", interfaceDetailed.SummaryRefreshTimerState})
    interfaceDetailed.EntityData.Leafs.Append("refresh-interval", types.YLeaf{"RefreshInterval", interfaceDetailed.RefreshInterval})
    interfaceDetailed.EntityData.Leafs.Append("out-of-band-refresh-interval", types.YLeaf{"OutOfBandRefreshInterval", interfaceDetailed.OutOfBandRefreshInterval})
    interfaceDetailed.EntityData.Leafs.Append("summary-refresh-max-size", types.YLeaf{"SummaryRefreshMaxSize", interfaceDetailed.SummaryRefreshMaxSize})
    interfaceDetailed.EntityData.Leafs.Append("bundle-message-max-size", types.YLeaf{"BundleMessageMaxSize", interfaceDetailed.BundleMessageMaxSize})
    interfaceDetailed.EntityData.Leafs.Append("expiry-timer-state", types.YLeaf{"ExpiryTimerState", interfaceDetailed.ExpiryTimerState})
    interfaceDetailed.EntityData.Leafs.Append("expiry-states", types.YLeaf{"ExpiryStates", interfaceDetailed.ExpiryStates})
    interfaceDetailed.EntityData.Leafs.Append("expiry-interval", types.YLeaf{"ExpiryInterval", interfaceDetailed.ExpiryInterval})
    interfaceDetailed.EntityData.Leafs.Append("expiry-drops-tolerated", types.YLeaf{"ExpiryDropsTolerated", interfaceDetailed.ExpiryDropsTolerated})
    interfaceDetailed.EntityData.Leafs.Append("out-of-band-expiry-drops-tolerated", types.YLeaf{"OutOfBandExpiryDropsTolerated", interfaceDetailed.OutOfBandExpiryDropsTolerated})
    interfaceDetailed.EntityData.Leafs.Append("ack-hold-time", types.YLeaf{"AckHoldTime", interfaceDetailed.AckHoldTime})
    interfaceDetailed.EntityData.Leafs.Append("ack-max-size", types.YLeaf{"AckMaxSize", interfaceDetailed.AckMaxSize})
    interfaceDetailed.EntityData.Leafs.Append("retransmit-time", types.YLeaf{"RetransmitTime", interfaceDetailed.RetransmitTime})
    interfaceDetailed.EntityData.Leafs.Append("pacing-interval", types.YLeaf{"PacingInterval", interfaceDetailed.PacingInterval})
    interfaceDetailed.EntityData.Leafs.Append("pacing-message-rate", types.YLeaf{"PacingMessageRate", interfaceDetailed.PacingMessageRate})
    interfaceDetailed.EntityData.Leafs.Append("pacing-timer-state", types.YLeaf{"PacingTimerState", interfaceDetailed.PacingTimerState})
    interfaceDetailed.EntityData.Leafs.Append("pacing-messages", types.YLeaf{"PacingMessages", interfaceDetailed.PacingMessages})

    interfaceDetailed.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceDetailed.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation
// Interface bandwidth information
type Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "interface-detailed"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_InterfaceDetaileds_InterfaceDetailed_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags
// Interface flags
type Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // MPLS enabled on interface. The type is bool.
    IsMplsEnabled interface{}

    // Refresh Reduction enabled. The type is bool.
    IsRefreshReductionEnabled interface{}

    // Message pacing enabled. The type is bool.
    IsPacingEnabled interface{}

    // Refresh enabled. The type is bool.
    IsRefreshEnabled interface{}

    // Summary Refresh enabled. The type is bool.
    IsSRefreshEnabled interface{}

    // Interface is DOWN. The type is bool.
    IsInterfaceDown interface{}

    // Interface is created. The type is bool.
    IsInterfaceCreated interface{}

    // Use reliable xmt for SRefresh. The type is bool.
    IsRelSRefreshEnabled interface{}

    // This is backup tunnel. The type is bool.
    IsBackupTunnel interface{}

    // RSVP explicitly configured. The type is bool.
    IsRsvpConfigured interface{}

    // Interface is defined in non-Default VRF. The type is bool.
    IsNonDefaultVrf interface{}

    // Use bundling for outgoing RSVP messages. The type is bool.
    IsMessageBundlingEnabled interface{}
}

func (flags *Rsvp_InterfaceDetaileds_InterfaceDetailed_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "interface-detailed"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-mpls-enabled", types.YLeaf{"IsMplsEnabled", flags.IsMplsEnabled})
    flags.EntityData.Leafs.Append("is-refresh-reduction-enabled", types.YLeaf{"IsRefreshReductionEnabled", flags.IsRefreshReductionEnabled})
    flags.EntityData.Leafs.Append("is-pacing-enabled", types.YLeaf{"IsPacingEnabled", flags.IsPacingEnabled})
    flags.EntityData.Leafs.Append("is-refresh-enabled", types.YLeaf{"IsRefreshEnabled", flags.IsRefreshEnabled})
    flags.EntityData.Leafs.Append("is-s-refresh-enabled", types.YLeaf{"IsSRefreshEnabled", flags.IsSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-interface-down", types.YLeaf{"IsInterfaceDown", flags.IsInterfaceDown})
    flags.EntityData.Leafs.Append("is-interface-created", types.YLeaf{"IsInterfaceCreated", flags.IsInterfaceCreated})
    flags.EntityData.Leafs.Append("is-rel-s-refresh-enabled", types.YLeaf{"IsRelSRefreshEnabled", flags.IsRelSRefreshEnabled})
    flags.EntityData.Leafs.Append("is-backup-tunnel", types.YLeaf{"IsBackupTunnel", flags.IsBackupTunnel})
    flags.EntityData.Leafs.Append("is-rsvp-configured", types.YLeaf{"IsRsvpConfigured", flags.IsRsvpConfigured})
    flags.EntityData.Leafs.Append("is-non-default-vrf", types.YLeaf{"IsNonDefaultVrf", flags.IsNonDefaultVrf})
    flags.EntityData.Leafs.Append("is-message-bundling-enabled", types.YLeaf{"IsMessageBundlingEnabled", flags.IsMessageBundlingEnabled})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray
// Neighbor array
type Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Is neighbor capable of Refresh Reduction. The type is bool.
    IsNeighborRefreshReductionCapable interface{}

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Number of MessageIDs. The type is interface{} with range: 0..4294967295.
    MessageIds interface{}

    // Number of outgoing states to the neighbour. The type is interface{} with
    // range: -2147483648..2147483647.
    OutgoingStates interface{}

    // Expiry time.
    ExpiryTime Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime

    // List of Neighbor MessageIDs. The type is slice of
    // Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId.
    NeighborMessageId []*Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
}

func (neighborArray *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray) GetEntityData() *types.CommonEntityData {
    neighborArray.EntityData.YFilter = neighborArray.YFilter
    neighborArray.EntityData.YangName = "neighbor-array"
    neighborArray.EntityData.BundleName = "cisco_ios_xr"
    neighborArray.EntityData.ParentYangName = "interface-detailed"
    neighborArray.EntityData.SegmentPath = "neighbor-array" + types.AddNoKeyToken(neighborArray)
    neighborArray.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/" + neighborArray.EntityData.SegmentPath
    neighborArray.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborArray.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborArray.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborArray.EntityData.Children = types.NewOrderedMap()
    neighborArray.EntityData.Children.Append("expiry-time", types.YChild{"ExpiryTime", &neighborArray.ExpiryTime})
    neighborArray.EntityData.Children.Append("neighbor-message-id", types.YChild{"NeighborMessageId", nil})
    for i := range neighborArray.NeighborMessageId {
        types.SetYListKey(neighborArray.NeighborMessageId[i], i)
        neighborArray.EntityData.Children.Append(types.GetSegmentPath(neighborArray.NeighborMessageId[i]), types.YChild{"NeighborMessageId", neighborArray.NeighborMessageId[i]})
    }
    neighborArray.EntityData.Leafs = types.NewOrderedMap()
    neighborArray.EntityData.Leafs.Append("is-neighbor-refresh-reduction-capable", types.YLeaf{"IsNeighborRefreshReductionCapable", neighborArray.IsNeighborRefreshReductionCapable})
    neighborArray.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborArray.NeighborAddress})
    neighborArray.EntityData.Leafs.Append("message-ids", types.YLeaf{"MessageIds", neighborArray.MessageIds})
    neighborArray.EntityData.Leafs.Append("outgoing-states", types.YLeaf{"OutgoingStates", neighborArray.OutgoingStates})

    neighborArray.EntityData.YListKeys = []string {}

    return &(neighborArray.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime
// Expiry time
type Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (expiryTime *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_ExpiryTime) GetEntityData() *types.CommonEntityData {
    expiryTime.EntityData.YFilter = expiryTime.YFilter
    expiryTime.EntityData.YangName = "expiry-time"
    expiryTime.EntityData.BundleName = "cisco_ios_xr"
    expiryTime.EntityData.ParentYangName = "neighbor-array"
    expiryTime.EntityData.SegmentPath = "expiry-time"
    expiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/neighbor-array/" + expiryTime.EntityData.SegmentPath
    expiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    expiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    expiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    expiryTime.EntityData.Children = types.NewOrderedMap()
    expiryTime.EntityData.Leafs = types.NewOrderedMap()
    expiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", expiryTime.Seconds})
    expiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", expiryTime.Nanoseconds})

    expiryTime.EntityData.YListKeys = []string {}

    return &(expiryTime.EntityData)
}

// Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId
// List of Neighbor MessageIDs
type Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Message ID. The type is interface{} with range: 0..4294967295.
    MessageId interface{}
}

func (neighborMessageId *Rsvp_InterfaceDetaileds_InterfaceDetailed_NeighborArray_NeighborMessageId) GetEntityData() *types.CommonEntityData {
    neighborMessageId.EntityData.YFilter = neighborMessageId.YFilter
    neighborMessageId.EntityData.YangName = "neighbor-message-id"
    neighborMessageId.EntityData.BundleName = "cisco_ios_xr"
    neighborMessageId.EntityData.ParentYangName = "neighbor-array"
    neighborMessageId.EntityData.SegmentPath = "neighbor-message-id" + types.AddNoKeyToken(neighborMessageId)
    neighborMessageId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-detaileds/interface-detailed/neighbor-array/" + neighborMessageId.EntityData.SegmentPath
    neighborMessageId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborMessageId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborMessageId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborMessageId.EntityData.Children = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs = types.NewOrderedMap()
    neighborMessageId.EntityData.Leafs.Append("message-id", types.YLeaf{"MessageId", neighborMessageId.MessageId})

    neighborMessageId.EntityData.YListKeys = []string {}

    return &(neighborMessageId.EntityData)
}

// Rsvp_ControllerBriefs
// Table of brief info about RSVP-enabled
// controller
type Rsvp_ControllerBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled controller. The type is slice of
    // Rsvp_ControllerBriefs_ControllerBrief.
    ControllerBrief []*Rsvp_ControllerBriefs_ControllerBrief
}

func (controllerBriefs *Rsvp_ControllerBriefs) GetEntityData() *types.CommonEntityData {
    controllerBriefs.EntityData.YFilter = controllerBriefs.YFilter
    controllerBriefs.EntityData.YangName = "controller-briefs"
    controllerBriefs.EntityData.BundleName = "cisco_ios_xr"
    controllerBriefs.EntityData.ParentYangName = "rsvp"
    controllerBriefs.EntityData.SegmentPath = "controller-briefs"
    controllerBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + controllerBriefs.EntityData.SegmentPath
    controllerBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerBriefs.EntityData.Children = types.NewOrderedMap()
    controllerBriefs.EntityData.Children.Append("controller-brief", types.YChild{"ControllerBrief", nil})
    for i := range controllerBriefs.ControllerBrief {
        controllerBriefs.EntityData.Children.Append(types.GetSegmentPath(controllerBriefs.ControllerBrief[i]), types.YChild{"ControllerBrief", controllerBriefs.ControllerBrief[i]})
    }
    controllerBriefs.EntityData.Leafs = types.NewOrderedMap()

    controllerBriefs.EntityData.YListKeys = []string {}

    return &(controllerBriefs.EntityData)
}

// Rsvp_ControllerBriefs_ControllerBrief
// Brief info about an RSVP-enabled controller
type Rsvp_ControllerBriefs_ControllerBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Controller Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    ControllerName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation
}

func (controllerBrief *Rsvp_ControllerBriefs_ControllerBrief) GetEntityData() *types.CommonEntityData {
    controllerBrief.EntityData.YFilter = controllerBrief.YFilter
    controllerBrief.EntityData.YangName = "controller-brief"
    controllerBrief.EntityData.BundleName = "cisco_ios_xr"
    controllerBrief.EntityData.ParentYangName = "controller-briefs"
    controllerBrief.EntityData.SegmentPath = "controller-brief" + types.AddKeyToken(controllerBrief.ControllerName, "controller-name")
    controllerBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-briefs/" + controllerBrief.EntityData.SegmentPath
    controllerBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    controllerBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    controllerBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    controllerBrief.EntityData.Children = types.NewOrderedMap()
    controllerBrief.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &controllerBrief.BandwidthInformation})
    controllerBrief.EntityData.Leafs = types.NewOrderedMap()
    controllerBrief.EntityData.Leafs.Append("controller-name", types.YLeaf{"ControllerName", controllerBrief.ControllerName})
    controllerBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", controllerBrief.InterfaceNameXr})

    controllerBrief.EntityData.YListKeys = []string {"ControllerName"}

    return &(controllerBrief.EntityData)
}

// Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation
// Interface bandwidth information
type Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "controller-brief"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-briefs/controller-brief/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-briefs/controller-brief/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_ControllerBriefs_ControllerBrief_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/controller-briefs/controller-brief/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// Rsvp_GracefulRestart
// Info about graceful-restart
type Rsvp_GracefulRestart struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether GR is enabled. The type is bool.
    IsGrEnabled interface{}

    // Global neighbor count. The type is interface{} with range: 0..4294967295.
    GlobalNeighbors interface{}

    // Restart time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Recovery time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Whether recovery timer is running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Interval at which hello messages are sent. The type is interface{} with
    // range: 0..4294967295.
    HelloInterval interface{}

    // Max number of hellos missed before hellos declared down. The type is
    // interface{} with range: 0..255.
    MissedHellos interface{}

    // Total number of pending states. The type is interface{} with range:
    // 0..4294967295.
    PendingStates interface{}

    // How much recovery timer remains.
    RecoveryTimeLeft Rsvp_GracefulRestart_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime Rsvp_GracefulRestart_RecoveryTimerExpTime

    // Local node address. The type is slice of
    // Rsvp_GracefulRestart_LocalNodeAddress.
    LocalNodeAddress []*Rsvp_GracefulRestart_LocalNodeAddress
}

func (gracefulRestart *Rsvp_GracefulRestart) GetEntityData() *types.CommonEntityData {
    gracefulRestart.EntityData.YFilter = gracefulRestart.YFilter
    gracefulRestart.EntityData.YangName = "graceful-restart"
    gracefulRestart.EntityData.BundleName = "cisco_ios_xr"
    gracefulRestart.EntityData.ParentYangName = "rsvp"
    gracefulRestart.EntityData.SegmentPath = "graceful-restart"
    gracefulRestart.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + gracefulRestart.EntityData.SegmentPath
    gracefulRestart.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulRestart.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulRestart.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulRestart.EntityData.Children = types.NewOrderedMap()
    gracefulRestart.EntityData.Children.Append("recovery-time-left", types.YChild{"RecoveryTimeLeft", &gracefulRestart.RecoveryTimeLeft})
    gracefulRestart.EntityData.Children.Append("recovery-timer-exp-time", types.YChild{"RecoveryTimerExpTime", &gracefulRestart.RecoveryTimerExpTime})
    gracefulRestart.EntityData.Children.Append("local-node-address", types.YChild{"LocalNodeAddress", nil})
    for i := range gracefulRestart.LocalNodeAddress {
        types.SetYListKey(gracefulRestart.LocalNodeAddress[i], i)
        gracefulRestart.EntityData.Children.Append(types.GetSegmentPath(gracefulRestart.LocalNodeAddress[i]), types.YChild{"LocalNodeAddress", gracefulRestart.LocalNodeAddress[i]})
    }
    gracefulRestart.EntityData.Leafs = types.NewOrderedMap()
    gracefulRestart.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", gracefulRestart.IsGrEnabled})
    gracefulRestart.EntityData.Leafs.Append("global-neighbors", types.YLeaf{"GlobalNeighbors", gracefulRestart.GlobalNeighbors})
    gracefulRestart.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", gracefulRestart.RestartTime})
    gracefulRestart.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", gracefulRestart.RecoveryTime})
    gracefulRestart.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", gracefulRestart.IsRecoveryTimerRunning})
    gracefulRestart.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", gracefulRestart.HelloInterval})
    gracefulRestart.EntityData.Leafs.Append("missed-hellos", types.YLeaf{"MissedHellos", gracefulRestart.MissedHellos})
    gracefulRestart.EntityData.Leafs.Append("pending-states", types.YLeaf{"PendingStates", gracefulRestart.PendingStates})

    gracefulRestart.EntityData.YListKeys = []string {}

    return &(gracefulRestart.EntityData)
}

// Rsvp_GracefulRestart_RecoveryTimeLeft
// How much recovery timer remains
type Rsvp_GracefulRestart_RecoveryTimeLeft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *Rsvp_GracefulRestart_RecoveryTimeLeft) GetEntityData() *types.CommonEntityData {
    recoveryTimeLeft.EntityData.YFilter = recoveryTimeLeft.YFilter
    recoveryTimeLeft.EntityData.YangName = "recovery-time-left"
    recoveryTimeLeft.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimeLeft.EntityData.ParentYangName = "graceful-restart"
    recoveryTimeLeft.EntityData.SegmentPath = "recovery-time-left"
    recoveryTimeLeft.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/" + recoveryTimeLeft.EntityData.SegmentPath
    recoveryTimeLeft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimeLeft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimeLeft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimeLeft.EntityData.Children = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimeLeft.Seconds})
    recoveryTimeLeft.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimeLeft.Nanoseconds})

    recoveryTimeLeft.EntityData.YListKeys = []string {}

    return &(recoveryTimeLeft.EntityData)
}

// Rsvp_GracefulRestart_RecoveryTimerExpTime
// Time at which recovery timer will expire
type Rsvp_GracefulRestart_RecoveryTimerExpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *Rsvp_GracefulRestart_RecoveryTimerExpTime) GetEntityData() *types.CommonEntityData {
    recoveryTimerExpTime.EntityData.YFilter = recoveryTimerExpTime.YFilter
    recoveryTimerExpTime.EntityData.YangName = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimerExpTime.EntityData.ParentYangName = "graceful-restart"
    recoveryTimerExpTime.EntityData.SegmentPath = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/" + recoveryTimerExpTime.EntityData.SegmentPath
    recoveryTimerExpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimerExpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimerExpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimerExpTime.EntityData.Children = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimerExpTime.Seconds})
    recoveryTimerExpTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimerExpTime.Nanoseconds})

    recoveryTimerExpTime.EntityData.YListKeys = []string {}

    return &(recoveryTimerExpTime.EntityData)
}

// Rsvp_GracefulRestart_LocalNodeAddress
// Local node address
type Rsvp_GracefulRestart_LocalNodeAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    LocalNodeIpAddress interface{}

    // GR local node-id app type. The type is RsvpMgmtGrApp.
    ApplicationType interface{}
}

func (localNodeAddress *Rsvp_GracefulRestart_LocalNodeAddress) GetEntityData() *types.CommonEntityData {
    localNodeAddress.EntityData.YFilter = localNodeAddress.YFilter
    localNodeAddress.EntityData.YangName = "local-node-address"
    localNodeAddress.EntityData.BundleName = "cisco_ios_xr"
    localNodeAddress.EntityData.ParentYangName = "graceful-restart"
    localNodeAddress.EntityData.SegmentPath = "local-node-address" + types.AddNoKeyToken(localNodeAddress)
    localNodeAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/graceful-restart/" + localNodeAddress.EntityData.SegmentPath
    localNodeAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localNodeAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localNodeAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localNodeAddress.EntityData.Children = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs.Append("local-node-ip-address", types.YLeaf{"LocalNodeIpAddress", localNodeAddress.LocalNodeIpAddress})
    localNodeAddress.EntityData.Leafs.Append("application-type", types.YLeaf{"ApplicationType", localNodeAddress.ApplicationType})

    localNodeAddress.EntityData.YListKeys = []string {}

    return &(localNodeAddress.EntityData)
}

// Rsvp_HelloInterfaceInstanceBriefs
// Table of brief info about i/f-based hello
// instances
type Rsvp_HelloInterfaceInstanceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single interface-based hello instance. The type is slice
    // of Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief.
    HelloInterfaceInstanceBrief []*Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
}

func (helloInterfaceInstanceBriefs *Rsvp_HelloInterfaceInstanceBriefs) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceBriefs.EntityData.YFilter = helloInterfaceInstanceBriefs.YFilter
    helloInterfaceInstanceBriefs.EntityData.YangName = "hello-interface-instance-briefs"
    helloInterfaceInstanceBriefs.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceBriefs.EntityData.ParentYangName = "rsvp"
    helloInterfaceInstanceBriefs.EntityData.SegmentPath = "hello-interface-instance-briefs"
    helloInterfaceInstanceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + helloInterfaceInstanceBriefs.EntityData.SegmentPath
    helloInterfaceInstanceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceBriefs.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceBriefs.EntityData.Children.Append("hello-interface-instance-brief", types.YChild{"HelloInterfaceInstanceBrief", nil})
    for i := range helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief {
        helloInterfaceInstanceBriefs.EntityData.Children.Append(types.GetSegmentPath(helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i]), types.YChild{"HelloInterfaceInstanceBrief", helloInterfaceInstanceBriefs.HelloInterfaceInstanceBrief[i]})
    }
    helloInterfaceInstanceBriefs.EntityData.Leafs = types.NewOrderedMap()

    helloInterfaceInstanceBriefs.EntityData.YListKeys = []string {}

    return &(helloInterfaceInstanceBriefs.EntityData)
}

// Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief
// Brief info for a single interface-based hello
// instance
type Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}
}

func (helloInterfaceInstanceBrief *Rsvp_HelloInterfaceInstanceBriefs_HelloInterfaceInstanceBrief) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceBrief.EntityData.YFilter = helloInterfaceInstanceBrief.YFilter
    helloInterfaceInstanceBrief.EntityData.YangName = "hello-interface-instance-brief"
    helloInterfaceInstanceBrief.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceBrief.EntityData.ParentYangName = "hello-interface-instance-briefs"
    helloInterfaceInstanceBrief.EntityData.SegmentPath = "hello-interface-instance-brief" + types.AddKeyToken(helloInterfaceInstanceBrief.SourceAddress, "source-address") + types.AddKeyToken(helloInterfaceInstanceBrief.DestinationAddress, "destination-address")
    helloInterfaceInstanceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-briefs/" + helloInterfaceInstanceBrief.EntityData.SegmentPath
    helloInterfaceInstanceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceBrief.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceBrief.EntityData.Leafs = types.NewOrderedMap()
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInterfaceInstanceBrief.SourceAddress})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInterfaceInstanceBrief.DestinationAddress})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInterfaceInstanceBrief.SourceAddressXr})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInterfaceInstanceBrief.DestinationAddressXr})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInterfaceInstanceBrief.InstanceType})
    helloInterfaceInstanceBrief.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInterfaceInstanceBrief.HelloInterface})

    helloInterfaceInstanceBrief.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInterfaceInstanceBrief.EntityData)
}

// Rsvp_HelloInterfaceInstanceDetails
// Table of detailed info about i/f-based hello
// instances
type Rsvp_HelloInterfaceInstanceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single interface-based hello instance. The type is
    // slice of Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail.
    HelloInterfaceInstanceDetail []*Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
}

func (helloInterfaceInstanceDetails *Rsvp_HelloInterfaceInstanceDetails) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceDetails.EntityData.YFilter = helloInterfaceInstanceDetails.YFilter
    helloInterfaceInstanceDetails.EntityData.YangName = "hello-interface-instance-details"
    helloInterfaceInstanceDetails.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceDetails.EntityData.ParentYangName = "rsvp"
    helloInterfaceInstanceDetails.EntityData.SegmentPath = "hello-interface-instance-details"
    helloInterfaceInstanceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + helloInterfaceInstanceDetails.EntityData.SegmentPath
    helloInterfaceInstanceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceDetails.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceDetails.EntityData.Children.Append("hello-interface-instance-detail", types.YChild{"HelloInterfaceInstanceDetail", nil})
    for i := range helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail {
        helloInterfaceInstanceDetails.EntityData.Children.Append(types.GetSegmentPath(helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i]), types.YChild{"HelloInterfaceInstanceDetail", helloInterfaceInstanceDetails.HelloInterfaceInstanceDetail[i]})
    }
    helloInterfaceInstanceDetails.EntityData.Leafs = types.NewOrderedMap()

    helloInterfaceInstanceDetails.EntityData.YListKeys = []string {}

    return &(helloInterfaceInstanceDetails.EntityData)
}

// Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail
// Detailed info for a single interface-based
// hello instance
type Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Global Neighbor ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    HelloGlobalNeighborId interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Last Ack/msg sent time.
    LastMessageSentTime Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
}

func (helloInterfaceInstanceDetail *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail) GetEntityData() *types.CommonEntityData {
    helloInterfaceInstanceDetail.EntityData.YFilter = helloInterfaceInstanceDetail.YFilter
    helloInterfaceInstanceDetail.EntityData.YangName = "hello-interface-instance-detail"
    helloInterfaceInstanceDetail.EntityData.BundleName = "cisco_ios_xr"
    helloInterfaceInstanceDetail.EntityData.ParentYangName = "hello-interface-instance-details"
    helloInterfaceInstanceDetail.EntityData.SegmentPath = "hello-interface-instance-detail" + types.AddKeyToken(helloInterfaceInstanceDetail.SourceAddress, "source-address") + types.AddKeyToken(helloInterfaceInstanceDetail.DestinationAddress, "destination-address")
    helloInterfaceInstanceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-details/" + helloInterfaceInstanceDetail.EntityData.SegmentPath
    helloInterfaceInstanceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInterfaceInstanceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInterfaceInstanceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInterfaceInstanceDetail.EntityData.Children = types.NewOrderedMap()
    helloInterfaceInstanceDetail.EntityData.Children.Append("last-message-sent-time", types.YChild{"LastMessageSentTime", &helloInterfaceInstanceDetail.LastMessageSentTime})
    helloInterfaceInstanceDetail.EntityData.Leafs = types.NewOrderedMap()
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInterfaceInstanceDetail.SourceAddress})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInterfaceInstanceDetail.DestinationAddress})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInterfaceInstanceDetail.SourceAddressXr})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInterfaceInstanceDetail.DestinationAddressXr})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-global-neighbor-id", types.YLeaf{"HelloGlobalNeighborId", helloInterfaceInstanceDetail.HelloGlobalNeighborId})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInterfaceInstanceDetail.InstanceType})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInterfaceInstanceDetail.HelloInterface})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("source-instance", types.YLeaf{"SourceInstance", helloInterfaceInstanceDetail.SourceInstance})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("destination-instance", types.YLeaf{"DestinationInstance", helloInterfaceInstanceDetail.DestinationInstance})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-messages-sent", types.YLeaf{"HelloMessagesSent", helloInterfaceInstanceDetail.HelloMessagesSent})
    helloInterfaceInstanceDetail.EntityData.Leafs.Append("hello-messages-received", types.YLeaf{"HelloMessagesReceived", helloInterfaceInstanceDetail.HelloMessagesReceived})

    helloInterfaceInstanceDetail.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInterfaceInstanceDetail.EntityData)
}

// Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime
// Last Ack/msg sent time
type Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lastMessageSentTime *Rsvp_HelloInterfaceInstanceDetails_HelloInterfaceInstanceDetail_LastMessageSentTime) GetEntityData() *types.CommonEntityData {
    lastMessageSentTime.EntityData.YFilter = lastMessageSentTime.YFilter
    lastMessageSentTime.EntityData.YangName = "last-message-sent-time"
    lastMessageSentTime.EntityData.BundleName = "cisco_ios_xr"
    lastMessageSentTime.EntityData.ParentYangName = "hello-interface-instance-detail"
    lastMessageSentTime.EntityData.SegmentPath = "last-message-sent-time"
    lastMessageSentTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-interface-instance-details/hello-interface-instance-detail/" + lastMessageSentTime.EntityData.SegmentPath
    lastMessageSentTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lastMessageSentTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lastMessageSentTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lastMessageSentTime.EntityData.Children = types.NewOrderedMap()
    lastMessageSentTime.EntityData.Leafs = types.NewOrderedMap()
    lastMessageSentTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", lastMessageSentTime.Seconds})
    lastMessageSentTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", lastMessageSentTime.Nanoseconds})

    lastMessageSentTime.EntityData.YListKeys = []string {}

    return &(lastMessageSentTime.EntityData)
}

// Rsvp_InterfaceNeighborDetails
// Table of detailed info about I/F neighbors
type Rsvp_InterfaceNeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single interface neighbor. The type is slice of
    // Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail.
    InterfaceNeighborDetail []*Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail
}

func (interfaceNeighborDetails *Rsvp_InterfaceNeighborDetails) GetEntityData() *types.CommonEntityData {
    interfaceNeighborDetails.EntityData.YFilter = interfaceNeighborDetails.YFilter
    interfaceNeighborDetails.EntityData.YangName = "interface-neighbor-details"
    interfaceNeighborDetails.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborDetails.EntityData.ParentYangName = "rsvp"
    interfaceNeighborDetails.EntityData.SegmentPath = "interface-neighbor-details"
    interfaceNeighborDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + interfaceNeighborDetails.EntityData.SegmentPath
    interfaceNeighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborDetails.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborDetails.EntityData.Children.Append("interface-neighbor-detail", types.YChild{"InterfaceNeighborDetail", nil})
    for i := range interfaceNeighborDetails.InterfaceNeighborDetail {
        interfaceNeighborDetails.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborDetails.InterfaceNeighborDetail[i]), types.YChild{"InterfaceNeighborDetail", interfaceNeighborDetails.InterfaceNeighborDetail[i]})
    }
    interfaceNeighborDetails.EntityData.Leafs = types.NewOrderedMap()

    interfaceNeighborDetails.EntityData.YListKeys = []string {}

    return &(interfaceNeighborDetails.EntityData)
}

// Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail
// Detailed info for a single interface neighbor
type Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Detail list of I/F Neighbors. The type is slice of
    // Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail.
    InterfaceNeighborListDetail []*Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
}

func (interfaceNeighborDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail) GetEntityData() *types.CommonEntityData {
    interfaceNeighborDetail.EntityData.YFilter = interfaceNeighborDetail.YFilter
    interfaceNeighborDetail.EntityData.YangName = "interface-neighbor-detail"
    interfaceNeighborDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborDetail.EntityData.ParentYangName = "interface-neighbor-details"
    interfaceNeighborDetail.EntityData.SegmentPath = "interface-neighbor-detail" + types.AddKeyToken(interfaceNeighborDetail.NeighborAddress, "neighbor-address")
    interfaceNeighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-details/" + interfaceNeighborDetail.EntityData.SegmentPath
    interfaceNeighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborDetail.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborDetail.EntityData.Children.Append("interface-neighbor-list-detail", types.YChild{"InterfaceNeighborListDetail", nil})
    for i := range interfaceNeighborDetail.InterfaceNeighborListDetail {
        types.SetYListKey(interfaceNeighborDetail.InterfaceNeighborListDetail[i], i)
        interfaceNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(interfaceNeighborDetail.InterfaceNeighborListDetail[i]), types.YChild{"InterfaceNeighborListDetail", interfaceNeighborDetail.InterfaceNeighborListDetail[i]})
    }
    interfaceNeighborDetail.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", interfaceNeighborDetail.NeighborAddress})
    interfaceNeighborDetail.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", interfaceNeighborDetail.NodeAddress})

    interfaceNeighborDetail.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(interfaceNeighborDetail.EntityData)
}

// Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail
// Detail list of I/F Neighbors
type Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface Neighbor address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceNeighborAddress interface{}

    // Neighbor's Interface handle. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    NeighborInterfaceName interface{}

    // Is Neighbor's RR enable. The type is bool.
    IsRrEnabled interface{}

    // Neighbor's epoch value. The type is interface{} with range: 0..4294967295.
    NeighborEpoch interface{}

    // Number of out of order msgs. The type is interface{} with range:
    // 0..4294967295.
    OutOfOrderMessages interface{}

    // Number of retransmitted msgs. The type is interface{} with range:
    // 0..4294967295.
    RetransmittedMessages interface{}
}

func (interfaceNeighborListDetail *Rsvp_InterfaceNeighborDetails_InterfaceNeighborDetail_InterfaceNeighborListDetail) GetEntityData() *types.CommonEntityData {
    interfaceNeighborListDetail.EntityData.YFilter = interfaceNeighborListDetail.YFilter
    interfaceNeighborListDetail.EntityData.YangName = "interface-neighbor-list-detail"
    interfaceNeighborListDetail.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighborListDetail.EntityData.ParentYangName = "interface-neighbor-detail"
    interfaceNeighborListDetail.EntityData.SegmentPath = "interface-neighbor-list-detail" + types.AddNoKeyToken(interfaceNeighborListDetail)
    interfaceNeighborListDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-neighbor-details/interface-neighbor-detail/" + interfaceNeighborListDetail.EntityData.SegmentPath
    interfaceNeighborListDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighborListDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighborListDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighborListDetail.EntityData.Children = types.NewOrderedMap()
    interfaceNeighborListDetail.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighborListDetail.EntityData.Leafs.Append("interface-neighbor-address", types.YLeaf{"InterfaceNeighborAddress", interfaceNeighborListDetail.InterfaceNeighborAddress})
    interfaceNeighborListDetail.EntityData.Leafs.Append("neighbor-interface-name", types.YLeaf{"NeighborInterfaceName", interfaceNeighborListDetail.NeighborInterfaceName})
    interfaceNeighborListDetail.EntityData.Leafs.Append("is-rr-enabled", types.YLeaf{"IsRrEnabled", interfaceNeighborListDetail.IsRrEnabled})
    interfaceNeighborListDetail.EntityData.Leafs.Append("neighbor-epoch", types.YLeaf{"NeighborEpoch", interfaceNeighborListDetail.NeighborEpoch})
    interfaceNeighborListDetail.EntityData.Leafs.Append("out-of-order-messages", types.YLeaf{"OutOfOrderMessages", interfaceNeighborListDetail.OutOfOrderMessages})
    interfaceNeighborListDetail.EntityData.Leafs.Append("retransmitted-messages", types.YLeaf{"RetransmittedMessages", interfaceNeighborListDetail.RetransmittedMessages})

    interfaceNeighborListDetail.EntityData.YListKeys = []string {}

    return &(interfaceNeighborListDetail.EntityData)
}

// Rsvp_Nsr
// RSVP NSR information
type Rsvp_Nsr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP NSR status information.
    Status Rsvp_Nsr_Status
}

func (nsr *Rsvp_Nsr) GetEntityData() *types.CommonEntityData {
    nsr.EntityData.YFilter = nsr.YFilter
    nsr.EntityData.YangName = "nsr"
    nsr.EntityData.BundleName = "cisco_ios_xr"
    nsr.EntityData.ParentYangName = "rsvp"
    nsr.EntityData.SegmentPath = "nsr"
    nsr.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + nsr.EntityData.SegmentPath
    nsr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsr.EntityData.Children = types.NewOrderedMap()
    nsr.EntityData.Children.Append("status", types.YChild{"Status", &nsr.Status})
    nsr.EntityData.Leafs = types.NewOrderedMap()

    nsr.EntityData.YListKeys = []string {}

    return &(nsr.EntityData)
}

// Rsvp_Nsr_Status
// RSVP NSR status information
type Rsvp_Nsr_Status struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Nsr_Status_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Nsr_Status_PreviousIdtStatus
}

func (status *Rsvp_Nsr_Status) GetEntityData() *types.CommonEntityData {
    status.EntityData.YFilter = status.YFilter
    status.EntityData.YangName = "status"
    status.EntityData.BundleName = "cisco_ios_xr"
    status.EntityData.ParentYangName = "nsr"
    status.EntityData.SegmentPath = "status"
    status.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/" + status.EntityData.SegmentPath
    status.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    status.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    status.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    status.EntityData.Children = types.NewOrderedMap()
    status.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &status.IdtStatus})
    status.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &status.PreviousIdtStatus})
    status.EntityData.Leafs = types.NewOrderedMap()
    status.EntityData.Leafs.Append("role", types.YLeaf{"Role", status.Role})

    status.EntityData.YListKeys = []string {}

    return &(status.EntityData)
}

// Rsvp_Nsr_Status_IdtStatus
// IDT status
type Rsvp_Nsr_Status_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Nsr_Status_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// Rsvp_Nsr_Status_PreviousIdtStatus
// Previous IDT status
type Rsvp_Nsr_Status_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Nsr_Status_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/nsr/status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// Rsvp_Summary
// RSVP summary information
type Rsvp_Summary struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Total interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}

    // Total LSPs. The type is interface{} with range: 0..4294967295.
    LsPs interface{}

    // Issu status.
    IssuStatus Rsvp_Summary_IssuStatus

    // NSR status.
    NsrStatus Rsvp_Summary_NsrStatus

    // All database counters.
    DatabaseCounters Rsvp_Summary_DatabaseCounters
}

func (summary *Rsvp_Summary) GetEntityData() *types.CommonEntityData {
    summary.EntityData.YFilter = summary.YFilter
    summary.EntityData.YangName = "summary"
    summary.EntityData.BundleName = "cisco_ios_xr"
    summary.EntityData.ParentYangName = "rsvp"
    summary.EntityData.SegmentPath = "summary"
    summary.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + summary.EntityData.SegmentPath
    summary.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    summary.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    summary.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    summary.EntityData.Children = types.NewOrderedMap()
    summary.EntityData.Children.Append("issu-status", types.YChild{"IssuStatus", &summary.IssuStatus})
    summary.EntityData.Children.Append("nsr-status", types.YChild{"NsrStatus", &summary.NsrStatus})
    summary.EntityData.Children.Append("database-counters", types.YChild{"DatabaseCounters", &summary.DatabaseCounters})
    summary.EntityData.Leafs = types.NewOrderedMap()
    summary.EntityData.Leafs.Append("interfaces", types.YLeaf{"Interfaces", summary.Interfaces})
    summary.EntityData.Leafs.Append("ls-ps", types.YLeaf{"LsPs", summary.LsPs})

    summary.EntityData.YListKeys = []string {}

    return &(summary.EntityData)
}

// Rsvp_Summary_IssuStatus
// Issu status
type Rsvp_Summary_IssuStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Summary_IssuStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Summary_IssuStatus_PreviousIdtStatus
}

func (issuStatus *Rsvp_Summary_IssuStatus) GetEntityData() *types.CommonEntityData {
    issuStatus.EntityData.YFilter = issuStatus.YFilter
    issuStatus.EntityData.YangName = "issu-status"
    issuStatus.EntityData.BundleName = "cisco_ios_xr"
    issuStatus.EntityData.ParentYangName = "summary"
    issuStatus.EntityData.SegmentPath = "issu-status"
    issuStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/" + issuStatus.EntityData.SegmentPath
    issuStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    issuStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    issuStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    issuStatus.EntityData.Children = types.NewOrderedMap()
    issuStatus.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &issuStatus.IdtStatus})
    issuStatus.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &issuStatus.PreviousIdtStatus})
    issuStatus.EntityData.Leafs = types.NewOrderedMap()
    issuStatus.EntityData.Leafs.Append("role", types.YLeaf{"Role", issuStatus.Role})

    issuStatus.EntityData.YListKeys = []string {}

    return &(issuStatus.EntityData)
}

// Rsvp_Summary_IssuStatus_IdtStatus
// IDT status
type Rsvp_Summary_IssuStatus_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Summary_IssuStatus_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "issu-status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/issu-status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// Rsvp_Summary_IssuStatus_PreviousIdtStatus
// Previous IDT status
type Rsvp_Summary_IssuStatus_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Summary_IssuStatus_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "issu-status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/issu-status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// Rsvp_Summary_NsrStatus
// NSR status
type Rsvp_Summary_NsrStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Process role. The type is RsvpProcRole.
    Role interface{}

    // IDT status.
    IdtStatus Rsvp_Summary_NsrStatus_IdtStatus

    // Previous IDT status.
    PreviousIdtStatus Rsvp_Summary_NsrStatus_PreviousIdtStatus
}

func (nsrStatus *Rsvp_Summary_NsrStatus) GetEntityData() *types.CommonEntityData {
    nsrStatus.EntityData.YFilter = nsrStatus.YFilter
    nsrStatus.EntityData.YangName = "nsr-status"
    nsrStatus.EntityData.BundleName = "cisco_ios_xr"
    nsrStatus.EntityData.ParentYangName = "summary"
    nsrStatus.EntityData.SegmentPath = "nsr-status"
    nsrStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/" + nsrStatus.EntityData.SegmentPath
    nsrStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    nsrStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    nsrStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    nsrStatus.EntityData.Children = types.NewOrderedMap()
    nsrStatus.EntityData.Children.Append("idt-status", types.YChild{"IdtStatus", &nsrStatus.IdtStatus})
    nsrStatus.EntityData.Children.Append("previous-idt-status", types.YChild{"PreviousIdtStatus", &nsrStatus.PreviousIdtStatus})
    nsrStatus.EntityData.Leafs = types.NewOrderedMap()
    nsrStatus.EntityData.Leafs.Append("role", types.YLeaf{"Role", nsrStatus.Role})

    nsrStatus.EntityData.YListKeys = []string {}

    return &(nsrStatus.EntityData)
}

// Rsvp_Summary_NsrStatus_IdtStatus
// IDT status
type Rsvp_Summary_NsrStatus_IdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (idtStatus *Rsvp_Summary_NsrStatus_IdtStatus) GetEntityData() *types.CommonEntityData {
    idtStatus.EntityData.YFilter = idtStatus.YFilter
    idtStatus.EntityData.YangName = "idt-status"
    idtStatus.EntityData.BundleName = "cisco_ios_xr"
    idtStatus.EntityData.ParentYangName = "nsr-status"
    idtStatus.EntityData.SegmentPath = "idt-status"
    idtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/nsr-status/" + idtStatus.EntityData.SegmentPath
    idtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    idtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    idtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    idtStatus.EntityData.Children = types.NewOrderedMap()
    idtStatus.EntityData.Leafs = types.NewOrderedMap()
    idtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", idtStatus.SyncStatus})
    idtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", idtStatus.NotReadyReason})
    idtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", idtStatus.IdtStartTime})
    idtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", idtStatus.IdtEndTime})
    idtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", idtStatus.DeclareTime})
    idtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", idtStatus.WithdrawTime})

    idtStatus.EntityData.YListKeys = []string {}

    return &(idtStatus.EntityData)
}

// Rsvp_Summary_NsrStatus_PreviousIdtStatus
// Previous IDT status
type Rsvp_Summary_NsrStatus_PreviousIdtStatus struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sync status. The type is RsvpSyncStatus.
    SyncStatus interface{}

    // Not ready reason. The type is RsvpProcNsrNotReadyReason.
    NotReadyReason interface{}

    // IDT start timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtStartTime interface{}

    // IDT end timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    IdtEndTime interface{}

    // Declare ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    DeclareTime interface{}

    // Withdraw ready timestamp in seconds. The type is interface{} with range:
    // 0..4294967295. Units are second.
    WithdrawTime interface{}
}

func (previousIdtStatus *Rsvp_Summary_NsrStatus_PreviousIdtStatus) GetEntityData() *types.CommonEntityData {
    previousIdtStatus.EntityData.YFilter = previousIdtStatus.YFilter
    previousIdtStatus.EntityData.YangName = "previous-idt-status"
    previousIdtStatus.EntityData.BundleName = "cisco_ios_xr"
    previousIdtStatus.EntityData.ParentYangName = "nsr-status"
    previousIdtStatus.EntityData.SegmentPath = "previous-idt-status"
    previousIdtStatus.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/nsr-status/" + previousIdtStatus.EntityData.SegmentPath
    previousIdtStatus.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    previousIdtStatus.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    previousIdtStatus.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    previousIdtStatus.EntityData.Children = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs = types.NewOrderedMap()
    previousIdtStatus.EntityData.Leafs.Append("sync-status", types.YLeaf{"SyncStatus", previousIdtStatus.SyncStatus})
    previousIdtStatus.EntityData.Leafs.Append("not-ready-reason", types.YLeaf{"NotReadyReason", previousIdtStatus.NotReadyReason})
    previousIdtStatus.EntityData.Leafs.Append("idt-start-time", types.YLeaf{"IdtStartTime", previousIdtStatus.IdtStartTime})
    previousIdtStatus.EntityData.Leafs.Append("idt-end-time", types.YLeaf{"IdtEndTime", previousIdtStatus.IdtEndTime})
    previousIdtStatus.EntityData.Leafs.Append("declare-time", types.YLeaf{"DeclareTime", previousIdtStatus.DeclareTime})
    previousIdtStatus.EntityData.Leafs.Append("withdraw-time", types.YLeaf{"WithdrawTime", previousIdtStatus.WithdrawTime})

    previousIdtStatus.EntityData.YListKeys = []string {}

    return &(previousIdtStatus.EntityData)
}

// Rsvp_Summary_DatabaseCounters
// All database counters
type Rsvp_Summary_DatabaseCounters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of sessions. The type is interface{} with range: 0..4294967295.
    Sessions interface{}

    // Number of locally created and incoming path states. The type is interface{}
    // with range: 0..4294967295.
    IncomingPaths interface{}

    // Number of outgoing path states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingPaths interface{}

    // Number of locally created and incoming reservation states. The type is
    // interface{} with range: 0..4294967295.
    IncomingReservations interface{}

    // Number of outgoing reservation states. The type is interface{} with range:
    // 0..4294967295.
    OutgoingReservations interface{}

    // Number of Interfaces. The type is interface{} with range: 0..4294967295.
    Interfaces interface{}
}

func (databaseCounters *Rsvp_Summary_DatabaseCounters) GetEntityData() *types.CommonEntityData {
    databaseCounters.EntityData.YFilter = databaseCounters.YFilter
    databaseCounters.EntityData.YangName = "database-counters"
    databaseCounters.EntityData.BundleName = "cisco_ios_xr"
    databaseCounters.EntityData.ParentYangName = "summary"
    databaseCounters.EntityData.SegmentPath = "database-counters"
    databaseCounters.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/summary/" + databaseCounters.EntityData.SegmentPath
    databaseCounters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    databaseCounters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    databaseCounters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    databaseCounters.EntityData.Children = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs = types.NewOrderedMap()
    databaseCounters.EntityData.Leafs.Append("sessions", types.YLeaf{"Sessions", databaseCounters.Sessions})
    databaseCounters.EntityData.Leafs.Append("incoming-paths", types.YLeaf{"IncomingPaths", databaseCounters.IncomingPaths})
    databaseCounters.EntityData.Leafs.Append("outgoing-paths", types.YLeaf{"OutgoingPaths", databaseCounters.OutgoingPaths})
    databaseCounters.EntityData.Leafs.Append("incoming-reservations", types.YLeaf{"IncomingReservations", databaseCounters.IncomingReservations})
    databaseCounters.EntityData.Leafs.Append("outgoing-reservations", types.YLeaf{"OutgoingReservations", databaseCounters.OutgoingReservations})
    databaseCounters.EntityData.Leafs.Append("interfaces", types.YLeaf{"Interfaces", databaseCounters.Interfaces})

    databaseCounters.EntityData.YListKeys = []string {}

    return &(databaseCounters.EntityData)
}

// Rsvp_Frrs
// Table of detailed info about Fast Re-route
// states
type Rsvp_Frrs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single Fast Re-route state. The type is slice of
    // Rsvp_Frrs_Frr.
    Frr []*Rsvp_Frrs_Frr
}

func (frrs *Rsvp_Frrs) GetEntityData() *types.CommonEntityData {
    frrs.EntityData.YFilter = frrs.YFilter
    frrs.EntityData.YangName = "frrs"
    frrs.EntityData.BundleName = "cisco_ios_xr"
    frrs.EntityData.ParentYangName = "rsvp"
    frrs.EntityData.SegmentPath = "frrs"
    frrs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + frrs.EntityData.SegmentPath
    frrs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frrs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frrs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frrs.EntityData.Children = types.NewOrderedMap()
    frrs.EntityData.Children.Append("frr", types.YChild{"Frr", nil})
    for i := range frrs.Frr {
        types.SetYListKey(frrs.Frr[i], i)
        frrs.EntityData.Children.Append(types.GetSegmentPath(frrs.Frr[i]), types.YChild{"Frr", frrs.Frr[i]})
    }
    frrs.EntityData.Leafs = types.NewOrderedMap()

    frrs.EntityData.YListKeys = []string {}

    return &(frrs.EntityData)
}

// Rsvp_Frrs_Frr
// Detailed info for a single Fast Re-route state
type Rsvp_Frrs_Frr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // RSVP FRR Path States. The type is RsvpMgmtFrrStateEnum.
    PathStatus interface{}

    // RSVP FRR Reservation States. The type is RsvpMgmtFrrStateEnum.
    ReservationStatus interface{}

    // RSVP Session Information.
    Session Rsvp_Frrs_Frr_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_Frrs_Frr_S2lSubLsp
}

func (frr *Rsvp_Frrs_Frr) GetEntityData() *types.CommonEntityData {
    frr.EntityData.YFilter = frr.YFilter
    frr.EntityData.YangName = "frr"
    frr.EntityData.BundleName = "cisco_ios_xr"
    frr.EntityData.ParentYangName = "frrs"
    frr.EntityData.SegmentPath = "frr" + types.AddNoKeyToken(frr)
    frr.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/" + frr.EntityData.SegmentPath
    frr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    frr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    frr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    frr.EntityData.Children = types.NewOrderedMap()
    frr.EntityData.Children.Append("session", types.YChild{"Session", &frr.Session})
    frr.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &frr.S2lSubLsp})
    frr.EntityData.Leafs = types.NewOrderedMap()
    frr.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", frr.DestinationAddress})
    frr.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", frr.DestinationPort})
    frr.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", frr.Protocol})
    frr.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", frr.ExtendedTunnelId})
    frr.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", frr.SessionType})
    frr.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", frr.P2mpId})
    frr.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", frr.SourceAddress})
    frr.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", frr.SourcePort})
    frr.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", frr.SubGroupOrigin})
    frr.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", frr.SubGroupId})
    frr.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", frr.VrfName})
    frr.EntityData.Leafs.Append("path-status", types.YLeaf{"PathStatus", frr.PathStatus})
    frr.EntityData.Leafs.Append("reservation-status", types.YLeaf{"ReservationStatus", frr.ReservationStatus})

    frr.EntityData.YListKeys = []string {}

    return &(frr.EntityData)
}

// Rsvp_Frrs_Frr_Session
// RSVP Session Information
type Rsvp_Frrs_Frr_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_Frrs_Frr_Session_RsvpSession
}

func (session *Rsvp_Frrs_Frr_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "frr"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_Frrs_Frr_Session_RsvpSession
// RSVP Session
type Rsvp_Frrs_Frr_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_Frrs_Frr_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_Frrs_Frr_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_Frrs_Frr_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_Frrs_Frr_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_Frrs_Frr_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "frr"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/frrs/frr/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_RequestBriefs
// Table of brief info about requests
type Rsvp_RequestBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a request. The type is slice of
    // Rsvp_RequestBriefs_RequestBrief.
    RequestBrief []*Rsvp_RequestBriefs_RequestBrief
}

func (requestBriefs *Rsvp_RequestBriefs) GetEntityData() *types.CommonEntityData {
    requestBriefs.EntityData.YFilter = requestBriefs.YFilter
    requestBriefs.EntityData.YangName = "request-briefs"
    requestBriefs.EntityData.BundleName = "cisco_ios_xr"
    requestBriefs.EntityData.ParentYangName = "rsvp"
    requestBriefs.EntityData.SegmentPath = "request-briefs"
    requestBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + requestBriefs.EntityData.SegmentPath
    requestBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestBriefs.EntityData.Children = types.NewOrderedMap()
    requestBriefs.EntityData.Children.Append("request-brief", types.YChild{"RequestBrief", nil})
    for i := range requestBriefs.RequestBrief {
        types.SetYListKey(requestBriefs.RequestBrief[i], i)
        requestBriefs.EntityData.Children.Append(types.GetSegmentPath(requestBriefs.RequestBrief[i]), types.YChild{"RequestBrief", requestBriefs.RequestBrief[i]})
    }
    requestBriefs.EntityData.Leafs = types.NewOrderedMap()

    requestBriefs.EntityData.YListKeys = []string {}

    return &(requestBriefs.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief
// Brief info for a request
type Rsvp_RequestBriefs_RequestBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_RequestBriefs_RequestBrief_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_RequestBriefs_RequestBrief_S2lSubLsp

    // Flow Spec Information.
    FlowSpec Rsvp_RequestBriefs_RequestBrief_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec

    // RSVP Filter.
    Filter Rsvp_RequestBriefs_RequestBrief_Filter

    // RSVP Style.
    Style Rsvp_RequestBriefs_RequestBrief_Style
}

func (requestBrief *Rsvp_RequestBriefs_RequestBrief) GetEntityData() *types.CommonEntityData {
    requestBrief.EntityData.YFilter = requestBrief.YFilter
    requestBrief.EntityData.YangName = "request-brief"
    requestBrief.EntityData.BundleName = "cisco_ios_xr"
    requestBrief.EntityData.ParentYangName = "request-briefs"
    requestBrief.EntityData.SegmentPath = "request-brief" + types.AddNoKeyToken(requestBrief)
    requestBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/" + requestBrief.EntityData.SegmentPath
    requestBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestBrief.EntityData.Children = types.NewOrderedMap()
    requestBrief.EntityData.Children.Append("session", types.YChild{"Session", &requestBrief.Session})
    requestBrief.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &requestBrief.S2lSubLsp})
    requestBrief.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &requestBrief.FlowSpec})
    requestBrief.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &requestBrief.GenericFlowSpec})
    requestBrief.EntityData.Children.Append("filter", types.YChild{"Filter", &requestBrief.Filter})
    requestBrief.EntityData.Children.Append("style", types.YChild{"Style", &requestBrief.Style})
    requestBrief.EntityData.Leafs = types.NewOrderedMap()
    requestBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", requestBrief.DestinationAddress})
    requestBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", requestBrief.DestinationPort})
    requestBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", requestBrief.Protocol})
    requestBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", requestBrief.ExtendedTunnelId})
    requestBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", requestBrief.SessionType})
    requestBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", requestBrief.P2mpId})
    requestBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", requestBrief.SourceAddress})
    requestBrief.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", requestBrief.SourcePort})
    requestBrief.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", requestBrief.SubGroupOrigin})
    requestBrief.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", requestBrief.SubGroupId})
    requestBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", requestBrief.VrfName})
    requestBrief.EntityData.Leafs.Append("output-interface", types.YLeaf{"OutputInterface", requestBrief.OutputInterface})

    requestBrief.EntityData.YListKeys = []string {}

    return &(requestBrief.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Session
// RSVP Session Information
type Rsvp_RequestBriefs_RequestBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession
}

func (session *Rsvp_RequestBriefs_RequestBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "request-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession
// RSVP Session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_RequestBriefs_RequestBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RequestBriefs_RequestBrief_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_RequestBriefs_RequestBrief_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "request-brief"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_FlowSpec
// Flow Spec Information
type Rsvp_RequestBriefs_RequestBrief_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RequestBriefs_RequestBrief_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "request-brief"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "request-brief"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *Rsvp_RequestBriefs_RequestBrief_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Filter
// RSVP Filter
type Rsvp_RequestBriefs_RequestBrief_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter
}

func (filter *Rsvp_RequestBriefs_RequestBrief_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "request-brief"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_RequestBriefs_RequestBrief_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_RequestBriefs_RequestBrief_Style
// RSVP Style
type Rsvp_RequestBriefs_RequestBrief_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RequestBriefs_RequestBrief_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "request-brief"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-briefs/request-brief/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// Rsvp_RequestDetails
// Table of detail info about requests
type Rsvp_RequestDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail info for a request. The type is slice of
    // Rsvp_RequestDetails_RequestDetail.
    RequestDetail []*Rsvp_RequestDetails_RequestDetail
}

func (requestDetails *Rsvp_RequestDetails) GetEntityData() *types.CommonEntityData {
    requestDetails.EntityData.YFilter = requestDetails.YFilter
    requestDetails.EntityData.YangName = "request-details"
    requestDetails.EntityData.BundleName = "cisco_ios_xr"
    requestDetails.EntityData.ParentYangName = "rsvp"
    requestDetails.EntityData.SegmentPath = "request-details"
    requestDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + requestDetails.EntityData.SegmentPath
    requestDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestDetails.EntityData.Children = types.NewOrderedMap()
    requestDetails.EntityData.Children.Append("request-detail", types.YChild{"RequestDetail", nil})
    for i := range requestDetails.RequestDetail {
        types.SetYListKey(requestDetails.RequestDetail[i], i)
        requestDetails.EntityData.Children.Append(types.GetSegmentPath(requestDetails.RequestDetail[i]), types.YChild{"RequestDetail", requestDetails.RequestDetail[i]})
    }
    requestDetails.EntityData.Leafs = types.NewOrderedMap()

    requestDetails.EntityData.YListKeys = []string {}

    return &(requestDetails.EntityData)
}

// Rsvp_RequestDetails_RequestDetail
// Detail info for a request
type Rsvp_RequestDetails_RequestDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // output Interface. The type is string.
    OutputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_RequestDetails_RequestDetail_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_RequestDetails_RequestDetail_S2lSubLsp

    // Flow Spec Information.
    FlowSpec Rsvp_RequestDetails_RequestDetail_FlowSpec

    // Generic Flow Spec Information.
    GenericFlowSpec Rsvp_RequestDetails_RequestDetail_GenericFlowSpec

    // RSVP Filter.
    Filter Rsvp_RequestDetails_RequestDetail_Filter

    // RSVP Style.
    Style Rsvp_RequestDetails_RequestDetail_Style

    // Request flags.
    ReqFlags Rsvp_RequestDetails_RequestDetail_ReqFlags

    // Hop Infomation.
    Hop Rsvp_RequestDetails_RequestDetail_Hop

    // RSVP Header Information.
    Header Rsvp_RequestDetails_RequestDetail_Header

    // RSVP Policy Sources.
    PolicySources Rsvp_RequestDetails_RequestDetail_PolicySources

    // RSVP Policy Flags.
    PolicyFlags Rsvp_RequestDetails_RequestDetail_PolicyFlags

    // RSVP Query Flags.
    PolicyQueryFlags Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags

    // List of RSB keys. The type is slice of
    // Rsvp_RequestDetails_RequestDetail_PsbKey.
    PsbKey []*Rsvp_RequestDetails_RequestDetail_PsbKey

    // List of RSB keys. The type is slice of
    // Rsvp_RequestDetails_RequestDetail_RsbKey.
    RsbKey []*Rsvp_RequestDetails_RequestDetail_RsbKey
}

func (requestDetail *Rsvp_RequestDetails_RequestDetail) GetEntityData() *types.CommonEntityData {
    requestDetail.EntityData.YFilter = requestDetail.YFilter
    requestDetail.EntityData.YangName = "request-detail"
    requestDetail.EntityData.BundleName = "cisco_ios_xr"
    requestDetail.EntityData.ParentYangName = "request-details"
    requestDetail.EntityData.SegmentPath = "request-detail" + types.AddNoKeyToken(requestDetail)
    requestDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/" + requestDetail.EntityData.SegmentPath
    requestDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    requestDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    requestDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    requestDetail.EntityData.Children = types.NewOrderedMap()
    requestDetail.EntityData.Children.Append("session", types.YChild{"Session", &requestDetail.Session})
    requestDetail.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &requestDetail.S2lSubLsp})
    requestDetail.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &requestDetail.FlowSpec})
    requestDetail.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &requestDetail.GenericFlowSpec})
    requestDetail.EntityData.Children.Append("filter", types.YChild{"Filter", &requestDetail.Filter})
    requestDetail.EntityData.Children.Append("style", types.YChild{"Style", &requestDetail.Style})
    requestDetail.EntityData.Children.Append("req-flags", types.YChild{"ReqFlags", &requestDetail.ReqFlags})
    requestDetail.EntityData.Children.Append("hop", types.YChild{"Hop", &requestDetail.Hop})
    requestDetail.EntityData.Children.Append("header", types.YChild{"Header", &requestDetail.Header})
    requestDetail.EntityData.Children.Append("policy-sources", types.YChild{"PolicySources", &requestDetail.PolicySources})
    requestDetail.EntityData.Children.Append("policy-flags", types.YChild{"PolicyFlags", &requestDetail.PolicyFlags})
    requestDetail.EntityData.Children.Append("policy-query-flags", types.YChild{"PolicyQueryFlags", &requestDetail.PolicyQueryFlags})
    requestDetail.EntityData.Children.Append("psb-key", types.YChild{"PsbKey", nil})
    for i := range requestDetail.PsbKey {
        types.SetYListKey(requestDetail.PsbKey[i], i)
        requestDetail.EntityData.Children.Append(types.GetSegmentPath(requestDetail.PsbKey[i]), types.YChild{"PsbKey", requestDetail.PsbKey[i]})
    }
    requestDetail.EntityData.Children.Append("rsb-key", types.YChild{"RsbKey", nil})
    for i := range requestDetail.RsbKey {
        types.SetYListKey(requestDetail.RsbKey[i], i)
        requestDetail.EntityData.Children.Append(types.GetSegmentPath(requestDetail.RsbKey[i]), types.YChild{"RsbKey", requestDetail.RsbKey[i]})
    }
    requestDetail.EntityData.Leafs = types.NewOrderedMap()
    requestDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", requestDetail.DestinationAddress})
    requestDetail.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", requestDetail.DestinationPort})
    requestDetail.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", requestDetail.Protocol})
    requestDetail.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", requestDetail.ExtendedTunnelId})
    requestDetail.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", requestDetail.SessionType})
    requestDetail.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", requestDetail.P2mpId})
    requestDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", requestDetail.SourceAddress})
    requestDetail.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", requestDetail.SourcePort})
    requestDetail.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", requestDetail.SubGroupOrigin})
    requestDetail.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", requestDetail.SubGroupId})
    requestDetail.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", requestDetail.VrfName})
    requestDetail.EntityData.Leafs.Append("output-interface", types.YLeaf{"OutputInterface", requestDetail.OutputInterface})

    requestDetail.EntityData.YListKeys = []string {}

    return &(requestDetail.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Session
// RSVP Session Information
type Rsvp_RequestDetails_RequestDetail_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession
}

func (session *Rsvp_RequestDetails_RequestDetail_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "request-detail"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession
// RSVP Session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_RequestDetails_RequestDetail_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_RequestDetails_RequestDetail_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_RequestDetails_RequestDetail_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "request-detail"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_FlowSpec
// Flow Spec Information
type Rsvp_RequestDetails_RequestDetail_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_RequestDetails_RequestDetail_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "request-detail"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_GenericFlowSpec
// Generic Flow Spec Information
type Rsvp_RequestDetails_RequestDetail_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "request-detail"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *Rsvp_RequestDetails_RequestDetail_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Filter
// RSVP Filter
type Rsvp_RequestDetails_RequestDetail_Filter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter
}

func (filter *Rsvp_RequestDetails_RequestDetail_Filter) GetEntityData() *types.CommonEntityData {
    filter.EntityData.YFilter = filter.YFilter
    filter.EntityData.YangName = "filter"
    filter.EntityData.BundleName = "cisco_ios_xr"
    filter.EntityData.ParentYangName = "request-detail"
    filter.EntityData.SegmentPath = "filter"
    filter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + filter.EntityData.SegmentPath
    filter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    filter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    filter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    filter.EntityData.Children = types.NewOrderedMap()
    filter.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &filter.RsvpFilter})
    filter.EntityData.Leafs = types.NewOrderedMap()

    filter.EntityData.YListKeys = []string {}

    return &(filter.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter
// RSVP Filter
type Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "filter"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_RequestDetails_RequestDetail_Filter_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/filter/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Style
// RSVP Style
type Rsvp_RequestDetails_RequestDetail_Style struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Reservation Type: WF, SE or FF. The type is
    // RsvpMgmtReservationTypeEnum.
    ReservationType interface{}
}

func (style *Rsvp_RequestDetails_RequestDetail_Style) GetEntityData() *types.CommonEntityData {
    style.EntityData.YFilter = style.YFilter
    style.EntityData.YangName = "style"
    style.EntityData.BundleName = "cisco_ios_xr"
    style.EntityData.ParentYangName = "request-detail"
    style.EntityData.SegmentPath = "style"
    style.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + style.EntityData.SegmentPath
    style.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    style.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    style.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    style.EntityData.Children = types.NewOrderedMap()
    style.EntityData.Leafs = types.NewOrderedMap()
    style.EntityData.Leafs.Append("reservation-type", types.YLeaf{"ReservationType", style.ReservationType})

    style.EntityData.YListKeys = []string {}

    return &(style.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_ReqFlags
// Request flags
type Rsvp_RequestDetails_RequestDetail_ReqFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Receiver. The type is bool.
    IsLocalReceiver interface{}

    // Is neighbor refreshing. The type is bool.
    IsRefreshing interface{}

    // Send Confirm message. The type is bool.
    IsSendConfirm interface{}

    // Is ACK message outstanding. The type is bool.
    IsAckOutstanding interface{}

    // Is MessageID allocated. The type is bool.
    IsMessageIdAllocated interface{}

    // A NACK message was received. The type is bool.
    IsNackReceived interface{}

    // Retransmit the message. The type is bool.
    IsRetransmit interface{}

    // Message is paced. The type is bool.
    IsPaced interface{}

    // The Path message contains Label Request. The type is bool.
    IsLabelRequestInPath interface{}

    // The Path message contains RRO. The type is bool.
    IsRroInPath interface{}

    // Path has Session-Attr object with Record Labels set. The type is bool.
    IsRecordLabelInPath interface{}

    // Is node a Merge Point. The type is bool.
    IsMergePoint interface{}
}

func (reqFlags *Rsvp_RequestDetails_RequestDetail_ReqFlags) GetEntityData() *types.CommonEntityData {
    reqFlags.EntityData.YFilter = reqFlags.YFilter
    reqFlags.EntityData.YangName = "req-flags"
    reqFlags.EntityData.BundleName = "cisco_ios_xr"
    reqFlags.EntityData.ParentYangName = "request-detail"
    reqFlags.EntityData.SegmentPath = "req-flags"
    reqFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + reqFlags.EntityData.SegmentPath
    reqFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reqFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reqFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reqFlags.EntityData.Children = types.NewOrderedMap()
    reqFlags.EntityData.Leafs = types.NewOrderedMap()
    reqFlags.EntityData.Leafs.Append("is-local-receiver", types.YLeaf{"IsLocalReceiver", reqFlags.IsLocalReceiver})
    reqFlags.EntityData.Leafs.Append("is-refreshing", types.YLeaf{"IsRefreshing", reqFlags.IsRefreshing})
    reqFlags.EntityData.Leafs.Append("is-send-confirm", types.YLeaf{"IsSendConfirm", reqFlags.IsSendConfirm})
    reqFlags.EntityData.Leafs.Append("is-ack-outstanding", types.YLeaf{"IsAckOutstanding", reqFlags.IsAckOutstanding})
    reqFlags.EntityData.Leafs.Append("is-message-id-allocated", types.YLeaf{"IsMessageIdAllocated", reqFlags.IsMessageIdAllocated})
    reqFlags.EntityData.Leafs.Append("is-nack-received", types.YLeaf{"IsNackReceived", reqFlags.IsNackReceived})
    reqFlags.EntityData.Leafs.Append("is-retransmit", types.YLeaf{"IsRetransmit", reqFlags.IsRetransmit})
    reqFlags.EntityData.Leafs.Append("is-paced", types.YLeaf{"IsPaced", reqFlags.IsPaced})
    reqFlags.EntityData.Leafs.Append("is-label-request-in-path", types.YLeaf{"IsLabelRequestInPath", reqFlags.IsLabelRequestInPath})
    reqFlags.EntityData.Leafs.Append("is-rro-in-path", types.YLeaf{"IsRroInPath", reqFlags.IsRroInPath})
    reqFlags.EntityData.Leafs.Append("is-record-label-in-path", types.YLeaf{"IsRecordLabelInPath", reqFlags.IsRecordLabelInPath})
    reqFlags.EntityData.Leafs.Append("is-merge-point", types.YLeaf{"IsMergePoint", reqFlags.IsMergePoint})

    reqFlags.EntityData.YListKeys = []string {}

    return &(reqFlags.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Hop
// Hop Infomation
type Rsvp_RequestDetails_RequestDetail_Hop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // IP address of the neighbor. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Neighbor Logical Interface Handle. The type is interface{} with range:
    // 0..4294967295.
    NeighborLogicalInterfaceHandle interface{}
}

func (hop *Rsvp_RequestDetails_RequestDetail_Hop) GetEntityData() *types.CommonEntityData {
    hop.EntityData.YFilter = hop.YFilter
    hop.EntityData.YangName = "hop"
    hop.EntityData.BundleName = "cisco_ios_xr"
    hop.EntityData.ParentYangName = "request-detail"
    hop.EntityData.SegmentPath = "hop"
    hop.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + hop.EntityData.SegmentPath
    hop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hop.EntityData.Children = types.NewOrderedMap()
    hop.EntityData.Leafs = types.NewOrderedMap()
    hop.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", hop.NeighborAddress})
    hop.EntityData.Leafs.Append("neighbor-logical-interface-handle", types.YLeaf{"NeighborLogicalInterfaceHandle", hop.NeighborLogicalInterfaceHandle})

    hop.EntityData.YListKeys = []string {}

    return &(hop.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_Header
// RSVP Header Information
type Rsvp_RequestDetails_RequestDetail_Header struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Version. The type is interface{} with range: 0..255.
    RsvpVersion interface{}

    // RSVP Header Flags (defined in RFC2205 Section 3 .1.1). The type is
    // interface{} with range: 0..255.
    RsvpHeaderFlags interface{}

    // RSVP TTL. The type is interface{} with range: 0..255.
    RsvpTtl interface{}

    // RSVP Message Type. The type is interface{} with range: 0..255.
    RsvpMessageType interface{}

    // IP Type of Service. The type is interface{} with range: 0..255.
    IpTos interface{}

    // IP TTL. The type is interface{} with range: 0..255.
    IpTtl interface{}

    // IP Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IpSourceAddress interface{}
}

func (header *Rsvp_RequestDetails_RequestDetail_Header) GetEntityData() *types.CommonEntityData {
    header.EntityData.YFilter = header.YFilter
    header.EntityData.YangName = "header"
    header.EntityData.BundleName = "cisco_ios_xr"
    header.EntityData.ParentYangName = "request-detail"
    header.EntityData.SegmentPath = "header"
    header.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + header.EntityData.SegmentPath
    header.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    header.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    header.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    header.EntityData.Children = types.NewOrderedMap()
    header.EntityData.Leafs = types.NewOrderedMap()
    header.EntityData.Leafs.Append("rsvp-version", types.YLeaf{"RsvpVersion", header.RsvpVersion})
    header.EntityData.Leafs.Append("rsvp-header-flags", types.YLeaf{"RsvpHeaderFlags", header.RsvpHeaderFlags})
    header.EntityData.Leafs.Append("rsvp-ttl", types.YLeaf{"RsvpTtl", header.RsvpTtl})
    header.EntityData.Leafs.Append("rsvp-message-type", types.YLeaf{"RsvpMessageType", header.RsvpMessageType})
    header.EntityData.Leafs.Append("ip-tos", types.YLeaf{"IpTos", header.IpTos})
    header.EntityData.Leafs.Append("ip-ttl", types.YLeaf{"IpTtl", header.IpTtl})
    header.EntityData.Leafs.Append("ip-source-address", types.YLeaf{"IpSourceAddress", header.IpSourceAddress})

    header.EntityData.YListKeys = []string {}

    return &(header.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_PolicySources
// RSVP Policy Sources
type Rsvp_RequestDetails_RequestDetail_PolicySources struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Policy Source is TE Link. The type is bool.
    IsTeLink interface{}

    // Policy Source is Local. The type is bool.
    IsLocal interface{}

    // Policy Source is COPS. The type is bool.
    IsCops interface{}

    // Policy Source is Default. The type is bool.
    IsDefault interface{}

    // Policy Source is Cable. The type is bool.
    IsCable interface{}
}

func (policySources *Rsvp_RequestDetails_RequestDetail_PolicySources) GetEntityData() *types.CommonEntityData {
    policySources.EntityData.YFilter = policySources.YFilter
    policySources.EntityData.YangName = "policy-sources"
    policySources.EntityData.BundleName = "cisco_ios_xr"
    policySources.EntityData.ParentYangName = "request-detail"
    policySources.EntityData.SegmentPath = "policy-sources"
    policySources.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + policySources.EntityData.SegmentPath
    policySources.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policySources.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policySources.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policySources.EntityData.Children = types.NewOrderedMap()
    policySources.EntityData.Leafs = types.NewOrderedMap()
    policySources.EntityData.Leafs.Append("is-te-link", types.YLeaf{"IsTeLink", policySources.IsTeLink})
    policySources.EntityData.Leafs.Append("is-local", types.YLeaf{"IsLocal", policySources.IsLocal})
    policySources.EntityData.Leafs.Append("is-cops", types.YLeaf{"IsCops", policySources.IsCops})
    policySources.EntityData.Leafs.Append("is-default", types.YLeaf{"IsDefault", policySources.IsDefault})
    policySources.EntityData.Leafs.Append("is-cable", types.YLeaf{"IsCable", policySources.IsCable})

    policySources.EntityData.YListKeys = []string {}

    return &(policySources.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_PolicyFlags
// RSVP Policy Flags
type Rsvp_RequestDetails_RequestDetail_PolicyFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Accepted. The type is bool.
    IsAccepted interface{}

    // Installed. The type is bool.
    IsInstalled interface{}

    // Forwarding. The type is bool.
    IsForwarding interface{}
}

func (policyFlags *Rsvp_RequestDetails_RequestDetail_PolicyFlags) GetEntityData() *types.CommonEntityData {
    policyFlags.EntityData.YFilter = policyFlags.YFilter
    policyFlags.EntityData.YangName = "policy-flags"
    policyFlags.EntityData.BundleName = "cisco_ios_xr"
    policyFlags.EntityData.ParentYangName = "request-detail"
    policyFlags.EntityData.SegmentPath = "policy-flags"
    policyFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + policyFlags.EntityData.SegmentPath
    policyFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyFlags.EntityData.Children = types.NewOrderedMap()
    policyFlags.EntityData.Leafs = types.NewOrderedMap()
    policyFlags.EntityData.Leafs.Append("is-accepted", types.YLeaf{"IsAccepted", policyFlags.IsAccepted})
    policyFlags.EntityData.Leafs.Append("is-installed", types.YLeaf{"IsInstalled", policyFlags.IsInstalled})
    policyFlags.EntityData.Leafs.Append("is-forwarding", types.YLeaf{"IsForwarding", policyFlags.IsForwarding})

    policyFlags.EntityData.YListKeys = []string {}

    return &(policyFlags.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags
// RSVP Query Flags
type Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Needed. The type is bool.
    IsNeeded interface{}

    // Report Required. The type is bool.
    IsReportRequired interface{}

    // Resynchronization. The type is bool.
    IsResync interface{}

    // Bypass. The type is bool.
    IsBypass interface{}
}

func (policyQueryFlags *Rsvp_RequestDetails_RequestDetail_PolicyQueryFlags) GetEntityData() *types.CommonEntityData {
    policyQueryFlags.EntityData.YFilter = policyQueryFlags.YFilter
    policyQueryFlags.EntityData.YangName = "policy-query-flags"
    policyQueryFlags.EntityData.BundleName = "cisco_ios_xr"
    policyQueryFlags.EntityData.ParentYangName = "request-detail"
    policyQueryFlags.EntityData.SegmentPath = "policy-query-flags"
    policyQueryFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + policyQueryFlags.EntityData.SegmentPath
    policyQueryFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    policyQueryFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    policyQueryFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    policyQueryFlags.EntityData.Children = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs = types.NewOrderedMap()
    policyQueryFlags.EntityData.Leafs.Append("is-needed", types.YLeaf{"IsNeeded", policyQueryFlags.IsNeeded})
    policyQueryFlags.EntityData.Leafs.Append("is-report-required", types.YLeaf{"IsReportRequired", policyQueryFlags.IsReportRequired})
    policyQueryFlags.EntityData.Leafs.Append("is-resync", types.YLeaf{"IsResync", policyQueryFlags.IsResync})
    policyQueryFlags.EntityData.Leafs.Append("is-bypass", types.YLeaf{"IsBypass", policyQueryFlags.IsBypass})

    policyQueryFlags.EntityData.YListKeys = []string {}

    return &(policyQueryFlags.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_PsbKey
// List of RSB keys
type Rsvp_RequestDetails_RequestDetail_PsbKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (psbKey *Rsvp_RequestDetails_RequestDetail_PsbKey) GetEntityData() *types.CommonEntityData {
    psbKey.EntityData.YFilter = psbKey.YFilter
    psbKey.EntityData.YangName = "psb-key"
    psbKey.EntityData.BundleName = "cisco_ios_xr"
    psbKey.EntityData.ParentYangName = "request-detail"
    psbKey.EntityData.SegmentPath = "psb-key" + types.AddNoKeyToken(psbKey)
    psbKey.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + psbKey.EntityData.SegmentPath
    psbKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbKey.EntityData.Children = types.NewOrderedMap()
    psbKey.EntityData.Leafs = types.NewOrderedMap()
    psbKey.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", psbKey.P2mpId})
    psbKey.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbKey.DestinationAddress})
    psbKey.EntityData.Leafs.Append("destination-port-or-tunnel-id", types.YLeaf{"DestinationPortOrTunnelId", psbKey.DestinationPortOrTunnelId})
    psbKey.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", psbKey.Protocol})
    psbKey.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", psbKey.ExtendedTunnelId})
    psbKey.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", psbKey.SessionType})
    psbKey.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", psbKey.SourceAddress})
    psbKey.EntityData.Leafs.Append("source-port-or-lsp-id", types.YLeaf{"SourcePortOrLspId", psbKey.SourcePortOrLspId})
    psbKey.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", psbKey.P2mpSubGroupOrigin})
    psbKey.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbKey.SubGroupId})
    psbKey.EntityData.Leafs.Append("vrfid", types.YLeaf{"Vrfid", psbKey.Vrfid})

    psbKey.EntityData.YListKeys = []string {}

    return &(psbKey.EntityData)
}

// Rsvp_RequestDetails_RequestDetail_RsbKey
// List of RSB keys
type Rsvp_RequestDetails_RequestDetail_RsbKey struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Point-to-multipoint ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port or Tunnel ID. For the LSP and OUNI session types this
    // represents the Tunnel ID whereas for the UDP session type this represents
    // the Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPortOrTunnelId interface{}

    // Protocol. UDP session type this represents the Protocol (UDP not supported
    // at present). The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Protocol or Extended Tunnel ID. For the LSP and OUNI sesion types this
    // represents the Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type (e.g. LSP, OUNI or UDP). The type is RsvpMgmtSession.
    SessionType interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port or LSP_ID. For the LSP and OUNI session types this represents
    // the LSP_ID whereas for the UDP session type this represents the SourcePort.
    // The type is interface{} with range: 0..4294967295.
    SourcePortOrLspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Signalling VRF ID. The type is interface{} with range: 0..4294967295.
    Vrfid interface{}
}

func (rsbKey *Rsvp_RequestDetails_RequestDetail_RsbKey) GetEntityData() *types.CommonEntityData {
    rsbKey.EntityData.YFilter = rsbKey.YFilter
    rsbKey.EntityData.YangName = "rsb-key"
    rsbKey.EntityData.BundleName = "cisco_ios_xr"
    rsbKey.EntityData.ParentYangName = "request-detail"
    rsbKey.EntityData.SegmentPath = "rsb-key" + types.AddNoKeyToken(rsbKey)
    rsbKey.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/request-details/request-detail/" + rsbKey.EntityData.SegmentPath
    rsbKey.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbKey.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbKey.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbKey.EntityData.Children = types.NewOrderedMap()
    rsbKey.EntityData.Leafs = types.NewOrderedMap()
    rsbKey.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", rsbKey.P2mpId})
    rsbKey.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbKey.DestinationAddress})
    rsbKey.EntityData.Leafs.Append("destination-port-or-tunnel-id", types.YLeaf{"DestinationPortOrTunnelId", rsbKey.DestinationPortOrTunnelId})
    rsbKey.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", rsbKey.Protocol})
    rsbKey.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", rsbKey.ExtendedTunnelId})
    rsbKey.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsbKey.SessionType})
    rsbKey.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", rsbKey.SourceAddress})
    rsbKey.EntityData.Leafs.Append("source-port-or-lsp-id", types.YLeaf{"SourcePortOrLspId", rsbKey.SourcePortOrLspId})
    rsbKey.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", rsbKey.P2mpSubGroupOrigin})
    rsbKey.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", rsbKey.SubGroupId})
    rsbKey.EntityData.Leafs.Append("vrfid", types.YLeaf{"Vrfid", rsbKey.Vrfid})

    rsbKey.EntityData.YListKeys = []string {}

    return &(rsbKey.EntityData)
}

// Rsvp_InterfaceBriefs
// Table of brief info about RSVP-enabled
// interfaces
type Rsvp_InterfaceBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info about an RSVP-enabled interface. The type is slice of
    // Rsvp_InterfaceBriefs_InterfaceBrief.
    InterfaceBrief []*Rsvp_InterfaceBriefs_InterfaceBrief
}

func (interfaceBriefs *Rsvp_InterfaceBriefs) GetEntityData() *types.CommonEntityData {
    interfaceBriefs.EntityData.YFilter = interfaceBriefs.YFilter
    interfaceBriefs.EntityData.YangName = "interface-briefs"
    interfaceBriefs.EntityData.BundleName = "cisco_ios_xr"
    interfaceBriefs.EntityData.ParentYangName = "rsvp"
    interfaceBriefs.EntityData.SegmentPath = "interface-briefs"
    interfaceBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + interfaceBriefs.EntityData.SegmentPath
    interfaceBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBriefs.EntityData.Children = types.NewOrderedMap()
    interfaceBriefs.EntityData.Children.Append("interface-brief", types.YChild{"InterfaceBrief", nil})
    for i := range interfaceBriefs.InterfaceBrief {
        interfaceBriefs.EntityData.Children.Append(types.GetSegmentPath(interfaceBriefs.InterfaceBrief[i]), types.YChild{"InterfaceBrief", interfaceBriefs.InterfaceBrief[i]})
    }
    interfaceBriefs.EntityData.Leafs = types.NewOrderedMap()

    interfaceBriefs.EntityData.YListKeys = []string {}

    return &(interfaceBriefs.EntityData)
}

// Rsvp_InterfaceBriefs_InterfaceBrief
// Brief info about an RSVP-enabled interface
type Rsvp_InterfaceBriefs_InterfaceBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    InterfaceName interface{}

    // Interface Name. The type is string.
    InterfaceNameXr interface{}

    // Interface bandwidth information.
    BandwidthInformation Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation
}

func (interfaceBrief *Rsvp_InterfaceBriefs_InterfaceBrief) GetEntityData() *types.CommonEntityData {
    interfaceBrief.EntityData.YFilter = interfaceBrief.YFilter
    interfaceBrief.EntityData.YangName = "interface-brief"
    interfaceBrief.EntityData.BundleName = "cisco_ios_xr"
    interfaceBrief.EntityData.ParentYangName = "interface-briefs"
    interfaceBrief.EntityData.SegmentPath = "interface-brief" + types.AddKeyToken(interfaceBrief.InterfaceName, "interface-name")
    interfaceBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-briefs/" + interfaceBrief.EntityData.SegmentPath
    interfaceBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceBrief.EntityData.Children = types.NewOrderedMap()
    interfaceBrief.EntityData.Children.Append("bandwidth-information", types.YChild{"BandwidthInformation", &interfaceBrief.BandwidthInformation})
    interfaceBrief.EntityData.Leafs = types.NewOrderedMap()
    interfaceBrief.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", interfaceBrief.InterfaceName})
    interfaceBrief.EntityData.Leafs.Append("interface-name-xr", types.YLeaf{"InterfaceNameXr", interfaceBrief.InterfaceNameXr})

    interfaceBrief.EntityData.YListKeys = []string {"InterfaceName"}

    return &(interfaceBrief.EntityData)
}

// Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation
// Interface bandwidth information
type Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // DSTEMode. The type is RsvpMgmtDsteModes.
    DsteMode interface{}

    // Prestandard DSTE interface information.
    PreStandardDsteInterface Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface

    // Standard DSTE interface information.
    StandardDsteInterface Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
}

func (bandwidthInformation *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation) GetEntityData() *types.CommonEntityData {
    bandwidthInformation.EntityData.YFilter = bandwidthInformation.YFilter
    bandwidthInformation.EntityData.YangName = "bandwidth-information"
    bandwidthInformation.EntityData.BundleName = "cisco_ios_xr"
    bandwidthInformation.EntityData.ParentYangName = "interface-brief"
    bandwidthInformation.EntityData.SegmentPath = "bandwidth-information"
    bandwidthInformation.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-briefs/interface-brief/" + bandwidthInformation.EntityData.SegmentPath
    bandwidthInformation.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bandwidthInformation.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bandwidthInformation.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bandwidthInformation.EntityData.Children = types.NewOrderedMap()
    bandwidthInformation.EntityData.Children.Append("pre-standard-dste-interface", types.YChild{"PreStandardDsteInterface", &bandwidthInformation.PreStandardDsteInterface})
    bandwidthInformation.EntityData.Children.Append("standard-dste-interface", types.YChild{"StandardDsteInterface", &bandwidthInformation.StandardDsteInterface})
    bandwidthInformation.EntityData.Leafs = types.NewOrderedMap()
    bandwidthInformation.EntityData.Leafs.Append("dste-mode", types.YLeaf{"DsteMode", bandwidthInformation.DsteMode})

    bandwidthInformation.EntityData.YListKeys = []string {}

    return &(bandwidthInformation.EntityData)
}

// Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface
// Prestandard DSTE interface information
type Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in subpool. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxSubpoolBandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxSubpoolBandwidthAbsolute interface{}
}

func (preStandardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_PreStandardDsteInterface) GetEntityData() *types.CommonEntityData {
    preStandardDsteInterface.EntityData.YFilter = preStandardDsteInterface.YFilter
    preStandardDsteInterface.EntityData.YangName = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    preStandardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    preStandardDsteInterface.EntityData.SegmentPath = "pre-standard-dste-interface"
    preStandardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-briefs/interface-brief/bandwidth-information/" + preStandardDsteInterface.EntityData.SegmentPath
    preStandardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    preStandardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    preStandardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    preStandardDsteInterface.EntityData.Children = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    preStandardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", preStandardDsteInterface.AllocatedBitRate})
    preStandardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", preStandardDsteInterface.MaxFlowBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", preStandardDsteInterface.MaxBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("max-subpool-bandwidth", types.YLeaf{"MaxSubpoolBandwidth", preStandardDsteInterface.MaxSubpoolBandwidth})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", preStandardDsteInterface.IsMaxBandwidthAbsolute})
    preStandardDsteInterface.EntityData.Leafs.Append("is-max-subpool-bandwidth-absolute", types.YLeaf{"IsMaxSubpoolBandwidthAbsolute", preStandardDsteInterface.IsMaxSubpoolBandwidthAbsolute})

    preStandardDsteInterface.EntityData.YListKeys = []string {}

    return &(preStandardDsteInterface.EntityData)
}

// Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface
// Standard DSTE interface information
type Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Bandwidth (bits per second) now allocated. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    AllocatedBitRate interface{}

    // Max bandwidth (bits per second) allowed per flow. The type is interface{}
    // with range: 0..18446744073709551615. Units are bit/s.
    MaxFlowBandwidth interface{}

    // Max bandwidth (bits per second) allowed. The type is interface{} with
    // range: 0..18446744073709551615. Units are bit/s.
    MaxBandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC0 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool0Bandwidth interface{}

    // Max bandwidth (bits per second) allowed in BC1 pool. The type is
    // interface{} with range: 0..18446744073709551615. Units are bit/s.
    MaxPool1Bandwidth interface{}

    // True if the Max B/W is an absolute value and false if its a percentage. The
    // type is bool.
    IsMaxBandwidthAbsolute interface{}

    // True if the Max BC0 B/W is an absolute value and false if its a percentage.
    // The type is bool.
    IsMaxBc0BandwidthAbsolute interface{}

    // True if the Max BC1 sub-pool B/W is an absolute value and false if its a
    // percentage. The type is bool.
    IsMaxBc1BandwidthAbsolute interface{}
}

func (standardDsteInterface *Rsvp_InterfaceBriefs_InterfaceBrief_BandwidthInformation_StandardDsteInterface) GetEntityData() *types.CommonEntityData {
    standardDsteInterface.EntityData.YFilter = standardDsteInterface.YFilter
    standardDsteInterface.EntityData.YangName = "standard-dste-interface"
    standardDsteInterface.EntityData.BundleName = "cisco_ios_xr"
    standardDsteInterface.EntityData.ParentYangName = "bandwidth-information"
    standardDsteInterface.EntityData.SegmentPath = "standard-dste-interface"
    standardDsteInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/interface-briefs/interface-brief/bandwidth-information/" + standardDsteInterface.EntityData.SegmentPath
    standardDsteInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    standardDsteInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    standardDsteInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    standardDsteInterface.EntityData.Children = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs = types.NewOrderedMap()
    standardDsteInterface.EntityData.Leafs.Append("allocated-bit-rate", types.YLeaf{"AllocatedBitRate", standardDsteInterface.AllocatedBitRate})
    standardDsteInterface.EntityData.Leafs.Append("max-flow-bandwidth", types.YLeaf{"MaxFlowBandwidth", standardDsteInterface.MaxFlowBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-bandwidth", types.YLeaf{"MaxBandwidth", standardDsteInterface.MaxBandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool0-bandwidth", types.YLeaf{"MaxPool0Bandwidth", standardDsteInterface.MaxPool0Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("max-pool1-bandwidth", types.YLeaf{"MaxPool1Bandwidth", standardDsteInterface.MaxPool1Bandwidth})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bandwidth-absolute", types.YLeaf{"IsMaxBandwidthAbsolute", standardDsteInterface.IsMaxBandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc0-bandwidth-absolute", types.YLeaf{"IsMaxBc0BandwidthAbsolute", standardDsteInterface.IsMaxBc0BandwidthAbsolute})
    standardDsteInterface.EntityData.Leafs.Append("is-max-bc1-bandwidth-absolute", types.YLeaf{"IsMaxBc1BandwidthAbsolute", standardDsteInterface.IsMaxBc1BandwidthAbsolute})

    standardDsteInterface.EntityData.YListKeys = []string {}

    return &(standardDsteInterface.EntityData)
}

// Rsvp_SessionDetaileds
// Table of detailed info about sessions
type Rsvp_SessionDetaileds struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info about session. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed.
    SessionDetailed []*Rsvp_SessionDetaileds_SessionDetailed
}

func (sessionDetaileds *Rsvp_SessionDetaileds) GetEntityData() *types.CommonEntityData {
    sessionDetaileds.EntityData.YFilter = sessionDetaileds.YFilter
    sessionDetaileds.EntityData.YangName = "session-detaileds"
    sessionDetaileds.EntityData.BundleName = "cisco_ios_xr"
    sessionDetaileds.EntityData.ParentYangName = "rsvp"
    sessionDetaileds.EntityData.SegmentPath = "session-detaileds"
    sessionDetaileds.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + sessionDetaileds.EntityData.SegmentPath
    sessionDetaileds.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionDetaileds.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionDetaileds.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionDetaileds.EntityData.Children = types.NewOrderedMap()
    sessionDetaileds.EntityData.Children.Append("session-detailed", types.YChild{"SessionDetailed", nil})
    for i := range sessionDetaileds.SessionDetailed {
        types.SetYListKey(sessionDetaileds.SessionDetailed[i], i)
        sessionDetaileds.EntityData.Children.Append(types.GetSegmentPath(sessionDetaileds.SessionDetailed[i]), types.YChild{"SessionDetailed", sessionDetaileds.SessionDetailed[i]})
    }
    sessionDetaileds.EntityData.Leafs = types.NewOrderedMap()

    sessionDetaileds.EntityData.YListKeys = []string {}

    return &(sessionDetaileds.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed
// Detailed info about session
type Rsvp_SessionDetaileds_SessionDetailed struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Compact session data.
    Compact Rsvp_SessionDetaileds_SessionDetailed_Compact

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_SessionDetaileds_SessionDetailed_S2lSubLsp

    // Path and Reservation Info. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo.
    PsbRsbInfo []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo
}

func (sessionDetailed *Rsvp_SessionDetaileds_SessionDetailed) GetEntityData() *types.CommonEntityData {
    sessionDetailed.EntityData.YFilter = sessionDetailed.YFilter
    sessionDetailed.EntityData.YangName = "session-detailed"
    sessionDetailed.EntityData.BundleName = "cisco_ios_xr"
    sessionDetailed.EntityData.ParentYangName = "session-detaileds"
    sessionDetailed.EntityData.SegmentPath = "session-detailed" + types.AddNoKeyToken(sessionDetailed)
    sessionDetailed.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/" + sessionDetailed.EntityData.SegmentPath
    sessionDetailed.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionDetailed.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionDetailed.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionDetailed.EntityData.Children = types.NewOrderedMap()
    sessionDetailed.EntityData.Children.Append("compact", types.YChild{"Compact", &sessionDetailed.Compact})
    sessionDetailed.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &sessionDetailed.S2lSubLsp})
    sessionDetailed.EntityData.Children.Append("psb-rsb-info", types.YChild{"PsbRsbInfo", nil})
    for i := range sessionDetailed.PsbRsbInfo {
        types.SetYListKey(sessionDetailed.PsbRsbInfo[i], i)
        sessionDetailed.EntityData.Children.Append(types.GetSegmentPath(sessionDetailed.PsbRsbInfo[i]), types.YChild{"PsbRsbInfo", sessionDetailed.PsbRsbInfo[i]})
    }
    sessionDetailed.EntityData.Leafs = types.NewOrderedMap()
    sessionDetailed.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", sessionDetailed.DestinationAddress})
    sessionDetailed.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", sessionDetailed.DestinationPort})
    sessionDetailed.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", sessionDetailed.Protocol})
    sessionDetailed.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", sessionDetailed.ExtendedTunnelId})
    sessionDetailed.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", sessionDetailed.SessionType})
    sessionDetailed.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", sessionDetailed.P2mpId})
    sessionDetailed.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", sessionDetailed.VrfName})

    sessionDetailed.EntityData.YListKeys = []string {}

    return &(sessionDetailed.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact
// Compact session data
type Rsvp_SessionDetaileds_SessionDetailed_Compact struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of path state block states. The type is interface{} with range:
    // 0..4294967295.
    PsBs interface{}

    // Number of reservation state block states. The type is interface{} with
    // range: 0..4294967295.
    RsBs interface{}

    // Number of request states. The type is interface{} with range:
    // 0..4294967295.
    Requests interface{}

    // Number of elements in detail list. The type is interface{} with range:
    // 0..4294967295.
    DetailListSize interface{}

    // RSVP Session Information.
    Session Rsvp_SessionDetaileds_SessionDetailed_Compact_Session
}

func (compact *Rsvp_SessionDetaileds_SessionDetailed_Compact) GetEntityData() *types.CommonEntityData {
    compact.EntityData.YFilter = compact.YFilter
    compact.EntityData.YangName = "compact"
    compact.EntityData.BundleName = "cisco_ios_xr"
    compact.EntityData.ParentYangName = "session-detailed"
    compact.EntityData.SegmentPath = "compact"
    compact.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/" + compact.EntityData.SegmentPath
    compact.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    compact.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    compact.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    compact.EntityData.Children = types.NewOrderedMap()
    compact.EntityData.Children.Append("session", types.YChild{"Session", &compact.Session})
    compact.EntityData.Leafs = types.NewOrderedMap()
    compact.EntityData.Leafs.Append("ps-bs", types.YLeaf{"PsBs", compact.PsBs})
    compact.EntityData.Leafs.Append("rs-bs", types.YLeaf{"RsBs", compact.RsBs})
    compact.EntityData.Leafs.Append("requests", types.YLeaf{"Requests", compact.Requests})
    compact.EntityData.Leafs.Append("detail-list-size", types.YLeaf{"DetailListSize", compact.DetailListSize})

    compact.EntityData.YListKeys = []string {}

    return &(compact.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session
// RSVP Session Information
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
}

func (session *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "compact"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession
// RSVP Session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_SessionDetaileds_SessionDetailed_Compact_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/compact/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_SessionDetaileds_SessionDetailed_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_SessionDetaileds_SessionDetailed_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "session-detailed"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo
// Path and Reservation Info
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Path Info. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo.
    PsbInfo []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo

    // Reservation Info. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo.
    RsbInfo []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
}

func (psbRsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo) GetEntityData() *types.CommonEntityData {
    psbRsbInfo.EntityData.YFilter = psbRsbInfo.YFilter
    psbRsbInfo.EntityData.YangName = "psb-rsb-info"
    psbRsbInfo.EntityData.BundleName = "cisco_ios_xr"
    psbRsbInfo.EntityData.ParentYangName = "session-detailed"
    psbRsbInfo.EntityData.SegmentPath = "psb-rsb-info" + types.AddNoKeyToken(psbRsbInfo)
    psbRsbInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/" + psbRsbInfo.EntityData.SegmentPath
    psbRsbInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbRsbInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbRsbInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbRsbInfo.EntityData.Children = types.NewOrderedMap()
    psbRsbInfo.EntityData.Children.Append("psb-info", types.YChild{"PsbInfo", nil})
    for i := range psbRsbInfo.PsbInfo {
        types.SetYListKey(psbRsbInfo.PsbInfo[i], i)
        psbRsbInfo.EntityData.Children.Append(types.GetSegmentPath(psbRsbInfo.PsbInfo[i]), types.YChild{"PsbInfo", psbRsbInfo.PsbInfo[i]})
    }
    psbRsbInfo.EntityData.Children.Append("rsb-info", types.YChild{"RsbInfo", nil})
    for i := range psbRsbInfo.RsbInfo {
        types.SetYListKey(psbRsbInfo.RsbInfo[i], i)
        psbRsbInfo.EntityData.Children.Append(types.GetSegmentPath(psbRsbInfo.RsbInfo[i]), types.YChild{"RsbInfo", psbRsbInfo.RsbInfo[i]})
    }
    psbRsbInfo.EntityData.Leafs = types.NewOrderedMap()

    psbRsbInfo.EntityData.YListKeys = []string {}

    return &(psbRsbInfo.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo
// Path Info
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // LSP ID. The type is interface{} with range: 0..4294967295.
    LspId interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}

    // Interface on which inbound message was received. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    InInterface interface{}

    // Label for inbound traffic. The type is interface{} with range:
    // 0..4294967295.
    InLabel interface{}

    // LSP Wrap Label. The type is interface{} with range: 0..4294967295.
    LspWrapLabel interface{}

    // Address validity. The type is bool.
    IsBadAddress interface{}

    // IP address of Path's incoming interface. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    IncomingInterfaceAddress interface{}

    // ERO validity. The type is bool.
    IsEroValid interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // Traffic Spec validity. The type is bool.
    IsTrafficSpecValid interface{}

    // Tunnel name. The type is string.
    TunnelName interface{}

    // Generic Label for inbound traffic.
    GenericInLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel

    // Traffic Spec object.
    TrafficSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec

    // Generic Traffic Spec object.
    GenericTrafficSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec

    // Association object.
    Association Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association

    // Protection object.
    Protection Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection

    // Reverse LSP object.
    ReverseLsp Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp

    // Explicit Route Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero.
    Ero []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero

    // Record Route Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro.
    Rro []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
}

func (psbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo) GetEntityData() *types.CommonEntityData {
    psbInfo.EntityData.YFilter = psbInfo.YFilter
    psbInfo.EntityData.YangName = "psb-info"
    psbInfo.EntityData.BundleName = "cisco_ios_xr"
    psbInfo.EntityData.ParentYangName = "psb-rsb-info"
    psbInfo.EntityData.SegmentPath = "psb-info" + types.AddNoKeyToken(psbInfo)
    psbInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/" + psbInfo.EntityData.SegmentPath
    psbInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbInfo.EntityData.Children = types.NewOrderedMap()
    psbInfo.EntityData.Children.Append("generic-in-label", types.YChild{"GenericInLabel", &psbInfo.GenericInLabel})
    psbInfo.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &psbInfo.TrafficSpec})
    psbInfo.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &psbInfo.GenericTrafficSpec})
    psbInfo.EntityData.Children.Append("association", types.YChild{"Association", &psbInfo.Association})
    psbInfo.EntityData.Children.Append("protection", types.YChild{"Protection", &psbInfo.Protection})
    psbInfo.EntityData.Children.Append("reverse-lsp", types.YChild{"ReverseLsp", &psbInfo.ReverseLsp})
    psbInfo.EntityData.Children.Append("ero", types.YChild{"Ero", nil})
    for i := range psbInfo.Ero {
        types.SetYListKey(psbInfo.Ero[i], i)
        psbInfo.EntityData.Children.Append(types.GetSegmentPath(psbInfo.Ero[i]), types.YChild{"Ero", psbInfo.Ero[i]})
    }
    psbInfo.EntityData.Children.Append("rro", types.YChild{"Rro", nil})
    for i := range psbInfo.Rro {
        types.SetYListKey(psbInfo.Rro[i], i)
        psbInfo.EntityData.Children.Append(types.GetSegmentPath(psbInfo.Rro[i]), types.YChild{"Rro", psbInfo.Rro[i]})
    }
    psbInfo.EntityData.Leafs = types.NewOrderedMap()
    psbInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", psbInfo.IsValid})
    psbInfo.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbInfo.DestinationAddress})
    psbInfo.EntityData.Leafs.Append("lsp-id", types.YLeaf{"LspId", psbInfo.LspId})
    psbInfo.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", psbInfo.P2mpSubGroupOrigin})
    psbInfo.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbInfo.SubGroupId})
    psbInfo.EntityData.Leafs.Append("in-interface", types.YLeaf{"InInterface", psbInfo.InInterface})
    psbInfo.EntityData.Leafs.Append("in-label", types.YLeaf{"InLabel", psbInfo.InLabel})
    psbInfo.EntityData.Leafs.Append("lsp-wrap-label", types.YLeaf{"LspWrapLabel", psbInfo.LspWrapLabel})
    psbInfo.EntityData.Leafs.Append("is-bad-address", types.YLeaf{"IsBadAddress", psbInfo.IsBadAddress})
    psbInfo.EntityData.Leafs.Append("incoming-interface-address", types.YLeaf{"IncomingInterfaceAddress", psbInfo.IncomingInterfaceAddress})
    psbInfo.EntityData.Leafs.Append("is-ero-valid", types.YLeaf{"IsEroValid", psbInfo.IsEroValid})
    psbInfo.EntityData.Leafs.Append("is-rro-valid", types.YLeaf{"IsRroValid", psbInfo.IsRroValid})
    psbInfo.EntityData.Leafs.Append("is-traffic-spec-valid", types.YLeaf{"IsTrafficSpecValid", psbInfo.IsTrafficSpecValid})
    psbInfo.EntityData.Leafs.Append("tunnel-name", types.YLeaf{"TunnelName", psbInfo.TunnelName})

    psbInfo.EntityData.YListKeys = []string {}

    return &(psbInfo.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel
// Generic Label for inbound traffic
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
}

func (genericInLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel) GetEntityData() *types.CommonEntityData {
    genericInLabel.EntityData.YFilter = genericInLabel.YFilter
    genericInLabel.EntityData.YangName = "generic-in-label"
    genericInLabel.EntityData.BundleName = "cisco_ios_xr"
    genericInLabel.EntityData.ParentYangName = "psb-info"
    genericInLabel.EntityData.SegmentPath = "generic-in-label"
    genericInLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + genericInLabel.EntityData.SegmentPath
    genericInLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericInLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericInLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericInLabel.EntityData.Children = types.NewOrderedMap()
    genericInLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericInLabel.GeneralizedLabel})
    genericInLabel.EntityData.Leafs = types.NewOrderedMap()
    genericInLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericInLabel.GenericLabelType})

    genericInLabel.EntityData.YListKeys = []string {}

    return &(genericInLabel.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel
// Generalized Label
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value.
    Value []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-in-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericInLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-in-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec
// Traffic Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "psb-info"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec
// Generic Traffic Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "psb-info"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association
// Association object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AssociationType. The type is RsvpMgmtAssociation.
    AssociationType interface{}

    // IPV4 ASSOCIATION Object.
    Ipv4 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4

    // IPV6 ASSOCIATION Object.
    Ipv6 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6

    // EXTENDED IPV4 ASSOCIATION Object.
    ExtendedIpv4 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4

    // EXTENDED IPV6 ASSOCIATION Object.
    ExtendedIpv6 Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
}

func (association *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association) GetEntityData() *types.CommonEntityData {
    association.EntityData.YFilter = association.YFilter
    association.EntityData.YangName = "association"
    association.EntityData.BundleName = "cisco_ios_xr"
    association.EntityData.ParentYangName = "psb-info"
    association.EntityData.SegmentPath = "association"
    association.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + association.EntityData.SegmentPath
    association.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    association.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    association.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    association.EntityData.Children = types.NewOrderedMap()
    association.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &association.Ipv4})
    association.EntityData.Children.Append("ipv6", types.YChild{"Ipv6", &association.Ipv6})
    association.EntityData.Children.Append("extended-ipv4", types.YChild{"ExtendedIpv4", &association.ExtendedIpv4})
    association.EntityData.Children.Append("extended-ipv6", types.YChild{"ExtendedIpv6", &association.ExtendedIpv6})
    association.EntityData.Leafs = types.NewOrderedMap()
    association.EntityData.Leafs.Append("association-type", types.YLeaf{"AssociationType", association.AssociationType})

    association.EntityData.YListKeys = []string {}

    return &(association.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4
// IPV4 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}
}

func (ipv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "association"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv4.Type})
    ipv4.EntityData.Leafs.Append("id", types.YLeaf{"Id", ipv4.Id})
    ipv4.EntityData.Leafs.Append("source", types.YLeaf{"Source", ipv4.Source})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6
// IPV6 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Source interface{}
}

func (ipv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_Ipv6) GetEntityData() *types.CommonEntityData {
    ipv6.EntityData.YFilter = ipv6.YFilter
    ipv6.EntityData.YangName = "ipv6"
    ipv6.EntityData.BundleName = "cisco_ios_xr"
    ipv6.EntityData.ParentYangName = "association"
    ipv6.EntityData.SegmentPath = "ipv6"
    ipv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + ipv6.EntityData.SegmentPath
    ipv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv6.EntityData.Children = types.NewOrderedMap()
    ipv6.EntityData.Leafs = types.NewOrderedMap()
    ipv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", ipv6.Type})
    ipv6.EntityData.Leafs.Append("id", types.YLeaf{"Id", ipv6.Id})
    ipv6.EntityData.Leafs.Append("source", types.YLeaf{"Source", ipv6.Source})

    ipv6.EntityData.YListKeys = []string {}

    return &(ipv6.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4
// EXTENDED IPV4 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV4 Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId.
    ExtendedId []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId
}

func (extendedIpv4 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4) GetEntityData() *types.CommonEntityData {
    extendedIpv4.EntityData.YFilter = extendedIpv4.YFilter
    extendedIpv4.EntityData.YangName = "extended-ipv4"
    extendedIpv4.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv4.EntityData.ParentYangName = "association"
    extendedIpv4.EntityData.SegmentPath = "extended-ipv4"
    extendedIpv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + extendedIpv4.EntityData.SegmentPath
    extendedIpv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv4.EntityData.Children = types.NewOrderedMap()
    extendedIpv4.EntityData.Children.Append("extended-id", types.YChild{"ExtendedId", nil})
    for i := range extendedIpv4.ExtendedId {
        types.SetYListKey(extendedIpv4.ExtendedId[i], i)
        extendedIpv4.EntityData.Children.Append(types.GetSegmentPath(extendedIpv4.ExtendedId[i]), types.YChild{"ExtendedId", extendedIpv4.ExtendedId[i]})
    }
    extendedIpv4.EntityData.Leafs = types.NewOrderedMap()
    extendedIpv4.EntityData.Leafs.Append("type", types.YLeaf{"Type", extendedIpv4.Type})
    extendedIpv4.EntityData.Leafs.Append("id", types.YLeaf{"Id", extendedIpv4.Id})
    extendedIpv4.EntityData.Leafs.Append("source", types.YLeaf{"Source", extendedIpv4.Source})
    extendedIpv4.EntityData.Leafs.Append("global-source", types.YLeaf{"GlobalSource", extendedIpv4.GlobalSource})

    extendedIpv4.EntityData.YListKeys = []string {}

    return &(extendedIpv4.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId
// Extended Association ID
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Extended Association ID. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extendedId *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv4_ExtendedId) GetEntityData() *types.CommonEntityData {
    extendedId.EntityData.YFilter = extendedId.YFilter
    extendedId.EntityData.YangName = "extended-id"
    extendedId.EntityData.BundleName = "cisco_ios_xr"
    extendedId.EntityData.ParentYangName = "extended-ipv4"
    extendedId.EntityData.SegmentPath = "extended-id" + types.AddNoKeyToken(extendedId)
    extendedId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/extended-ipv4/" + extendedId.EntityData.SegmentPath
    extendedId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedId.EntityData.Children = types.NewOrderedMap()
    extendedId.EntityData.Leafs = types.NewOrderedMap()
    extendedId.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extendedId.Entry})

    extendedId.EntityData.YListKeys = []string {}

    return &(extendedId.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6
// EXTENDED IPV6 ASSOCIATION Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Association Type (RFC 4872). The type is interface{} with range: 0..65535.
    Type interface{}

    // Association ID. The type is interface{} with range: 0..65535.
    Id interface{}

    // Association IPV6 Source Address. The type is string with pattern:
    // b'((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\\p{N}\\p{L}]+)?'.
    Source interface{}

    // Global Association Source. The type is interface{} with range:
    // 0..4294967295.
    GlobalSource interface{}

    // Extended Association ID. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId.
    ExtendedId []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId
}

func (extendedIpv6 *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6) GetEntityData() *types.CommonEntityData {
    extendedIpv6.EntityData.YFilter = extendedIpv6.YFilter
    extendedIpv6.EntityData.YangName = "extended-ipv6"
    extendedIpv6.EntityData.BundleName = "cisco_ios_xr"
    extendedIpv6.EntityData.ParentYangName = "association"
    extendedIpv6.EntityData.SegmentPath = "extended-ipv6"
    extendedIpv6.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/" + extendedIpv6.EntityData.SegmentPath
    extendedIpv6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedIpv6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedIpv6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedIpv6.EntityData.Children = types.NewOrderedMap()
    extendedIpv6.EntityData.Children.Append("extended-id", types.YChild{"ExtendedId", nil})
    for i := range extendedIpv6.ExtendedId {
        types.SetYListKey(extendedIpv6.ExtendedId[i], i)
        extendedIpv6.EntityData.Children.Append(types.GetSegmentPath(extendedIpv6.ExtendedId[i]), types.YChild{"ExtendedId", extendedIpv6.ExtendedId[i]})
    }
    extendedIpv6.EntityData.Leafs = types.NewOrderedMap()
    extendedIpv6.EntityData.Leafs.Append("type", types.YLeaf{"Type", extendedIpv6.Type})
    extendedIpv6.EntityData.Leafs.Append("id", types.YLeaf{"Id", extendedIpv6.Id})
    extendedIpv6.EntityData.Leafs.Append("source", types.YLeaf{"Source", extendedIpv6.Source})
    extendedIpv6.EntityData.Leafs.Append("global-source", types.YLeaf{"GlobalSource", extendedIpv6.GlobalSource})

    extendedIpv6.EntityData.YListKeys = []string {}

    return &(extendedIpv6.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId
// Extended Association ID
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Extended Association ID. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (extendedId *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Association_ExtendedIpv6_ExtendedId) GetEntityData() *types.CommonEntityData {
    extendedId.EntityData.YFilter = extendedId.YFilter
    extendedId.EntityData.YangName = "extended-id"
    extendedId.EntityData.BundleName = "cisco_ios_xr"
    extendedId.EntityData.ParentYangName = "extended-ipv6"
    extendedId.EntityData.SegmentPath = "extended-id" + types.AddNoKeyToken(extendedId)
    extendedId.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/association/extended-ipv6/" + extendedId.EntityData.SegmentPath
    extendedId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    extendedId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    extendedId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    extendedId.EntityData.Children = types.NewOrderedMap()
    extendedId.EntityData.Leafs = types.NewOrderedMap()
    extendedId.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", extendedId.Entry})

    extendedId.EntityData.YListKeys = []string {}

    return &(extendedId.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection
// Protection object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Secondary Bit. The type is bool.
    S interface{}

    // Protecting Bit. The type is bool.
    P interface{}

    // Notification Bit. The type is bool.
    N interface{}

    // Operational Bit. The type is bool.
    O interface{}

    // PROTECTION Object LSP Flags.
    LspFlags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags

    // PROTECTION Object Link Flags.
    LinkFlags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
}

func (protection *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection) GetEntityData() *types.CommonEntityData {
    protection.EntityData.YFilter = protection.YFilter
    protection.EntityData.YangName = "protection"
    protection.EntityData.BundleName = "cisco_ios_xr"
    protection.EntityData.ParentYangName = "psb-info"
    protection.EntityData.SegmentPath = "protection"
    protection.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + protection.EntityData.SegmentPath
    protection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    protection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    protection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    protection.EntityData.Children = types.NewOrderedMap()
    protection.EntityData.Children.Append("lsp-flags", types.YChild{"LspFlags", &protection.LspFlags})
    protection.EntityData.Children.Append("link-flags", types.YChild{"LinkFlags", &protection.LinkFlags})
    protection.EntityData.Leafs = types.NewOrderedMap()
    protection.EntityData.Leafs.Append("s", types.YLeaf{"S", protection.S})
    protection.EntityData.Leafs.Append("p", types.YLeaf{"P", protection.P})
    protection.EntityData.Leafs.Append("n", types.YLeaf{"N", protection.N})
    protection.EntityData.Leafs.Append("o", types.YLeaf{"O", protection.O})

    protection.EntityData.YListKeys = []string {}

    return &(protection.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags
// PROTECTION Object LSP Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Full Rerouting. The type is bool.
    Rerouting interface{}

    // Rerouting Without Extra-Traffic. The type is bool.
    ReroutingNoEt interface{}

    // 1:N Protection with Extra-Traffic. The type is bool.
    OneToNProtectionEt interface{}

    // 1+1 Unidirectional Protection. The type is bool.
    OnePlusOneUni interface{}

    // 1+1 Bidirectional Protection. The type is bool.
    OnePlusOneBi interface{}
}

func (lspFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LspFlags) GetEntityData() *types.CommonEntityData {
    lspFlags.EntityData.YFilter = lspFlags.YFilter
    lspFlags.EntityData.YangName = "lsp-flags"
    lspFlags.EntityData.BundleName = "cisco_ios_xr"
    lspFlags.EntityData.ParentYangName = "protection"
    lspFlags.EntityData.SegmentPath = "lsp-flags"
    lspFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" + lspFlags.EntityData.SegmentPath
    lspFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lspFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lspFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lspFlags.EntityData.Children = types.NewOrderedMap()
    lspFlags.EntityData.Leafs = types.NewOrderedMap()
    lspFlags.EntityData.Leafs.Append("rerouting", types.YLeaf{"Rerouting", lspFlags.Rerouting})
    lspFlags.EntityData.Leafs.Append("rerouting-no-et", types.YLeaf{"ReroutingNoEt", lspFlags.ReroutingNoEt})
    lspFlags.EntityData.Leafs.Append("one-to-n-protection-et", types.YLeaf{"OneToNProtectionEt", lspFlags.OneToNProtectionEt})
    lspFlags.EntityData.Leafs.Append("one-plus-one-uni", types.YLeaf{"OnePlusOneUni", lspFlags.OnePlusOneUni})
    lspFlags.EntityData.Leafs.Append("one-plus-one-bi", types.YLeaf{"OnePlusOneBi", lspFlags.OnePlusOneBi})

    lspFlags.EntityData.YListKeys = []string {}

    return &(lspFlags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags
// PROTECTION Object Link Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Indicates Enhanced Protection Scheme. The type is bool.
    Enhanced interface{}

    // Dedicated 1+1 Protection. The type is bool.
    Ded1Plus1 interface{}

    // Dedicated 1:1 Protection. The type is bool.
    Ded1To1 interface{}

    // Shared Link Layer Protection. The type is bool.
    Shared interface{}

    // LSP should not use any Link Layer Protection. The type is bool.
    Unprotected interface{}

    // LSP should use Links that are protecting other (primary) traffic. The type
    // is bool.
    ExtraTraffic interface{}

    // Reserved Bit 1. The type is bool.
    ReservedBit1 interface{}

    // Reserved Bit 2. The type is bool.
    ReservedBit2 interface{}
}

func (linkFlags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Protection_LinkFlags) GetEntityData() *types.CommonEntityData {
    linkFlags.EntityData.YFilter = linkFlags.YFilter
    linkFlags.EntityData.YangName = "link-flags"
    linkFlags.EntityData.BundleName = "cisco_ios_xr"
    linkFlags.EntityData.ParentYangName = "protection"
    linkFlags.EntityData.SegmentPath = "link-flags"
    linkFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/protection/" + linkFlags.EntityData.SegmentPath
    linkFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    linkFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    linkFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    linkFlags.EntityData.Children = types.NewOrderedMap()
    linkFlags.EntityData.Leafs = types.NewOrderedMap()
    linkFlags.EntityData.Leafs.Append("enhanced", types.YLeaf{"Enhanced", linkFlags.Enhanced})
    linkFlags.EntityData.Leafs.Append("ded1-plus1", types.YLeaf{"Ded1Plus1", linkFlags.Ded1Plus1})
    linkFlags.EntityData.Leafs.Append("ded1-to1", types.YLeaf{"Ded1To1", linkFlags.Ded1To1})
    linkFlags.EntityData.Leafs.Append("shared", types.YLeaf{"Shared", linkFlags.Shared})
    linkFlags.EntityData.Leafs.Append("unprotected", types.YLeaf{"Unprotected", linkFlags.Unprotected})
    linkFlags.EntityData.Leafs.Append("extra-traffic", types.YLeaf{"ExtraTraffic", linkFlags.ExtraTraffic})
    linkFlags.EntityData.Leafs.Append("reserved-bit1", types.YLeaf{"ReservedBit1", linkFlags.ReservedBit1})
    linkFlags.EntityData.Leafs.Append("reserved-bit2", types.YLeaf{"ReservedBit2", linkFlags.ReservedBit2})

    linkFlags.EntityData.YListKeys = []string {}

    return &(linkFlags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp
// Reverse LSP object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generic Traffic Spec object.
    GenericTrafficSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec

    // Explicit Route Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero.
    Ero []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero

    // Unsupported REVERSE_LSP Sub Objects. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject.
    UnsupSubObject []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
}

func (reverseLsp *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp) GetEntityData() *types.CommonEntityData {
    reverseLsp.EntityData.YFilter = reverseLsp.YFilter
    reverseLsp.EntityData.YangName = "reverse-lsp"
    reverseLsp.EntityData.BundleName = "cisco_ios_xr"
    reverseLsp.EntityData.ParentYangName = "psb-info"
    reverseLsp.EntityData.SegmentPath = "reverse-lsp"
    reverseLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + reverseLsp.EntityData.SegmentPath
    reverseLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    reverseLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    reverseLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    reverseLsp.EntityData.Children = types.NewOrderedMap()
    reverseLsp.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &reverseLsp.GenericTrafficSpec})
    reverseLsp.EntityData.Children.Append("ero", types.YChild{"Ero", nil})
    for i := range reverseLsp.Ero {
        types.SetYListKey(reverseLsp.Ero[i], i)
        reverseLsp.EntityData.Children.Append(types.GetSegmentPath(reverseLsp.Ero[i]), types.YChild{"Ero", reverseLsp.Ero[i]})
    }
    reverseLsp.EntityData.Children.Append("unsup-sub-object", types.YChild{"UnsupSubObject", nil})
    for i := range reverseLsp.UnsupSubObject {
        types.SetYListKey(reverseLsp.UnsupSubObject[i], i)
        reverseLsp.EntityData.Children.Append(types.GetSegmentPath(reverseLsp.UnsupSubObject[i]), types.YChild{"UnsupSubObject", reverseLsp.UnsupSubObject[i]})
    }
    reverseLsp.EntityData.Leafs = types.NewOrderedMap()

    reverseLsp.EntityData.YListKeys = []string {}

    return &(reverseLsp.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec
// Generic Traffic Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "reverse-lsp"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero
// Explicit Route Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero) GetEntityData() *types.CommonEntityData {
    ero.EntityData.YFilter = ero.YFilter
    ero.EntityData.YangName = "ero"
    ero.EntityData.BundleName = "cisco_ios_xr"
    ero.EntityData.ParentYangName = "reverse-lsp"
    ero.EntityData.SegmentPath = "ero" + types.AddNoKeyToken(ero)
    ero.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" + ero.EntityData.SegmentPath
    ero.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ero.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ero.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ero.EntityData.Children = types.NewOrderedMap()
    ero.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &ero.Ipv4eroSubObject})
    ero.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &ero.UnnumberedEroSubObject})
    ero.EntityData.Leafs = types.NewOrderedMap()
    ero.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", ero.EroType})

    ero.EntityData.YListKeys = []string {}

    return &(ero.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject
// IPV4 ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_Ero_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject
// Unsupported REVERSE_LSP Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // rsvp mgmt rev lsp unsupported subobj. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj.
    RsvpMgmtRevLspUnsupportedSubobj []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj
}

func (unsupSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject) GetEntityData() *types.CommonEntityData {
    unsupSubObject.EntityData.YFilter = unsupSubObject.YFilter
    unsupSubObject.EntityData.YangName = "unsup-sub-object"
    unsupSubObject.EntityData.BundleName = "cisco_ios_xr"
    unsupSubObject.EntityData.ParentYangName = "reverse-lsp"
    unsupSubObject.EntityData.SegmentPath = "unsup-sub-object" + types.AddNoKeyToken(unsupSubObject)
    unsupSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/" + unsupSubObject.EntityData.SegmentPath
    unsupSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unsupSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unsupSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unsupSubObject.EntityData.Children = types.NewOrderedMap()
    unsupSubObject.EntityData.Children.Append("rsvp-mgmt-rev-lsp-unsupported-subobj", types.YChild{"RsvpMgmtRevLspUnsupportedSubobj", nil})
    for i := range unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj {
        types.SetYListKey(unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj[i], i)
        unsupSubObject.EntityData.Children.Append(types.GetSegmentPath(unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj[i]), types.YChild{"RsvpMgmtRevLspUnsupportedSubobj", unsupSubObject.RsvpMgmtRevLspUnsupportedSubobj[i]})
    }
    unsupSubObject.EntityData.Leafs = types.NewOrderedMap()

    unsupSubObject.EntityData.YListKeys = []string {}

    return &(unsupSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj
// rsvp mgmt rev lsp unsupported subobj
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // rsvp mgmt rev lsp unsupported subobj. The type is interface{} with range:
    // 0..255.
    Entry interface{}
}

func (rsvpMgmtRevLspUnsupportedSubobj *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_ReverseLsp_UnsupSubObject_RsvpMgmtRevLspUnsupportedSubobj) GetEntityData() *types.CommonEntityData {
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.YFilter = rsvpMgmtRevLspUnsupportedSubobj.YFilter
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.YangName = "rsvp-mgmt-rev-lsp-unsupported-subobj"
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.BundleName = "cisco_ios_xr"
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.ParentYangName = "unsup-sub-object"
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.SegmentPath = "rsvp-mgmt-rev-lsp-unsupported-subobj" + types.AddNoKeyToken(rsvpMgmtRevLspUnsupportedSubobj)
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/reverse-lsp/unsup-sub-object/" + rsvpMgmtRevLspUnsupportedSubobj.EntityData.SegmentPath
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpMgmtRevLspUnsupportedSubobj.EntityData.Children = types.NewOrderedMap()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.Leafs = types.NewOrderedMap()
    rsvpMgmtRevLspUnsupportedSubobj.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", rsvpMgmtRevLspUnsupportedSubobj.Entry})

    rsvpMgmtRevLspUnsupportedSubobj.EntityData.YListKeys = []string {}

    return &(rsvpMgmtRevLspUnsupportedSubobj.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero
// Explicit Route Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // EROType. The type is RsvpMgmtEroSubobj.
    EroType interface{}

    // IPV4 ERO Sub Object.
    Ipv4eroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject

    // Unnumbered ERO Sub Object.
    UnnumberedEroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
}

func (ero *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero) GetEntityData() *types.CommonEntityData {
    ero.EntityData.YFilter = ero.YFilter
    ero.EntityData.YangName = "ero"
    ero.EntityData.BundleName = "cisco_ios_xr"
    ero.EntityData.ParentYangName = "psb-info"
    ero.EntityData.SegmentPath = "ero" + types.AddNoKeyToken(ero)
    ero.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + ero.EntityData.SegmentPath
    ero.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ero.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ero.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ero.EntityData.Children = types.NewOrderedMap()
    ero.EntityData.Children.Append("ipv4ero-sub-object", types.YChild{"Ipv4eroSubObject", &ero.Ipv4eroSubObject})
    ero.EntityData.Children.Append("unnumbered-ero-sub-object", types.YChild{"UnnumberedEroSubObject", &ero.UnnumberedEroSubObject})
    ero.EntityData.Leafs = types.NewOrderedMap()
    ero.EntityData.Leafs.Append("ero-type", types.YLeaf{"EroType", ero.EroType})

    ero.EntityData.YListKeys = []string {}

    return &(ero.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject
// IPV4 ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The ERO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroAddress interface{}

    // ERO Prefix Length. The type is interface{} with range: 0..255.
    PrefixLength interface{}
}

func (ipv4eroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_Ipv4eroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4eroSubObject.EntityData.YFilter = ipv4eroSubObject.YFilter
    ipv4eroSubObject.EntityData.YangName = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4eroSubObject.EntityData.ParentYangName = "ero"
    ipv4eroSubObject.EntityData.SegmentPath = "ipv4ero-sub-object"
    ipv4eroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" + ipv4eroSubObject.EntityData.SegmentPath
    ipv4eroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4eroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4eroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4eroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4eroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", ipv4eroSubObject.IsStrictRoute})
    ipv4eroSubObject.EntityData.Leafs.Append("ero-address", types.YLeaf{"EroAddress", ipv4eroSubObject.EroAddress})
    ipv4eroSubObject.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", ipv4eroSubObject.PrefixLength})

    ipv4eroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4eroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject
// Unnumbered ERO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // ERO Entry Is Strict. The type is bool.
    IsStrictRoute interface{}

    // The Interface ID in ERO. The type is interface{} with range: 0..4294967295.
    EroInterfaceId interface{}

    // The Router ID in ERO. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    EroRouterId interface{}

    // Status of ERO. The type is RsvpMgmtEroSubobjStatus.
    Status interface{}
}

func (unnumberedEroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Ero_UnnumberedEroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedEroSubObject.EntityData.YFilter = unnumberedEroSubObject.YFilter
    unnumberedEroSubObject.EntityData.YangName = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedEroSubObject.EntityData.ParentYangName = "ero"
    unnumberedEroSubObject.EntityData.SegmentPath = "unnumbered-ero-sub-object"
    unnumberedEroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/ero/" + unnumberedEroSubObject.EntityData.SegmentPath
    unnumberedEroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedEroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedEroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedEroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedEroSubObject.EntityData.Leafs.Append("is-strict-route", types.YLeaf{"IsStrictRoute", unnumberedEroSubObject.IsStrictRoute})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-interface-id", types.YLeaf{"EroInterfaceId", unnumberedEroSubObject.EroInterfaceId})
    unnumberedEroSubObject.EntityData.Leafs.Append("ero-router-id", types.YLeaf{"EroRouterId", unnumberedEroSubObject.EroRouterId})
    unnumberedEroSubObject.EntityData.Leafs.Append("status", types.YLeaf{"Status", unnumberedEroSubObject.Status})

    unnumberedEroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedEroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro
// Record Route Sub Objects
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4rroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro) GetEntityData() *types.CommonEntityData {
    rro.EntityData.YFilter = rro.YFilter
    rro.EntityData.YangName = "rro"
    rro.EntityData.BundleName = "cisco_ios_xr"
    rro.EntityData.ParentYangName = "psb-info"
    rro.EntityData.SegmentPath = "rro" + types.AddNoKeyToken(rro)
    rro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/" + rro.EntityData.SegmentPath
    rro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rro.EntityData.Children = types.NewOrderedMap()
    rro.EntityData.Children.Append("ipv4rro-sub-object", types.YChild{"Ipv4rroSubObject", &rro.Ipv4rroSubObject})
    rro.EntityData.Children.Append("label-rro-sub-object", types.YChild{"LabelRroSubObject", &rro.LabelRroSubObject})
    rro.EntityData.Children.Append("unnumbered-rro-sub-object", types.YChild{"UnnumberedRroSubObject", &rro.UnnumberedRroSubObject})
    rro.EntityData.Children.Append("srlg-rro-sub-object", types.YChild{"SrlgRroSubObject", &rro.SrlgRroSubObject})
    rro.EntityData.Leafs = types.NewOrderedMap()
    rro.EntityData.Leafs.Append("rro-type", types.YLeaf{"RroType", rro.RroType})

    rro.EntityData.YListKeys = []string {}

    return &(rro.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject
// IPV4 RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags
}

func (ipv4rroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4rroSubObject.EntityData.YFilter = ipv4rroSubObject.YFilter
    ipv4rroSubObject.EntityData.YangName = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4rroSubObject.EntityData.ParentYangName = "rro"
    ipv4rroSubObject.EntityData.SegmentPath = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + ipv4rroSubObject.EntityData.SegmentPath
    ipv4rroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4rroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4rroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4rroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &ipv4rroSubObject.Flags})
    ipv4rroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Leafs.Append("rro-address", types.YLeaf{"RroAddress", ipv4rroSubObject.RroAddress})

    ipv4rroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4rroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags
// The RRO IPV4 Subobject Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_Ipv4rroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "ipv4rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/ipv4rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Label Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags

    // The RRO Subobject Variable Length Label. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel.
    VariableLengthLabel []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject) GetEntityData() *types.CommonEntityData {
    labelRroSubObject.EntityData.YFilter = labelRroSubObject.YFilter
    labelRroSubObject.EntityData.YangName = "label-rro-sub-object"
    labelRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    labelRroSubObject.EntityData.ParentYangName = "rro"
    labelRroSubObject.EntityData.SegmentPath = "label-rro-sub-object"
    labelRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + labelRroSubObject.EntityData.SegmentPath
    labelRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelRroSubObject.EntityData.Children = types.NewOrderedMap()
    labelRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &labelRroSubObject.Flags})
    labelRroSubObject.EntityData.Children.Append("variable-length-label", types.YChild{"VariableLengthLabel", nil})
    for i := range labelRroSubObject.VariableLengthLabel {
        types.SetYListKey(labelRroSubObject.VariableLengthLabel[i], i)
        labelRroSubObject.EntityData.Children.Append(types.GetSegmentPath(labelRroSubObject.VariableLengthLabel[i]), types.YChild{"VariableLengthLabel", labelRroSubObject.VariableLengthLabel[i]})
    }
    labelRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    labelRroSubObject.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelRroSubObject.Label})
    labelRroSubObject.EntityData.Leafs.Append("is-label-variable-length", types.YLeaf{"IsLabelVariableLength", labelRroSubObject.IsLabelVariableLength})

    labelRroSubObject.EntityData.YListKeys = []string {}

    return &(labelRroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "label-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-global-label", types.YLeaf{"IsGlobalLabel", flags.IsGlobalLabel})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
// The RRO Subobject Variable Length Label
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject Variable Length Label. The type is interface{} with
    // range: 0..4294967295.
    Entry interface{}
}

func (variableLengthLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_LabelRroSubObject_VariableLengthLabel) GetEntityData() *types.CommonEntityData {
    variableLengthLabel.EntityData.YFilter = variableLengthLabel.YFilter
    variableLengthLabel.EntityData.YangName = "variable-length-label"
    variableLengthLabel.EntityData.BundleName = "cisco_ios_xr"
    variableLengthLabel.EntityData.ParentYangName = "label-rro-sub-object"
    variableLengthLabel.EntityData.SegmentPath = "variable-length-label" + types.AddNoKeyToken(variableLengthLabel)
    variableLengthLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/label-rro-sub-object/" + variableLengthLabel.EntityData.SegmentPath
    variableLengthLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    variableLengthLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    variableLengthLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    variableLengthLabel.EntityData.Children = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", variableLengthLabel.Entry})

    variableLengthLabel.EntityData.YListKeys = []string {}

    return &(variableLengthLabel.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedRroSubObject.EntityData.YFilter = unnumberedRroSubObject.YFilter
    unnumberedRroSubObject.EntityData.YangName = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedRroSubObject.EntityData.ParentYangName = "rro"
    unnumberedRroSubObject.EntityData.SegmentPath = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + unnumberedRroSubObject.EntityData.SegmentPath
    unnumberedRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedRroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &unnumberedRroSubObject.Flags})
    unnumberedRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", unnumberedRroSubObject.InterfaceAddress})
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", unnumberedRroSubObject.InterfaceId})

    unnumberedRroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedRroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_UnnumberedRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "unnumbered-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/unnumbered-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs.
    SrlGs []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject) GetEntityData() *types.CommonEntityData {
    srlgRroSubObject.EntityData.YFilter = srlgRroSubObject.YFilter
    srlgRroSubObject.EntityData.YangName = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    srlgRroSubObject.EntityData.ParentYangName = "rro"
    srlgRroSubObject.EntityData.SegmentPath = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/" + srlgRroSubObject.EntityData.SegmentPath
    srlgRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgRroSubObject.EntityData.Children = types.NewOrderedMap()
    srlgRroSubObject.EntityData.Children.Append("srl-gs", types.YChild{"SrlGs", nil})
    for i := range srlgRroSubObject.SrlGs {
        types.SetYListKey(srlgRroSubObject.SrlGs[i], i)
        srlgRroSubObject.EntityData.Children.Append(types.GetSegmentPath(srlgRroSubObject.SrlGs[i]), types.YChild{"SrlGs", srlgRroSubObject.SrlGs[i]})
    }
    srlgRroSubObject.EntityData.Leafs = types.NewOrderedMap()

    srlgRroSubObject.EntityData.YListKeys = []string {}

    return &(srlgRroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs
// The RRO Subobject SRLGs
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject SRLGs. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlGs *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_PsbInfo_Rro_SrlgRroSubObject_SrlGs) GetEntityData() *types.CommonEntityData {
    srlGs.EntityData.YFilter = srlGs.YFilter
    srlGs.EntityData.YangName = "srl-gs"
    srlGs.EntityData.BundleName = "cisco_ios_xr"
    srlGs.EntityData.ParentYangName = "srlg-rro-sub-object"
    srlGs.EntityData.SegmentPath = "srl-gs" + types.AddNoKeyToken(srlGs)
    srlGs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/psb-info/rro/srlg-rro-sub-object/" + srlGs.EntityData.SegmentPath
    srlGs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlGs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlGs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlGs.EntityData.Children = types.NewOrderedMap()
    srlGs.EntityData.Leafs = types.NewOrderedMap()
    srlGs.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlGs.Entry})

    srlGs.EntityData.YListKeys = []string {}

    return &(srlGs.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo
// Reservation Info
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Entry validity. The type is bool.
    IsValid interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Interface on which outbound message was sent. The type is string with
    // pattern: b'[a-zA-Z0-9._/-]+'.
    OutInterface interface{}

    // Label for outbound traffic. The type is interface{} with range:
    // 0..4294967295.
    OutLabel interface{}

    // Backup tunnel interface. The type is string with pattern:
    // b'[a-zA-Z0-9._/-]+'.
    BackupInterface interface{}

    // Backup label. The type is interface{} with range: 0..4294967295.
    BackupLabel interface{}

    // RRO validity. The type is bool.
    IsRroValid interface{}

    // FlowSpec validity. The type is bool.
    IsFlowSpecValid interface{}

    // Generic Label for outbound traffic.
    GenericOutLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel

    // Flow spec object.
    FlowSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec

    // Generic Flow Spec object.
    GenericFlowSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec

    // Record route object. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro.
    Rro []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
}

func (rsbInfo *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo) GetEntityData() *types.CommonEntityData {
    rsbInfo.EntityData.YFilter = rsbInfo.YFilter
    rsbInfo.EntityData.YangName = "rsb-info"
    rsbInfo.EntityData.BundleName = "cisco_ios_xr"
    rsbInfo.EntityData.ParentYangName = "psb-rsb-info"
    rsbInfo.EntityData.SegmentPath = "rsb-info" + types.AddNoKeyToken(rsbInfo)
    rsbInfo.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/" + rsbInfo.EntityData.SegmentPath
    rsbInfo.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsbInfo.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsbInfo.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsbInfo.EntityData.Children = types.NewOrderedMap()
    rsbInfo.EntityData.Children.Append("generic-out-label", types.YChild{"GenericOutLabel", &rsbInfo.GenericOutLabel})
    rsbInfo.EntityData.Children.Append("flow-spec", types.YChild{"FlowSpec", &rsbInfo.FlowSpec})
    rsbInfo.EntityData.Children.Append("generic-flow-spec", types.YChild{"GenericFlowSpec", &rsbInfo.GenericFlowSpec})
    rsbInfo.EntityData.Children.Append("rro", types.YChild{"Rro", nil})
    for i := range rsbInfo.Rro {
        types.SetYListKey(rsbInfo.Rro[i], i)
        rsbInfo.EntityData.Children.Append(types.GetSegmentPath(rsbInfo.Rro[i]), types.YChild{"Rro", rsbInfo.Rro[i]})
    }
    rsbInfo.EntityData.Leafs = types.NewOrderedMap()
    rsbInfo.EntityData.Leafs.Append("is-valid", types.YLeaf{"IsValid", rsbInfo.IsValid})
    rsbInfo.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", rsbInfo.DestinationAddress})
    rsbInfo.EntityData.Leafs.Append("out-interface", types.YLeaf{"OutInterface", rsbInfo.OutInterface})
    rsbInfo.EntityData.Leafs.Append("out-label", types.YLeaf{"OutLabel", rsbInfo.OutLabel})
    rsbInfo.EntityData.Leafs.Append("backup-interface", types.YLeaf{"BackupInterface", rsbInfo.BackupInterface})
    rsbInfo.EntityData.Leafs.Append("backup-label", types.YLeaf{"BackupLabel", rsbInfo.BackupLabel})
    rsbInfo.EntityData.Leafs.Append("is-rro-valid", types.YLeaf{"IsRroValid", rsbInfo.IsRroValid})
    rsbInfo.EntityData.Leafs.Append("is-flow-spec-valid", types.YLeaf{"IsFlowSpecValid", rsbInfo.IsFlowSpecValid})

    rsbInfo.EntityData.YListKeys = []string {}

    return &(rsbInfo.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel
// Generic Label for outbound traffic
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // GenericLabelType. The type is RsvpMgmtGenericLabel.
    GenericLabelType interface{}

    // Generalized Label.
    GeneralizedLabel Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
}

func (genericOutLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel) GetEntityData() *types.CommonEntityData {
    genericOutLabel.EntityData.YFilter = genericOutLabel.YFilter
    genericOutLabel.EntityData.YangName = "generic-out-label"
    genericOutLabel.EntityData.BundleName = "cisco_ios_xr"
    genericOutLabel.EntityData.ParentYangName = "rsb-info"
    genericOutLabel.EntityData.SegmentPath = "generic-out-label"
    genericOutLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + genericOutLabel.EntityData.SegmentPath
    genericOutLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericOutLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericOutLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericOutLabel.EntityData.Children = types.NewOrderedMap()
    genericOutLabel.EntityData.Children.Append("generalized-label", types.YChild{"GeneralizedLabel", &genericOutLabel.GeneralizedLabel})
    genericOutLabel.EntityData.Leafs = types.NewOrderedMap()
    genericOutLabel.EntityData.Leafs.Append("generic-label-type", types.YLeaf{"GenericLabelType", genericOutLabel.GenericLabelType})

    genericOutLabel.EntityData.YListKeys = []string {}

    return &(genericOutLabel.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel
// Generalized Label
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Generalized Label Value. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value.
    Value []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value
}

func (generalizedLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel) GetEntityData() *types.CommonEntityData {
    generalizedLabel.EntityData.YFilter = generalizedLabel.YFilter
    generalizedLabel.EntityData.YangName = "generalized-label"
    generalizedLabel.EntityData.BundleName = "cisco_ios_xr"
    generalizedLabel.EntityData.ParentYangName = "generic-out-label"
    generalizedLabel.EntityData.SegmentPath = "generalized-label"
    generalizedLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/" + generalizedLabel.EntityData.SegmentPath
    generalizedLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    generalizedLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    generalizedLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    generalizedLabel.EntityData.Children = types.NewOrderedMap()
    generalizedLabel.EntityData.Children.Append("value", types.YChild{"Value", nil})
    for i := range generalizedLabel.Value {
        types.SetYListKey(generalizedLabel.Value[i], i)
        generalizedLabel.EntityData.Children.Append(types.GetSegmentPath(generalizedLabel.Value[i]), types.YChild{"Value", generalizedLabel.Value[i]})
    }
    generalizedLabel.EntityData.Leafs = types.NewOrderedMap()

    generalizedLabel.EntityData.YListKeys = []string {}

    return &(generalizedLabel.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value
// Generalized Label Value
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Generalized Label Value. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (value *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericOutLabel_GeneralizedLabel_Value) GetEntityData() *types.CommonEntityData {
    value.EntityData.YFilter = value.YFilter
    value.EntityData.YangName = "value"
    value.EntityData.BundleName = "cisco_ios_xr"
    value.EntityData.ParentYangName = "generalized-label"
    value.EntityData.SegmentPath = "value" + types.AddNoKeyToken(value)
    value.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-out-label/generalized-label/" + value.EntityData.SegmentPath
    value.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    value.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    value.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    value.EntityData.Children = types.NewOrderedMap()
    value.EntityData.Leafs = types.NewOrderedMap()
    value.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", value.Entry})

    value.EntityData.YListKeys = []string {}

    return &(value.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec
// Flow spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Flow Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowAverageRate interface{}

    // The Flow Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowMaxBurst interface{}

    // The Flow Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    FlowPeakRate interface{}

    // The Flow Minimum Unit. The type is interface{} with range: 0..4294967295.
    FlowMinUnit interface{}

    // The Flow Maximum Unit. The type is interface{} with range: 0..4294967295.
    FlowMaxUnit interface{}

    // The Flow Requested Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    FlowRequestedRate interface{}

    // The Flow Slack. The type is interface{} with range: 0..4294967295.
    FlowSlack interface{}

    // The Flow Quality of Service. The type is RsvpMgmtQosServiceEnum.
    FlowQos interface{}
}

func (flowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_FlowSpec) GetEntityData() *types.CommonEntityData {
    flowSpec.EntityData.YFilter = flowSpec.YFilter
    flowSpec.EntityData.YangName = "flow-spec"
    flowSpec.EntityData.BundleName = "cisco_ios_xr"
    flowSpec.EntityData.ParentYangName = "rsb-info"
    flowSpec.EntityData.SegmentPath = "flow-spec"
    flowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + flowSpec.EntityData.SegmentPath
    flowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flowSpec.EntityData.Children = types.NewOrderedMap()
    flowSpec.EntityData.Leafs = types.NewOrderedMap()
    flowSpec.EntityData.Leafs.Append("flow-average-rate", types.YLeaf{"FlowAverageRate", flowSpec.FlowAverageRate})
    flowSpec.EntityData.Leafs.Append("flow-max-burst", types.YLeaf{"FlowMaxBurst", flowSpec.FlowMaxBurst})
    flowSpec.EntityData.Leafs.Append("flow-peak-rate", types.YLeaf{"FlowPeakRate", flowSpec.FlowPeakRate})
    flowSpec.EntityData.Leafs.Append("flow-min-unit", types.YLeaf{"FlowMinUnit", flowSpec.FlowMinUnit})
    flowSpec.EntityData.Leafs.Append("flow-max-unit", types.YLeaf{"FlowMaxUnit", flowSpec.FlowMaxUnit})
    flowSpec.EntityData.Leafs.Append("flow-requested-rate", types.YLeaf{"FlowRequestedRate", flowSpec.FlowRequestedRate})
    flowSpec.EntityData.Leafs.Append("flow-slack", types.YLeaf{"FlowSlack", flowSpec.FlowSlack})
    flowSpec.EntityData.Leafs.Append("flow-qos", types.YLeaf{"FlowQos", flowSpec.FlowQos})

    flowSpec.EntityData.YListKeys = []string {}

    return &(flowSpec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec
// Generic Flow Spec object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FlowSpecType. The type is RsvpMgmtFlowSpec.
    FlowSpecType interface{}

    // G709 OTN FlowSpec.
    G709otnFlowSpec Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec
}

func (genericFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec) GetEntityData() *types.CommonEntityData {
    genericFlowSpec.EntityData.YFilter = genericFlowSpec.YFilter
    genericFlowSpec.EntityData.YangName = "generic-flow-spec"
    genericFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    genericFlowSpec.EntityData.ParentYangName = "rsb-info"
    genericFlowSpec.EntityData.SegmentPath = "generic-flow-spec"
    genericFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + genericFlowSpec.EntityData.SegmentPath
    genericFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericFlowSpec.EntityData.Children = types.NewOrderedMap()
    genericFlowSpec.EntityData.Children.Append("g709otn-flow-spec", types.YChild{"G709otnFlowSpec", &genericFlowSpec.G709otnFlowSpec})
    genericFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    genericFlowSpec.EntityData.Leafs.Append("flow-spec-type", types.YLeaf{"FlowSpecType", genericFlowSpec.FlowSpecType})

    genericFlowSpec.EntityData.YListKeys = []string {}

    return &(genericFlowSpec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec
// G709 OTN FlowSpec
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Flow Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    FlowSignalType interface{}

    // G709 OTN Flow NVC. The type is interface{} with range: 0..65535.
    FlowNvc interface{}

    // G709 OTN Flow Multiplier. The type is interface{} with range: 0..65535.
    FlowMultiplier interface{}

    // G709 OTN Flow Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    FlowBitRate interface{}
}

func (g709otnFlowSpec *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_GenericFlowSpec_G709otnFlowSpec) GetEntityData() *types.CommonEntityData {
    g709otnFlowSpec.EntityData.YFilter = g709otnFlowSpec.YFilter
    g709otnFlowSpec.EntityData.YangName = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.BundleName = "cisco_ios_xr"
    g709otnFlowSpec.EntityData.ParentYangName = "generic-flow-spec"
    g709otnFlowSpec.EntityData.SegmentPath = "g709otn-flow-spec"
    g709otnFlowSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/generic-flow-spec/" + g709otnFlowSpec.EntityData.SegmentPath
    g709otnFlowSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnFlowSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnFlowSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnFlowSpec.EntityData.Children = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs = types.NewOrderedMap()
    g709otnFlowSpec.EntityData.Leafs.Append("flow-signal-type", types.YLeaf{"FlowSignalType", g709otnFlowSpec.FlowSignalType})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-nvc", types.YLeaf{"FlowNvc", g709otnFlowSpec.FlowNvc})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-multiplier", types.YLeaf{"FlowMultiplier", g709otnFlowSpec.FlowMultiplier})
    g709otnFlowSpec.EntityData.Leafs.Append("flow-bit-rate", types.YLeaf{"FlowBitRate", g709otnFlowSpec.FlowBitRate})

    g709otnFlowSpec.EntityData.YListKeys = []string {}

    return &(g709otnFlowSpec.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro
// Record route object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // RROType. The type is RsvpMgmtRroSubobj.
    RroType interface{}

    // IPV4 RRO Sub Object.
    Ipv4rroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject

    // Label RRO Sub Object.
    LabelRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject

    // Unnumbered RRO Sub Object.
    UnnumberedRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject

    // SRLG RRO Sub Object.
    SrlgRroSubObject Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
}

func (rro *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro) GetEntityData() *types.CommonEntityData {
    rro.EntityData.YFilter = rro.YFilter
    rro.EntityData.YangName = "rro"
    rro.EntityData.BundleName = "cisco_ios_xr"
    rro.EntityData.ParentYangName = "rsb-info"
    rro.EntityData.SegmentPath = "rro" + types.AddNoKeyToken(rro)
    rro.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/" + rro.EntityData.SegmentPath
    rro.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rro.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rro.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rro.EntityData.Children = types.NewOrderedMap()
    rro.EntityData.Children.Append("ipv4rro-sub-object", types.YChild{"Ipv4rroSubObject", &rro.Ipv4rroSubObject})
    rro.EntityData.Children.Append("label-rro-sub-object", types.YChild{"LabelRroSubObject", &rro.LabelRroSubObject})
    rro.EntityData.Children.Append("unnumbered-rro-sub-object", types.YChild{"UnnumberedRroSubObject", &rro.UnnumberedRroSubObject})
    rro.EntityData.Children.Append("srlg-rro-sub-object", types.YChild{"SrlgRroSubObject", &rro.SrlgRroSubObject})
    rro.EntityData.Leafs = types.NewOrderedMap()
    rro.EntityData.Leafs.Append("rro-type", types.YLeaf{"RroType", rro.RroType})

    rro.EntityData.YListKeys = []string {}

    return &(rro.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject
// IPV4 RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO IPV4 Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    RroAddress interface{}

    // The RRO IPV4 Subobject Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags
}

func (ipv4rroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject) GetEntityData() *types.CommonEntityData {
    ipv4rroSubObject.EntityData.YFilter = ipv4rroSubObject.YFilter
    ipv4rroSubObject.EntityData.YangName = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.BundleName = "cisco_ios_xr"
    ipv4rroSubObject.EntityData.ParentYangName = "rro"
    ipv4rroSubObject.EntityData.SegmentPath = "ipv4rro-sub-object"
    ipv4rroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + ipv4rroSubObject.EntityData.SegmentPath
    ipv4rroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4rroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4rroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4rroSubObject.EntityData.Children = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &ipv4rroSubObject.Flags})
    ipv4rroSubObject.EntityData.Leafs = types.NewOrderedMap()
    ipv4rroSubObject.EntityData.Leafs.Append("rro-address", types.YLeaf{"RroAddress", ipv4rroSubObject.RroAddress})

    ipv4rroSubObject.EntityData.YListKeys = []string {}

    return &(ipv4rroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags
// The RRO IPV4 Subobject Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_Ipv4rroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "ipv4rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/ipv4rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject
// Label RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject Label Value. The type is interface{} with range:
    // 0..4294967295.
    Label interface{}

    // Is the RRO Subobject Label Variable Length. The type is bool.
    IsLabelVariableLength interface{}

    // The RRO Subobject Label Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags

    // The RRO Subobject Variable Length Label. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel.
    VariableLengthLabel []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
}

func (labelRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject) GetEntityData() *types.CommonEntityData {
    labelRroSubObject.EntityData.YFilter = labelRroSubObject.YFilter
    labelRroSubObject.EntityData.YangName = "label-rro-sub-object"
    labelRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    labelRroSubObject.EntityData.ParentYangName = "rro"
    labelRroSubObject.EntityData.SegmentPath = "label-rro-sub-object"
    labelRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + labelRroSubObject.EntityData.SegmentPath
    labelRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelRroSubObject.EntityData.Children = types.NewOrderedMap()
    labelRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &labelRroSubObject.Flags})
    labelRroSubObject.EntityData.Children.Append("variable-length-label", types.YChild{"VariableLengthLabel", nil})
    for i := range labelRroSubObject.VariableLengthLabel {
        types.SetYListKey(labelRroSubObject.VariableLengthLabel[i], i)
        labelRroSubObject.EntityData.Children.Append(types.GetSegmentPath(labelRroSubObject.VariableLengthLabel[i]), types.YChild{"VariableLengthLabel", labelRroSubObject.VariableLengthLabel[i]})
    }
    labelRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    labelRroSubObject.EntityData.Leafs.Append("label", types.YLeaf{"Label", labelRroSubObject.Label})
    labelRroSubObject.EntityData.Leafs.Append("is-label-variable-length", types.YLeaf{"IsLabelVariableLength", labelRroSubObject.IsLabelVariableLength})

    labelRroSubObject.EntityData.YListKeys = []string {}

    return &(labelRroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags
// The RRO Subobject Label Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label is Global across all interfaces. The type is bool.
    IsGlobalLabel interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "label-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-global-label", types.YLeaf{"IsGlobalLabel", flags.IsGlobalLabel})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel
// The RRO Subobject Variable Length Label
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject Variable Length Label. The type is interface{} with
    // range: 0..4294967295.
    Entry interface{}
}

func (variableLengthLabel *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_LabelRroSubObject_VariableLengthLabel) GetEntityData() *types.CommonEntityData {
    variableLengthLabel.EntityData.YFilter = variableLengthLabel.YFilter
    variableLengthLabel.EntityData.YangName = "variable-length-label"
    variableLengthLabel.EntityData.BundleName = "cisco_ios_xr"
    variableLengthLabel.EntityData.ParentYangName = "label-rro-sub-object"
    variableLengthLabel.EntityData.SegmentPath = "variable-length-label" + types.AddNoKeyToken(variableLengthLabel)
    variableLengthLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/label-rro-sub-object/" + variableLengthLabel.EntityData.SegmentPath
    variableLengthLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    variableLengthLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    variableLengthLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    variableLengthLabel.EntityData.Children = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs = types.NewOrderedMap()
    variableLengthLabel.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", variableLengthLabel.Entry})

    variableLengthLabel.EntityData.YListKeys = []string {}

    return &(variableLengthLabel.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject
// Unnumbered RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Interface Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    InterfaceAddress interface{}

    // The RRO Interface ID. The type is interface{} with range: 0..4294967295.
    InterfaceId interface{}

    // The RRO Subobject Unnumbered Flags.
    Flags Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
}

func (unnumberedRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject) GetEntityData() *types.CommonEntityData {
    unnumberedRroSubObject.EntityData.YFilter = unnumberedRroSubObject.YFilter
    unnumberedRroSubObject.EntityData.YangName = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    unnumberedRroSubObject.EntityData.ParentYangName = "rro"
    unnumberedRroSubObject.EntityData.SegmentPath = "unnumbered-rro-sub-object"
    unnumberedRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + unnumberedRroSubObject.EntityData.SegmentPath
    unnumberedRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    unnumberedRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    unnumberedRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    unnumberedRroSubObject.EntityData.Children = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Children.Append("flags", types.YChild{"Flags", &unnumberedRroSubObject.Flags})
    unnumberedRroSubObject.EntityData.Leafs = types.NewOrderedMap()
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-address", types.YLeaf{"InterfaceAddress", unnumberedRroSubObject.InterfaceAddress})
    unnumberedRroSubObject.EntityData.Leafs.Append("interface-id", types.YLeaf{"InterfaceId", unnumberedRroSubObject.InterfaceId})

    unnumberedRroSubObject.EntityData.YListKeys = []string {}

    return &(unnumberedRroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags
// The RRO Subobject Unnumbered Flags
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection Available. The type is bool.
    IsProtectionAvailable interface{}

    // Local Protection In Use. The type is bool.
    IsProtectionInUse interface{}

    // Bandwidth Protection Available. The type is bool.
    IsBandwidthProtected interface{}

    // Node Protection Available. The type is bool.
    IsNodeProtectionAvailable interface{}

    // Node ID In Use. The type is bool.
    IsNodeId interface{}
}

func (flags *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_UnnumberedRroSubObject_Flags) GetEntityData() *types.CommonEntityData {
    flags.EntityData.YFilter = flags.YFilter
    flags.EntityData.YangName = "flags"
    flags.EntityData.BundleName = "cisco_ios_xr"
    flags.EntityData.ParentYangName = "unnumbered-rro-sub-object"
    flags.EntityData.SegmentPath = "flags"
    flags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/unnumbered-rro-sub-object/" + flags.EntityData.SegmentPath
    flags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    flags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    flags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    flags.EntityData.Children = types.NewOrderedMap()
    flags.EntityData.Leafs = types.NewOrderedMap()
    flags.EntityData.Leafs.Append("is-protection-available", types.YLeaf{"IsProtectionAvailable", flags.IsProtectionAvailable})
    flags.EntityData.Leafs.Append("is-protection-in-use", types.YLeaf{"IsProtectionInUse", flags.IsProtectionInUse})
    flags.EntityData.Leafs.Append("is-bandwidth-protected", types.YLeaf{"IsBandwidthProtected", flags.IsBandwidthProtected})
    flags.EntityData.Leafs.Append("is-node-protection-available", types.YLeaf{"IsNodeProtectionAvailable", flags.IsNodeProtectionAvailable})
    flags.EntityData.Leafs.Append("is-node-id", types.YLeaf{"IsNodeId", flags.IsNodeId})

    flags.EntityData.YListKeys = []string {}

    return &(flags.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject
// SRLG RRO Sub Object
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The RRO Subobject SRLGs. The type is slice of
    // Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs.
    SrlGs []*Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs
}

func (srlgRroSubObject *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject) GetEntityData() *types.CommonEntityData {
    srlgRroSubObject.EntityData.YFilter = srlgRroSubObject.YFilter
    srlgRroSubObject.EntityData.YangName = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.BundleName = "cisco_ios_xr"
    srlgRroSubObject.EntityData.ParentYangName = "rro"
    srlgRroSubObject.EntityData.SegmentPath = "srlg-rro-sub-object"
    srlgRroSubObject.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/" + srlgRroSubObject.EntityData.SegmentPath
    srlgRroSubObject.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlgRroSubObject.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlgRroSubObject.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlgRroSubObject.EntityData.Children = types.NewOrderedMap()
    srlgRroSubObject.EntityData.Children.Append("srl-gs", types.YChild{"SrlGs", nil})
    for i := range srlgRroSubObject.SrlGs {
        types.SetYListKey(srlgRroSubObject.SrlGs[i], i)
        srlgRroSubObject.EntityData.Children.Append(types.GetSegmentPath(srlgRroSubObject.SrlGs[i]), types.YChild{"SrlGs", srlgRroSubObject.SrlGs[i]})
    }
    srlgRroSubObject.EntityData.Leafs = types.NewOrderedMap()

    srlgRroSubObject.EntityData.YListKeys = []string {}

    return &(srlgRroSubObject.EntityData)
}

// Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs
// The RRO Subobject SRLGs
type Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // The RRO Subobject SRLGs. The type is interface{} with range: 0..4294967295.
    Entry interface{}
}

func (srlGs *Rsvp_SessionDetaileds_SessionDetailed_PsbRsbInfo_RsbInfo_Rro_SrlgRroSubObject_SrlGs) GetEntityData() *types.CommonEntityData {
    srlGs.EntityData.YFilter = srlGs.YFilter
    srlGs.EntityData.YangName = "srl-gs"
    srlGs.EntityData.BundleName = "cisco_ios_xr"
    srlGs.EntityData.ParentYangName = "srlg-rro-sub-object"
    srlGs.EntityData.SegmentPath = "srl-gs" + types.AddNoKeyToken(srlGs)
    srlGs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/session-detaileds/session-detailed/psb-rsb-info/rsb-info/rro/srlg-rro-sub-object/" + srlGs.EntityData.SegmentPath
    srlGs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    srlGs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    srlGs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    srlGs.EntityData.Children = types.NewOrderedMap()
    srlGs.EntityData.Leafs = types.NewOrderedMap()
    srlGs.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", srlGs.Entry})

    srlGs.EntityData.YListKeys = []string {}

    return &(srlGs.EntityData)
}

// Rsvp_HelloInstanceDetails
// Table of detailed info about hello instances
type Rsvp_HelloInstanceDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detailed info for a single hello instance. The type is slice of
    // Rsvp_HelloInstanceDetails_HelloInstanceDetail.
    HelloInstanceDetail []*Rsvp_HelloInstanceDetails_HelloInstanceDetail
}

func (helloInstanceDetails *Rsvp_HelloInstanceDetails) GetEntityData() *types.CommonEntityData {
    helloInstanceDetails.EntityData.YFilter = helloInstanceDetails.YFilter
    helloInstanceDetails.EntityData.YangName = "hello-instance-details"
    helloInstanceDetails.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceDetails.EntityData.ParentYangName = "rsvp"
    helloInstanceDetails.EntityData.SegmentPath = "hello-instance-details"
    helloInstanceDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + helloInstanceDetails.EntityData.SegmentPath
    helloInstanceDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceDetails.EntityData.Children = types.NewOrderedMap()
    helloInstanceDetails.EntityData.Children.Append("hello-instance-detail", types.YChild{"HelloInstanceDetail", nil})
    for i := range helloInstanceDetails.HelloInstanceDetail {
        helloInstanceDetails.EntityData.Children.Append(types.GetSegmentPath(helloInstanceDetails.HelloInstanceDetail[i]), types.YChild{"HelloInstanceDetail", helloInstanceDetails.HelloInstanceDetail[i]})
    }
    helloInstanceDetails.EntityData.Leafs = types.NewOrderedMap()

    helloInstanceDetails.EntityData.YListKeys = []string {}

    return &(helloInstanceDetails.EntityData)
}

// Rsvp_HelloInstanceDetails_HelloInstanceDetail
// Detailed info for a single hello instance
type Rsvp_HelloInstanceDetails_HelloInstanceDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // This attribute is a key. Destination Address. The type is string with
    // pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Source address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddressXr interface{}

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddressXr interface{}

    // Hello instance owner. The type is RsvpMgmtHelloInstanceOwner.
    HelloInstanceOwner interface{}

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    NeighborHelloState interface{}

    // Hello instance type. The type is RsvpMgmtHelloInstance.
    InstanceType interface{}

    // Interface to use. The type is string with pattern: b'[a-zA-Z0-9._/-]+'.
    HelloInterface interface{}

    // Hello Interval. The type is interface{} with range: 0..4294967295.
    HelloInterval interface{}

    // Number of missed Hello allowed. The type is interface{} with range:
    // 0..4294967295.
    MissedAcksAllowed interface{}

    // Source Instance. The type is interface{} with range: 0..4294967295.
    SourceInstance interface{}

    // Destination Instance. The type is interface{} with range: 0..4294967295.
    DestinationInstance interface{}

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    CommunicationLostReason interface{}

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    TotalCommunicationLost interface{}

    // Lost Comm. Hello missed count. The type is interface{} with range:
    // 0..65535.
    CommunicationLostHelloMissed interface{}

    // Count of lost comm. due to wrong Source Inst. The type is interface{} with
    // range: 0..65535.
    CommunicationLostWrongSourceInst interface{}

    // Count of lost comm. due to wrong Destination Inst. The type is interface{}
    // with range: 0..65535.
    CommunicationLostWrongDestinationInst interface{}

    // Count of lost comm. due to interface down. The type is interface{} with
    // range: 0..65535.
    CommunicationLostInterfaceDown interface{}

    // Count of lost comm. due to nbor disabling Hellos. The type is interface{}
    // with range: 0..65535.
    CommunicationLostNeighborDisabledHello interface{}

    // Number of hello messages sent. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesSent interface{}

    // Number of hello messages received. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloMessagesReceived interface{}

    // Count of Hello Requests suppessed. The type is interface{} with range:
    // 0..18446744073709551615.
    HelloRequestSuppressed interface{}

    // Hello up time.
    UpTime Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime

    // Time when communication was lost.
    CommunicationLostTime Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
}

func (helloInstanceDetail *Rsvp_HelloInstanceDetails_HelloInstanceDetail) GetEntityData() *types.CommonEntityData {
    helloInstanceDetail.EntityData.YFilter = helloInstanceDetail.YFilter
    helloInstanceDetail.EntityData.YangName = "hello-instance-detail"
    helloInstanceDetail.EntityData.BundleName = "cisco_ios_xr"
    helloInstanceDetail.EntityData.ParentYangName = "hello-instance-details"
    helloInstanceDetail.EntityData.SegmentPath = "hello-instance-detail" + types.AddKeyToken(helloInstanceDetail.SourceAddress, "source-address") + types.AddKeyToken(helloInstanceDetail.DestinationAddress, "destination-address")
    helloInstanceDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-details/" + helloInstanceDetail.EntityData.SegmentPath
    helloInstanceDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    helloInstanceDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    helloInstanceDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    helloInstanceDetail.EntityData.Children = types.NewOrderedMap()
    helloInstanceDetail.EntityData.Children.Append("up-time", types.YChild{"UpTime", &helloInstanceDetail.UpTime})
    helloInstanceDetail.EntityData.Children.Append("communication-lost-time", types.YChild{"CommunicationLostTime", &helloInstanceDetail.CommunicationLostTime})
    helloInstanceDetail.EntityData.Leafs = types.NewOrderedMap()
    helloInstanceDetail.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", helloInstanceDetail.SourceAddress})
    helloInstanceDetail.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", helloInstanceDetail.DestinationAddress})
    helloInstanceDetail.EntityData.Leafs.Append("source-address-xr", types.YLeaf{"SourceAddressXr", helloInstanceDetail.SourceAddressXr})
    helloInstanceDetail.EntityData.Leafs.Append("destination-address-xr", types.YLeaf{"DestinationAddressXr", helloInstanceDetail.DestinationAddressXr})
    helloInstanceDetail.EntityData.Leafs.Append("hello-instance-owner", types.YLeaf{"HelloInstanceOwner", helloInstanceDetail.HelloInstanceOwner})
    helloInstanceDetail.EntityData.Leafs.Append("neighbor-hello-state", types.YLeaf{"NeighborHelloState", helloInstanceDetail.NeighborHelloState})
    helloInstanceDetail.EntityData.Leafs.Append("instance-type", types.YLeaf{"InstanceType", helloInstanceDetail.InstanceType})
    helloInstanceDetail.EntityData.Leafs.Append("hello-interface", types.YLeaf{"HelloInterface", helloInstanceDetail.HelloInterface})
    helloInstanceDetail.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", helloInstanceDetail.HelloInterval})
    helloInstanceDetail.EntityData.Leafs.Append("missed-acks-allowed", types.YLeaf{"MissedAcksAllowed", helloInstanceDetail.MissedAcksAllowed})
    helloInstanceDetail.EntityData.Leafs.Append("source-instance", types.YLeaf{"SourceInstance", helloInstanceDetail.SourceInstance})
    helloInstanceDetail.EntityData.Leafs.Append("destination-instance", types.YLeaf{"DestinationInstance", helloInstanceDetail.DestinationInstance})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-reason", types.YLeaf{"CommunicationLostReason", helloInstanceDetail.CommunicationLostReason})
    helloInstanceDetail.EntityData.Leafs.Append("total-communication-lost", types.YLeaf{"TotalCommunicationLost", helloInstanceDetail.TotalCommunicationLost})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-hello-missed", types.YLeaf{"CommunicationLostHelloMissed", helloInstanceDetail.CommunicationLostHelloMissed})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-wrong-source-inst", types.YLeaf{"CommunicationLostWrongSourceInst", helloInstanceDetail.CommunicationLostWrongSourceInst})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-wrong-destination-inst", types.YLeaf{"CommunicationLostWrongDestinationInst", helloInstanceDetail.CommunicationLostWrongDestinationInst})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-interface-down", types.YLeaf{"CommunicationLostInterfaceDown", helloInstanceDetail.CommunicationLostInterfaceDown})
    helloInstanceDetail.EntityData.Leafs.Append("communication-lost-neighbor-disabled-hello", types.YLeaf{"CommunicationLostNeighborDisabledHello", helloInstanceDetail.CommunicationLostNeighborDisabledHello})
    helloInstanceDetail.EntityData.Leafs.Append("hello-messages-sent", types.YLeaf{"HelloMessagesSent", helloInstanceDetail.HelloMessagesSent})
    helloInstanceDetail.EntityData.Leafs.Append("hello-messages-received", types.YLeaf{"HelloMessagesReceived", helloInstanceDetail.HelloMessagesReceived})
    helloInstanceDetail.EntityData.Leafs.Append("hello-request-suppressed", types.YLeaf{"HelloRequestSuppressed", helloInstanceDetail.HelloRequestSuppressed})

    helloInstanceDetail.EntityData.YListKeys = []string {"SourceAddress", "DestinationAddress"}

    return &(helloInstanceDetail.EntityData)
}

// Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime
// Hello up time
type Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_UpTime) GetEntityData() *types.CommonEntityData {
    upTime.EntityData.YFilter = upTime.YFilter
    upTime.EntityData.YangName = "up-time"
    upTime.EntityData.BundleName = "cisco_ios_xr"
    upTime.EntityData.ParentYangName = "hello-instance-detail"
    upTime.EntityData.SegmentPath = "up-time"
    upTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-details/hello-instance-detail/" + upTime.EntityData.SegmentPath
    upTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    upTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    upTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    upTime.EntityData.Children = types.NewOrderedMap()
    upTime.EntityData.Leafs = types.NewOrderedMap()
    upTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", upTime.Seconds})
    upTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", upTime.Nanoseconds})

    upTime.EntityData.YListKeys = []string {}

    return &(upTime.EntityData)
}

// Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime
// Time when communication was lost
type Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (communicationLostTime *Rsvp_HelloInstanceDetails_HelloInstanceDetail_CommunicationLostTime) GetEntityData() *types.CommonEntityData {
    communicationLostTime.EntityData.YFilter = communicationLostTime.YFilter
    communicationLostTime.EntityData.YangName = "communication-lost-time"
    communicationLostTime.EntityData.BundleName = "cisco_ios_xr"
    communicationLostTime.EntityData.ParentYangName = "hello-instance-detail"
    communicationLostTime.EntityData.SegmentPath = "communication-lost-time"
    communicationLostTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/hello-instance-details/hello-instance-detail/" + communicationLostTime.EntityData.SegmentPath
    communicationLostTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    communicationLostTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    communicationLostTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    communicationLostTime.EntityData.Children = types.NewOrderedMap()
    communicationLostTime.EntityData.Leafs = types.NewOrderedMap()
    communicationLostTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", communicationLostTime.Seconds})
    communicationLostTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", communicationLostTime.Nanoseconds})

    communicationLostTime.EntityData.YListKeys = []string {}

    return &(communicationLostTime.EntityData)
}

// Rsvp_GlobalNeighborDetails
// Table of detailed info about global neighbors
type Rsvp_GlobalNeighborDetails struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detail info for a single global neighbor. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail.
    GlobalNeighborDetail []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail
}

func (globalNeighborDetails *Rsvp_GlobalNeighborDetails) GetEntityData() *types.CommonEntityData {
    globalNeighborDetails.EntityData.YFilter = globalNeighborDetails.YFilter
    globalNeighborDetails.EntityData.YangName = "global-neighbor-details"
    globalNeighborDetails.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborDetails.EntityData.ParentYangName = "rsvp"
    globalNeighborDetails.EntityData.SegmentPath = "global-neighbor-details"
    globalNeighborDetails.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + globalNeighborDetails.EntityData.SegmentPath
    globalNeighborDetails.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborDetails.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborDetails.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborDetails.EntityData.Children = types.NewOrderedMap()
    globalNeighborDetails.EntityData.Children.Append("global-neighbor-detail", types.YChild{"GlobalNeighborDetail", nil})
    for i := range globalNeighborDetails.GlobalNeighborDetail {
        globalNeighborDetails.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetails.GlobalNeighborDetail[i]), types.YChild{"GlobalNeighborDetail", globalNeighborDetails.GlobalNeighborDetail[i]})
    }
    globalNeighborDetails.EntityData.Leafs = types.NewOrderedMap()

    globalNeighborDetails.EntityData.YListKeys = []string {}

    return &(globalNeighborDetails.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail
// Detail info for a single global neighbor
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Current restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // GR Restart Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RestartTime interface{}

    // Is GR restart timer running. The type is bool.
    IsRestartTimerRunning interface{}

    // GR Recovery Time (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    RecoveryTime interface{}

    // Is RSVP recovery timer running. The type is bool.
    IsRecoveryTimerRunning interface{}

    // Hello Interval (milliseconds). The type is interface{} with range:
    // 0..4294967295. Units are millisecond.
    HelloInterval interface{}

    // Hello missed count. The type is interface{} with range: 0..255.
    MissedHellos interface{}

    // Number of pending states for this neighbor. The type is interface{} with
    // range: 0..4294967295.
    PendingStates interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags

    // How much restart time remains.
    RestartTimeLeft Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft

    // When will restart timer expire.
    RestartTimerExpiryTime Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime

    // How much recovery timer remains.
    RecoveryTimeLeft Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft

    // Time at which recovery timer will expire.
    RecoveryTimerExpTime Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime

    // Local node address. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress.
    LocalNodeAddress []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress

    // Interface Neighbor List. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor.
    InterfaceNeighbor []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor

    // Neighbor's hello state. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState.
    NeighborHelloState []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState

    // Reason why communication was lost. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason.
    LostCommunicationReason []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason

    // Total number of times communication got lost. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal.
    LostCommunicationTotal []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal

    // Hello up time. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime.
    UpTime []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime

    // Time when communication was lost. The type is slice of
    // Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime.
    LostCommunicationTime []*Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
}

func (globalNeighborDetail *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail) GetEntityData() *types.CommonEntityData {
    globalNeighborDetail.EntityData.YFilter = globalNeighborDetail.YFilter
    globalNeighborDetail.EntityData.YangName = "global-neighbor-detail"
    globalNeighborDetail.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborDetail.EntityData.ParentYangName = "global-neighbor-details"
    globalNeighborDetail.EntityData.SegmentPath = "global-neighbor-detail" + types.AddKeyToken(globalNeighborDetail.NeighborAddress, "neighbor-address")
    globalNeighborDetail.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/" + globalNeighborDetail.EntityData.SegmentPath
    globalNeighborDetail.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborDetail.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborDetail.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborDetail.EntityData.Children = types.NewOrderedMap()
    globalNeighborDetail.EntityData.Children.Append("global-neighbor-flags", types.YChild{"GlobalNeighborFlags", &globalNeighborDetail.GlobalNeighborFlags})
    globalNeighborDetail.EntityData.Children.Append("restart-time-left", types.YChild{"RestartTimeLeft", &globalNeighborDetail.RestartTimeLeft})
    globalNeighborDetail.EntityData.Children.Append("restart-timer-expiry-time", types.YChild{"RestartTimerExpiryTime", &globalNeighborDetail.RestartTimerExpiryTime})
    globalNeighborDetail.EntityData.Children.Append("recovery-time-left", types.YChild{"RecoveryTimeLeft", &globalNeighborDetail.RecoveryTimeLeft})
    globalNeighborDetail.EntityData.Children.Append("recovery-timer-exp-time", types.YChild{"RecoveryTimerExpTime", &globalNeighborDetail.RecoveryTimerExpTime})
    globalNeighborDetail.EntityData.Children.Append("local-node-address", types.YChild{"LocalNodeAddress", nil})
    for i := range globalNeighborDetail.LocalNodeAddress {
        types.SetYListKey(globalNeighborDetail.LocalNodeAddress[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LocalNodeAddress[i]), types.YChild{"LocalNodeAddress", globalNeighborDetail.LocalNodeAddress[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("interface-neighbor", types.YChild{"InterfaceNeighbor", nil})
    for i := range globalNeighborDetail.InterfaceNeighbor {
        types.SetYListKey(globalNeighborDetail.InterfaceNeighbor[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.InterfaceNeighbor[i]), types.YChild{"InterfaceNeighbor", globalNeighborDetail.InterfaceNeighbor[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("neighbor-hello-state", types.YChild{"NeighborHelloState", nil})
    for i := range globalNeighborDetail.NeighborHelloState {
        types.SetYListKey(globalNeighborDetail.NeighborHelloState[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.NeighborHelloState[i]), types.YChild{"NeighborHelloState", globalNeighborDetail.NeighborHelloState[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("lost-communication-reason", types.YChild{"LostCommunicationReason", nil})
    for i := range globalNeighborDetail.LostCommunicationReason {
        types.SetYListKey(globalNeighborDetail.LostCommunicationReason[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LostCommunicationReason[i]), types.YChild{"LostCommunicationReason", globalNeighborDetail.LostCommunicationReason[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("lost-communication-total", types.YChild{"LostCommunicationTotal", nil})
    for i := range globalNeighborDetail.LostCommunicationTotal {
        types.SetYListKey(globalNeighborDetail.LostCommunicationTotal[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LostCommunicationTotal[i]), types.YChild{"LostCommunicationTotal", globalNeighborDetail.LostCommunicationTotal[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("up-time", types.YChild{"UpTime", nil})
    for i := range globalNeighborDetail.UpTime {
        types.SetYListKey(globalNeighborDetail.UpTime[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.UpTime[i]), types.YChild{"UpTime", globalNeighborDetail.UpTime[i]})
    }
    globalNeighborDetail.EntityData.Children.Append("lost-communication-time", types.YChild{"LostCommunicationTime", nil})
    for i := range globalNeighborDetail.LostCommunicationTime {
        types.SetYListKey(globalNeighborDetail.LostCommunicationTime[i], i)
        globalNeighborDetail.EntityData.Children.Append(types.GetSegmentPath(globalNeighborDetail.LostCommunicationTime[i]), types.YChild{"LostCommunicationTime", globalNeighborDetail.LostCommunicationTime[i]})
    }
    globalNeighborDetail.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborDetail.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", globalNeighborDetail.NeighborAddress})
    globalNeighborDetail.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", globalNeighborDetail.IsGrEnabled})
    globalNeighborDetail.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", globalNeighborDetail.NodeAddress})
    globalNeighborDetail.EntityData.Leafs.Append("restart-state", types.YLeaf{"RestartState", globalNeighborDetail.RestartState})
    globalNeighborDetail.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", globalNeighborDetail.RestartTime})
    globalNeighborDetail.EntityData.Leafs.Append("is-restart-timer-running", types.YLeaf{"IsRestartTimerRunning", globalNeighborDetail.IsRestartTimerRunning})
    globalNeighborDetail.EntityData.Leafs.Append("recovery-time", types.YLeaf{"RecoveryTime", globalNeighborDetail.RecoveryTime})
    globalNeighborDetail.EntityData.Leafs.Append("is-recovery-timer-running", types.YLeaf{"IsRecoveryTimerRunning", globalNeighborDetail.IsRecoveryTimerRunning})
    globalNeighborDetail.EntityData.Leafs.Append("hello-interval", types.YLeaf{"HelloInterval", globalNeighborDetail.HelloInterval})
    globalNeighborDetail.EntityData.Leafs.Append("missed-hellos", types.YLeaf{"MissedHellos", globalNeighborDetail.MissedHellos})
    globalNeighborDetail.EntityData.Leafs.Append("pending-states", types.YLeaf{"PendingStates", globalNeighborDetail.PendingStates})

    globalNeighborDetail.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(globalNeighborDetail.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags
// Global Neighbor Flags
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_GlobalNeighborFlags) GetEntityData() *types.CommonEntityData {
    globalNeighborFlags.EntityData.YFilter = globalNeighborFlags.YFilter
    globalNeighborFlags.EntityData.YangName = "global-neighbor-flags"
    globalNeighborFlags.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborFlags.EntityData.ParentYangName = "global-neighbor-detail"
    globalNeighborFlags.EntityData.SegmentPath = "global-neighbor-flags"
    globalNeighborFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + globalNeighborFlags.EntityData.SegmentPath
    globalNeighborFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborFlags.EntityData.Children = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs.Append("is-application-ouni", types.YLeaf{"IsApplicationOuni", globalNeighborFlags.IsApplicationOuni})
    globalNeighborFlags.EntityData.Leafs.Append("is-application-mpls", types.YLeaf{"IsApplicationMpls", globalNeighborFlags.IsApplicationMpls})

    globalNeighborFlags.EntityData.YListKeys = []string {}

    return &(globalNeighborFlags.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft
// How much restart time remains
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimeLeft) GetEntityData() *types.CommonEntityData {
    restartTimeLeft.EntityData.YFilter = restartTimeLeft.YFilter
    restartTimeLeft.EntityData.YangName = "restart-time-left"
    restartTimeLeft.EntityData.BundleName = "cisco_ios_xr"
    restartTimeLeft.EntityData.ParentYangName = "global-neighbor-detail"
    restartTimeLeft.EntityData.SegmentPath = "restart-time-left"
    restartTimeLeft.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + restartTimeLeft.EntityData.SegmentPath
    restartTimeLeft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    restartTimeLeft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    restartTimeLeft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    restartTimeLeft.EntityData.Children = types.NewOrderedMap()
    restartTimeLeft.EntityData.Leafs = types.NewOrderedMap()
    restartTimeLeft.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", restartTimeLeft.Seconds})
    restartTimeLeft.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", restartTimeLeft.Nanoseconds})

    restartTimeLeft.EntityData.YListKeys = []string {}

    return &(restartTimeLeft.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime
// When will restart timer expire
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (restartTimerExpiryTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RestartTimerExpiryTime) GetEntityData() *types.CommonEntityData {
    restartTimerExpiryTime.EntityData.YFilter = restartTimerExpiryTime.YFilter
    restartTimerExpiryTime.EntityData.YangName = "restart-timer-expiry-time"
    restartTimerExpiryTime.EntityData.BundleName = "cisco_ios_xr"
    restartTimerExpiryTime.EntityData.ParentYangName = "global-neighbor-detail"
    restartTimerExpiryTime.EntityData.SegmentPath = "restart-timer-expiry-time"
    restartTimerExpiryTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + restartTimerExpiryTime.EntityData.SegmentPath
    restartTimerExpiryTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    restartTimerExpiryTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    restartTimerExpiryTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    restartTimerExpiryTime.EntityData.Children = types.NewOrderedMap()
    restartTimerExpiryTime.EntityData.Leafs = types.NewOrderedMap()
    restartTimerExpiryTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", restartTimerExpiryTime.Seconds})
    restartTimerExpiryTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", restartTimerExpiryTime.Nanoseconds})

    restartTimerExpiryTime.EntityData.YListKeys = []string {}

    return &(restartTimerExpiryTime.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft
// How much recovery timer remains
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimeLeft *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimeLeft) GetEntityData() *types.CommonEntityData {
    recoveryTimeLeft.EntityData.YFilter = recoveryTimeLeft.YFilter
    recoveryTimeLeft.EntityData.YangName = "recovery-time-left"
    recoveryTimeLeft.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimeLeft.EntityData.ParentYangName = "global-neighbor-detail"
    recoveryTimeLeft.EntityData.SegmentPath = "recovery-time-left"
    recoveryTimeLeft.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + recoveryTimeLeft.EntityData.SegmentPath
    recoveryTimeLeft.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimeLeft.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimeLeft.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimeLeft.EntityData.Children = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimeLeft.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimeLeft.Seconds})
    recoveryTimeLeft.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimeLeft.Nanoseconds})

    recoveryTimeLeft.EntityData.YListKeys = []string {}

    return &(recoveryTimeLeft.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime
// Time at which recovery timer will expire
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (recoveryTimerExpTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_RecoveryTimerExpTime) GetEntityData() *types.CommonEntityData {
    recoveryTimerExpTime.EntityData.YFilter = recoveryTimerExpTime.YFilter
    recoveryTimerExpTime.EntityData.YangName = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.BundleName = "cisco_ios_xr"
    recoveryTimerExpTime.EntityData.ParentYangName = "global-neighbor-detail"
    recoveryTimerExpTime.EntityData.SegmentPath = "recovery-timer-exp-time"
    recoveryTimerExpTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + recoveryTimerExpTime.EntityData.SegmentPath
    recoveryTimerExpTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    recoveryTimerExpTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    recoveryTimerExpTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    recoveryTimerExpTime.EntityData.Children = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs = types.NewOrderedMap()
    recoveryTimerExpTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", recoveryTimerExpTime.Seconds})
    recoveryTimerExpTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", recoveryTimerExpTime.Nanoseconds})

    recoveryTimerExpTime.EntityData.YListKeys = []string {}

    return &(recoveryTimerExpTime.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress
// Local node address
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (localNodeAddress *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LocalNodeAddress) GetEntityData() *types.CommonEntityData {
    localNodeAddress.EntityData.YFilter = localNodeAddress.YFilter
    localNodeAddress.EntityData.YangName = "local-node-address"
    localNodeAddress.EntityData.BundleName = "cisco_ios_xr"
    localNodeAddress.EntityData.ParentYangName = "global-neighbor-detail"
    localNodeAddress.EntityData.SegmentPath = "local-node-address" + types.AddNoKeyToken(localNodeAddress)
    localNodeAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + localNodeAddress.EntityData.SegmentPath
    localNodeAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localNodeAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localNodeAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localNodeAddress.EntityData.Children = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", localNodeAddress.Entry})

    localNodeAddress.EntityData.YListKeys = []string {}

    return &(localNodeAddress.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor
// Interface Neighbor List
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Interface Neighbor List. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (interfaceNeighbor *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_InterfaceNeighbor) GetEntityData() *types.CommonEntityData {
    interfaceNeighbor.EntityData.YFilter = interfaceNeighbor.YFilter
    interfaceNeighbor.EntityData.YangName = "interface-neighbor"
    interfaceNeighbor.EntityData.BundleName = "cisco_ios_xr"
    interfaceNeighbor.EntityData.ParentYangName = "global-neighbor-detail"
    interfaceNeighbor.EntityData.SegmentPath = "interface-neighbor" + types.AddNoKeyToken(interfaceNeighbor)
    interfaceNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + interfaceNeighbor.EntityData.SegmentPath
    interfaceNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    interfaceNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    interfaceNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    interfaceNeighbor.EntityData.Children = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs = types.NewOrderedMap()
    interfaceNeighbor.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", interfaceNeighbor.Entry})

    interfaceNeighbor.EntityData.YListKeys = []string {}

    return &(interfaceNeighbor.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState
// Neighbor's hello state
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor's hello state. The type is RsvpMgmtHelloState.
    Entry interface{}
}

func (neighborHelloState *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_NeighborHelloState) GetEntityData() *types.CommonEntityData {
    neighborHelloState.EntityData.YFilter = neighborHelloState.YFilter
    neighborHelloState.EntityData.YangName = "neighbor-hello-state"
    neighborHelloState.EntityData.BundleName = "cisco_ios_xr"
    neighborHelloState.EntityData.ParentYangName = "global-neighbor-detail"
    neighborHelloState.EntityData.SegmentPath = "neighbor-hello-state" + types.AddNoKeyToken(neighborHelloState)
    neighborHelloState.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + neighborHelloState.EntityData.SegmentPath
    neighborHelloState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborHelloState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborHelloState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborHelloState.EntityData.Children = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborHelloState.Entry})

    neighborHelloState.EntityData.YListKeys = []string {}

    return &(neighborHelloState.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason
// Reason why communication was lost
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    Entry interface{}
}

func (lostCommunicationReason *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationReason) GetEntityData() *types.CommonEntityData {
    lostCommunicationReason.EntityData.YFilter = lostCommunicationReason.YFilter
    lostCommunicationReason.EntityData.YangName = "lost-communication-reason"
    lostCommunicationReason.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationReason.EntityData.ParentYangName = "global-neighbor-detail"
    lostCommunicationReason.EntityData.SegmentPath = "lost-communication-reason" + types.AddNoKeyToken(lostCommunicationReason)
    lostCommunicationReason.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + lostCommunicationReason.EntityData.SegmentPath
    lostCommunicationReason.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationReason.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationReason.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationReason.EntityData.Children = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationReason.Entry})

    lostCommunicationReason.EntityData.YListKeys = []string {}

    return &(lostCommunicationReason.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal
// Total number of times communication got lost
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    Entry interface{}
}

func (lostCommunicationTotal *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTotal) GetEntityData() *types.CommonEntityData {
    lostCommunicationTotal.EntityData.YFilter = lostCommunicationTotal.YFilter
    lostCommunicationTotal.EntityData.YangName = "lost-communication-total"
    lostCommunicationTotal.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTotal.EntityData.ParentYangName = "global-neighbor-detail"
    lostCommunicationTotal.EntityData.SegmentPath = "lost-communication-total" + types.AddNoKeyToken(lostCommunicationTotal)
    lostCommunicationTotal.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + lostCommunicationTotal.EntityData.SegmentPath
    lostCommunicationTotal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTotal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTotal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTotal.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationTotal.Entry})

    lostCommunicationTotal.EntityData.YListKeys = []string {}

    return &(lostCommunicationTotal.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime
// Hello up time
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_UpTime) GetEntityData() *types.CommonEntityData {
    upTime.EntityData.YFilter = upTime.YFilter
    upTime.EntityData.YangName = "up-time"
    upTime.EntityData.BundleName = "cisco_ios_xr"
    upTime.EntityData.ParentYangName = "global-neighbor-detail"
    upTime.EntityData.SegmentPath = "up-time" + types.AddNoKeyToken(upTime)
    upTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + upTime.EntityData.SegmentPath
    upTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    upTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    upTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    upTime.EntityData.Children = types.NewOrderedMap()
    upTime.EntityData.Leafs = types.NewOrderedMap()
    upTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", upTime.Seconds})
    upTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", upTime.Nanoseconds})

    upTime.EntityData.YListKeys = []string {}

    return &(upTime.EntityData)
}

// Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime
// Time when communication was lost
type Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *Rsvp_GlobalNeighborDetails_GlobalNeighborDetail_LostCommunicationTime) GetEntityData() *types.CommonEntityData {
    lostCommunicationTime.EntityData.YFilter = lostCommunicationTime.YFilter
    lostCommunicationTime.EntityData.YangName = "lost-communication-time"
    lostCommunicationTime.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTime.EntityData.ParentYangName = "global-neighbor-detail"
    lostCommunicationTime.EntityData.SegmentPath = "lost-communication-time" + types.AddNoKeyToken(lostCommunicationTime)
    lostCommunicationTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-details/global-neighbor-detail/" + lostCommunicationTime.EntityData.SegmentPath
    lostCommunicationTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTime.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", lostCommunicationTime.Seconds})
    lostCommunicationTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", lostCommunicationTime.Nanoseconds})

    lostCommunicationTime.EntityData.YListKeys = []string {}

    return &(lostCommunicationTime.EntityData)
}

// Rsvp_PsbBriefs
// Table of brief info about path state blocks
type Rsvp_PsbBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single path state block. The type is slice of
    // Rsvp_PsbBriefs_PsbBrief.
    PsbBrief []*Rsvp_PsbBriefs_PsbBrief
}

func (psbBriefs *Rsvp_PsbBriefs) GetEntityData() *types.CommonEntityData {
    psbBriefs.EntityData.YFilter = psbBriefs.YFilter
    psbBriefs.EntityData.YangName = "psb-briefs"
    psbBriefs.EntityData.BundleName = "cisco_ios_xr"
    psbBriefs.EntityData.ParentYangName = "rsvp"
    psbBriefs.EntityData.SegmentPath = "psb-briefs"
    psbBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + psbBriefs.EntityData.SegmentPath
    psbBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbBriefs.EntityData.Children = types.NewOrderedMap()
    psbBriefs.EntityData.Children.Append("psb-brief", types.YChild{"PsbBrief", nil})
    for i := range psbBriefs.PsbBrief {
        types.SetYListKey(psbBriefs.PsbBrief[i], i)
        psbBriefs.EntityData.Children.Append(types.GetSegmentPath(psbBriefs.PsbBrief[i]), types.YChild{"PsbBrief", psbBriefs.PsbBrief[i]})
    }
    psbBriefs.EntityData.Leafs = types.NewOrderedMap()

    psbBriefs.EntityData.YListKeys = []string {}

    return &(psbBriefs.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief
// Brief info for a single path state block
type Rsvp_PsbBriefs_PsbBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Destination Port. The type is interface{} with range: 0..4294967295.
    DestinationPort interface{}

    // Protocol. The type is interface{} with range: 0..4294967295.
    Protocol interface{}

    // Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}

    // Session Type. The type is RsvpSession.
    SessionType interface{}

    // P2MP ID. The type is interface{} with range: 0..4294967295.
    P2mpId interface{}

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port . The type is interface{} with range: 0..4294967295.
    SourcePort interface{}

    // Subgroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SubGroupOrigin interface{}

    // Subgroup ID. The type is interface{} with range: 0..4294967295.
    SubGroupId interface{}

    // VRF Name. The type is string with pattern: b'[\\w\\-\\.:,_@#%$\\+=\\|;]+'.
    VrfName interface{}

    // Path Input Interface. The type is string.
    InputInterface interface{}

    // RSVP Session Information.
    Session Rsvp_PsbBriefs_PsbBrief_Session

    // RSVP S2L Sub-LSP information.
    S2lSubLsp Rsvp_PsbBriefs_PsbBrief_S2lSubLsp

    // RSVP Template.
    Template Rsvp_PsbBriefs_PsbBrief_Template

    // RSVP Session Attribute.
    SessionAttribute Rsvp_PsbBriefs_PsbBrief_SessionAttribute

    // RSVP Traffic Spec Info.
    TrafficSpec Rsvp_PsbBriefs_PsbBrief_TrafficSpec

    // RSVP Generic Traffic Spec Info.
    GenericTrafficSpec Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec
}

func (psbBrief *Rsvp_PsbBriefs_PsbBrief) GetEntityData() *types.CommonEntityData {
    psbBrief.EntityData.YFilter = psbBrief.YFilter
    psbBrief.EntityData.YangName = "psb-brief"
    psbBrief.EntityData.BundleName = "cisco_ios_xr"
    psbBrief.EntityData.ParentYangName = "psb-briefs"
    psbBrief.EntityData.SegmentPath = "psb-brief" + types.AddNoKeyToken(psbBrief)
    psbBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/" + psbBrief.EntityData.SegmentPath
    psbBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    psbBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    psbBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    psbBrief.EntityData.Children = types.NewOrderedMap()
    psbBrief.EntityData.Children.Append("session", types.YChild{"Session", &psbBrief.Session})
    psbBrief.EntityData.Children.Append("s2l-sub-lsp", types.YChild{"S2lSubLsp", &psbBrief.S2lSubLsp})
    psbBrief.EntityData.Children.Append("template", types.YChild{"Template", &psbBrief.Template})
    psbBrief.EntityData.Children.Append("session-attribute", types.YChild{"SessionAttribute", &psbBrief.SessionAttribute})
    psbBrief.EntityData.Children.Append("traffic-spec", types.YChild{"TrafficSpec", &psbBrief.TrafficSpec})
    psbBrief.EntityData.Children.Append("generic-traffic-spec", types.YChild{"GenericTrafficSpec", &psbBrief.GenericTrafficSpec})
    psbBrief.EntityData.Leafs = types.NewOrderedMap()
    psbBrief.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", psbBrief.DestinationAddress})
    psbBrief.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", psbBrief.DestinationPort})
    psbBrief.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", psbBrief.Protocol})
    psbBrief.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", psbBrief.ExtendedTunnelId})
    psbBrief.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", psbBrief.SessionType})
    psbBrief.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", psbBrief.P2mpId})
    psbBrief.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", psbBrief.SourceAddress})
    psbBrief.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", psbBrief.SourcePort})
    psbBrief.EntityData.Leafs.Append("sub-group-origin", types.YLeaf{"SubGroupOrigin", psbBrief.SubGroupOrigin})
    psbBrief.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", psbBrief.SubGroupId})
    psbBrief.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", psbBrief.VrfName})
    psbBrief.EntityData.Leafs.Append("input-interface", types.YLeaf{"InputInterface", psbBrief.InputInterface})

    psbBrief.EntityData.YListKeys = []string {}

    return &(psbBrief.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Session
// RSVP Session Information
type Rsvp_PsbBriefs_PsbBrief_Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Session.
    RsvpSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession
}

func (session *Rsvp_PsbBriefs_PsbBrief_Session) GetEntityData() *types.CommonEntityData {
    session.EntityData.YFilter = session.YFilter
    session.EntityData.YangName = "session"
    session.EntityData.BundleName = "cisco_ios_xr"
    session.EntityData.ParentYangName = "psb-brief"
    session.EntityData.SegmentPath = "session"
    session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" + session.EntityData.SegmentPath
    session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    session.EntityData.Children = types.NewOrderedMap()
    session.EntityData.Children.Append("rsvp-session", types.YChild{"RsvpSession", &session.RsvpSession})
    session.EntityData.Leafs = types.NewOrderedMap()

    session.EntityData.YListKeys = []string {}

    return &(session.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession
// RSVP Session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // SessionType. The type is RsvpMgmtSession.
    SessionType interface{}

    // UDP IPv4 session.
    Ipv4 Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4

    // IPv4 LSP session.
    Ipv4LspSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession

    // IPv4 UNI session.
    Ipv4UniSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession

    // IPv4 P2MP LSP session.
    Ipv4P2mpLspSession Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
}

func (rsvpSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession) GetEntityData() *types.CommonEntityData {
    rsvpSession.EntityData.YFilter = rsvpSession.YFilter
    rsvpSession.EntityData.YangName = "rsvp-session"
    rsvpSession.EntityData.BundleName = "cisco_ios_xr"
    rsvpSession.EntityData.ParentYangName = "session"
    rsvpSession.EntityData.SegmentPath = "rsvp-session"
    rsvpSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/" + rsvpSession.EntityData.SegmentPath
    rsvpSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpSession.EntityData.Children = types.NewOrderedMap()
    rsvpSession.EntityData.Children.Append("ipv4", types.YChild{"Ipv4", &rsvpSession.Ipv4})
    rsvpSession.EntityData.Children.Append("ipv4-lsp-session", types.YChild{"Ipv4LspSession", &rsvpSession.Ipv4LspSession})
    rsvpSession.EntityData.Children.Append("ipv4-uni-session", types.YChild{"Ipv4UniSession", &rsvpSession.Ipv4UniSession})
    rsvpSession.EntityData.Children.Append("ipv4-p2mp-lsp-session", types.YChild{"Ipv4P2mpLspSession", &rsvpSession.Ipv4P2mpLspSession})
    rsvpSession.EntityData.Leafs = types.NewOrderedMap()
    rsvpSession.EntityData.Leafs.Append("session-type", types.YLeaf{"SessionType", rsvpSession.SessionType})

    rsvpSession.EntityData.YListKeys = []string {}

    return &(rsvpSession.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4
// UDP IPv4 session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // Protocol type (originally defined in RFC 790, further values in subsequent
    // RFCs). The type is interface{} with range: 0..255.
    Protocol interface{}

    // The Session Destination Port. The type is interface{} with range: 0..65535.
    DestinationPort interface{}
}

func (ipv4 *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4) GetEntityData() *types.CommonEntityData {
    ipv4.EntityData.YFilter = ipv4.YFilter
    ipv4.EntityData.YangName = "ipv4"
    ipv4.EntityData.BundleName = "cisco_ios_xr"
    ipv4.EntityData.ParentYangName = "rsvp-session"
    ipv4.EntityData.SegmentPath = "ipv4"
    ipv4.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" + ipv4.EntityData.SegmentPath
    ipv4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4.EntityData.Children = types.NewOrderedMap()
    ipv4.EntityData.Leafs = types.NewOrderedMap()
    ipv4.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4.DestinationAddress})
    ipv4.EntityData.Leafs.Append("protocol", types.YLeaf{"Protocol", ipv4.Protocol})
    ipv4.EntityData.Leafs.Append("destination-port", types.YLeaf{"DestinationPort", ipv4.DestinationPort})

    ipv4.EntityData.YListKeys = []string {}

    return &(ipv4.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession
// IPv4 LSP session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4LspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4LspSession) GetEntityData() *types.CommonEntityData {
    ipv4LspSession.EntityData.YFilter = ipv4LspSession.YFilter
    ipv4LspSession.EntityData.YangName = "ipv4-lsp-session"
    ipv4LspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4LspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4LspSession.EntityData.SegmentPath = "ipv4-lsp-session"
    ipv4LspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" + ipv4LspSession.EntityData.SegmentPath
    ipv4LspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4LspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4LspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4LspSession.EntityData.Children = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4LspSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4LspSession.DestinationAddress})
    ipv4LspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4LspSession.TunnelId})
    ipv4LspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4LspSession.ExtendedTunnelId})

    ipv4LspSession.EntityData.YListKeys = []string {}

    return &(ipv4LspSession.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession
// IPv4 UNI session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Destination address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    DestinationAddress interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedAddress interface{}
}

func (ipv4UniSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4UniSession) GetEntityData() *types.CommonEntityData {
    ipv4UniSession.EntityData.YFilter = ipv4UniSession.YFilter
    ipv4UniSession.EntityData.YangName = "ipv4-uni-session"
    ipv4UniSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4UniSession.EntityData.ParentYangName = "rsvp-session"
    ipv4UniSession.EntityData.SegmentPath = "ipv4-uni-session"
    ipv4UniSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" + ipv4UniSession.EntityData.SegmentPath
    ipv4UniSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4UniSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4UniSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4UniSession.EntityData.Children = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4UniSession.EntityData.Leafs.Append("destination-address", types.YLeaf{"DestinationAddress", ipv4UniSession.DestinationAddress})
    ipv4UniSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4UniSession.TunnelId})
    ipv4UniSession.EntityData.Leafs.Append("extended-address", types.YLeaf{"ExtendedAddress", ipv4UniSession.ExtendedAddress})

    ipv4UniSession.EntityData.YListKeys = []string {}

    return &(ipv4UniSession.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession
// IPv4 P2MP LSP session
type Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // The Point to Multipoint ID. The type is interface{} with range:
    // 0..4294967295.
    P2mpId interface{}

    // The Session Tunnel ID. The type is interface{} with range: 0..65535.
    TunnelId interface{}

    // The Session Extended Tunnel ID. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    ExtendedTunnelId interface{}
}

func (ipv4P2mpLspSession *Rsvp_PsbBriefs_PsbBrief_Session_RsvpSession_Ipv4P2mpLspSession) GetEntityData() *types.CommonEntityData {
    ipv4P2mpLspSession.EntityData.YFilter = ipv4P2mpLspSession.YFilter
    ipv4P2mpLspSession.EntityData.YangName = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.BundleName = "cisco_ios_xr"
    ipv4P2mpLspSession.EntityData.ParentYangName = "rsvp-session"
    ipv4P2mpLspSession.EntityData.SegmentPath = "ipv4-p2mp-lsp-session"
    ipv4P2mpLspSession.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session/rsvp-session/" + ipv4P2mpLspSession.EntityData.SegmentPath
    ipv4P2mpLspSession.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4P2mpLspSession.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4P2mpLspSession.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4P2mpLspSession.EntityData.Children = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs = types.NewOrderedMap()
    ipv4P2mpLspSession.EntityData.Leafs.Append("p2mp-id", types.YLeaf{"P2mpId", ipv4P2mpLspSession.P2mpId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("tunnel-id", types.YLeaf{"TunnelId", ipv4P2mpLspSession.TunnelId})
    ipv4P2mpLspSession.EntityData.Leafs.Append("extended-tunnel-id", types.YLeaf{"ExtendedTunnelId", ipv4P2mpLspSession.ExtendedTunnelId})

    ipv4P2mpLspSession.EntityData.YListKeys = []string {}

    return &(ipv4P2mpLspSession.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_S2lSubLsp
// RSVP S2L Sub-LSP information
type Rsvp_PsbBriefs_PsbBrief_S2lSubLsp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // S2L Sub-LSP Destination Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    S2lDestinationAddress interface{}
}

func (s2lSubLsp *Rsvp_PsbBriefs_PsbBrief_S2lSubLsp) GetEntityData() *types.CommonEntityData {
    s2lSubLsp.EntityData.YFilter = s2lSubLsp.YFilter
    s2lSubLsp.EntityData.YangName = "s2l-sub-lsp"
    s2lSubLsp.EntityData.BundleName = "cisco_ios_xr"
    s2lSubLsp.EntityData.ParentYangName = "psb-brief"
    s2lSubLsp.EntityData.SegmentPath = "s2l-sub-lsp"
    s2lSubLsp.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" + s2lSubLsp.EntityData.SegmentPath
    s2lSubLsp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    s2lSubLsp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    s2lSubLsp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    s2lSubLsp.EntityData.Children = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs = types.NewOrderedMap()
    s2lSubLsp.EntityData.Leafs.Append("s2l-destination-address", types.YLeaf{"S2lDestinationAddress", s2lSubLsp.S2lDestinationAddress})

    s2lSubLsp.EntityData.YListKeys = []string {}

    return &(s2lSubLsp.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Template
// RSVP Template
type Rsvp_PsbBriefs_PsbBrief_Template struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RSVP Filter.
    RsvpFilter Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter
}

func (template *Rsvp_PsbBriefs_PsbBrief_Template) GetEntityData() *types.CommonEntityData {
    template.EntityData.YFilter = template.YFilter
    template.EntityData.YangName = "template"
    template.EntityData.BundleName = "cisco_ios_xr"
    template.EntityData.ParentYangName = "psb-brief"
    template.EntityData.SegmentPath = "template"
    template.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" + template.EntityData.SegmentPath
    template.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    template.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    template.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    template.EntityData.Children = types.NewOrderedMap()
    template.EntityData.Children.Append("rsvp-filter", types.YChild{"RsvpFilter", &template.RsvpFilter})
    template.EntityData.Leafs = types.NewOrderedMap()

    template.EntityData.YListKeys = []string {}

    return &(template.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter
// RSVP Filter
type Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FilterType. The type is RsvpMgmtFilter.
    FilterType interface{}

    // UDP IPV4 FilterSpec.
    UdpIpv4Session Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session

    // IPv4 P2MP LSP FilterSpec.
    P2mpIpv4Session Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session
}

func (rsvpFilter *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter) GetEntityData() *types.CommonEntityData {
    rsvpFilter.EntityData.YFilter = rsvpFilter.YFilter
    rsvpFilter.EntityData.YangName = "rsvp-filter"
    rsvpFilter.EntityData.BundleName = "cisco_ios_xr"
    rsvpFilter.EntityData.ParentYangName = "template"
    rsvpFilter.EntityData.SegmentPath = "rsvp-filter"
    rsvpFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/" + rsvpFilter.EntityData.SegmentPath
    rsvpFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rsvpFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rsvpFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rsvpFilter.EntityData.Children = types.NewOrderedMap()
    rsvpFilter.EntityData.Children.Append("udp-ipv4-session", types.YChild{"UdpIpv4Session", &rsvpFilter.UdpIpv4Session})
    rsvpFilter.EntityData.Children.Append("p2mp-ipv4-session", types.YChild{"P2mpIpv4Session", &rsvpFilter.P2mpIpv4Session})
    rsvpFilter.EntityData.Leafs = types.NewOrderedMap()
    rsvpFilter.EntityData.Leafs.Append("filter-type", types.YLeaf{"FilterType", rsvpFilter.FilterType})

    rsvpFilter.EntityData.YListKeys = []string {}

    return &(rsvpFilter.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session
// UDP IPV4 FilterSpec
type Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}
}

func (udpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_UdpIpv4Session) GetEntityData() *types.CommonEntityData {
    udpIpv4Session.EntityData.YFilter = udpIpv4Session.YFilter
    udpIpv4Session.EntityData.YangName = "udp-ipv4-session"
    udpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    udpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    udpIpv4Session.EntityData.SegmentPath = "udp-ipv4-session"
    udpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/rsvp-filter/" + udpIpv4Session.EntityData.SegmentPath
    udpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    udpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    udpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    udpIpv4Session.EntityData.Children = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    udpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", udpIpv4Session.SourceAddress})
    udpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", udpIpv4Session.SourcePort})

    udpIpv4Session.EntityData.YListKeys = []string {}

    return &(udpIpv4Session.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session
// IPv4 P2MP LSP FilterSpec
type Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Source Address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    SourceAddress interface{}

    // Source Port. The type is interface{} with range: 0..65535.
    SourcePort interface{}

    // Point to Multipoint SubGroup Origin. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    P2mpSubGroupOrigin interface{}

    // Point to Multipoint Subgroup ID. The type is interface{} with range:
    // 0..65535.
    SubGroupId interface{}
}

func (p2mpIpv4Session *Rsvp_PsbBriefs_PsbBrief_Template_RsvpFilter_P2mpIpv4Session) GetEntityData() *types.CommonEntityData {
    p2mpIpv4Session.EntityData.YFilter = p2mpIpv4Session.YFilter
    p2mpIpv4Session.EntityData.YangName = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.BundleName = "cisco_ios_xr"
    p2mpIpv4Session.EntityData.ParentYangName = "rsvp-filter"
    p2mpIpv4Session.EntityData.SegmentPath = "p2mp-ipv4-session"
    p2mpIpv4Session.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/template/rsvp-filter/" + p2mpIpv4Session.EntityData.SegmentPath
    p2mpIpv4Session.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    p2mpIpv4Session.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    p2mpIpv4Session.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    p2mpIpv4Session.EntityData.Children = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs = types.NewOrderedMap()
    p2mpIpv4Session.EntityData.Leafs.Append("source-address", types.YLeaf{"SourceAddress", p2mpIpv4Session.SourceAddress})
    p2mpIpv4Session.EntityData.Leafs.Append("source-port", types.YLeaf{"SourcePort", p2mpIpv4Session.SourcePort})
    p2mpIpv4Session.EntityData.Leafs.Append("p2mp-sub-group-origin", types.YLeaf{"P2mpSubGroupOrigin", p2mpIpv4Session.P2mpSubGroupOrigin})
    p2mpIpv4Session.EntityData.Leafs.Append("sub-group-id", types.YLeaf{"SubGroupId", p2mpIpv4Session.SubGroupId})

    p2mpIpv4Session.EntityData.YListKeys = []string {}

    return &(p2mpIpv4Session.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_SessionAttribute
// RSVP Session Attribute
type Rsvp_PsbBriefs_PsbBrief_SessionAttribute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Setup Priority. The type is interface{} with range: 0..255.
    SetupPriority interface{}

    // Reservation Priority. The type is interface{} with range: 0..255.
    ReservationPriority interface{}

    // Session Attributes.
    SessAttributeFlags Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
}

func (sessionAttribute *Rsvp_PsbBriefs_PsbBrief_SessionAttribute) GetEntityData() *types.CommonEntityData {
    sessionAttribute.EntityData.YFilter = sessionAttribute.YFilter
    sessionAttribute.EntityData.YangName = "session-attribute"
    sessionAttribute.EntityData.BundleName = "cisco_ios_xr"
    sessionAttribute.EntityData.ParentYangName = "psb-brief"
    sessionAttribute.EntityData.SegmentPath = "session-attribute"
    sessionAttribute.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" + sessionAttribute.EntityData.SegmentPath
    sessionAttribute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionAttribute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionAttribute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionAttribute.EntityData.Children = types.NewOrderedMap()
    sessionAttribute.EntityData.Children.Append("sess-attribute-flags", types.YChild{"SessAttributeFlags", &sessionAttribute.SessAttributeFlags})
    sessionAttribute.EntityData.Leafs = types.NewOrderedMap()
    sessionAttribute.EntityData.Leafs.Append("setup-priority", types.YLeaf{"SetupPriority", sessionAttribute.SetupPriority})
    sessionAttribute.EntityData.Leafs.Append("reservation-priority", types.YLeaf{"ReservationPriority", sessionAttribute.ReservationPriority})

    sessionAttribute.EntityData.YListKeys = []string {}

    return &(sessionAttribute.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags
// Session Attributes
type Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Local Protection. The type is bool.
    IsLocalProtect interface{}

    // Node Protection. The type is bool.
    IsNodeProtect interface{}

    // Bandwidth Protection. The type is bool.
    IsBandwidthProtect interface{}

    // Records Labels. The type is bool.
    IsRecordLabels interface{}

    // Shared Explicit Requested. The type is bool.
    IsSharedExplicitRequested interface{}
}

func (sessAttributeFlags *Rsvp_PsbBriefs_PsbBrief_SessionAttribute_SessAttributeFlags) GetEntityData() *types.CommonEntityData {
    sessAttributeFlags.EntityData.YFilter = sessAttributeFlags.YFilter
    sessAttributeFlags.EntityData.YangName = "sess-attribute-flags"
    sessAttributeFlags.EntityData.BundleName = "cisco_ios_xr"
    sessAttributeFlags.EntityData.ParentYangName = "session-attribute"
    sessAttributeFlags.EntityData.SegmentPath = "sess-attribute-flags"
    sessAttributeFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/session-attribute/" + sessAttributeFlags.EntityData.SegmentPath
    sessAttributeFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessAttributeFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessAttributeFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessAttributeFlags.EntityData.Children = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs = types.NewOrderedMap()
    sessAttributeFlags.EntityData.Leafs.Append("is-local-protect", types.YLeaf{"IsLocalProtect", sessAttributeFlags.IsLocalProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-node-protect", types.YLeaf{"IsNodeProtect", sessAttributeFlags.IsNodeProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-bandwidth-protect", types.YLeaf{"IsBandwidthProtect", sessAttributeFlags.IsBandwidthProtect})
    sessAttributeFlags.EntityData.Leafs.Append("is-record-labels", types.YLeaf{"IsRecordLabels", sessAttributeFlags.IsRecordLabels})
    sessAttributeFlags.EntityData.Leafs.Append("is-shared-explicit-requested", types.YLeaf{"IsSharedExplicitRequested", sessAttributeFlags.IsSharedExplicitRequested})

    sessAttributeFlags.EntityData.YListKeys = []string {}

    return &(sessAttributeFlags.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_TrafficSpec
// RSVP Traffic Spec Info
type Rsvp_PsbBriefs_PsbBrief_TrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (trafficSpec *Rsvp_PsbBriefs_PsbBrief_TrafficSpec) GetEntityData() *types.CommonEntityData {
    trafficSpec.EntityData.YFilter = trafficSpec.YFilter
    trafficSpec.EntityData.YangName = "traffic-spec"
    trafficSpec.EntityData.BundleName = "cisco_ios_xr"
    trafficSpec.EntityData.ParentYangName = "psb-brief"
    trafficSpec.EntityData.SegmentPath = "traffic-spec"
    trafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" + trafficSpec.EntityData.SegmentPath
    trafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    trafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    trafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    trafficSpec.EntityData.Children = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs = types.NewOrderedMap()
    trafficSpec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", trafficSpec.TrafficAverageRate})
    trafficSpec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", trafficSpec.TrafficMaxBurst})
    trafficSpec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", trafficSpec.TrafficPeakRate})
    trafficSpec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", trafficSpec.TrafficMinUnit})
    trafficSpec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", trafficSpec.TrafficMaxUnit})

    trafficSpec.EntityData.YListKeys = []string {}

    return &(trafficSpec.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec
// RSVP Generic Traffic Spec Info
type Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TspecType. The type is RsvpMgmtTspec.
    TspecType interface{}

    // G709 OTN Sender Tspec.
    G709otnTspec Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec

    // Integrated Services Sender Tspec.
    IntsrvTspec Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
}

func (genericTrafficSpec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec) GetEntityData() *types.CommonEntityData {
    genericTrafficSpec.EntityData.YFilter = genericTrafficSpec.YFilter
    genericTrafficSpec.EntityData.YangName = "generic-traffic-spec"
    genericTrafficSpec.EntityData.BundleName = "cisco_ios_xr"
    genericTrafficSpec.EntityData.ParentYangName = "psb-brief"
    genericTrafficSpec.EntityData.SegmentPath = "generic-traffic-spec"
    genericTrafficSpec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/" + genericTrafficSpec.EntityData.SegmentPath
    genericTrafficSpec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    genericTrafficSpec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    genericTrafficSpec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    genericTrafficSpec.EntityData.Children = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Children.Append("g709otn-tspec", types.YChild{"G709otnTspec", &genericTrafficSpec.G709otnTspec})
    genericTrafficSpec.EntityData.Children.Append("intsrv-tspec", types.YChild{"IntsrvTspec", &genericTrafficSpec.IntsrvTspec})
    genericTrafficSpec.EntityData.Leafs = types.NewOrderedMap()
    genericTrafficSpec.EntityData.Leafs.Append("tspec-type", types.YLeaf{"TspecType", genericTrafficSpec.TspecType})

    genericTrafficSpec.EntityData.YListKeys = []string {}

    return &(genericTrafficSpec.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec
// G709 OTN Sender Tspec
type Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // G709 OTN Traffic Signal Type (Refer G709 v3). The type is interface{} with
    // range: 0..255.
    TrafficSignalType interface{}

    // G709 OTN Traffic NVC. The type is interface{} with range: 0..65535.
    TrafficNvc interface{}

    // G709 OTN Traffic Multiplier. The type is interface{} with range: 0..65535.
    TrafficMultiplier interface{}

    // G709 OTN Traffic Bit Rate. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficBitRate interface{}
}

func (g709otnTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_G709otnTspec) GetEntityData() *types.CommonEntityData {
    g709otnTspec.EntityData.YFilter = g709otnTspec.YFilter
    g709otnTspec.EntityData.YangName = "g709otn-tspec"
    g709otnTspec.EntityData.BundleName = "cisco_ios_xr"
    g709otnTspec.EntityData.ParentYangName = "generic-traffic-spec"
    g709otnTspec.EntityData.SegmentPath = "g709otn-tspec"
    g709otnTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/generic-traffic-spec/" + g709otnTspec.EntityData.SegmentPath
    g709otnTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    g709otnTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    g709otnTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    g709otnTspec.EntityData.Children = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs = types.NewOrderedMap()
    g709otnTspec.EntityData.Leafs.Append("traffic-signal-type", types.YLeaf{"TrafficSignalType", g709otnTspec.TrafficSignalType})
    g709otnTspec.EntityData.Leafs.Append("traffic-nvc", types.YLeaf{"TrafficNvc", g709otnTspec.TrafficNvc})
    g709otnTspec.EntityData.Leafs.Append("traffic-multiplier", types.YLeaf{"TrafficMultiplier", g709otnTspec.TrafficMultiplier})
    g709otnTspec.EntityData.Leafs.Append("traffic-bit-rate", types.YLeaf{"TrafficBitRate", g709otnTspec.TrafficBitRate})

    g709otnTspec.EntityData.YListKeys = []string {}

    return &(g709otnTspec.EntityData)
}

// Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec
// Integrated Services Sender Tspec
type Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Traffic Average Rate in bytes per second. The type is interface{} with
    // range: 0..18446744073709551615. Units are byte/s.
    TrafficAverageRate interface{}

    // Traffic Maximum Burst. The type is interface{} with range:
    // 0..18446744073709551615.
    TrafficMaxBurst interface{}

    // Traffic Peak Rate in bytes per second. The type is interface{} with range:
    // 0..18446744073709551615. Units are byte/s.
    TrafficPeakRate interface{}

    // Traffic Minimum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMinUnit interface{}

    // Traffic Maximum Unit. The type is interface{} with range: 0..4294967295.
    TrafficMaxUnit interface{}
}

func (intsrvTspec *Rsvp_PsbBriefs_PsbBrief_GenericTrafficSpec_IntsrvTspec) GetEntityData() *types.CommonEntityData {
    intsrvTspec.EntityData.YFilter = intsrvTspec.YFilter
    intsrvTspec.EntityData.YangName = "intsrv-tspec"
    intsrvTspec.EntityData.BundleName = "cisco_ios_xr"
    intsrvTspec.EntityData.ParentYangName = "generic-traffic-spec"
    intsrvTspec.EntityData.SegmentPath = "intsrv-tspec"
    intsrvTspec.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/psb-briefs/psb-brief/generic-traffic-spec/" + intsrvTspec.EntityData.SegmentPath
    intsrvTspec.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    intsrvTspec.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    intsrvTspec.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    intsrvTspec.EntityData.Children = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs = types.NewOrderedMap()
    intsrvTspec.EntityData.Leafs.Append("traffic-average-rate", types.YLeaf{"TrafficAverageRate", intsrvTspec.TrafficAverageRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-burst", types.YLeaf{"TrafficMaxBurst", intsrvTspec.TrafficMaxBurst})
    intsrvTspec.EntityData.Leafs.Append("traffic-peak-rate", types.YLeaf{"TrafficPeakRate", intsrvTspec.TrafficPeakRate})
    intsrvTspec.EntityData.Leafs.Append("traffic-min-unit", types.YLeaf{"TrafficMinUnit", intsrvTspec.TrafficMinUnit})
    intsrvTspec.EntityData.Leafs.Append("traffic-max-unit", types.YLeaf{"TrafficMaxUnit", intsrvTspec.TrafficMaxUnit})

    intsrvTspec.EntityData.YListKeys = []string {}

    return &(intsrvTspec.EntityData)
}

// Rsvp_GlobalNeighborBriefs
// Table of brief info about global neighbors
type Rsvp_GlobalNeighborBriefs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Brief info for a single global neighbor. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief.
    GlobalNeighborBrief []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief
}

func (globalNeighborBriefs *Rsvp_GlobalNeighborBriefs) GetEntityData() *types.CommonEntityData {
    globalNeighborBriefs.EntityData.YFilter = globalNeighborBriefs.YFilter
    globalNeighborBriefs.EntityData.YangName = "global-neighbor-briefs"
    globalNeighborBriefs.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborBriefs.EntityData.ParentYangName = "rsvp"
    globalNeighborBriefs.EntityData.SegmentPath = "global-neighbor-briefs"
    globalNeighborBriefs.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/" + globalNeighborBriefs.EntityData.SegmentPath
    globalNeighborBriefs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborBriefs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborBriefs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborBriefs.EntityData.Children = types.NewOrderedMap()
    globalNeighborBriefs.EntityData.Children.Append("global-neighbor-brief", types.YChild{"GlobalNeighborBrief", nil})
    for i := range globalNeighborBriefs.GlobalNeighborBrief {
        globalNeighborBriefs.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBriefs.GlobalNeighborBrief[i]), types.YChild{"GlobalNeighborBrief", globalNeighborBriefs.GlobalNeighborBrief[i]})
    }
    globalNeighborBriefs.EntityData.Leafs = types.NewOrderedMap()

    globalNeighborBriefs.EntityData.YListKeys = []string {}

    return &(globalNeighborBriefs.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief
// Brief info for a single global neighbor
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address of global neighbor. The type is string
    // with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NeighborAddress interface{}

    // Is GR enabled. The type is bool.
    IsGrEnabled interface{}

    // Neighbor node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    NodeAddress interface{}

    // Restart state. The type is RsvpMgmtRestartState.
    RestartState interface{}

    // Global Neighbor Flags.
    GlobalNeighborFlags Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags

    // Local node address. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress.
    LocalNodeAddress []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress

    // Neighbor Hello state. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState.
    NeighborHelloState []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState

    // Reason why communication was lost. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason.
    LostCommunicationReason []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason

    // Total number of times communication got lost. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal.
    LostCommunicationTotal []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal

    // Time hellos have been up. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime.
    UpTime []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime

    // Time when communication was lost. The type is slice of
    // Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime.
    LostCommunicationTime []*Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
}

func (globalNeighborBrief *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief) GetEntityData() *types.CommonEntityData {
    globalNeighborBrief.EntityData.YFilter = globalNeighborBrief.YFilter
    globalNeighborBrief.EntityData.YangName = "global-neighbor-brief"
    globalNeighborBrief.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborBrief.EntityData.ParentYangName = "global-neighbor-briefs"
    globalNeighborBrief.EntityData.SegmentPath = "global-neighbor-brief" + types.AddKeyToken(globalNeighborBrief.NeighborAddress, "neighbor-address")
    globalNeighborBrief.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/" + globalNeighborBrief.EntityData.SegmentPath
    globalNeighborBrief.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborBrief.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborBrief.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborBrief.EntityData.Children = types.NewOrderedMap()
    globalNeighborBrief.EntityData.Children.Append("global-neighbor-flags", types.YChild{"GlobalNeighborFlags", &globalNeighborBrief.GlobalNeighborFlags})
    globalNeighborBrief.EntityData.Children.Append("local-node-address", types.YChild{"LocalNodeAddress", nil})
    for i := range globalNeighborBrief.LocalNodeAddress {
        types.SetYListKey(globalNeighborBrief.LocalNodeAddress[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LocalNodeAddress[i]), types.YChild{"LocalNodeAddress", globalNeighborBrief.LocalNodeAddress[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("neighbor-hello-state", types.YChild{"NeighborHelloState", nil})
    for i := range globalNeighborBrief.NeighborHelloState {
        types.SetYListKey(globalNeighborBrief.NeighborHelloState[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.NeighborHelloState[i]), types.YChild{"NeighborHelloState", globalNeighborBrief.NeighborHelloState[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("lost-communication-reason", types.YChild{"LostCommunicationReason", nil})
    for i := range globalNeighborBrief.LostCommunicationReason {
        types.SetYListKey(globalNeighborBrief.LostCommunicationReason[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LostCommunicationReason[i]), types.YChild{"LostCommunicationReason", globalNeighborBrief.LostCommunicationReason[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("lost-communication-total", types.YChild{"LostCommunicationTotal", nil})
    for i := range globalNeighborBrief.LostCommunicationTotal {
        types.SetYListKey(globalNeighborBrief.LostCommunicationTotal[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LostCommunicationTotal[i]), types.YChild{"LostCommunicationTotal", globalNeighborBrief.LostCommunicationTotal[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("up-time", types.YChild{"UpTime", nil})
    for i := range globalNeighborBrief.UpTime {
        types.SetYListKey(globalNeighborBrief.UpTime[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.UpTime[i]), types.YChild{"UpTime", globalNeighborBrief.UpTime[i]})
    }
    globalNeighborBrief.EntityData.Children.Append("lost-communication-time", types.YChild{"LostCommunicationTime", nil})
    for i := range globalNeighborBrief.LostCommunicationTime {
        types.SetYListKey(globalNeighborBrief.LostCommunicationTime[i], i)
        globalNeighborBrief.EntityData.Children.Append(types.GetSegmentPath(globalNeighborBrief.LostCommunicationTime[i]), types.YChild{"LostCommunicationTime", globalNeighborBrief.LostCommunicationTime[i]})
    }
    globalNeighborBrief.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborBrief.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", globalNeighborBrief.NeighborAddress})
    globalNeighborBrief.EntityData.Leafs.Append("is-gr-enabled", types.YLeaf{"IsGrEnabled", globalNeighborBrief.IsGrEnabled})
    globalNeighborBrief.EntityData.Leafs.Append("node-address", types.YLeaf{"NodeAddress", globalNeighborBrief.NodeAddress})
    globalNeighborBrief.EntityData.Leafs.Append("restart-state", types.YLeaf{"RestartState", globalNeighborBrief.RestartState})

    globalNeighborBrief.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(globalNeighborBrief.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags
// Global Neighbor Flags
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // OUNI Application. The type is bool.
    IsApplicationOuni interface{}

    // MPLS Application. The type is bool.
    IsApplicationMpls interface{}
}

func (globalNeighborFlags *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_GlobalNeighborFlags) GetEntityData() *types.CommonEntityData {
    globalNeighborFlags.EntityData.YFilter = globalNeighborFlags.YFilter
    globalNeighborFlags.EntityData.YangName = "global-neighbor-flags"
    globalNeighborFlags.EntityData.BundleName = "cisco_ios_xr"
    globalNeighborFlags.EntityData.ParentYangName = "global-neighbor-brief"
    globalNeighborFlags.EntityData.SegmentPath = "global-neighbor-flags"
    globalNeighborFlags.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + globalNeighborFlags.EntityData.SegmentPath
    globalNeighborFlags.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalNeighborFlags.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalNeighborFlags.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalNeighborFlags.EntityData.Children = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs = types.NewOrderedMap()
    globalNeighborFlags.EntityData.Leafs.Append("is-application-ouni", types.YLeaf{"IsApplicationOuni", globalNeighborFlags.IsApplicationOuni})
    globalNeighborFlags.EntityData.Leafs.Append("is-application-mpls", types.YLeaf{"IsApplicationMpls", globalNeighborFlags.IsApplicationMpls})

    globalNeighborFlags.EntityData.YListKeys = []string {}

    return &(globalNeighborFlags.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress
// Local node address
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Local node address. The type is string with pattern:
    // b'(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\\p{N}\\p{L}]+)?'.
    Entry interface{}
}

func (localNodeAddress *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LocalNodeAddress) GetEntityData() *types.CommonEntityData {
    localNodeAddress.EntityData.YFilter = localNodeAddress.YFilter
    localNodeAddress.EntityData.YangName = "local-node-address"
    localNodeAddress.EntityData.BundleName = "cisco_ios_xr"
    localNodeAddress.EntityData.ParentYangName = "global-neighbor-brief"
    localNodeAddress.EntityData.SegmentPath = "local-node-address" + types.AddNoKeyToken(localNodeAddress)
    localNodeAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + localNodeAddress.EntityData.SegmentPath
    localNodeAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localNodeAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localNodeAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localNodeAddress.EntityData.Children = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs = types.NewOrderedMap()
    localNodeAddress.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", localNodeAddress.Entry})

    localNodeAddress.EntityData.YListKeys = []string {}

    return &(localNodeAddress.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState
// Neighbor Hello state
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Neighbor Hello state. The type is RsvpMgmtHelloState.
    Entry interface{}
}

func (neighborHelloState *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_NeighborHelloState) GetEntityData() *types.CommonEntityData {
    neighborHelloState.EntityData.YFilter = neighborHelloState.YFilter
    neighborHelloState.EntityData.YangName = "neighbor-hello-state"
    neighborHelloState.EntityData.BundleName = "cisco_ios_xr"
    neighborHelloState.EntityData.ParentYangName = "global-neighbor-brief"
    neighborHelloState.EntityData.SegmentPath = "neighbor-hello-state" + types.AddNoKeyToken(neighborHelloState)
    neighborHelloState.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + neighborHelloState.EntityData.SegmentPath
    neighborHelloState.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborHelloState.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborHelloState.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborHelloState.EntityData.Children = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs = types.NewOrderedMap()
    neighborHelloState.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", neighborHelloState.Entry})

    neighborHelloState.EntityData.YListKeys = []string {}

    return &(neighborHelloState.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason
// Reason why communication was lost
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Reason why communication was lost. The type is RsvpMgmtHelloDownReason.
    Entry interface{}
}

func (lostCommunicationReason *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationReason) GetEntityData() *types.CommonEntityData {
    lostCommunicationReason.EntityData.YFilter = lostCommunicationReason.YFilter
    lostCommunicationReason.EntityData.YangName = "lost-communication-reason"
    lostCommunicationReason.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationReason.EntityData.ParentYangName = "global-neighbor-brief"
    lostCommunicationReason.EntityData.SegmentPath = "lost-communication-reason" + types.AddNoKeyToken(lostCommunicationReason)
    lostCommunicationReason.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + lostCommunicationReason.EntityData.SegmentPath
    lostCommunicationReason.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationReason.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationReason.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationReason.EntityData.Children = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationReason.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationReason.Entry})

    lostCommunicationReason.EntityData.YListKeys = []string {}

    return &(lostCommunicationReason.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal
// Total number of times communication got lost
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Total number of times communication got lost. The type is interface{} with
    // range: 0..65535.
    Entry interface{}
}

func (lostCommunicationTotal *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTotal) GetEntityData() *types.CommonEntityData {
    lostCommunicationTotal.EntityData.YFilter = lostCommunicationTotal.YFilter
    lostCommunicationTotal.EntityData.YangName = "lost-communication-total"
    lostCommunicationTotal.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTotal.EntityData.ParentYangName = "global-neighbor-brief"
    lostCommunicationTotal.EntityData.SegmentPath = "lost-communication-total" + types.AddNoKeyToken(lostCommunicationTotal)
    lostCommunicationTotal.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + lostCommunicationTotal.EntityData.SegmentPath
    lostCommunicationTotal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTotal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTotal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTotal.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTotal.EntityData.Leafs.Append("entry", types.YLeaf{"Entry", lostCommunicationTotal.Entry})

    lostCommunicationTotal.EntityData.YListKeys = []string {}

    return &(lostCommunicationTotal.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime
// Time hellos have been up
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (upTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_UpTime) GetEntityData() *types.CommonEntityData {
    upTime.EntityData.YFilter = upTime.YFilter
    upTime.EntityData.YangName = "up-time"
    upTime.EntityData.BundleName = "cisco_ios_xr"
    upTime.EntityData.ParentYangName = "global-neighbor-brief"
    upTime.EntityData.SegmentPath = "up-time" + types.AddNoKeyToken(upTime)
    upTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + upTime.EntityData.SegmentPath
    upTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    upTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    upTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    upTime.EntityData.Children = types.NewOrderedMap()
    upTime.EntityData.Leafs = types.NewOrderedMap()
    upTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", upTime.Seconds})
    upTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", upTime.Nanoseconds})

    upTime.EntityData.YListKeys = []string {}

    return &(upTime.EntityData)
}

// Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime
// Time when communication was lost
type Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // Time Value in Seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    Seconds interface{}

    // Time Value in Nano-seconds. The type is interface{} with range:
    // -2147483648..2147483647. Units are nanosecond.
    Nanoseconds interface{}
}

func (lostCommunicationTime *Rsvp_GlobalNeighborBriefs_GlobalNeighborBrief_LostCommunicationTime) GetEntityData() *types.CommonEntityData {
    lostCommunicationTime.EntityData.YFilter = lostCommunicationTime.YFilter
    lostCommunicationTime.EntityData.YangName = "lost-communication-time"
    lostCommunicationTime.EntityData.BundleName = "cisco_ios_xr"
    lostCommunicationTime.EntityData.ParentYangName = "global-neighbor-brief"
    lostCommunicationTime.EntityData.SegmentPath = "lost-communication-time" + types.AddNoKeyToken(lostCommunicationTime)
    lostCommunicationTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ip-rsvp-oper:rsvp/global-neighbor-briefs/global-neighbor-brief/" + lostCommunicationTime.EntityData.SegmentPath
    lostCommunicationTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lostCommunicationTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lostCommunicationTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lostCommunicationTime.EntityData.Children = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs = types.NewOrderedMap()
    lostCommunicationTime.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", lostCommunicationTime.Seconds})
    lostCommunicationTime.EntityData.Leafs.Append("nanoseconds", types.YLeaf{"Nanoseconds", lostCommunicationTime.Nanoseconds})

    lostCommunicationTime.EntityData.YListKeys = []string {}

    return &(lostCommunicationTime.EntityData)
}

