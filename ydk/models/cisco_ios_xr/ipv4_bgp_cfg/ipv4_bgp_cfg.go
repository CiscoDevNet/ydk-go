// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-bgp package configuration.
// 
// This module contains definitions
// for the following management objects:
//   asn-format: Autonomous system number format
//   bgp: bgp
//   bmp-server-all: bmp server all
//   bmp-servers: bmp servers
// 
// This YANG module augments the
//   Cisco-IOS-XR-infra-rsi-cfg,
//   Cisco-IOS-XR-snmp-agent-cfg
// modules with configuration data.
// 
// Copyright (c) 2013-2018 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_bgp_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_bgp_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg bgp}", reflect.TypeOf(Bgp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-cfg:bgp", reflect.TypeOf(Bgp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg bmp-server-all}", reflect.TypeOf(BmpServerAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all", reflect.TypeOf(BmpServerAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg bmp-servers}", reflect.TypeOf(BmpServers{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers", reflect.TypeOf(BmpServers{}))
}

// BgpSiteOfOrigin represents Bgp site of origin
type BgpSiteOfOrigin string

const (
    // AS format SoO
    BgpSiteOfOrigin_as BgpSiteOfOrigin = "as"

    // IPv4 address format SoO
    BgpSiteOfOrigin_ipv4_address BgpSiteOfOrigin = "ipv4-address"

    // 4-byte AS format SoO
    BgpSiteOfOrigin_four_byte_as BgpSiteOfOrigin = "four-byte-as"
)

// BgpAsn represents Bgp asn
type BgpAsn string

const (
    // AS plain format
    BgpAsn_as_plain BgpAsn = "as-plain"

    // AS dot format
    BgpAsn_asdot BgpAsn = "asdot"
)

// BgpAdvRt represents Bgp adv rt
type BgpAdvRt string

const (
    // Regular RT type
    BgpAdvRt_bgp_regular_rt BgpAdvRt = "bgp-regular-rt"

    // Stitching RT type
    BgpAdvRt_bgp_stitching_rt BgpAdvRt = "bgp-stitching-rt"
)

// BgpAfEncapsulation represents Bgp af encapsulation
type BgpAfEncapsulation string

const (
    // VxLAN encapsulation type
    BgpAfEncapsulation_vx_lan BgpAfEncapsulation = "vx-lan"
)

// BgpMvpnSfsSelect represents Bgp mvpn sfs select
type BgpMvpnSfsSelect string

const (
    // Select all paths as single forwarder PE
    BgpMvpnSfsSelect_all_paths BgpMvpnSfsSelect = "all-paths"

    // Select PE with highest address as single
    // forwarder PE
    BgpMvpnSfsSelect_highest_ip_address BgpMvpnSfsSelect = "highest-ip-address"
)

// BgpNbrgr represents Bgp nbrgr
type BgpNbrgr string

const (
    // NBR has enabled Graceful Restart capability
    BgpNbrgr_true_ BgpNbrgr = "true"

    // NBR has disabled Graceful Restart capability
    BgpNbrgr_false_ BgpNbrgr = "false"
)

// BgpAigpCfgPoi represents Bgp aigp cfg poi
type BgpAigpCfgPoi string

const (
    // AIGP Pre-bestpath POI
    BgpAigpCfgPoi_pre_best_path BgpAigpCfgPoi = "pre-best-path"

    // AIGP igp-cost POI
    BgpAigpCfgPoi_igp_cost BgpAigpCfgPoi = "igp-cost"
)

// BgpBfdEnableMode represents Bgp bfd enable mode
type BgpBfdEnableMode string

const (
    // Disable Mode - Prevent inheritance
    BgpBfdEnableMode_disable BgpBfdEnableMode = "disable"

    // Default Mode - Default BFD behavior
    BgpBfdEnableMode_default_ BgpBfdEnableMode = "default"

    // Strict Mode - Hold down adj until BFD session
    // up
    BgpBfdEnableMode_strict BgpBfdEnableMode = "strict"
)

// BgpRpkiTransport represents Bgp rpki transport
type BgpRpkiTransport string

const (
    // TCP Transport
    BgpRpkiTransport_tcp BgpRpkiTransport = "tcp"

    // SSH Transport
    BgpRpkiTransport_ssh BgpRpkiTransport = "ssh"
)

// BmpRouteDirection represents Bmp route direction
type BmpRouteDirection string

const (
    // Pickup routes at inbound direction from peer
    BmpRouteDirection_inbound BmpRouteDirection = "inbound"
)

// BgpSendMcastAttrCfg represents Bgp send mcast attr cfg
type BgpSendMcastAttrCfg string

const (
    // Enable SendMcastAttr
    BgpSendMcastAttrCfg_enable BgpSendMcastAttrCfg = "enable"

    // Disable SendMcastAttr
    BgpSendMcastAttrCfg_disable BgpSendMcastAttrCfg = "disable"
)

// BgpRnhInstallFormat represents Bgp rnh install format
type BgpRnhInstallFormat string

const (
    // Install RNH as opaque and extcomm
    BgpRnhInstallFormat_ext_comm BgpRnhInstallFormat = "ext-comm"

    // Install RNH as extcomm only
    BgpRnhInstallFormat_ext_comm_only BgpRnhInstallFormat = "ext-comm-only"
)

// BgpRouteDistinguisher represents Bgp route distinguisher
type BgpRouteDistinguisher string

const (
    // Automatically assigned
    BgpRouteDistinguisher_auto BgpRouteDistinguisher = "auto"

    // AS format RD
    BgpRouteDistinguisher_as BgpRouteDistinguisher = "as"

    // 4-byte AS format RD
    BgpRouteDistinguisher_four_byte_as BgpRouteDistinguisher = "four-byte-as"

    // IPv4 address format RD
    BgpRouteDistinguisher_ipv4_address BgpRouteDistinguisher = "ipv4-address"
)

// BgpOrf represents Bgp orf
type BgpOrf string

const (
    // No capability to send or receive
    BgpOrf_none BgpOrf = "none"

    // Receive ORF capability
    BgpOrf_receive BgpOrf = "receive"

    // Send ORF capability
    BgpOrf_send BgpOrf = "send"

    // Send and receive ORF capability
    BgpOrf_both BgpOrf = "both"
)

// BgpVrfRouteTarget represents Bgp vrf route target
type BgpVrfRouteTarget string

const (
    // AS format RT
    BgpVrfRouteTarget_as BgpVrfRouteTarget = "as"

    // IPv4 address format RT
    BgpVrfRouteTarget_ipv4_address BgpVrfRouteTarget = "ipv4-address"

    // 4-byte AS format RT
    BgpVrfRouteTarget_four_byte_as BgpVrfRouteTarget = "four-byte-as"
)

// BgpEbgpSendDmzEnableMode represents Bgp ebgp send dmz enable mode
type BgpEbgpSendDmzEnableMode string

const (
    // Disable Mode - Prevent inheritance
    BgpEbgpSendDmzEnableMode_disable BgpEbgpSendDmzEnableMode = "disable"

    // Default Mode - Send dmz link bandwidth value to
    // ebgp neighbor
    BgpEbgpSendDmzEnableMode_default_ BgpEbgpSendDmzEnableMode = "default"

    // Strict Mode - Send cumulative dmz link
    // bandwidth value to ebgp neighbor
    BgpEbgpSendDmzEnableMode_cumulative BgpEbgpSendDmzEnableMode = "cumulative"
)

// BgpClusterId represents Bgp cluster id
type BgpClusterId string

const (
    // Number
    BgpClusterId_number BgpClusterId = "number"

    // IPv4 Address
    BgpClusterId_ipv4_address BgpClusterId = "ipv4-address"
)

// BgpTcpMode represents Bgp tcp mode
type BgpTcpMode string

const (
    // Either active or passive mode
    BgpTcpMode_either BgpTcpMode = "either"

    // Active mode only
    BgpTcpMode_active_only BgpTcpMode = "active-only"

    // Passive mode only
    BgpTcpMode_passive_only BgpTcpMode = "passive-only"
)

// BgpAigpCfg represents Bgp aigp cfg
type BgpAigpCfg string

const (
    // Enable AIGP
    BgpAigpCfg_enable BgpAigpCfg = "enable"

    // Disable AIGP
    BgpAigpCfg_disable BgpAigpCfg = "disable"
)

// BmpPolicySelect represents Bmp policy select
type BmpPolicySelect string

const (
    // Pickup routes after policy application
    BmpPolicySelect_post_policy BmpPolicySelect = "post-policy"
)

// BgpFlowspecValidationCfg represents Bgp flowspec validation cfg
type BgpFlowspecValidationCfg string

const (
    // Enable Flowspec validation
    BgpFlowspecValidationCfg_enable BgpFlowspecValidationCfg = "enable"

    // Disable Flowspec validation
    BgpFlowspecValidationCfg_disable BgpFlowspecValidationCfg = "disable"

    // Disable Flowspec redirect nexthop validation
    BgpFlowspecValidationCfg_redirect_nexhop_disable BgpFlowspecValidationCfg = "redirect-nexhop-disable"
)

// BgpSignal represents Bgp signal
type BgpSignal string

const (
    // Signalling BGP disable
    BgpSignal_bgp_disable BgpSignal = "bgp-disable"

    // Signalling LDP disable
    BgpSignal_ldp_disable BgpSignal = "ldp-disable"
)

// BgpGlobalRouteDistinguisher represents Bgp global route distinguisher
type BgpGlobalRouteDistinguisher string

const (
    // AS format RD
    BgpGlobalRouteDistinguisher_as BgpGlobalRouteDistinguisher = "as"

    // 4-byte AS format RD
    BgpGlobalRouteDistinguisher_four_byte_as BgpGlobalRouteDistinguisher = "four-byte-as"

    // IPv4 address format RD
    BgpGlobalRouteDistinguisher_ipv4_address BgpGlobalRouteDistinguisher = "ipv4-address"
)

// BgpReorgOpt represents Bgp reorg opt
type BgpReorgOpt string

const (
    // Advertise translated routes
    BgpReorgOpt_bgp_cfg_adv BgpReorgOpt = "bgp-cfg-adv"

    // Advertise Reorig routes
    BgpReorgOpt_bgp_cfg_adv_reorg BgpReorgOpt = "bgp-cfg-adv-reorg"

    // Disable adv of routes
    BgpReorgOpt_bgp_cfg_adv_disable BgpReorgOpt = "bgp-cfg-adv-disable"

    // Advertise local routes
    BgpReorgOpt_bgp_cfg_adv_local BgpReorgOpt = "bgp-cfg-adv-local"

    // Disable adv of Def VRF Imported routes
    BgpReorgOpt_bgp_cfg_adv_def_vrf_imp_disable BgpReorgOpt = "bgp-cfg-adv-def-vrf-imp-disable"

    // Disable adv of VRF ReImported routes
    BgpReorgOpt_bgp_cfg_adv_vrf_re_imp_disable BgpReorgOpt = "bgp-cfg-adv-vrf-re-imp-disable"
)

// Bgp
// bgp
type Bgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // BGP instance configuration commands. The type is slice of Bgp_Instance.
    Instance []*Bgp_Instance
}

func (bgp *Bgp) GetEntityData() *types.CommonEntityData {
    bgp.EntityData.YFilter = bgp.YFilter
    bgp.EntityData.YangName = "bgp"
    bgp.EntityData.BundleName = "cisco_ios_xr"
    bgp.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-cfg"
    bgp.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp"
    bgp.EntityData.AbsolutePath = bgp.EntityData.SegmentPath
    bgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgp.EntityData.Children = types.NewOrderedMap()
    bgp.EntityData.Children.Append("instance", types.YChild{"Instance", nil})
    for i := range bgp.Instance {
        bgp.EntityData.Children.Append(types.GetSegmentPath(bgp.Instance[i]), types.YChild{"Instance", bgp.Instance[i]})
    }
    bgp.EntityData.Leafs = types.NewOrderedMap()

    bgp.EntityData.YListKeys = []string {}

    return &(bgp.EntityData)
}

// Bgp_Instance
// BGP instance configuration commands
type Bgp_Instance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Instance Name. For Default instance use - default.
    // The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Autonomous system. The type is slice of Bgp_Instance_InstanceAs.
    InstanceAs []*Bgp_Instance_InstanceAs
}

func (instance *Bgp_Instance) GetEntityData() *types.CommonEntityData {
    instance.EntityData.YFilter = instance.YFilter
    instance.EntityData.YangName = "instance"
    instance.EntityData.BundleName = "cisco_ios_xr"
    instance.EntityData.ParentYangName = "bgp"
    instance.EntityData.SegmentPath = "instance" + types.AddKeyToken(instance.InstanceName, "instance-name")
    instance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/" + instance.EntityData.SegmentPath
    instance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instance.EntityData.Children = types.NewOrderedMap()
    instance.EntityData.Children.Append("instance-as", types.YChild{"InstanceAs", nil})
    for i := range instance.InstanceAs {
        instance.EntityData.Children.Append(types.GetSegmentPath(instance.InstanceAs[i]), types.YChild{"InstanceAs", instance.InstanceAs[i]})
    }
    instance.EntityData.Leafs = types.NewOrderedMap()
    instance.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", instance.InstanceName})

    instance.EntityData.YListKeys = []string {"InstanceName"}

    return &(instance.EntityData)
}

// Bgp_Instance_InstanceAs
// Autonomous system
type Bgp_Instance_InstanceAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Higher 16 bits of 4-byte Autonomous system number.
    // The type is interface{} with range: 0..4294967295.
    As interface{}

    // 4-byte Autonomous system. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs.
    FourByteAs []*Bgp_Instance_InstanceAs_FourByteAs
}

func (instanceAs *Bgp_Instance_InstanceAs) GetEntityData() *types.CommonEntityData {
    instanceAs.EntityData.YFilter = instanceAs.YFilter
    instanceAs.EntityData.YangName = "instance-as"
    instanceAs.EntityData.BundleName = "cisco_ios_xr"
    instanceAs.EntityData.ParentYangName = "instance"
    instanceAs.EntityData.SegmentPath = "instance-as" + types.AddKeyToken(instanceAs.As, "as")
    instanceAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/" + instanceAs.EntityData.SegmentPath
    instanceAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    instanceAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    instanceAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    instanceAs.EntityData.Children = types.NewOrderedMap()
    instanceAs.EntityData.Children.Append("four-byte-as", types.YChild{"FourByteAs", nil})
    for i := range instanceAs.FourByteAs {
        instanceAs.EntityData.Children.Append(types.GetSegmentPath(instanceAs.FourByteAs[i]), types.YChild{"FourByteAs", instanceAs.FourByteAs[i]})
    }
    instanceAs.EntityData.Leafs = types.NewOrderedMap()
    instanceAs.EntityData.Leafs.Append("as", types.YLeaf{"As", instanceAs.As})

    instanceAs.EntityData.YListKeys = []string {"As"}

    return &(instanceAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs
// 4-byte Autonomous system
type Bgp_Instance_InstanceAs_FourByteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. 2-byte or 4-byte Autonomous system number. The
    // type is interface{} with range: 0..4294967295.
    As interface{}

    // Enable BGP. Deletion of this object causes deletion of all the objects
    // under FourByteAS associated with this object. The type is interface{}.
    BgpRunning interface{}

    // VRF config.
    Vrfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs

    // Global default config.
    DefaultVrf Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetEntityData() *types.CommonEntityData {
    fourByteAs.EntityData.YFilter = fourByteAs.YFilter
    fourByteAs.EntityData.YangName = "four-byte-as"
    fourByteAs.EntityData.BundleName = "cisco_ios_xr"
    fourByteAs.EntityData.ParentYangName = "instance-as"
    fourByteAs.EntityData.SegmentPath = "four-byte-as" + types.AddKeyToken(fourByteAs.As, "as")
    fourByteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/" + fourByteAs.EntityData.SegmentPath
    fourByteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    fourByteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    fourByteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    fourByteAs.EntityData.Children = types.NewOrderedMap()
    fourByteAs.EntityData.Children.Append("vrfs", types.YChild{"Vrfs", &fourByteAs.Vrfs})
    fourByteAs.EntityData.Children.Append("default-vrf", types.YChild{"DefaultVrf", &fourByteAs.DefaultVrf})
    fourByteAs.EntityData.Leafs = types.NewOrderedMap()
    fourByteAs.EntityData.Leafs.Append("as", types.YLeaf{"As", fourByteAs.As})
    fourByteAs.EntityData.Leafs.Append("bgp-running", types.YLeaf{"BgpRunning", fourByteAs.BgpRunning})

    fourByteAs.EntityData.YListKeys = []string {"As"}

    return &(fourByteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs
// VRF config
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // VRF config. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf.
    Vrf []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetEntityData() *types.CommonEntityData {
    vrfs.EntityData.YFilter = vrfs.YFilter
    vrfs.EntityData.YangName = "vrfs"
    vrfs.EntityData.BundleName = "cisco_ios_xr"
    vrfs.EntityData.ParentYangName = "four-byte-as"
    vrfs.EntityData.SegmentPath = "vrfs"
    vrfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/" + vrfs.EntityData.SegmentPath
    vrfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfs.EntityData.Children = types.NewOrderedMap()
    vrfs.EntityData.Children.Append("vrf", types.YChild{"Vrf", nil})
    for i := range vrfs.Vrf {
        vrfs.EntityData.Children.Append(types.GetSegmentPath(vrfs.Vrf[i]), types.YChild{"Vrf", vrfs.Vrf[i]})
    }
    vrfs.EntityData.Leafs = types.NewOrderedMap()

    vrfs.EntityData.YListKeys = []string {}

    return &(vrfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf
// VRF config
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // VRF attribute config.
    VrfGlobal Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal

    // BGP VRF peer.
    VrfNeighbors Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetEntityData() *types.CommonEntityData {
    vrf.EntityData.YFilter = vrf.YFilter
    vrf.EntityData.YangName = "vrf"
    vrf.EntityData.BundleName = "cisco_ios_xr"
    vrf.EntityData.ParentYangName = "vrfs"
    vrf.EntityData.SegmentPath = "vrf" + types.AddKeyToken(vrf.VrfName, "vrf-name")
    vrf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/" + vrf.EntityData.SegmentPath
    vrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrf.EntityData.Children = types.NewOrderedMap()
    vrf.EntityData.Children.Append("vrf-global", types.YChild{"VrfGlobal", &vrf.VrfGlobal})
    vrf.EntityData.Children.Append("vrf-neighbors", types.YChild{"VrfNeighbors", &vrf.VrfNeighbors})
    vrf.EntityData.Leafs = types.NewOrderedMap()
    vrf.EntityData.Leafs.Append("vrf-name", types.YLeaf{"VrfName", vrf.VrfName})

    vrf.EntityData.YListKeys = []string {"VrfName"}

    return &(vrf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal
// VRF attribute config
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Create this VRF. Deletion of this object causes deletion of all the objects
    // under VRF associated with this object. The type is interface{}.
    Exists interface{}

    // Configure Router-id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    RouterId interface{}

    // Disable enforce the first AS for EBGP routes. The type is interface{}.
    DisableEnforceFirstAs interface{}

    // Change default route selection criteria to ignore cost community
    // comparison. The type is interface{}.
    BestPathCostCommunity interface{}

    // Change default route selection criteria to ignore AIGP unless both paths
    // whichare compared have AIGP attribute. The type is interface{}.
    BestPathAigpIgnore interface{}

    // Change default route selection criteria to ignore AS path length. The type
    // is interface{}.
    BestPathAsPathLength interface{}

    // Allow redistribution of iBGP into IGPs (dangerous). The type is
    // interface{}.
    IgpRedistInternal interface{}

    // Change default multi-route selection criteria to ignore everything onwards
    // as-path check. The type is interface{}.
    MultiPathAsPathIgnoreOnwards interface{}

    // Disable immediate reset session if a link to a directly connected external
    // peer goes down. The type is interface{}.
    DisableFastExternalFallover interface{}

    // If eBGP neighbor is configured without a route-policy,the routes from that
    // neighbor are not accepted by default.This knob overrides the default
    // behavior. When configured,routes from the eBGP neighbors with no policy are
    // accepted. The type is interface{}.
    UnsafeEbgpPolicy interface{}

    // Default redistributed metric. The type is interface{} with range:
    // 1..4294967295.
    DefaultMetric interface{}

    // Control distribution of default information. The type is interface{}.
    DefaultInfoOriginate interface{}

    // RPKI origin-AS validity signal ibgp. The type is interface{}.
    RpkiOriginAsValiditySignalIbgp interface{}

    // RPKI bestpath use origin-AS validity. The type is interface{}.
    RpkiBestpathUseOriginAsValidity interface{}

    // Change default route selection criteria and allow the comparing of MED
    // among confederation paths. The type is interface{}.
    BestPathConfederationPaths interface{}

    // Change default multi-route selection criteria to relax as-path checking -
    // only require same aspath length. The type is interface{}.
    BestPathAsMultipathRelax interface{}

    // Disable automatic soft peer reset on policy reconfiguration. The type is
    // interface{}.
    DisableAutoSoftReset interface{}

    // Disable inbound and outbound messagelogging for all neighbors under the
    // vrf. The type is interface{}.
    DisableMsgLog interface{}

    // Change default route selection criteria to ignore IGP Metric . The type is
    // interface{}.
    BestPathIgpMetricIgnore interface{}

    // Enable path resolution for nexthops using default route. The type is
    // interface{}.
    NextHopResAllowDefault interface{}

    // Enable mpls forwarding path for ibgp learnt nexthops. The type is
    // interface{}.
    NextHopMplsFwdIbgp interface{}

    // Disable neighbor change logging. The type is interface{}.
    DisableNeighborLogging interface{}

    // Change default route selection criteria and allow comparing of MED from
    // different neighbors. The type is interface{}.
    BestPathMedAlways interface{}

    // Change default route selection criteria and compare router-id for identical
    // EBGP paths. The type is interface{}.
    BestPathRouterId interface{}

    // Treat missing MED as the least preferred one. The type is interface{}.
    BestPathMedMissing interface{}

    // Configure default local preference. The type is interface{} with range:
    // 0..4294967295. The default value is 100.
    LocalPreference interface{}

    // Route distinguisher.
    RouteDistinguisher Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher

    // Global VRF-specific configuration.
    VrfGlobalAfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs

    // Configure list of MPLS activated interfaces.
    MplsActivatedInterfaces Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces

    // Adjust routing timers.
    GlobalTimers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers

    // BFD configuration.
    Bfd Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd

    // set socket parameters.
    SendSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes

    // Set socket and BGP receive buffer sizes.
    ReceiveSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetEntityData() *types.CommonEntityData {
    vrfGlobal.EntityData.YFilter = vrfGlobal.YFilter
    vrfGlobal.EntityData.YangName = "vrf-global"
    vrfGlobal.EntityData.BundleName = "cisco_ios_xr"
    vrfGlobal.EntityData.ParentYangName = "vrf"
    vrfGlobal.EntityData.SegmentPath = "vrf-global"
    vrfGlobal.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/" + vrfGlobal.EntityData.SegmentPath
    vrfGlobal.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfGlobal.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfGlobal.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfGlobal.EntityData.Children = types.NewOrderedMap()
    vrfGlobal.EntityData.Children.Append("route-distinguisher", types.YChild{"RouteDistinguisher", &vrfGlobal.RouteDistinguisher})
    vrfGlobal.EntityData.Children.Append("vrf-global-afs", types.YChild{"VrfGlobalAfs", &vrfGlobal.VrfGlobalAfs})
    vrfGlobal.EntityData.Children.Append("mpls-activated-interfaces", types.YChild{"MplsActivatedInterfaces", &vrfGlobal.MplsActivatedInterfaces})
    vrfGlobal.EntityData.Children.Append("global-timers", types.YChild{"GlobalTimers", &vrfGlobal.GlobalTimers})
    vrfGlobal.EntityData.Children.Append("bfd", types.YChild{"Bfd", &vrfGlobal.Bfd})
    vrfGlobal.EntityData.Children.Append("send-socket-buffer-sizes", types.YChild{"SendSocketBufferSizes", &vrfGlobal.SendSocketBufferSizes})
    vrfGlobal.EntityData.Children.Append("receive-socket-buffer-sizes", types.YChild{"ReceiveSocketBufferSizes", &vrfGlobal.ReceiveSocketBufferSizes})
    vrfGlobal.EntityData.Leafs = types.NewOrderedMap()
    vrfGlobal.EntityData.Leafs.Append("exists", types.YLeaf{"Exists", vrfGlobal.Exists})
    vrfGlobal.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", vrfGlobal.RouterId})
    vrfGlobal.EntityData.Leafs.Append("disable-enforce-first-as", types.YLeaf{"DisableEnforceFirstAs", vrfGlobal.DisableEnforceFirstAs})
    vrfGlobal.EntityData.Leafs.Append("best-path-cost-community", types.YLeaf{"BestPathCostCommunity", vrfGlobal.BestPathCostCommunity})
    vrfGlobal.EntityData.Leafs.Append("best-path-aigp-ignore", types.YLeaf{"BestPathAigpIgnore", vrfGlobal.BestPathAigpIgnore})
    vrfGlobal.EntityData.Leafs.Append("best-path-as-path-length", types.YLeaf{"BestPathAsPathLength", vrfGlobal.BestPathAsPathLength})
    vrfGlobal.EntityData.Leafs.Append("igp-redist-internal", types.YLeaf{"IgpRedistInternal", vrfGlobal.IgpRedistInternal})
    vrfGlobal.EntityData.Leafs.Append("multi-path-as-path-ignore-onwards", types.YLeaf{"MultiPathAsPathIgnoreOnwards", vrfGlobal.MultiPathAsPathIgnoreOnwards})
    vrfGlobal.EntityData.Leafs.Append("disable-fast-external-fallover", types.YLeaf{"DisableFastExternalFallover", vrfGlobal.DisableFastExternalFallover})
    vrfGlobal.EntityData.Leafs.Append("unsafe-ebgp-policy", types.YLeaf{"UnsafeEbgpPolicy", vrfGlobal.UnsafeEbgpPolicy})
    vrfGlobal.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", vrfGlobal.DefaultMetric})
    vrfGlobal.EntityData.Leafs.Append("default-info-originate", types.YLeaf{"DefaultInfoOriginate", vrfGlobal.DefaultInfoOriginate})
    vrfGlobal.EntityData.Leafs.Append("rpki-origin-as-validity-signal-ibgp", types.YLeaf{"RpkiOriginAsValiditySignalIbgp", vrfGlobal.RpkiOriginAsValiditySignalIbgp})
    vrfGlobal.EntityData.Leafs.Append("rpki-bestpath-use-origin-as-validity", types.YLeaf{"RpkiBestpathUseOriginAsValidity", vrfGlobal.RpkiBestpathUseOriginAsValidity})
    vrfGlobal.EntityData.Leafs.Append("best-path-confederation-paths", types.YLeaf{"BestPathConfederationPaths", vrfGlobal.BestPathConfederationPaths})
    vrfGlobal.EntityData.Leafs.Append("best-path-as-multipath-relax", types.YLeaf{"BestPathAsMultipathRelax", vrfGlobal.BestPathAsMultipathRelax})
    vrfGlobal.EntityData.Leafs.Append("disable-auto-soft-reset", types.YLeaf{"DisableAutoSoftReset", vrfGlobal.DisableAutoSoftReset})
    vrfGlobal.EntityData.Leafs.Append("disable-msg-log", types.YLeaf{"DisableMsgLog", vrfGlobal.DisableMsgLog})
    vrfGlobal.EntityData.Leafs.Append("best-path-igp-metric-ignore", types.YLeaf{"BestPathIgpMetricIgnore", vrfGlobal.BestPathIgpMetricIgnore})
    vrfGlobal.EntityData.Leafs.Append("next-hop-res-allow-default", types.YLeaf{"NextHopResAllowDefault", vrfGlobal.NextHopResAllowDefault})
    vrfGlobal.EntityData.Leafs.Append("next-hop-mpls-fwd-ibgp", types.YLeaf{"NextHopMplsFwdIbgp", vrfGlobal.NextHopMplsFwdIbgp})
    vrfGlobal.EntityData.Leafs.Append("disable-neighbor-logging", types.YLeaf{"DisableNeighborLogging", vrfGlobal.DisableNeighborLogging})
    vrfGlobal.EntityData.Leafs.Append("best-path-med-always", types.YLeaf{"BestPathMedAlways", vrfGlobal.BestPathMedAlways})
    vrfGlobal.EntityData.Leafs.Append("best-path-router-id", types.YLeaf{"BestPathRouterId", vrfGlobal.BestPathRouterId})
    vrfGlobal.EntityData.Leafs.Append("best-path-med-missing", types.YLeaf{"BestPathMedMissing", vrfGlobal.BestPathMedMissing})
    vrfGlobal.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", vrfGlobal.LocalPreference})

    vrfGlobal.EntityData.YListKeys = []string {}

    return &(vrfGlobal.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher
// Route distinguisher
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of RD. The type is BgpRouteDistinguisher.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // ASN Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetEntityData() *types.CommonEntityData {
    routeDistinguisher.EntityData.YFilter = routeDistinguisher.YFilter
    routeDistinguisher.EntityData.YangName = "route-distinguisher"
    routeDistinguisher.EntityData.BundleName = "cisco_ios_xr"
    routeDistinguisher.EntityData.ParentYangName = "vrf-global"
    routeDistinguisher.EntityData.SegmentPath = "route-distinguisher"
    routeDistinguisher.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + routeDistinguisher.EntityData.SegmentPath
    routeDistinguisher.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeDistinguisher.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeDistinguisher.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeDistinguisher.EntityData.Children = types.NewOrderedMap()
    routeDistinguisher.EntityData.Leafs = types.NewOrderedMap()
    routeDistinguisher.EntityData.Leafs.Append("type", types.YLeaf{"Type", routeDistinguisher.Type})
    routeDistinguisher.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", routeDistinguisher.AsXx})
    routeDistinguisher.EntityData.Leafs.Append("as", types.YLeaf{"As", routeDistinguisher.As})
    routeDistinguisher.EntityData.Leafs.Append("as-index", types.YLeaf{"AsIndex", routeDistinguisher.AsIndex})
    routeDistinguisher.EntityData.Leafs.Append("address", types.YLeaf{"Address", routeDistinguisher.Address})
    routeDistinguisher.EntityData.Leafs.Append("address-index", types.YLeaf{"AddressIndex", routeDistinguisher.AddressIndex})

    routeDistinguisher.EntityData.YListKeys = []string {}

    return &(routeDistinguisher.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs
// Global VRF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global VRF AF-specific configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf.
    VrfGlobalAf []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetEntityData() *types.CommonEntityData {
    vrfGlobalAfs.EntityData.YFilter = vrfGlobalAfs.YFilter
    vrfGlobalAfs.EntityData.YangName = "vrf-global-afs"
    vrfGlobalAfs.EntityData.BundleName = "cisco_ios_xr"
    vrfGlobalAfs.EntityData.ParentYangName = "vrf-global"
    vrfGlobalAfs.EntityData.SegmentPath = "vrf-global-afs"
    vrfGlobalAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + vrfGlobalAfs.EntityData.SegmentPath
    vrfGlobalAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfGlobalAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfGlobalAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfGlobalAfs.EntityData.Children = types.NewOrderedMap()
    vrfGlobalAfs.EntityData.Children.Append("vrf-global-af", types.YChild{"VrfGlobalAf", nil})
    for i := range vrfGlobalAfs.VrfGlobalAf {
        vrfGlobalAfs.EntityData.Children.Append(types.GetSegmentPath(vrfGlobalAfs.VrfGlobalAf[i]), types.YChild{"VrfGlobalAf", vrfGlobalAfs.VrfGlobalAf[i]})
    }
    vrfGlobalAfs.EntityData.Leafs = types.NewOrderedMap()

    vrfGlobalAfs.EntityData.YListKeys = []string {}

    return &(vrfGlobalAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf
// Global VRF AF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Route-Target download configuration. The type is interface{}.
    RtDownload interface{}

    // TRUE to send default orig route to VPN neighborFALSE to not send default
    // originate route . The type is bool.
    AllowVpnDefaultOriginate interface{}

    // RPKI origin-AS validation enable. The type is interface{}.
    RpkiOriginAsValidationEnable interface{}

    // Update generation delay (in minutes) after a MED change. The type is
    // interface{} with range: 0..10. Units are minute. The default value is 10.
    DynamicMedInterval interface{}

    // Enable the address family. Deletion of this object causes deletion of all
    // the objects under GlobalAF/VRFGlobalAF associated with this object . The
    // type is interface{}.
    Enable interface{}

    // Configure policy for installation of routes to RIB. The type is string.
    TablePolicy interface{}

    // Attribute download configuration. The type is interface{}.
    AttributeDownload interface{}

    // TRUE to enable BE FALSE to disable BE inheritance from a parent. The type
    // is bool.
    BestExternal interface{}

    // RPKI origin-AS validity signal ibgp. The type is interface{}.
    RpkiOriginAsValiditySignalIbgp interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsReceive interface{}

    // Route policy for permanent networks. The type is string.
    PermanentNetwork interface{}

    // RPKI bestpath use origin-AS validity. The type is interface{}.
    RpkiBestpathUseOriginAsValidity interface{}

    // Label allocation mode: per-ce  Set per CE label mode,per-vrf Set per VRF
    // label mode. The type is string.
    Srv6LabelAllocationMode interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Minimum prefix-length for nexthop resolution. The type is interface{} with
    // range: 0..128. The default value is 0.
    NextHopResolutionPrefixLengthMinimum interface{}

    // TRUE to reset weight on import. FALSE to not reset and to prevent
    // inheritance from a parent. The type is bool.
    ResetWeightOnImport interface{}

    // Advertise additional paths Send capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsSend interface{}

    // Enable/disable advertisement of routes with local-label via Unicast SAFI.
    // The type is BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRouteSafiUnicast interface{}

    // Disable outbound AS Path loop check. The type is interface{}.
    DisableAsPathLoopCheck interface{}

    // MVPN configurations.
    Mvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn

    // Use eBGP multipaths.
    Ebgp Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp

    // Use eiBGP multipaths.
    Eibgp Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp

    // Use iBGP multipaths.
    Ibgp Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp

    // Configure BGP aggregate entries.
    AggregateAddresses Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses

    // Table of multiple ORR groups.
    OptimalRouteReflectorGroups Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups

    // Enable route-flap dampening.
    Dampening Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening

    // Redistribute RIP routes.
    RipRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes

    // Redistribute lisp routes.
    LispRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes

    // Redistribute static routes.
    StaticRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes

    // Define an administrative distance.
    Distance Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance

    // Redistribute information for Application routes.
    ApplicationRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes

    // BGP 6PE/MPLS-VPN label allocation mode.
    LabelMode Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode

    // Redistribute information for EIGRP routes.
    EigrpRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes

    // Specify a network to announce via BGP.
    SourcedNetworks Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks

    // Redistribute connected routes.
    ConnectedRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes

    // Label allocation policy.
    AllocateLabel Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel

    // Configure additional paths selection.
    AdditionalPathsSelection Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection

    // Redistribute information for OSPF routes.
    OspfRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes

    // Redistribute mobile routes.
    MobileRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes

    // Redistribute subscriber routes.
    SubscriberRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetEntityData() *types.CommonEntityData {
    vrfGlobalAf.EntityData.YFilter = vrfGlobalAf.YFilter
    vrfGlobalAf.EntityData.YangName = "vrf-global-af"
    vrfGlobalAf.EntityData.BundleName = "cisco_ios_xr"
    vrfGlobalAf.EntityData.ParentYangName = "vrf-global-afs"
    vrfGlobalAf.EntityData.SegmentPath = "vrf-global-af" + types.AddKeyToken(vrfGlobalAf.AfName, "af-name")
    vrfGlobalAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/" + vrfGlobalAf.EntityData.SegmentPath
    vrfGlobalAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfGlobalAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfGlobalAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfGlobalAf.EntityData.Children = types.NewOrderedMap()
    vrfGlobalAf.EntityData.Children.Append("mvpn", types.YChild{"Mvpn", &vrfGlobalAf.Mvpn})
    vrfGlobalAf.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &vrfGlobalAf.Ebgp})
    vrfGlobalAf.EntityData.Children.Append("eibgp", types.YChild{"Eibgp", &vrfGlobalAf.Eibgp})
    vrfGlobalAf.EntityData.Children.Append("ibgp", types.YChild{"Ibgp", &vrfGlobalAf.Ibgp})
    vrfGlobalAf.EntityData.Children.Append("aggregate-addresses", types.YChild{"AggregateAddresses", &vrfGlobalAf.AggregateAddresses})
    vrfGlobalAf.EntityData.Children.Append("optimal-route-reflector-groups", types.YChild{"OptimalRouteReflectorGroups", &vrfGlobalAf.OptimalRouteReflectorGroups})
    vrfGlobalAf.EntityData.Children.Append("dampening", types.YChild{"Dampening", &vrfGlobalAf.Dampening})
    vrfGlobalAf.EntityData.Children.Append("rip-routes", types.YChild{"RipRoutes", &vrfGlobalAf.RipRoutes})
    vrfGlobalAf.EntityData.Children.Append("lisp-routes", types.YChild{"LispRoutes", &vrfGlobalAf.LispRoutes})
    vrfGlobalAf.EntityData.Children.Append("static-routes", types.YChild{"StaticRoutes", &vrfGlobalAf.StaticRoutes})
    vrfGlobalAf.EntityData.Children.Append("distance", types.YChild{"Distance", &vrfGlobalAf.Distance})
    vrfGlobalAf.EntityData.Children.Append("application-routes", types.YChild{"ApplicationRoutes", &vrfGlobalAf.ApplicationRoutes})
    vrfGlobalAf.EntityData.Children.Append("label-mode", types.YChild{"LabelMode", &vrfGlobalAf.LabelMode})
    vrfGlobalAf.EntityData.Children.Append("eigrp-routes", types.YChild{"EigrpRoutes", &vrfGlobalAf.EigrpRoutes})
    vrfGlobalAf.EntityData.Children.Append("sourced-networks", types.YChild{"SourcedNetworks", &vrfGlobalAf.SourcedNetworks})
    vrfGlobalAf.EntityData.Children.Append("connected-routes", types.YChild{"ConnectedRoutes", &vrfGlobalAf.ConnectedRoutes})
    vrfGlobalAf.EntityData.Children.Append("allocate-label", types.YChild{"AllocateLabel", &vrfGlobalAf.AllocateLabel})
    vrfGlobalAf.EntityData.Children.Append("additional-paths-selection", types.YChild{"AdditionalPathsSelection", &vrfGlobalAf.AdditionalPathsSelection})
    vrfGlobalAf.EntityData.Children.Append("ospf-routes", types.YChild{"OspfRoutes", &vrfGlobalAf.OspfRoutes})
    vrfGlobalAf.EntityData.Children.Append("mobile-routes", types.YChild{"MobileRoutes", &vrfGlobalAf.MobileRoutes})
    vrfGlobalAf.EntityData.Children.Append("subscriber-routes", types.YChild{"SubscriberRoutes", &vrfGlobalAf.SubscriberRoutes})
    vrfGlobalAf.EntityData.Leafs = types.NewOrderedMap()
    vrfGlobalAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", vrfGlobalAf.AfName})
    vrfGlobalAf.EntityData.Leafs.Append("rt-download", types.YLeaf{"RtDownload", vrfGlobalAf.RtDownload})
    vrfGlobalAf.EntityData.Leafs.Append("allow-vpn-default-originate", types.YLeaf{"AllowVpnDefaultOriginate", vrfGlobalAf.AllowVpnDefaultOriginate})
    vrfGlobalAf.EntityData.Leafs.Append("rpki-origin-as-validation-enable", types.YLeaf{"RpkiOriginAsValidationEnable", vrfGlobalAf.RpkiOriginAsValidationEnable})
    vrfGlobalAf.EntityData.Leafs.Append("dynamic-med-interval", types.YLeaf{"DynamicMedInterval", vrfGlobalAf.DynamicMedInterval})
    vrfGlobalAf.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", vrfGlobalAf.Enable})
    vrfGlobalAf.EntityData.Leafs.Append("table-policy", types.YLeaf{"TablePolicy", vrfGlobalAf.TablePolicy})
    vrfGlobalAf.EntityData.Leafs.Append("attribute-download", types.YLeaf{"AttributeDownload", vrfGlobalAf.AttributeDownload})
    vrfGlobalAf.EntityData.Leafs.Append("best-external", types.YLeaf{"BestExternal", vrfGlobalAf.BestExternal})
    vrfGlobalAf.EntityData.Leafs.Append("rpki-origin-as-validity-signal-ibgp", types.YLeaf{"RpkiOriginAsValiditySignalIbgp", vrfGlobalAf.RpkiOriginAsValiditySignalIbgp})
    vrfGlobalAf.EntityData.Leafs.Append("additional-paths-receive", types.YLeaf{"AdditionalPathsReceive", vrfGlobalAf.AdditionalPathsReceive})
    vrfGlobalAf.EntityData.Leafs.Append("permanent-network", types.YLeaf{"PermanentNetwork", vrfGlobalAf.PermanentNetwork})
    vrfGlobalAf.EntityData.Leafs.Append("rpki-bestpath-use-origin-as-validity", types.YLeaf{"RpkiBestpathUseOriginAsValidity", vrfGlobalAf.RpkiBestpathUseOriginAsValidity})
    vrfGlobalAf.EntityData.Leafs.Append("srv6-label-allocation-mode", types.YLeaf{"Srv6LabelAllocationMode", vrfGlobalAf.Srv6LabelAllocationMode})
    vrfGlobalAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", vrfGlobalAf.RpkiBestpathOriginAsAllowInvalid})
    vrfGlobalAf.EntityData.Leafs.Append("next-hop-resolution-prefix-length-minimum", types.YLeaf{"NextHopResolutionPrefixLengthMinimum", vrfGlobalAf.NextHopResolutionPrefixLengthMinimum})
    vrfGlobalAf.EntityData.Leafs.Append("reset-weight-on-import", types.YLeaf{"ResetWeightOnImport", vrfGlobalAf.ResetWeightOnImport})
    vrfGlobalAf.EntityData.Leafs.Append("additional-paths-send", types.YLeaf{"AdditionalPathsSend", vrfGlobalAf.AdditionalPathsSend})
    vrfGlobalAf.EntityData.Leafs.Append("advertise-local-labeled-route-safi-unicast", types.YLeaf{"AdvertiseLocalLabeledRouteSafiUnicast", vrfGlobalAf.AdvertiseLocalLabeledRouteSafiUnicast})
    vrfGlobalAf.EntityData.Leafs.Append("disable-as-path-loop-check", types.YLeaf{"DisableAsPathLoopCheck", vrfGlobalAf.DisableAsPathLoopCheck})

    vrfGlobalAf.EntityData.YListKeys = []string {"AfName"}

    return &(vrfGlobalAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn
// MVPN configurations
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Select MVPN single forwarder selection. The type is BgpMvpnSfsSelect.
    SingleForwarderSelection interface{}
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetEntityData() *types.CommonEntityData {
    mvpn.EntityData.YFilter = mvpn.YFilter
    mvpn.EntityData.YangName = "mvpn"
    mvpn.EntityData.BundleName = "cisco_ios_xr"
    mvpn.EntityData.ParentYangName = "vrf-global-af"
    mvpn.EntityData.SegmentPath = "mvpn"
    mvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + mvpn.EntityData.SegmentPath
    mvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mvpn.EntityData.Children = types.NewOrderedMap()
    mvpn.EntityData.Leafs = types.NewOrderedMap()
    mvpn.EntityData.Leafs.Append("single-forwarder-selection", types.YLeaf{"SingleForwarderSelection", mvpn.SingleForwarderSelection})

    mvpn.EntityData.YListKeys = []string {}

    return &(mvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp
// Use eBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of paths. The type is interface{} with range: 2..32. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "cisco_ios_xr"
    ebgp.EntityData.ParentYangName = "vrf-global-af"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Leafs = types.NewOrderedMap()
    ebgp.EntityData.Leafs.Append("paths-value", types.YLeaf{"PathsValue", ebgp.PathsValue})
    ebgp.EntityData.Leafs.Append("unequal-cost", types.YLeaf{"UnequalCost", ebgp.UnequalCost})
    ebgp.EntityData.Leafs.Append("selective", types.YLeaf{"Selective", ebgp.Selective})
    ebgp.EntityData.Leafs.Append("order-by-igp-metric", types.YLeaf{"OrderByIgpMetric", ebgp.OrderByIgpMetric})

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp
// Use eiBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of paths. The type is interface{} with range: 2..32. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetEntityData() *types.CommonEntityData {
    eibgp.EntityData.YFilter = eibgp.YFilter
    eibgp.EntityData.YangName = "eibgp"
    eibgp.EntityData.BundleName = "cisco_ios_xr"
    eibgp.EntityData.ParentYangName = "vrf-global-af"
    eibgp.EntityData.SegmentPath = "eibgp"
    eibgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + eibgp.EntityData.SegmentPath
    eibgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eibgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eibgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eibgp.EntityData.Children = types.NewOrderedMap()
    eibgp.EntityData.Leafs = types.NewOrderedMap()
    eibgp.EntityData.Leafs.Append("paths-value", types.YLeaf{"PathsValue", eibgp.PathsValue})
    eibgp.EntityData.Leafs.Append("unequal-cost", types.YLeaf{"UnequalCost", eibgp.UnequalCost})
    eibgp.EntityData.Leafs.Append("selective", types.YLeaf{"Selective", eibgp.Selective})
    eibgp.EntityData.Leafs.Append("order-by-igp-metric", types.YLeaf{"OrderByIgpMetric", eibgp.OrderByIgpMetric})

    eibgp.EntityData.YListKeys = []string {}

    return &(eibgp.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp
// Use iBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of paths. The type is interface{} with range: 2..32. This attribute
    // is mandatory.
    PathsValue interface{}

    // Allow multipaths to have different IGP metrics. The type is bool. The
    // default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "cisco_ios_xr"
    ibgp.EntityData.ParentYangName = "vrf-global-af"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + ibgp.EntityData.SegmentPath
    ibgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ibgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ibgp.EntityData.Children = types.NewOrderedMap()
    ibgp.EntityData.Leafs = types.NewOrderedMap()
    ibgp.EntityData.Leafs.Append("paths-value", types.YLeaf{"PathsValue", ibgp.PathsValue})
    ibgp.EntityData.Leafs.Append("unequal-cost", types.YLeaf{"UnequalCost", ibgp.UnequalCost})
    ibgp.EntityData.Leafs.Append("selective", types.YLeaf{"Selective", ibgp.Selective})
    ibgp.EntityData.Leafs.Append("order-by-igp-metric", types.YLeaf{"OrderByIgpMetric", ibgp.OrderByIgpMetric})

    ibgp.EntityData.YListKeys = []string {}

    return &(ibgp.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses
// Configure BGP aggregate entries
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate address configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress.
    AggregateAddress []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetEntityData() *types.CommonEntityData {
    aggregateAddresses.EntityData.YFilter = aggregateAddresses.YFilter
    aggregateAddresses.EntityData.YangName = "aggregate-addresses"
    aggregateAddresses.EntityData.BundleName = "cisco_ios_xr"
    aggregateAddresses.EntityData.ParentYangName = "vrf-global-af"
    aggregateAddresses.EntityData.SegmentPath = "aggregate-addresses"
    aggregateAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + aggregateAddresses.EntityData.SegmentPath
    aggregateAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aggregateAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aggregateAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aggregateAddresses.EntityData.Children = types.NewOrderedMap()
    aggregateAddresses.EntityData.Children.Append("aggregate-address", types.YChild{"AggregateAddress", nil})
    for i := range aggregateAddresses.AggregateAddress {
        aggregateAddresses.EntityData.Children.Append(types.GetSegmentPath(aggregateAddresses.AggregateAddress[i]), types.YChild{"AggregateAddress", aggregateAddresses.AggregateAddress[i]})
    }
    aggregateAddresses.EntityData.Leafs = types.NewOrderedMap()

    aggregateAddresses.EntityData.YListKeys = []string {}

    return &(aggregateAddresses.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress
// Aggregate address configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Aggregate in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    AggregateAddr interface{}

    // This attribute is a key. Aggregate in prefix/length format (prefix part).
    // The type is interface{} with range: 0..128.
    AggregatePrefix interface{}

    // TRUE to generate AS set path information, FALSE otherwise. The type is
    // bool.
    GenerateSetInfo interface{}

    // TRUE to generate AS confederation set path information, FALSE otherwise.
    // The type is bool.
    GenerateConfederationSetInfo interface{}

    // TRUE to filter more specific routes from updates, FALSEotherwise. The type
    // is bool.
    SummaryOnly interface{}

    // Route policy on which to condition advertisement, suppression, and
    // attributes. The type is string.
    RoutePolicyName interface{}
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetEntityData() *types.CommonEntityData {
    aggregateAddress.EntityData.YFilter = aggregateAddress.YFilter
    aggregateAddress.EntityData.YangName = "aggregate-address"
    aggregateAddress.EntityData.BundleName = "cisco_ios_xr"
    aggregateAddress.EntityData.ParentYangName = "aggregate-addresses"
    aggregateAddress.EntityData.SegmentPath = "aggregate-address" + types.AddKeyToken(aggregateAddress.AggregateAddr, "aggregate-addr") + types.AddKeyToken(aggregateAddress.AggregatePrefix, "aggregate-prefix")
    aggregateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/aggregate-addresses/" + aggregateAddress.EntityData.SegmentPath
    aggregateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aggregateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aggregateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aggregateAddress.EntityData.Children = types.NewOrderedMap()
    aggregateAddress.EntityData.Leafs = types.NewOrderedMap()
    aggregateAddress.EntityData.Leafs.Append("aggregate-addr", types.YLeaf{"AggregateAddr", aggregateAddress.AggregateAddr})
    aggregateAddress.EntityData.Leafs.Append("aggregate-prefix", types.YLeaf{"AggregatePrefix", aggregateAddress.AggregatePrefix})
    aggregateAddress.EntityData.Leafs.Append("generate-set-info", types.YLeaf{"GenerateSetInfo", aggregateAddress.GenerateSetInfo})
    aggregateAddress.EntityData.Leafs.Append("generate-confederation-set-info", types.YLeaf{"GenerateConfederationSetInfo", aggregateAddress.GenerateConfederationSetInfo})
    aggregateAddress.EntityData.Leafs.Append("summary-only", types.YLeaf{"SummaryOnly", aggregateAddress.SummaryOnly})
    aggregateAddress.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", aggregateAddress.RoutePolicyName})

    aggregateAddress.EntityData.YListKeys = []string {"AggregateAddr", "AggregatePrefix"}

    return &(aggregateAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups
// Table of multiple ORR groups
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Optimal Route Reffelctor group. Each such group is equivalent to an IGP
    // area. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup.
    OptimalRouteReflectorGroup []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup
}

func (optimalRouteReflectorGroups *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups) GetEntityData() *types.CommonEntityData {
    optimalRouteReflectorGroups.EntityData.YFilter = optimalRouteReflectorGroups.YFilter
    optimalRouteReflectorGroups.EntityData.YangName = "optimal-route-reflector-groups"
    optimalRouteReflectorGroups.EntityData.BundleName = "cisco_ios_xr"
    optimalRouteReflectorGroups.EntityData.ParentYangName = "vrf-global-af"
    optimalRouteReflectorGroups.EntityData.SegmentPath = "optimal-route-reflector-groups"
    optimalRouteReflectorGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + optimalRouteReflectorGroups.EntityData.SegmentPath
    optimalRouteReflectorGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optimalRouteReflectorGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optimalRouteReflectorGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optimalRouteReflectorGroups.EntityData.Children = types.NewOrderedMap()
    optimalRouteReflectorGroups.EntityData.Children.Append("optimal-route-reflector-group", types.YChild{"OptimalRouteReflectorGroup", nil})
    for i := range optimalRouteReflectorGroups.OptimalRouteReflectorGroup {
        optimalRouteReflectorGroups.EntityData.Children.Append(types.GetSegmentPath(optimalRouteReflectorGroups.OptimalRouteReflectorGroup[i]), types.YChild{"OptimalRouteReflectorGroup", optimalRouteReflectorGroups.OptimalRouteReflectorGroup[i]})
    }
    optimalRouteReflectorGroups.EntityData.Leafs = types.NewOrderedMap()

    optimalRouteReflectorGroups.EntityData.YListKeys = []string {}

    return &(optimalRouteReflectorGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup
// Optimal Route Reffelctor group. Each such group
// is equivalent to an IGP area
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of the ORR group. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    GroupName interface{}

    // Primary Root for the ORR group. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    PrimaryRootAddress interface{}

    // Secondary Root for the ORR group. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SecondaryRootAddress interface{}

    // Tertiary Root for the ORR group. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TertiaryRootAddress interface{}
}

func (optimalRouteReflectorGroup *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup) GetEntityData() *types.CommonEntityData {
    optimalRouteReflectorGroup.EntityData.YFilter = optimalRouteReflectorGroup.YFilter
    optimalRouteReflectorGroup.EntityData.YangName = "optimal-route-reflector-group"
    optimalRouteReflectorGroup.EntityData.BundleName = "cisco_ios_xr"
    optimalRouteReflectorGroup.EntityData.ParentYangName = "optimal-route-reflector-groups"
    optimalRouteReflectorGroup.EntityData.SegmentPath = "optimal-route-reflector-group" + types.AddKeyToken(optimalRouteReflectorGroup.GroupName, "group-name")
    optimalRouteReflectorGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/optimal-route-reflector-groups/" + optimalRouteReflectorGroup.EntityData.SegmentPath
    optimalRouteReflectorGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optimalRouteReflectorGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optimalRouteReflectorGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optimalRouteReflectorGroup.EntityData.Children = types.NewOrderedMap()
    optimalRouteReflectorGroup.EntityData.Leafs = types.NewOrderedMap()
    optimalRouteReflectorGroup.EntityData.Leafs.Append("group-name", types.YLeaf{"GroupName", optimalRouteReflectorGroup.GroupName})
    optimalRouteReflectorGroup.EntityData.Leafs.Append("primary-root-address", types.YLeaf{"PrimaryRootAddress", optimalRouteReflectorGroup.PrimaryRootAddress})
    optimalRouteReflectorGroup.EntityData.Leafs.Append("secondary-root-address", types.YLeaf{"SecondaryRootAddress", optimalRouteReflectorGroup.SecondaryRootAddress})
    optimalRouteReflectorGroup.EntityData.Leafs.Append("tertiary-root-address", types.YLeaf{"TertiaryRootAddress", optimalRouteReflectorGroup.TertiaryRootAddress})

    optimalRouteReflectorGroup.EntityData.YListKeys = []string {"GroupName"}

    return &(optimalRouteReflectorGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening
// Enable route-flap dampening
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Half-life time for the penalty (minutes). The type is interface{} with
    // range: 1..45. Units are minute.
    HalfLife interface{}

    // Value to start reusing a route. The type is interface{} with range:
    // 1..20000. This attribute is mandatory.
    ReuseThreshold interface{}

    // Value to start suppressing a route. The type is interface{} with range:
    // 1..20000. This attribute is mandatory.
    SuppressThreshold interface{}

    // Maximum duration to suppress a stable route (seconds). The type is
    // interface{} with range: 1..255. This attribute is mandatory. Units are
    // second.
    SuppressTime interface{}

    // Route policy to specify criteria for dampening. This cannot be specified if
    // any other parameters are specified. The type is string.
    RoutePolicyName interface{}
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetEntityData() *types.CommonEntityData {
    dampening.EntityData.YFilter = dampening.YFilter
    dampening.EntityData.YangName = "dampening"
    dampening.EntityData.BundleName = "cisco_ios_xr"
    dampening.EntityData.ParentYangName = "vrf-global-af"
    dampening.EntityData.SegmentPath = "dampening"
    dampening.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + dampening.EntityData.SegmentPath
    dampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dampening.EntityData.Children = types.NewOrderedMap()
    dampening.EntityData.Leafs = types.NewOrderedMap()
    dampening.EntityData.Leafs.Append("half-life", types.YLeaf{"HalfLife", dampening.HalfLife})
    dampening.EntityData.Leafs.Append("reuse-threshold", types.YLeaf{"ReuseThreshold", dampening.ReuseThreshold})
    dampening.EntityData.Leafs.Append("suppress-threshold", types.YLeaf{"SuppressThreshold", dampening.SuppressThreshold})
    dampening.EntityData.Leafs.Append("suppress-time", types.YLeaf{"SuppressTime", dampening.SuppressTime})
    dampening.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", dampening.RoutePolicyName})

    dampening.EntityData.YListKeys = []string {}

    return &(dampening.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes
// Redistribute RIP routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetEntityData() *types.CommonEntityData {
    ripRoutes.EntityData.YFilter = ripRoutes.YFilter
    ripRoutes.EntityData.YangName = "rip-routes"
    ripRoutes.EntityData.BundleName = "cisco_ios_xr"
    ripRoutes.EntityData.ParentYangName = "vrf-global-af"
    ripRoutes.EntityData.SegmentPath = "rip-routes"
    ripRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + ripRoutes.EntityData.SegmentPath
    ripRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ripRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ripRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ripRoutes.EntityData.Children = types.NewOrderedMap()
    ripRoutes.EntityData.Leafs = types.NewOrderedMap()
    ripRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", ripRoutes.DefaultMetric})
    ripRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", ripRoutes.RoutePolicyName})
    ripRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", ripRoutes.NotUsed})

    ripRoutes.EntityData.YListKeys = []string {}

    return &(ripRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes
// Redistribute lisp routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetEntityData() *types.CommonEntityData {
    lispRoutes.EntityData.YFilter = lispRoutes.YFilter
    lispRoutes.EntityData.YangName = "lisp-routes"
    lispRoutes.EntityData.BundleName = "cisco_ios_xr"
    lispRoutes.EntityData.ParentYangName = "vrf-global-af"
    lispRoutes.EntityData.SegmentPath = "lisp-routes"
    lispRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + lispRoutes.EntityData.SegmentPath
    lispRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lispRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lispRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lispRoutes.EntityData.Children = types.NewOrderedMap()
    lispRoutes.EntityData.Leafs = types.NewOrderedMap()
    lispRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", lispRoutes.DefaultMetric})
    lispRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", lispRoutes.RoutePolicyName})

    lispRoutes.EntityData.YListKeys = []string {}

    return &(lispRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes
// Redistribute static routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetEntityData() *types.CommonEntityData {
    staticRoutes.EntityData.YFilter = staticRoutes.YFilter
    staticRoutes.EntityData.YangName = "static-routes"
    staticRoutes.EntityData.BundleName = "cisco_ios_xr"
    staticRoutes.EntityData.ParentYangName = "vrf-global-af"
    staticRoutes.EntityData.SegmentPath = "static-routes"
    staticRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + staticRoutes.EntityData.SegmentPath
    staticRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    staticRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    staticRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    staticRoutes.EntityData.Children = types.NewOrderedMap()
    staticRoutes.EntityData.Leafs = types.NewOrderedMap()
    staticRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", staticRoutes.DefaultMetric})
    staticRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", staticRoutes.RoutePolicyName})
    staticRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", staticRoutes.NotUsed})

    staticRoutes.EntityData.YListKeys = []string {}

    return &(staticRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance
// Define an administrative distance
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance for routes external to the AS. The type is interface{} with range:
    // 1..255. The default value is 20.
    ExternalRoutes interface{}

    // Distance for routes internal to the AS. The type is interface{} with range:
    // 1..255. The default value is 200.
    InternalRoutes interface{}

    // Distance for local routes. The type is interface{} with range: 1..255. The
    // default value is 200.
    LocalRoutes interface{}
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetEntityData() *types.CommonEntityData {
    distance.EntityData.YFilter = distance.YFilter
    distance.EntityData.YangName = "distance"
    distance.EntityData.BundleName = "cisco_ios_xr"
    distance.EntityData.ParentYangName = "vrf-global-af"
    distance.EntityData.SegmentPath = "distance"
    distance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + distance.EntityData.SegmentPath
    distance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distance.EntityData.Children = types.NewOrderedMap()
    distance.EntityData.Leafs = types.NewOrderedMap()
    distance.EntityData.Leafs.Append("external-routes", types.YLeaf{"ExternalRoutes", distance.ExternalRoutes})
    distance.EntityData.Leafs.Append("internal-routes", types.YLeaf{"InternalRoutes", distance.InternalRoutes})
    distance.EntityData.Leafs.Append("local-routes", types.YLeaf{"LocalRoutes", distance.LocalRoutes})

    distance.EntityData.YListKeys = []string {}

    return &(distance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes
// Redistribute information for Application routes.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute application routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute.
    ApplicationRoute []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetEntityData() *types.CommonEntityData {
    applicationRoutes.EntityData.YFilter = applicationRoutes.YFilter
    applicationRoutes.EntityData.YangName = "application-routes"
    applicationRoutes.EntityData.BundleName = "cisco_ios_xr"
    applicationRoutes.EntityData.ParentYangName = "vrf-global-af"
    applicationRoutes.EntityData.SegmentPath = "application-routes"
    applicationRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + applicationRoutes.EntityData.SegmentPath
    applicationRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationRoutes.EntityData.Children = types.NewOrderedMap()
    applicationRoutes.EntityData.Children.Append("application-route", types.YChild{"ApplicationRoute", nil})
    for i := range applicationRoutes.ApplicationRoute {
        applicationRoutes.EntityData.Children.Append(types.GetSegmentPath(applicationRoutes.ApplicationRoute[i]), types.YChild{"ApplicationRoute", applicationRoutes.ApplicationRoute[i]})
    }
    applicationRoutes.EntityData.Leafs = types.NewOrderedMap()

    applicationRoutes.EntityData.YListKeys = []string {}

    return &(applicationRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute
// Redistribute application routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. OnePK application name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetEntityData() *types.CommonEntityData {
    applicationRoute.EntityData.YFilter = applicationRoute.YFilter
    applicationRoute.EntityData.YangName = "application-route"
    applicationRoute.EntityData.BundleName = "cisco_ios_xr"
    applicationRoute.EntityData.ParentYangName = "application-routes"
    applicationRoute.EntityData.SegmentPath = "application-route" + types.AddKeyToken(applicationRoute.InstanceName, "instance-name")
    applicationRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/application-routes/" + applicationRoute.EntityData.SegmentPath
    applicationRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationRoute.EntityData.Children = types.NewOrderedMap()
    applicationRoute.EntityData.Leafs = types.NewOrderedMap()
    applicationRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", applicationRoute.InstanceName})
    applicationRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", applicationRoute.DefaultMetric})
    applicationRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", applicationRoute.RoutePolicyName})
    applicationRoute.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", applicationRoute.NotUsed})

    applicationRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(applicationRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode
// BGP 6PE/MPLS-VPN label allocation mode
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label allocation mode: per-ce  Set per CE label mode, per-vrf Set per VRF
    // label mode, per-prefix Set per Prefix label mode (for MPLS-VPN only). The
    // type is string.
    LabelAllocationMode interface{}

    // Label mode route policy name. The type is string.
    RoutePolicyName interface{}
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetEntityData() *types.CommonEntityData {
    labelMode.EntityData.YFilter = labelMode.YFilter
    labelMode.EntityData.YangName = "label-mode"
    labelMode.EntityData.BundleName = "cisco_ios_xr"
    labelMode.EntityData.ParentYangName = "vrf-global-af"
    labelMode.EntityData.SegmentPath = "label-mode"
    labelMode.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + labelMode.EntityData.SegmentPath
    labelMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelMode.EntityData.Children = types.NewOrderedMap()
    labelMode.EntityData.Leafs = types.NewOrderedMap()
    labelMode.EntityData.Leafs.Append("label-allocation-mode", types.YLeaf{"LabelAllocationMode", labelMode.LabelAllocationMode})
    labelMode.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", labelMode.RoutePolicyName})

    labelMode.EntityData.YListKeys = []string {}

    return &(labelMode.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes
// Redistribute information for EIGRP routes.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute EIGRP routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute.
    EigrpRoute []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetEntityData() *types.CommonEntityData {
    eigrpRoutes.EntityData.YFilter = eigrpRoutes.YFilter
    eigrpRoutes.EntityData.YangName = "eigrp-routes"
    eigrpRoutes.EntityData.BundleName = "cisco_ios_xr"
    eigrpRoutes.EntityData.ParentYangName = "vrf-global-af"
    eigrpRoutes.EntityData.SegmentPath = "eigrp-routes"
    eigrpRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + eigrpRoutes.EntityData.SegmentPath
    eigrpRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrpRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrpRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrpRoutes.EntityData.Children = types.NewOrderedMap()
    eigrpRoutes.EntityData.Children.Append("eigrp-route", types.YChild{"EigrpRoute", nil})
    for i := range eigrpRoutes.EigrpRoute {
        eigrpRoutes.EntityData.Children.Append(types.GetSegmentPath(eigrpRoutes.EigrpRoute[i]), types.YChild{"EigrpRoute", eigrpRoutes.EigrpRoute[i]})
    }
    eigrpRoutes.EntityData.Leafs = types.NewOrderedMap()

    eigrpRoutes.EntityData.YListKeys = []string {}

    return &(eigrpRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute
// Redistribute EIGRP routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. EIGRP router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes,
    // Logical combinations permitted. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetEntityData() *types.CommonEntityData {
    eigrpRoute.EntityData.YFilter = eigrpRoute.YFilter
    eigrpRoute.EntityData.YangName = "eigrp-route"
    eigrpRoute.EntityData.BundleName = "cisco_ios_xr"
    eigrpRoute.EntityData.ParentYangName = "eigrp-routes"
    eigrpRoute.EntityData.SegmentPath = "eigrp-route" + types.AddKeyToken(eigrpRoute.InstanceName, "instance-name")
    eigrpRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/eigrp-routes/" + eigrpRoute.EntityData.SegmentPath
    eigrpRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrpRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrpRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrpRoute.EntityData.Children = types.NewOrderedMap()
    eigrpRoute.EntityData.Leafs = types.NewOrderedMap()
    eigrpRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", eigrpRoute.InstanceName})
    eigrpRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", eigrpRoute.DefaultMetric})
    eigrpRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", eigrpRoute.RoutePolicyName})
    eigrpRoute.EntityData.Leafs.Append("redist-type", types.YLeaf{"RedistType", eigrpRoute.RedistType})

    eigrpRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(eigrpRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks
// Specify a network to announce via BGP
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sourced network configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork.
    SourcedNetwork []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetEntityData() *types.CommonEntityData {
    sourcedNetworks.EntityData.YFilter = sourcedNetworks.YFilter
    sourcedNetworks.EntityData.YangName = "sourced-networks"
    sourcedNetworks.EntityData.BundleName = "cisco_ios_xr"
    sourcedNetworks.EntityData.ParentYangName = "vrf-global-af"
    sourcedNetworks.EntityData.SegmentPath = "sourced-networks"
    sourcedNetworks.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + sourcedNetworks.EntityData.SegmentPath
    sourcedNetworks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourcedNetworks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourcedNetworks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourcedNetworks.EntityData.Children = types.NewOrderedMap()
    sourcedNetworks.EntityData.Children.Append("sourced-network", types.YChild{"SourcedNetwork", nil})
    for i := range sourcedNetworks.SourcedNetwork {
        sourcedNetworks.EntityData.Children.Append(types.GetSegmentPath(sourcedNetworks.SourcedNetwork[i]), types.YChild{"SourcedNetwork", sourcedNetworks.SourcedNetwork[i]})
    }
    sourcedNetworks.EntityData.Leafs = types.NewOrderedMap()

    sourcedNetworks.EntityData.YListKeys = []string {}

    return &(sourcedNetworks.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork
// Sourced network configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Network in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NetworkAddr interface{}

    // This attribute is a key. Network in prefix/length format (prefix part). The
    // type is interface{} with range: 0..128.
    NetworkPrefix interface{}

    // Specify a BGP backdoor route, default is FALSE. The type is bool.
    Backdoor interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetEntityData() *types.CommonEntityData {
    sourcedNetwork.EntityData.YFilter = sourcedNetwork.YFilter
    sourcedNetwork.EntityData.YangName = "sourced-network"
    sourcedNetwork.EntityData.BundleName = "cisco_ios_xr"
    sourcedNetwork.EntityData.ParentYangName = "sourced-networks"
    sourcedNetwork.EntityData.SegmentPath = "sourced-network" + types.AddKeyToken(sourcedNetwork.NetworkAddr, "network-addr") + types.AddKeyToken(sourcedNetwork.NetworkPrefix, "network-prefix")
    sourcedNetwork.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/sourced-networks/" + sourcedNetwork.EntityData.SegmentPath
    sourcedNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourcedNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourcedNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourcedNetwork.EntityData.Children = types.NewOrderedMap()
    sourcedNetwork.EntityData.Leafs = types.NewOrderedMap()
    sourcedNetwork.EntityData.Leafs.Append("network-addr", types.YLeaf{"NetworkAddr", sourcedNetwork.NetworkAddr})
    sourcedNetwork.EntityData.Leafs.Append("network-prefix", types.YLeaf{"NetworkPrefix", sourcedNetwork.NetworkPrefix})
    sourcedNetwork.EntityData.Leafs.Append("backdoor", types.YLeaf{"Backdoor", sourcedNetwork.Backdoor})
    sourcedNetwork.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", sourcedNetwork.RoutePolicyName})

    sourcedNetwork.EntityData.YListKeys = []string {"NetworkAddr", "NetworkPrefix"}

    return &(sourcedNetwork.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes
// Redistribute connected routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetEntityData() *types.CommonEntityData {
    connectedRoutes.EntityData.YFilter = connectedRoutes.YFilter
    connectedRoutes.EntityData.YangName = "connected-routes"
    connectedRoutes.EntityData.BundleName = "cisco_ios_xr"
    connectedRoutes.EntityData.ParentYangName = "vrf-global-af"
    connectedRoutes.EntityData.SegmentPath = "connected-routes"
    connectedRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + connectedRoutes.EntityData.SegmentPath
    connectedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoutes.EntityData.Children = types.NewOrderedMap()
    connectedRoutes.EntityData.Leafs = types.NewOrderedMap()
    connectedRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", connectedRoutes.DefaultMetric})
    connectedRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", connectedRoutes.RoutePolicyName})
    connectedRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", connectedRoutes.NotUsed})

    connectedRoutes.EntityData.YListKeys = []string {}

    return &(connectedRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel
// Label allocation policy
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether all nets should be labeled, default is FALSE. The type is bool.
    All interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Allocate label for unlabeled paths too. The type is bool.
    UnLabeledPath interface{}
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetEntityData() *types.CommonEntityData {
    allocateLabel.EntityData.YFilter = allocateLabel.YFilter
    allocateLabel.EntityData.YangName = "allocate-label"
    allocateLabel.EntityData.BundleName = "cisco_ios_xr"
    allocateLabel.EntityData.ParentYangName = "vrf-global-af"
    allocateLabel.EntityData.SegmentPath = "allocate-label"
    allocateLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + allocateLabel.EntityData.SegmentPath
    allocateLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocateLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocateLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocateLabel.EntityData.Children = types.NewOrderedMap()
    allocateLabel.EntityData.Leafs = types.NewOrderedMap()
    allocateLabel.EntityData.Leafs.Append("all", types.YLeaf{"All", allocateLabel.All})
    allocateLabel.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", allocateLabel.RoutePolicyName})
    allocateLabel.EntityData.Leafs.Append("un-labeled-path", types.YLeaf{"UnLabeledPath", allocateLabel.UnLabeledPath})

    allocateLabel.EntityData.YListKeys = []string {}

    return &(allocateLabel.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection
// Configure additional paths selection
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/disable selection . The type is BgpAfAdditionalPathsCfg.
    Selection interface{}

    // Route policy for selection. The type is string.
    RoutePolicyName interface{}
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetEntityData() *types.CommonEntityData {
    additionalPathsSelection.EntityData.YFilter = additionalPathsSelection.YFilter
    additionalPathsSelection.EntityData.YangName = "additional-paths-selection"
    additionalPathsSelection.EntityData.BundleName = "cisco_ios_xr"
    additionalPathsSelection.EntityData.ParentYangName = "vrf-global-af"
    additionalPathsSelection.EntityData.SegmentPath = "additional-paths-selection"
    additionalPathsSelection.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + additionalPathsSelection.EntityData.SegmentPath
    additionalPathsSelection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    additionalPathsSelection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    additionalPathsSelection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    additionalPathsSelection.EntityData.Children = types.NewOrderedMap()
    additionalPathsSelection.EntityData.Leafs = types.NewOrderedMap()
    additionalPathsSelection.EntityData.Leafs.Append("selection", types.YLeaf{"Selection", additionalPathsSelection.Selection})
    additionalPathsSelection.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", additionalPathsSelection.RoutePolicyName})

    additionalPathsSelection.EntityData.YListKeys = []string {}

    return &(additionalPathsSelection.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes
// Redistribute information for OSPF routes.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute OSPF routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute.
    OspfRoute []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetEntityData() *types.CommonEntityData {
    ospfRoutes.EntityData.YFilter = ospfRoutes.YFilter
    ospfRoutes.EntityData.YangName = "ospf-routes"
    ospfRoutes.EntityData.BundleName = "cisco_ios_xr"
    ospfRoutes.EntityData.ParentYangName = "vrf-global-af"
    ospfRoutes.EntityData.SegmentPath = "ospf-routes"
    ospfRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + ospfRoutes.EntityData.SegmentPath
    ospfRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfRoutes.EntityData.Children = types.NewOrderedMap()
    ospfRoutes.EntityData.Children.Append("ospf-route", types.YChild{"OspfRoute", nil})
    for i := range ospfRoutes.OspfRoute {
        ospfRoutes.EntityData.Children.Append(types.GetSegmentPath(ospfRoutes.OspfRoute[i]), types.YChild{"OspfRoute", ospfRoutes.OspfRoute[i]})
    }
    ospfRoutes.EntityData.Leafs = types.NewOrderedMap()

    ospfRoutes.EntityData.YListKeys = []string {}

    return &(ospfRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute
// Redistribute OSPF routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. OSPF router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes of type
    // 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1,
    // 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA
    // external routes.  Logical combinations permitted. The type is string with
    // pattern: [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetEntityData() *types.CommonEntityData {
    ospfRoute.EntityData.YFilter = ospfRoute.YFilter
    ospfRoute.EntityData.YangName = "ospf-route"
    ospfRoute.EntityData.BundleName = "cisco_ios_xr"
    ospfRoute.EntityData.ParentYangName = "ospf-routes"
    ospfRoute.EntityData.SegmentPath = "ospf-route" + types.AddKeyToken(ospfRoute.InstanceName, "instance-name")
    ospfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/ospf-routes/" + ospfRoute.EntityData.SegmentPath
    ospfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfRoute.EntityData.Children = types.NewOrderedMap()
    ospfRoute.EntityData.Leafs = types.NewOrderedMap()
    ospfRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", ospfRoute.InstanceName})
    ospfRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", ospfRoute.DefaultMetric})
    ospfRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", ospfRoute.RoutePolicyName})
    ospfRoute.EntityData.Leafs.Append("redist-type", types.YLeaf{"RedistType", ospfRoute.RedistType})

    ospfRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(ospfRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes
// Redistribute mobile routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetEntityData() *types.CommonEntityData {
    mobileRoutes.EntityData.YFilter = mobileRoutes.YFilter
    mobileRoutes.EntityData.YangName = "mobile-routes"
    mobileRoutes.EntityData.BundleName = "cisco_ios_xr"
    mobileRoutes.EntityData.ParentYangName = "vrf-global-af"
    mobileRoutes.EntityData.SegmentPath = "mobile-routes"
    mobileRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + mobileRoutes.EntityData.SegmentPath
    mobileRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mobileRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mobileRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mobileRoutes.EntityData.Children = types.NewOrderedMap()
    mobileRoutes.EntityData.Leafs = types.NewOrderedMap()
    mobileRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", mobileRoutes.DefaultMetric})
    mobileRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", mobileRoutes.RoutePolicyName})
    mobileRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", mobileRoutes.NotUsed})

    mobileRoutes.EntityData.YListKeys = []string {}

    return &(mobileRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes
// Redistribute subscriber routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetEntityData() *types.CommonEntityData {
    subscriberRoutes.EntityData.YFilter = subscriberRoutes.YFilter
    subscriberRoutes.EntityData.YangName = "subscriber-routes"
    subscriberRoutes.EntityData.BundleName = "cisco_ios_xr"
    subscriberRoutes.EntityData.ParentYangName = "vrf-global-af"
    subscriberRoutes.EntityData.SegmentPath = "subscriber-routes"
    subscriberRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/vrf-global-afs/vrf-global-af/" + subscriberRoutes.EntityData.SegmentPath
    subscriberRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberRoutes.EntityData.Children = types.NewOrderedMap()
    subscriberRoutes.EntityData.Leafs = types.NewOrderedMap()
    subscriberRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", subscriberRoutes.DefaultMetric})
    subscriberRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", subscriberRoutes.RoutePolicyName})
    subscriberRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", subscriberRoutes.NotUsed})

    subscriberRoutes.EntityData.YListKeys = []string {}

    return &(subscriberRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces
// Configure list of MPLS activated interfaces
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a MPLS activated interface. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface.
    MplsActivatedInterface []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetEntityData() *types.CommonEntityData {
    mplsActivatedInterfaces.EntityData.YFilter = mplsActivatedInterfaces.YFilter
    mplsActivatedInterfaces.EntityData.YangName = "mpls-activated-interfaces"
    mplsActivatedInterfaces.EntityData.BundleName = "cisco_ios_xr"
    mplsActivatedInterfaces.EntityData.ParentYangName = "vrf-global"
    mplsActivatedInterfaces.EntityData.SegmentPath = "mpls-activated-interfaces"
    mplsActivatedInterfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + mplsActivatedInterfaces.EntityData.SegmentPath
    mplsActivatedInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsActivatedInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsActivatedInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsActivatedInterfaces.EntityData.Children = types.NewOrderedMap()
    mplsActivatedInterfaces.EntityData.Children.Append("mpls-activated-interface", types.YChild{"MplsActivatedInterface", nil})
    for i := range mplsActivatedInterfaces.MplsActivatedInterface {
        mplsActivatedInterfaces.EntityData.Children.Append(types.GetSegmentPath(mplsActivatedInterfaces.MplsActivatedInterface[i]), types.YChild{"MplsActivatedInterface", mplsActivatedInterfaces.MplsActivatedInterface[i]})
    }
    mplsActivatedInterfaces.EntityData.Leafs = types.NewOrderedMap()

    mplsActivatedInterfaces.EntityData.YListKeys = []string {}

    return &(mplsActivatedInterfaces.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface
// Configure a MPLS activated interface
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetEntityData() *types.CommonEntityData {
    mplsActivatedInterface.EntityData.YFilter = mplsActivatedInterface.YFilter
    mplsActivatedInterface.EntityData.YangName = "mpls-activated-interface"
    mplsActivatedInterface.EntityData.BundleName = "cisco_ios_xr"
    mplsActivatedInterface.EntityData.ParentYangName = "mpls-activated-interfaces"
    mplsActivatedInterface.EntityData.SegmentPath = "mpls-activated-interface" + types.AddKeyToken(mplsActivatedInterface.InterfaceName, "interface-name")
    mplsActivatedInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/mpls-activated-interfaces/" + mplsActivatedInterface.EntityData.SegmentPath
    mplsActivatedInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsActivatedInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsActivatedInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsActivatedInterface.EntityData.Children = types.NewOrderedMap()
    mplsActivatedInterface.EntityData.Leafs = types.NewOrderedMap()
    mplsActivatedInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", mplsActivatedInterface.InterfaceName})

    mplsActivatedInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(mplsActivatedInterface.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers
// Adjust routing timers.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval (seconds). The type is interface{} with range: 0..65535.
    // Units are second. The default value is 60.
    Keepalive interface{}

    // Hold time (seconds).  Specify 0 to disable keepalives/hold time. The type
    // is interface{} with range: 0..65535. Units are second. The default value is
    // 180.
    HoldTime interface{}

    // Minimum acceptable hold time (seconds). Specify 0 to disable
    // keepalives/hold time. The type is interface{} with range: 0..65535. Units
    // are second. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetEntityData() *types.CommonEntityData {
    globalTimers.EntityData.YFilter = globalTimers.YFilter
    globalTimers.EntityData.YangName = "global-timers"
    globalTimers.EntityData.BundleName = "cisco_ios_xr"
    globalTimers.EntityData.ParentYangName = "vrf-global"
    globalTimers.EntityData.SegmentPath = "global-timers"
    globalTimers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + globalTimers.EntityData.SegmentPath
    globalTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalTimers.EntityData.Children = types.NewOrderedMap()
    globalTimers.EntityData.Leafs = types.NewOrderedMap()
    globalTimers.EntityData.Leafs.Append("keepalive", types.YLeaf{"Keepalive", globalTimers.Keepalive})
    globalTimers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", globalTimers.HoldTime})
    globalTimers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", globalTimers.MinAcceptHoldTime})

    globalTimers.EntityData.YListKeys = []string {}

    return &(globalTimers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd
// BFD configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    DetectionMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "vrf-global"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + bfd.EntityData.SegmentPath
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = types.NewOrderedMap()
    bfd.EntityData.Leafs = types.NewOrderedMap()
    bfd.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier})
    bfd.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", bfd.Interval})

    bfd.EntityData.YListKeys = []string {}

    return &(bfd.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes
// set socket parameters
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP Write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetEntityData() *types.CommonEntityData {
    sendSocketBufferSizes.EntityData.YFilter = sendSocketBufferSizes.YFilter
    sendSocketBufferSizes.EntityData.YangName = "send-socket-buffer-sizes"
    sendSocketBufferSizes.EntityData.BundleName = "cisco_ios_xr"
    sendSocketBufferSizes.EntityData.ParentYangName = "vrf-global"
    sendSocketBufferSizes.EntityData.SegmentPath = "send-socket-buffer-sizes"
    sendSocketBufferSizes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + sendSocketBufferSizes.EntityData.SegmentPath
    sendSocketBufferSizes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendSocketBufferSizes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendSocketBufferSizes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendSocketBufferSizes.EntityData.Children = types.NewOrderedMap()
    sendSocketBufferSizes.EntityData.Leafs = types.NewOrderedMap()
    sendSocketBufferSizes.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendSocketBufferSizes.SocketSendSize})
    sendSocketBufferSizes.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendSocketBufferSizes.BgpSendSize})

    sendSocketBufferSizes.EntityData.YListKeys = []string {}

    return &(sendSocketBufferSizes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes
// Set socket and BGP receive buffer sizes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP Read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetEntityData() *types.CommonEntityData {
    receiveSocketBufferSizes.EntityData.YFilter = receiveSocketBufferSizes.YFilter
    receiveSocketBufferSizes.EntityData.YangName = "receive-socket-buffer-sizes"
    receiveSocketBufferSizes.EntityData.BundleName = "cisco_ios_xr"
    receiveSocketBufferSizes.EntityData.ParentYangName = "vrf-global"
    receiveSocketBufferSizes.EntityData.SegmentPath = "receive-socket-buffer-sizes"
    receiveSocketBufferSizes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-global/" + receiveSocketBufferSizes.EntityData.SegmentPath
    receiveSocketBufferSizes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveSocketBufferSizes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveSocketBufferSizes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveSocketBufferSizes.EntityData.Children = types.NewOrderedMap()
    receiveSocketBufferSizes.EntityData.Leafs = types.NewOrderedMap()
    receiveSocketBufferSizes.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveSocketBufferSizes.SocketReceiveSize})
    receiveSocketBufferSizes.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveSocketBufferSizes.BgpReceiveSize})

    receiveSocketBufferSizes.EntityData.YListKeys = []string {}

    return &(receiveSocketBufferSizes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors
// BGP VRF peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A particular VRF peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor.
    VrfNeighbor []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor

    // A particular VRF peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength.
    VrfNeighborPrefixLength []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetEntityData() *types.CommonEntityData {
    vrfNeighbors.EntityData.YFilter = vrfNeighbors.YFilter
    vrfNeighbors.EntityData.YangName = "vrf-neighbors"
    vrfNeighbors.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighbors.EntityData.ParentYangName = "vrf"
    vrfNeighbors.EntityData.SegmentPath = "vrf-neighbors"
    vrfNeighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/" + vrfNeighbors.EntityData.SegmentPath
    vrfNeighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighbors.EntityData.Children = types.NewOrderedMap()
    vrfNeighbors.EntityData.Children.Append("vrf-neighbor", types.YChild{"VrfNeighbor", nil})
    for i := range vrfNeighbors.VrfNeighbor {
        vrfNeighbors.EntityData.Children.Append(types.GetSegmentPath(vrfNeighbors.VrfNeighbor[i]), types.YChild{"VrfNeighbor", vrfNeighbors.VrfNeighbor[i]})
    }
    vrfNeighbors.EntityData.Children.Append("vrf-neighbor-prefix-length", types.YChild{"VrfNeighborPrefixLength", nil})
    for i := range vrfNeighbors.VrfNeighborPrefixLength {
        vrfNeighbors.EntityData.Children.Append(types.GetSegmentPath(vrfNeighbors.VrfNeighborPrefixLength[i]), types.YChild{"VrfNeighborPrefixLength", vrfNeighbors.VrfNeighborPrefixLength[i]})
    }
    vrfNeighbors.EntityData.Leafs = types.NewOrderedMap()

    vrfNeighbors.EntityData.YListKeys = []string {}

    return &(vrfNeighbors.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor
// A particular VRF peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is BgpNbrgr.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability. FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // Address family type of a VRF neighbor.
    VrfNeighborAfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut

    // Set or disable AO based authentication.
    AoKeychain Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AoKeychain

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetEntityData() *types.CommonEntityData {
    vrfNeighbor.EntityData.YFilter = vrfNeighbor.YFilter
    vrfNeighbor.EntityData.YangName = "vrf-neighbor"
    vrfNeighbor.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighbor.EntityData.ParentYangName = "vrf-neighbors"
    vrfNeighbor.EntityData.SegmentPath = "vrf-neighbor" + types.AddKeyToken(vrfNeighbor.NeighborAddress, "neighbor-address")
    vrfNeighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/" + vrfNeighbor.EntityData.SegmentPath
    vrfNeighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighbor.EntityData.Children = types.NewOrderedMap()
    vrfNeighbor.EntityData.Children.Append("vrf-neighbor-afs", types.YChild{"VrfNeighborAfs", &vrfNeighbor.VrfNeighborAfs})
    vrfNeighbor.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &vrfNeighbor.LocalAddress})
    vrfNeighbor.EntityData.Children.Append("bmp-activates", types.YChild{"BmpActivates", &vrfNeighbor.BmpActivates})
    vrfNeighbor.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &vrfNeighbor.EbgpMultihop})
    vrfNeighbor.EntityData.Children.Append("remote-as", types.YChild{"RemoteAs", &vrfNeighbor.RemoteAs})
    vrfNeighbor.EntityData.Children.Append("local-as", types.YChild{"LocalAs", &vrfNeighbor.LocalAs})
    vrfNeighbor.EntityData.Children.Append("password", types.YChild{"Password", &vrfNeighbor.Password})
    vrfNeighbor.EntityData.Children.Append("advertisement-interval", types.YChild{"AdvertisementInterval", &vrfNeighbor.AdvertisementInterval})
    vrfNeighbor.EntityData.Children.Append("neighbor-cluster-id", types.YChild{"NeighborClusterId", &vrfNeighbor.NeighborClusterId})
    vrfNeighbor.EntityData.Children.Append("tcpmss", types.YChild{"Tcpmss", &vrfNeighbor.Tcpmss})
    vrfNeighbor.EntityData.Children.Append("tos", types.YChild{"Tos", &vrfNeighbor.Tos})
    vrfNeighbor.EntityData.Children.Append("update-in-filtering", types.YChild{"UpdateInFiltering", &vrfNeighbor.UpdateInFiltering})
    vrfNeighbor.EntityData.Children.Append("msg-log-out", types.YChild{"MsgLogOut", &vrfNeighbor.MsgLogOut})
    vrfNeighbor.EntityData.Children.Append("ao-keychain", types.YChild{"AoKeychain", &vrfNeighbor.AoKeychain})
    vrfNeighbor.EntityData.Children.Append("receive-buffer-size", types.YChild{"ReceiveBufferSize", &vrfNeighbor.ReceiveBufferSize})
    vrfNeighbor.EntityData.Children.Append("msg-log-in", types.YChild{"MsgLogIn", &vrfNeighbor.MsgLogIn})
    vrfNeighbor.EntityData.Children.Append("send-buffer-size", types.YChild{"SendBufferSize", &vrfNeighbor.SendBufferSize})
    vrfNeighbor.EntityData.Children.Append("timers", types.YChild{"Timers", &vrfNeighbor.Timers})
    vrfNeighbor.EntityData.Children.Append("keychain", types.YChild{"Keychain", &vrfNeighbor.Keychain})
    vrfNeighbor.EntityData.Children.Append("graceful-maintenance", types.YChild{"GracefulMaintenance", &vrfNeighbor.GracefulMaintenance})
    vrfNeighbor.EntityData.Leafs = types.NewOrderedMap()
    vrfNeighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", vrfNeighbor.NeighborAddress})
    vrfNeighbor.EntityData.Leafs.Append("internal-vpn-client-ibgp-ce", types.YLeaf{"InternalVpnClientIbgpCe", vrfNeighbor.InternalVpnClientIbgpCe})
    vrfNeighbor.EntityData.Leafs.Append("session-group-add-member", types.YLeaf{"SessionGroupAddMember", vrfNeighbor.SessionGroupAddMember})
    vrfNeighbor.EntityData.Leafs.Append("egress-peer-engineering", types.YLeaf{"EgressPeerEngineering", vrfNeighbor.EgressPeerEngineering})
    vrfNeighbor.EntityData.Leafs.Append("neighbor-graceful-restart-stalepath-time", types.YLeaf{"NeighborGracefulRestartStalepathTime", vrfNeighbor.NeighborGracefulRestartStalepathTime})
    vrfNeighbor.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", vrfNeighbor.Shutdown})
    vrfNeighbor.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNeighbor.Description})
    vrfNeighbor.EntityData.Leafs.Append("neighbor-group-add-member", types.YLeaf{"NeighborGroupAddMember", vrfNeighbor.NeighborGroupAddMember})
    vrfNeighbor.EntityData.Leafs.Append("ebgp-recv-dmz", types.YLeaf{"EbgpRecvDmz", vrfNeighbor.EbgpRecvDmz})
    vrfNeighbor.EntityData.Leafs.Append("neighbor-graceful-restart", types.YLeaf{"NeighborGracefulRestart", vrfNeighbor.NeighborGracefulRestart})
    vrfNeighbor.EntityData.Leafs.Append("enforce-first-as", types.YLeaf{"EnforceFirstAs", vrfNeighbor.EnforceFirstAs})
    vrfNeighbor.EntityData.Leafs.Append("idle-watch-time", types.YLeaf{"IdleWatchTime", vrfNeighbor.IdleWatchTime})
    vrfNeighbor.EntityData.Leafs.Append("session-open-mode", types.YLeaf{"SessionOpenMode", vrfNeighbor.SessionOpenMode})
    vrfNeighbor.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", vrfNeighbor.RpkiOriginAsValidationDisable})
    vrfNeighbor.EntityData.Leafs.Append("ebgp-send-dmz-enable-modes", types.YLeaf{"EbgpSendDmzEnableModes", vrfNeighbor.EbgpSendDmzEnableModes})
    vrfNeighbor.EntityData.Leafs.Append("suppress-all-capabilities", types.YLeaf{"SuppressAllCapabilities", vrfNeighbor.SuppressAllCapabilities})
    vrfNeighbor.EntityData.Leafs.Append("max-peers", types.YLeaf{"MaxPeers", vrfNeighbor.MaxPeers})
    vrfNeighbor.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", vrfNeighbor.RpkiBestpathOriginAsAllowInvalid})
    vrfNeighbor.EntityData.Leafs.Append("additional-paths-send-capability", types.YLeaf{"AdditionalPathsSendCapability", vrfNeighbor.AdditionalPathsSendCapability})
    vrfNeighbor.EntityData.Leafs.Append("propagate-dmz-link-bandwidth", types.YLeaf{"PropagateDmzLinkBandwidth", vrfNeighbor.PropagateDmzLinkBandwidth})
    vrfNeighbor.EntityData.Leafs.Append("bfd-enable-modes", types.YLeaf{"BfdEnableModes", vrfNeighbor.BfdEnableModes})
    vrfNeighbor.EntityData.Leafs.Append("ttl-security", types.YLeaf{"TtlSecurity", vrfNeighbor.TtlSecurity})
    vrfNeighbor.EntityData.Leafs.Append("neighbor-graceful-restart-time", types.YLeaf{"NeighborGracefulRestartTime", vrfNeighbor.NeighborGracefulRestartTime})
    vrfNeighbor.EntityData.Leafs.Append("bfd-multiplier", types.YLeaf{"BfdMultiplier", vrfNeighbor.BfdMultiplier})
    vrfNeighbor.EntityData.Leafs.Append("bfd-minimum-interval", types.YLeaf{"BfdMinimumInterval", vrfNeighbor.BfdMinimumInterval})
    vrfNeighbor.EntityData.Leafs.Append("remote-as-list", types.YLeaf{"RemoteAsList", vrfNeighbor.RemoteAsList})
    vrfNeighbor.EntityData.Leafs.Append("additional-paths-receive-capability", types.YLeaf{"AdditionalPathsReceiveCapability", vrfNeighbor.AdditionalPathsReceiveCapability})
    vrfNeighbor.EntityData.Leafs.Append("ignore-connected-check-ebgp", types.YLeaf{"IgnoreConnectedCheckEbgp", vrfNeighbor.IgnoreConnectedCheckEbgp})
    vrfNeighbor.EntityData.Leafs.Append("suppress-four-byte-as-capability", types.YLeaf{"SuppressFourByteAsCapability", vrfNeighbor.SuppressFourByteAsCapability})
    vrfNeighbor.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", vrfNeighbor.UpdateSourceInterface})

    vrfNeighbor.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(vrfNeighbor.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family type of a VRF neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf.
    VrfNeighborAf []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetEntityData() *types.CommonEntityData {
    vrfNeighborAfs.EntityData.YFilter = vrfNeighborAfs.YFilter
    vrfNeighborAfs.EntityData.YangName = "vrf-neighbor-afs"
    vrfNeighborAfs.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighborAfs.EntityData.ParentYangName = "vrf-neighbor"
    vrfNeighborAfs.EntityData.SegmentPath = "vrf-neighbor-afs"
    vrfNeighborAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + vrfNeighborAfs.EntityData.SegmentPath
    vrfNeighborAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighborAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighborAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighborAfs.EntityData.Children = types.NewOrderedMap()
    vrfNeighborAfs.EntityData.Children.Append("vrf-neighbor-af", types.YChild{"VrfNeighborAf", nil})
    for i := range vrfNeighborAfs.VrfNeighborAf {
        vrfNeighborAfs.EntityData.Children.Append(types.GetSegmentPath(vrfNeighborAfs.VrfNeighborAf[i]), types.YChild{"VrfNeighborAf", vrfNeighborAfs.VrfNeighborAf[i]})
    }
    vrfNeighborAfs.EntityData.Leafs = types.NewOrderedMap()

    vrfNeighborAfs.EntityData.YListKeys = []string {}

    return &(vrfNeighborAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group. FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT. FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client. FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Name of the ORR group this neighbor is going to be part of. The type is
    // string.
    OptimalRouteReflectionGroup interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetEntityData() *types.CommonEntityData {
    vrfNeighborAf.EntityData.YFilter = vrfNeighborAf.YFilter
    vrfNeighborAf.EntityData.YangName = "vrf-neighbor-af"
    vrfNeighborAf.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighborAf.EntityData.ParentYangName = "vrf-neighbor-afs"
    vrfNeighborAf.EntityData.SegmentPath = "vrf-neighbor-af" + types.AddKeyToken(vrfNeighborAf.AfName, "af-name")
    vrfNeighborAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/" + vrfNeighborAf.EntityData.SegmentPath
    vrfNeighborAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighborAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighborAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighborAf.EntityData.Children = types.NewOrderedMap()
    vrfNeighborAf.EntityData.Children.Append("aigp-cost-community", types.YChild{"AigpCostCommunity", &vrfNeighborAf.AigpCostCommunity})
    vrfNeighborAf.EntityData.Children.Append("advertise-def-imp-disable-v6", types.YChild{"AdvertiseDefImpDisableV6", &vrfNeighborAf.AdvertiseDefImpDisableV6})
    vrfNeighborAf.EntityData.Children.Append("advertise-disable", types.YChild{"AdvertiseDisable", &vrfNeighborAf.AdvertiseDisable})
    vrfNeighborAf.EntityData.Children.Append("maximum-prefixes", types.YChild{"MaximumPrefixes", &vrfNeighborAf.MaximumPrefixes})
    vrfNeighborAf.EntityData.Children.Append("remove-private-as-entire-as-path-inbound", types.YChild{"RemovePrivateAsEntireAsPathInbound", &vrfNeighborAf.RemovePrivateAsEntireAsPathInbound})
    vrfNeighborAf.EntityData.Children.Append("advertise-def-imp-disable-v4", types.YChild{"AdvertiseDefImpDisableV4", &vrfNeighborAf.AdvertiseDefImpDisableV4})
    vrfNeighborAf.EntityData.Children.Append("advertise-l2vpn-evpn", types.YChild{"AdvertiseL2vpnEvpn", &vrfNeighborAf.AdvertiseL2vpnEvpn})
    vrfNeighborAf.EntityData.Children.Append("advertise-local-l2vpn-evpn", types.YChild{"AdvertiseLocalL2vpnEvpn", &vrfNeighborAf.AdvertiseLocalL2vpnEvpn})
    vrfNeighborAf.EntityData.Children.Append("neighbor-af-long-lived-graceful-restart-stale-time", types.YChild{"NeighborAfLongLivedGracefulRestartStaleTime", &vrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime})
    vrfNeighborAf.EntityData.Children.Append("site-of-origin", types.YChild{"SiteOfOrigin", &vrfNeighborAf.SiteOfOrigin})
    vrfNeighborAf.EntityData.Children.Append("advertise-v6", types.YChild{"AdvertiseV6", &vrfNeighborAf.AdvertiseV6})
    vrfNeighborAf.EntityData.Children.Append("advertise-local-v6", types.YChild{"AdvertiseLocalV6", &vrfNeighborAf.AdvertiseLocalV6})
    vrfNeighborAf.EntityData.Children.Append("import", types.YChild{"Import", &vrfNeighborAf.Import})
    vrfNeighborAf.EntityData.Children.Append("default-originate", types.YChild{"DefaultOriginate", &vrfNeighborAf.DefaultOriginate})
    vrfNeighborAf.EntityData.Children.Append("soft-reconfiguration", types.YChild{"SoftReconfiguration", &vrfNeighborAf.SoftReconfiguration})
    vrfNeighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v6", types.YChild{"AdvertiseVrfImpDisableV6", &vrfNeighborAf.AdvertiseVrfImpDisableV6})
    vrfNeighborAf.EntityData.Children.Append("advertise-v4", types.YChild{"AdvertiseV4", &vrfNeighborAf.AdvertiseV4})
    vrfNeighborAf.EntityData.Children.Append("advertise-local-v4", types.YChild{"AdvertiseLocalV4", &vrfNeighborAf.AdvertiseLocalV4})
    vrfNeighborAf.EntityData.Children.Append("remove-private-as-entire-as-path", types.YChild{"RemovePrivateAsEntireAsPath", &vrfNeighborAf.RemovePrivateAsEntireAsPath})
    vrfNeighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v4", types.YChild{"AdvertiseVrfImpDisableV4", &vrfNeighborAf.AdvertiseVrfImpDisableV4})
    vrfNeighborAf.EntityData.Leafs = types.NewOrderedMap()
    vrfNeighborAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", vrfNeighborAf.AfName})
    vrfNeighborAf.EntityData.Leafs.Append("neighbor-af-long-lived-graceful-restart-capable", types.YLeaf{"NeighborAfLongLivedGracefulRestartCapable", vrfNeighborAf.NeighborAfLongLivedGracefulRestartCapable})
    vrfNeighborAf.EntityData.Leafs.Append("send-ext-community-ebgp", types.YLeaf{"SendExtCommunityEbgp", vrfNeighborAf.SendExtCommunityEbgp})
    vrfNeighborAf.EntityData.Leafs.Append("accept-route-legacy-rt", types.YLeaf{"AcceptRouteLegacyRt", vrfNeighborAf.AcceptRouteLegacyRt})
    vrfNeighborAf.EntityData.Leafs.Append("send-community-ebgp", types.YLeaf{"SendCommunityEbgp", vrfNeighborAf.SendCommunityEbgp})
    vrfNeighborAf.EntityData.Leafs.Append("next-hop-unchanged", types.YLeaf{"NextHopUnchanged", vrfNeighborAf.NextHopUnchanged})
    vrfNeighborAf.EntityData.Leafs.Append("advertise-local-labeled-route", types.YLeaf{"AdvertiseLocalLabeledRoute", vrfNeighborAf.AdvertiseLocalLabeledRoute})
    vrfNeighborAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", vrfNeighborAf.RpkiOriginAsValidationDisable})
    vrfNeighborAf.EntityData.Leafs.Append("flowspec-validation", types.YLeaf{"FlowspecValidation", vrfNeighborAf.FlowspecValidation})
    vrfNeighborAf.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", vrfNeighborAf.EncapsulationType})
    vrfNeighborAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", vrfNeighborAf.RpkiBestpathOriginAsAllowInvalid})
    vrfNeighborAf.EntityData.Leafs.Append("enforce-multiple-labels", types.YLeaf{"EnforceMultipleLabels", vrfNeighborAf.EnforceMultipleLabels})
    vrfNeighborAf.EntityData.Leafs.Append("as-override", types.YLeaf{"AsOverride", vrfNeighborAf.AsOverride})
    vrfNeighborAf.EntityData.Leafs.Append("multipath", types.YLeaf{"Multipath", vrfNeighborAf.Multipath})
    vrfNeighborAf.EntityData.Leafs.Append("send-community-ebgp-graceful-shutdown", types.YLeaf{"SendCommunityEbgpGracefulShutdown", vrfNeighborAf.SendCommunityEbgpGracefulShutdown})
    vrfNeighborAf.EntityData.Leafs.Append("activate", types.YLeaf{"Activate", vrfNeighborAf.Activate})
    vrfNeighborAf.EntityData.Leafs.Append("prefix-orf-policy", types.YLeaf{"PrefixOrfPolicy", vrfNeighborAf.PrefixOrfPolicy})
    vrfNeighborAf.EntityData.Leafs.Append("aigp", types.YLeaf{"Aigp", vrfNeighborAf.Aigp})
    vrfNeighborAf.EntityData.Leafs.Append("aigp-send-med", types.YLeaf{"AigpSendMed", vrfNeighborAf.AigpSendMed})
    vrfNeighborAf.EntityData.Leafs.Append("allow-as-in", types.YLeaf{"AllowAsIn", vrfNeighborAf.AllowAsIn})
    vrfNeighborAf.EntityData.Leafs.Append("advertise-orf", types.YLeaf{"AdvertiseOrf", vrfNeighborAf.AdvertiseOrf})
    vrfNeighborAf.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", vrfNeighborAf.RouteReflectorClient})
    vrfNeighborAf.EntityData.Leafs.Append("next-hop-self", types.YLeaf{"NextHopSelf", vrfNeighborAf.NextHopSelf})
    vrfNeighborAf.EntityData.Leafs.Append("route-policy-in", types.YLeaf{"RoutePolicyIn", vrfNeighborAf.RoutePolicyIn})
    vrfNeighborAf.EntityData.Leafs.Append("default-weight", types.YLeaf{"DefaultWeight", vrfNeighborAf.DefaultWeight})
    vrfNeighborAf.EntityData.Leafs.Append("af-group", types.YLeaf{"AfGroup", vrfNeighborAf.AfGroup})
    vrfNeighborAf.EntityData.Leafs.Append("next-hop-unchanged-multipath", types.YLeaf{"NextHopUnchangedMultipath", vrfNeighborAf.NextHopUnchangedMultipath})
    vrfNeighborAf.EntityData.Leafs.Append("optimal-route-reflection-group", types.YLeaf{"OptimalRouteReflectionGroup", vrfNeighborAf.OptimalRouteReflectionGroup})
    vrfNeighborAf.EntityData.Leafs.Append("accept-own", types.YLeaf{"AcceptOwn", vrfNeighborAf.AcceptOwn})
    vrfNeighborAf.EntityData.Leafs.Append("route-policy-out", types.YLeaf{"RoutePolicyOut", vrfNeighborAf.RoutePolicyOut})
    vrfNeighborAf.EntityData.Leafs.Append("advertise-permanent-network", types.YLeaf{"AdvertisePermanentNetwork", vrfNeighborAf.AdvertisePermanentNetwork})

    vrfNeighborAf.EntityData.YListKeys = []string {"AfName"}

    return &(vrfNeighborAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetEntityData() *types.CommonEntityData {
    aigpCostCommunity.EntityData.YFilter = aigpCostCommunity.YFilter
    aigpCostCommunity.EntityData.YangName = "aigp-cost-community"
    aigpCostCommunity.EntityData.BundleName = "cisco_ios_xr"
    aigpCostCommunity.EntityData.ParentYangName = "vrf-neighbor-af"
    aigpCostCommunity.EntityData.SegmentPath = "aigp-cost-community"
    aigpCostCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + aigpCostCommunity.EntityData.SegmentPath
    aigpCostCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aigpCostCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aigpCostCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aigpCostCommunity.EntityData.Children = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", aigpCostCommunity.Enable})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-id", types.YLeaf{"CostCommunityId", aigpCostCommunity.CostCommunityId})
    aigpCostCommunity.EntityData.Leafs.Append("transitive", types.YLeaf{"Transitive", aigpCostCommunity.Transitive})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-poi-type", types.YLeaf{"CostCommunityPoiType", aigpCostCommunity.CostCommunityPoiType})

    aigpCostCommunity.EntityData.YListKeys = []string {}

    return &(aigpCostCommunity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV6.EntityData.YFilter = advertiseDefImpDisableV6.YFilter
    advertiseDefImpDisableV6.EntityData.YangName = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseDefImpDisableV6.EntityData.SegmentPath = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseDefImpDisableV6.EntityData.SegmentPath
    advertiseDefImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV6.AfName})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV6.AdvOption})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV6.RtType})

    advertiseDefImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetEntityData() *types.CommonEntityData {
    advertiseDisable.EntityData.YFilter = advertiseDisable.YFilter
    advertiseDisable.EntityData.YangName = "advertise-disable"
    advertiseDisable.EntityData.BundleName = "cisco_ios_xr"
    advertiseDisable.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseDisable.EntityData.SegmentPath = "advertise-disable"
    advertiseDisable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseDisable.EntityData.SegmentPath
    advertiseDisable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDisable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDisable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDisable.EntityData.Children = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDisable.AfName})
    advertiseDisable.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseDisable.ReorgOption})
    advertiseDisable.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDisable.RtType})

    advertiseDisable.EntityData.YListKeys = []string {}

    return &(advertiseDisable.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetEntityData() *types.CommonEntityData {
    maximumPrefixes.EntityData.YFilter = maximumPrefixes.YFilter
    maximumPrefixes.EntityData.YangName = "maximum-prefixes"
    maximumPrefixes.EntityData.BundleName = "cisco_ios_xr"
    maximumPrefixes.EntityData.ParentYangName = "vrf-neighbor-af"
    maximumPrefixes.EntityData.SegmentPath = "maximum-prefixes"
    maximumPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + maximumPrefixes.EntityData.SegmentPath
    maximumPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumPrefixes.EntityData.Children = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs.Append("prefix-limit", types.YLeaf{"PrefixLimit", maximumPrefixes.PrefixLimit})
    maximumPrefixes.EntityData.Leafs.Append("warning-percentage", types.YLeaf{"WarningPercentage", maximumPrefixes.WarningPercentage})
    maximumPrefixes.EntityData.Leafs.Append("warning-only", types.YLeaf{"WarningOnly", maximumPrefixes.WarningOnly})
    maximumPrefixes.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", maximumPrefixes.RestartTime})
    maximumPrefixes.EntityData.Leafs.Append("discard-extra-paths", types.YLeaf{"DiscardExtraPaths", maximumPrefixes.DiscardExtraPaths})

    maximumPrefixes.EntityData.YListKeys = []string {}

    return &(maximumPrefixes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPathInbound.EntityData.YFilter = removePrivateAsEntireAsPathInbound.YFilter
    removePrivateAsEntireAsPathInbound.EntityData.YangName = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPathInbound.EntityData.ParentYangName = "vrf-neighbor-af"
    removePrivateAsEntireAsPathInbound.EntityData.SegmentPath = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + removePrivateAsEntireAsPathInbound.EntityData.SegmentPath
    removePrivateAsEntireAsPathInbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPathInbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPathInbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPathInbound.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPathInbound.Enable})
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPathInbound.Entire})

    removePrivateAsEntireAsPathInbound.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPathInbound.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV4.EntityData.YFilter = advertiseDefImpDisableV4.YFilter
    advertiseDefImpDisableV4.EntityData.YangName = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseDefImpDisableV4.EntityData.SegmentPath = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseDefImpDisableV4.EntityData.SegmentPath
    advertiseDefImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV4.AfName})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV4.AdvOption})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV4.RtType})

    advertiseDefImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseL2vpnEvpn.EntityData.YFilter = advertiseL2vpnEvpn.YFilter
    advertiseL2vpnEvpn.EntityData.YangName = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseL2vpnEvpn.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseL2vpnEvpn.EntityData.SegmentPath = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseL2vpnEvpn.EntityData.SegmentPath
    advertiseL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseL2vpnEvpn.AfName})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseL2vpnEvpn.ReorgOption})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseL2vpnEvpn.RtType})

    advertiseL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseLocalL2vpnEvpn.EntityData.YFilter = advertiseLocalL2vpnEvpn.YFilter
    advertiseLocalL2vpnEvpn.EntityData.YangName = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalL2vpnEvpn.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseLocalL2vpnEvpn.EntityData.SegmentPath = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseLocalL2vpnEvpn.EntityData.SegmentPath
    advertiseLocalL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalL2vpnEvpn.AfName})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalL2vpnEvpn.ReorgOption})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalL2vpnEvpn.RtType})

    advertiseLocalL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseLocalL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetEntityData() *types.CommonEntityData {
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YFilter = neighborAfLongLivedGracefulRestartStaleTime.YFilter
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YangName = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleName = "cisco_ios_xr"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.ParentYangName = "vrf-neighbor-af"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Children = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-send", types.YLeaf{"StaleTimeSend", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend})
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-accept", types.YLeaf{"StaleTimeAccept", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept})

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YListKeys = []string {}

    return &(neighborAfLongLivedGracefulRestartStaleTime.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetEntityData() *types.CommonEntityData {
    siteOfOrigin.EntityData.YFilter = siteOfOrigin.YFilter
    siteOfOrigin.EntityData.YangName = "site-of-origin"
    siteOfOrigin.EntityData.BundleName = "cisco_ios_xr"
    siteOfOrigin.EntityData.ParentYangName = "vrf-neighbor-af"
    siteOfOrigin.EntityData.SegmentPath = "site-of-origin"
    siteOfOrigin.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + siteOfOrigin.EntityData.SegmentPath
    siteOfOrigin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siteOfOrigin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siteOfOrigin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siteOfOrigin.EntityData.Children = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs.Append("type", types.YLeaf{"Type", siteOfOrigin.Type})
    siteOfOrigin.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", siteOfOrigin.AsXx})
    siteOfOrigin.EntityData.Leafs.Append("as", types.YLeaf{"As", siteOfOrigin.As})
    siteOfOrigin.EntityData.Leafs.Append("as-index", types.YLeaf{"AsIndex", siteOfOrigin.AsIndex})
    siteOfOrigin.EntityData.Leafs.Append("address", types.YLeaf{"Address", siteOfOrigin.Address})
    siteOfOrigin.EntityData.Leafs.Append("address-index", types.YLeaf{"AddressIndex", siteOfOrigin.AddressIndex})

    siteOfOrigin.EntityData.YListKeys = []string {}

    return &(siteOfOrigin.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetEntityData() *types.CommonEntityData {
    advertiseV6.EntityData.YFilter = advertiseV6.YFilter
    advertiseV6.EntityData.YangName = "advertise-v6"
    advertiseV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseV6.EntityData.SegmentPath = "advertise-v6"
    advertiseV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseV6.EntityData.SegmentPath
    advertiseV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV6.EntityData.Children = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV6.AfName})
    advertiseV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV6.ReorgOption})
    advertiseV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV6.RtType})

    advertiseV6.EntityData.YListKeys = []string {}

    return &(advertiseV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetEntityData() *types.CommonEntityData {
    advertiseLocalV6.EntityData.YFilter = advertiseLocalV6.YFilter
    advertiseLocalV6.EntityData.YangName = "advertise-local-v6"
    advertiseLocalV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseLocalV6.EntityData.SegmentPath = "advertise-local-v6"
    advertiseLocalV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseLocalV6.EntityData.SegmentPath
    advertiseLocalV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV6.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV6.AfName})
    advertiseLocalV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV6.ReorgOption})
    advertiseLocalV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV6.RtType})

    advertiseLocalV6.EntityData.YListKeys = []string {}

    return &(advertiseLocalV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "import"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "vrf-neighbor-af"
    self.EntityData.SegmentPath = "import"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("import-stitching", types.YLeaf{"ImportStitching", self.ImportStitching})
    self.EntityData.Leafs.Append("import-reoriginate", types.YLeaf{"ImportReoriginate", self.ImportReoriginate})
    self.EntityData.Leafs.Append("import-reoriginate-stitching", types.YLeaf{"ImportReoriginateStitching", self.ImportReoriginateStitching})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetEntityData() *types.CommonEntityData {
    defaultOriginate.EntityData.YFilter = defaultOriginate.YFilter
    defaultOriginate.EntityData.YangName = "default-originate"
    defaultOriginate.EntityData.BundleName = "cisco_ios_xr"
    defaultOriginate.EntityData.ParentYangName = "vrf-neighbor-af"
    defaultOriginate.EntityData.SegmentPath = "default-originate"
    defaultOriginate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + defaultOriginate.EntityData.SegmentPath
    defaultOriginate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultOriginate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultOriginate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultOriginate.EntityData.Children = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", defaultOriginate.Enable})
    defaultOriginate.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", defaultOriginate.RoutePolicyName})

    defaultOriginate.EntityData.YListKeys = []string {}

    return &(defaultOriginate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetEntityData() *types.CommonEntityData {
    softReconfiguration.EntityData.YFilter = softReconfiguration.YFilter
    softReconfiguration.EntityData.YangName = "soft-reconfiguration"
    softReconfiguration.EntityData.BundleName = "cisco_ios_xr"
    softReconfiguration.EntityData.ParentYangName = "vrf-neighbor-af"
    softReconfiguration.EntityData.SegmentPath = "soft-reconfiguration"
    softReconfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + softReconfiguration.EntityData.SegmentPath
    softReconfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    softReconfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    softReconfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    softReconfiguration.EntityData.Children = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs.Append("inbound-soft", types.YLeaf{"InboundSoft", softReconfiguration.InboundSoft})
    softReconfiguration.EntityData.Leafs.Append("soft-always", types.YLeaf{"SoftAlways", softReconfiguration.SoftAlways})

    softReconfiguration.EntityData.YListKeys = []string {}

    return &(softReconfiguration.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV6.EntityData.YFilter = advertiseVrfImpDisableV6.YFilter
    advertiseVrfImpDisableV6.EntityData.YangName = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseVrfImpDisableV6.EntityData.SegmentPath = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseVrfImpDisableV6.EntityData.SegmentPath
    advertiseVrfImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV6.AfName})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV6.AdvOption})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV6.RtType})

    advertiseVrfImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetEntityData() *types.CommonEntityData {
    advertiseV4.EntityData.YFilter = advertiseV4.YFilter
    advertiseV4.EntityData.YangName = "advertise-v4"
    advertiseV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseV4.EntityData.SegmentPath = "advertise-v4"
    advertiseV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseV4.EntityData.SegmentPath
    advertiseV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV4.EntityData.Children = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV4.AfName})
    advertiseV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV4.ReorgOption})
    advertiseV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV4.RtType})

    advertiseV4.EntityData.YListKeys = []string {}

    return &(advertiseV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetEntityData() *types.CommonEntityData {
    advertiseLocalV4.EntityData.YFilter = advertiseLocalV4.YFilter
    advertiseLocalV4.EntityData.YangName = "advertise-local-v4"
    advertiseLocalV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseLocalV4.EntityData.SegmentPath = "advertise-local-v4"
    advertiseLocalV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseLocalV4.EntityData.SegmentPath
    advertiseLocalV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV4.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV4.AfName})
    advertiseLocalV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV4.ReorgOption})
    advertiseLocalV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV4.RtType})

    advertiseLocalV4.EntityData.YListKeys = []string {}

    return &(advertiseLocalV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPath.EntityData.YFilter = removePrivateAsEntireAsPath.YFilter
    removePrivateAsEntireAsPath.EntityData.YangName = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPath.EntityData.ParentYangName = "vrf-neighbor-af"
    removePrivateAsEntireAsPath.EntityData.SegmentPath = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + removePrivateAsEntireAsPath.EntityData.SegmentPath
    removePrivateAsEntireAsPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPath.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPath.Enable})
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPath.Entire})

    removePrivateAsEntireAsPath.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPath.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV4.EntityData.YFilter = advertiseVrfImpDisableV4.YFilter
    advertiseVrfImpDisableV4.EntityData.YangName = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseVrfImpDisableV4.EntityData.SegmentPath = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseVrfImpDisableV4.EntityData.SegmentPath
    advertiseVrfImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV4.AfName})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV4.AdvOption})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV4.RtType})

    advertiseVrfImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "vrf-neighbor"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("local-address-disable", types.YLeaf{"LocalAddressDisable", localAddress.LocalAddressDisable})
    localAddress.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", localAddress.LocalIpAddress})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate.
    BmpActivate []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetEntityData() *types.CommonEntityData {
    bmpActivates.EntityData.YFilter = bmpActivates.YFilter
    bmpActivates.EntityData.YangName = "bmp-activates"
    bmpActivates.EntityData.BundleName = "cisco_ios_xr"
    bmpActivates.EntityData.ParentYangName = "vrf-neighbor"
    bmpActivates.EntityData.SegmentPath = "bmp-activates"
    bmpActivates.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + bmpActivates.EntityData.SegmentPath
    bmpActivates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivates.EntityData.Children = types.NewOrderedMap()
    bmpActivates.EntityData.Children.Append("bmp-activate", types.YChild{"BmpActivate", nil})
    for i := range bmpActivates.BmpActivate {
        bmpActivates.EntityData.Children.Append(types.GetSegmentPath(bmpActivates.BmpActivate[i]), types.YChild{"BmpActivate", bmpActivates.BmpActivate[i]})
    }
    bmpActivates.EntityData.Leafs = types.NewOrderedMap()

    bmpActivates.EntityData.YListKeys = []string {}

    return &(bmpActivates.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetEntityData() *types.CommonEntityData {
    bmpActivate.EntityData.YFilter = bmpActivate.YFilter
    bmpActivate.EntityData.YangName = "bmp-activate"
    bmpActivate.EntityData.BundleName = "cisco_ios_xr"
    bmpActivate.EntityData.ParentYangName = "bmp-activates"
    bmpActivate.EntityData.SegmentPath = "bmp-activate" + types.AddKeyToken(bmpActivate.ServerId, "server-id")
    bmpActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/bmp-activates/" + bmpActivate.EntityData.SegmentPath
    bmpActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivate.EntityData.Children = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpActivate.ServerId})

    bmpActivate.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "cisco_ios_xr"
    ebgpMultihop.EntityData.ParentYangName = "vrf-neighbor"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs.Append("max-hop-count", types.YLeaf{"MaxHopCount", ebgpMultihop.MaxHopCount})
    ebgpMultihop.EntityData.Leafs.Append("mpls-deactivation", types.YLeaf{"MplsDeactivation", ebgpMultihop.MplsDeactivation})

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetEntityData() *types.CommonEntityData {
    remoteAs.EntityData.YFilter = remoteAs.YFilter
    remoteAs.EntityData.YangName = "remote-as"
    remoteAs.EntityData.BundleName = "cisco_ios_xr"
    remoteAs.EntityData.ParentYangName = "vrf-neighbor"
    remoteAs.EntityData.SegmentPath = "remote-as"
    remoteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + remoteAs.EntityData.SegmentPath
    remoteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteAs.EntityData.Children = types.NewOrderedMap()
    remoteAs.EntityData.Leafs = types.NewOrderedMap()
    remoteAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", remoteAs.AsXx})
    remoteAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", remoteAs.AsYy})

    remoteAs.EntityData.YListKeys = []string {}

    return &(remoteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetEntityData() *types.CommonEntityData {
    localAs.EntityData.YFilter = localAs.YFilter
    localAs.EntityData.YangName = "local-as"
    localAs.EntityData.BundleName = "cisco_ios_xr"
    localAs.EntityData.ParentYangName = "vrf-neighbor"
    localAs.EntityData.SegmentPath = "local-as"
    localAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + localAs.EntityData.SegmentPath
    localAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAs.EntityData.Children = types.NewOrderedMap()
    localAs.EntityData.Leafs = types.NewOrderedMap()
    localAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", localAs.AsXx})
    localAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", localAs.AsYy})
    localAs.EntityData.Leafs.Append("no-prepend", types.YLeaf{"NoPrepend", localAs.NoPrepend})
    localAs.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", localAs.Disable})
    localAs.EntityData.Leafs.Append("replace-as", types.YLeaf{"ReplaceAs", localAs.ReplaceAs})
    localAs.EntityData.Leafs.Append("dual-as", types.YLeaf{"DualAs", localAs.DualAs})

    localAs.EntityData.YListKeys = []string {}

    return &(localAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetEntityData() *types.CommonEntityData {
    password.EntityData.YFilter = password.YFilter
    password.EntityData.YangName = "password"
    password.EntityData.BundleName = "cisco_ios_xr"
    password.EntityData.ParentYangName = "vrf-neighbor"
    password.EntityData.SegmentPath = "password"
    password.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + password.EntityData.SegmentPath
    password.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    password.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    password.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    password.EntityData.Children = types.NewOrderedMap()
    password.EntityData.Leafs = types.NewOrderedMap()
    password.EntityData.Leafs.Append("password-disable", types.YLeaf{"PasswordDisable", password.PasswordDisable})
    password.EntityData.Leafs.Append("password", types.YLeaf{"Password", password.Password})

    password.EntityData.YListKeys = []string {}

    return &(password.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetEntityData() *types.CommonEntityData {
    advertisementInterval.EntityData.YFilter = advertisementInterval.YFilter
    advertisementInterval.EntityData.YangName = "advertisement-interval"
    advertisementInterval.EntityData.BundleName = "cisco_ios_xr"
    advertisementInterval.EntityData.ParentYangName = "vrf-neighbor"
    advertisementInterval.EntityData.SegmentPath = "advertisement-interval"
    advertisementInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + advertisementInterval.EntityData.SegmentPath
    advertisementInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisementInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisementInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisementInterval.EntityData.Children = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", advertisementInterval.MinimumInterval})
    advertisementInterval.EntityData.Leafs.Append("minimum-interval-msecs", types.YLeaf{"MinimumIntervalMsecs", advertisementInterval.MinimumIntervalMsecs})

    advertisementInterval.EntityData.YListKeys = []string {}

    return &(advertisementInterval.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetEntityData() *types.CommonEntityData {
    neighborClusterId.EntityData.YFilter = neighborClusterId.YFilter
    neighborClusterId.EntityData.YangName = "neighbor-cluster-id"
    neighborClusterId.EntityData.BundleName = "cisco_ios_xr"
    neighborClusterId.EntityData.ParentYangName = "vrf-neighbor"
    neighborClusterId.EntityData.SegmentPath = "neighbor-cluster-id"
    neighborClusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + neighborClusterId.EntityData.SegmentPath
    neighborClusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborClusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborClusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborClusterId.EntityData.Children = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", neighborClusterId.ClusterIdNumber})
    neighborClusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", neighborClusterId.ClusterIdAddress})

    neighborClusterId.EntityData.YListKeys = []string {}

    return &(neighborClusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetEntityData() *types.CommonEntityData {
    tcpmss.EntityData.YFilter = tcpmss.YFilter
    tcpmss.EntityData.YangName = "tcpmss"
    tcpmss.EntityData.BundleName = "cisco_ios_xr"
    tcpmss.EntityData.ParentYangName = "vrf-neighbor"
    tcpmss.EntityData.SegmentPath = "tcpmss"
    tcpmss.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + tcpmss.EntityData.SegmentPath
    tcpmss.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpmss.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpmss.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpmss.EntityData.Children = types.NewOrderedMap()
    tcpmss.EntityData.Leafs = types.NewOrderedMap()
    tcpmss.EntityData.Leafs.Append("tcpmss-disable", types.YLeaf{"TcpmssDisable", tcpmss.TcpmssDisable})
    tcpmss.EntityData.Leafs.Append("mss", types.YLeaf{"Mss", tcpmss.Mss})

    tcpmss.EntityData.YListKeys = []string {}

    return &(tcpmss.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "vrf-neighbor"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetEntityData() *types.CommonEntityData {
    updateInFiltering.EntityData.YFilter = updateInFiltering.YFilter
    updateInFiltering.EntityData.YangName = "update-in-filtering"
    updateInFiltering.EntityData.BundleName = "cisco_ios_xr"
    updateInFiltering.EntityData.ParentYangName = "vrf-neighbor"
    updateInFiltering.EntityData.SegmentPath = "update-in-filtering"
    updateInFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + updateInFiltering.EntityData.SegmentPath
    updateInFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFiltering.EntityData.Children = types.NewOrderedMap()
    updateInFiltering.EntityData.Children.Append("update-in-filtering-message-buffers", types.YChild{"UpdateInFilteringMessageBuffers", &updateInFiltering.UpdateInFilteringMessageBuffers})
    updateInFiltering.EntityData.Leafs = types.NewOrderedMap()
    updateInFiltering.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", updateInFiltering.Enable})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-attribute-filter-group", types.YLeaf{"UpdateInFilteringAttributeFilterGroup", updateInFiltering.UpdateInFilteringAttributeFilterGroup})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-syslog-disable", types.YLeaf{"UpdateInFilteringSyslogDisable", updateInFiltering.UpdateInFilteringSyslogDisable})

    updateInFiltering.EntityData.YListKeys = []string {}

    return &(updateInFiltering.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetEntityData() *types.CommonEntityData {
    updateInFilteringMessageBuffers.EntityData.YFilter = updateInFilteringMessageBuffers.YFilter
    updateInFilteringMessageBuffers.EntityData.YangName = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.BundleName = "cisco_ios_xr"
    updateInFilteringMessageBuffers.EntityData.ParentYangName = "update-in-filtering"
    updateInFilteringMessageBuffers.EntityData.SegmentPath = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/update-in-filtering/" + updateInFilteringMessageBuffers.EntityData.SegmentPath
    updateInFilteringMessageBuffers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFilteringMessageBuffers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFilteringMessageBuffers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFilteringMessageBuffers.EntityData.Children = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("number-of-buffers", types.YLeaf{"NumberOfBuffers", updateInFilteringMessageBuffers.NumberOfBuffers})
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("non-circular-buffer", types.YLeaf{"NonCircularBuffer", updateInFilteringMessageBuffers.NonCircularBuffer})

    updateInFilteringMessageBuffers.EntityData.YListKeys = []string {}

    return &(updateInFilteringMessageBuffers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetEntityData() *types.CommonEntityData {
    msgLogOut.EntityData.YFilter = msgLogOut.YFilter
    msgLogOut.EntityData.YangName = "msg-log-out"
    msgLogOut.EntityData.BundleName = "cisco_ios_xr"
    msgLogOut.EntityData.ParentYangName = "vrf-neighbor"
    msgLogOut.EntityData.SegmentPath = "msg-log-out"
    msgLogOut.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + msgLogOut.EntityData.SegmentPath
    msgLogOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogOut.EntityData.Children = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogOut.MsgBufCount})
    msgLogOut.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogOut.MsgLogDisable})
    msgLogOut.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogOut.MsgLogInheritDisable})

    msgLogOut.EntityData.YListKeys = []string {}

    return &(msgLogOut.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AoKeychain
// Set or disable AO based authentication
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AoKeychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having AO keychain based authentication
    // even if the parent has one.FALSE to enable AO keychain based
    // authentication. The type is bool.
    AoKeychainDisable interface{}

    // Name of the AO keychain associated with this neighbor. The type is string.
    AoKeychainName interface{}

    // Include TCP options header with AO. The type is bool.
    AoIncludeTcpOptions interface{}

    // Accept new connections even though AO mismatched. The type is bool.
    AoAcceptMismatchConnection interface{}
}

func (aoKeychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AoKeychain) GetEntityData() *types.CommonEntityData {
    aoKeychain.EntityData.YFilter = aoKeychain.YFilter
    aoKeychain.EntityData.YangName = "ao-keychain"
    aoKeychain.EntityData.BundleName = "cisco_ios_xr"
    aoKeychain.EntityData.ParentYangName = "vrf-neighbor"
    aoKeychain.EntityData.SegmentPath = "ao-keychain"
    aoKeychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + aoKeychain.EntityData.SegmentPath
    aoKeychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aoKeychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aoKeychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aoKeychain.EntityData.Children = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs.Append("ao-keychain-disable", types.YLeaf{"AoKeychainDisable", aoKeychain.AoKeychainDisable})
    aoKeychain.EntityData.Leafs.Append("ao-keychain-name", types.YLeaf{"AoKeychainName", aoKeychain.AoKeychainName})
    aoKeychain.EntityData.Leafs.Append("ao-include-tcp-options", types.YLeaf{"AoIncludeTcpOptions", aoKeychain.AoIncludeTcpOptions})
    aoKeychain.EntityData.Leafs.Append("ao-accept-mismatch-connection", types.YLeaf{"AoAcceptMismatchConnection", aoKeychain.AoAcceptMismatchConnection})

    aoKeychain.EntityData.YListKeys = []string {}

    return &(aoKeychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetEntityData() *types.CommonEntityData {
    receiveBufferSize.EntityData.YFilter = receiveBufferSize.YFilter
    receiveBufferSize.EntityData.YangName = "receive-buffer-size"
    receiveBufferSize.EntityData.BundleName = "cisco_ios_xr"
    receiveBufferSize.EntityData.ParentYangName = "vrf-neighbor"
    receiveBufferSize.EntityData.SegmentPath = "receive-buffer-size"
    receiveBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + receiveBufferSize.EntityData.SegmentPath
    receiveBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveBufferSize.EntityData.Children = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveBufferSize.SocketReceiveSize})
    receiveBufferSize.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveBufferSize.BgpReceiveSize})

    receiveBufferSize.EntityData.YListKeys = []string {}

    return &(receiveBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetEntityData() *types.CommonEntityData {
    msgLogIn.EntityData.YFilter = msgLogIn.YFilter
    msgLogIn.EntityData.YangName = "msg-log-in"
    msgLogIn.EntityData.BundleName = "cisco_ios_xr"
    msgLogIn.EntityData.ParentYangName = "vrf-neighbor"
    msgLogIn.EntityData.SegmentPath = "msg-log-in"
    msgLogIn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + msgLogIn.EntityData.SegmentPath
    msgLogIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogIn.EntityData.Children = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogIn.MsgBufCount})
    msgLogIn.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogIn.MsgLogDisable})
    msgLogIn.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogIn.MsgLogInheritDisable})

    msgLogIn.EntityData.YListKeys = []string {}

    return &(msgLogIn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetEntityData() *types.CommonEntityData {
    sendBufferSize.EntityData.YFilter = sendBufferSize.YFilter
    sendBufferSize.EntityData.YangName = "send-buffer-size"
    sendBufferSize.EntityData.BundleName = "cisco_ios_xr"
    sendBufferSize.EntityData.ParentYangName = "vrf-neighbor"
    sendBufferSize.EntityData.SegmentPath = "send-buffer-size"
    sendBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + sendBufferSize.EntityData.SegmentPath
    sendBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendBufferSize.EntityData.Children = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendBufferSize.SocketSendSize})
    sendBufferSize.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendBufferSize.BgpSendSize})

    sendBufferSize.EntityData.YListKeys = []string {}

    return &(sendBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "vrf-neighbor"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", timers.KeepaliveInterval})
    timers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", timers.HoldTime})
    timers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", timers.MinAcceptHoldTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "cisco_ios_xr"
    keychain.EntityData.ParentYangName = "vrf-neighbor"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()
    keychain.EntityData.Leafs.Append("keychain-disable", types.YLeaf{"KeychainDisable", keychain.KeychainDisable})
    keychain.EntityData.Leafs.Append("keychain-name", types.YLeaf{"KeychainName", keychain.KeychainName})

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetEntityData() *types.CommonEntityData {
    gracefulMaintenance.EntityData.YFilter = gracefulMaintenance.YFilter
    gracefulMaintenance.EntityData.YangName = "graceful-maintenance"
    gracefulMaintenance.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenance.EntityData.ParentYangName = "vrf-neighbor"
    gracefulMaintenance.EntityData.SegmentPath = "graceful-maintenance"
    gracefulMaintenance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/" + gracefulMaintenance.EntityData.SegmentPath
    gracefulMaintenance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenance.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-local-preference", types.YChild{"GracefulMaintenanceLocalPreference", &gracefulMaintenance.GracefulMaintenanceLocalPreference})
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-as-prepends", types.YChild{"GracefulMaintenanceAsPrepends", &gracefulMaintenance.GracefulMaintenanceAsPrepends})
    gracefulMaintenance.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", gracefulMaintenance.Enable})
    gracefulMaintenance.EntityData.Leafs.Append("graceful-maintenance-activate", types.YLeaf{"GracefulMaintenanceActivate", gracefulMaintenance.GracefulMaintenanceActivate})

    gracefulMaintenance.EntityData.YListKeys = []string {}

    return &(gracefulMaintenance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceLocalPreference.EntityData.YFilter = gracefulMaintenanceLocalPreference.YFilter
    gracefulMaintenanceLocalPreference.EntityData.YangName = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceLocalPreference.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceLocalPreference.EntityData.SegmentPath = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/graceful-maintenance/" + gracefulMaintenanceLocalPreference.EntityData.SegmentPath
    gracefulMaintenanceLocalPreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceLocalPreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceLocalPreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceLocalPreference.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("gshut-loc-pref-disable", types.YLeaf{"GshutLocPrefDisable", gracefulMaintenanceLocalPreference.GshutLocPrefDisable})
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", gracefulMaintenanceLocalPreference.LocalPreference})

    gracefulMaintenanceLocalPreference.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceLocalPreference.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceAsPrepends.EntityData.YFilter = gracefulMaintenanceAsPrepends.YFilter
    gracefulMaintenanceAsPrepends.EntityData.YangName = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceAsPrepends.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceAsPrepends.EntityData.SegmentPath = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor/graceful-maintenance/" + gracefulMaintenanceAsPrepends.EntityData.SegmentPath
    gracefulMaintenanceAsPrepends.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceAsPrepends.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceAsPrepends.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceAsPrepends.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("gshut-prepends-disable", types.YLeaf{"GshutPrependsDisable", gracefulMaintenanceAsPrepends.GshutPrependsDisable})
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("as-prepends", types.YLeaf{"AsPrepends", gracefulMaintenanceAsPrepends.AsPrepends})

    gracefulMaintenanceAsPrepends.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceAsPrepends.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength
// A particular VRF peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Prefix length. The type is interface{} with range:
    // 0..127.
    PrefixLength interface{}

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is BgpNbrgr.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability. FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // Address family type of a VRF neighbor.
    VrfNeighborAfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut

    // Set or disable AO based authentication.
    AoKeychain Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AoKeychain

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetEntityData() *types.CommonEntityData {
    vrfNeighborPrefixLength.EntityData.YFilter = vrfNeighborPrefixLength.YFilter
    vrfNeighborPrefixLength.EntityData.YangName = "vrf-neighbor-prefix-length"
    vrfNeighborPrefixLength.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighborPrefixLength.EntityData.ParentYangName = "vrf-neighbors"
    vrfNeighborPrefixLength.EntityData.SegmentPath = "vrf-neighbor-prefix-length" + types.AddKeyToken(vrfNeighborPrefixLength.PrefixLength, "prefix-length") + types.AddKeyToken(vrfNeighborPrefixLength.NeighborAddress, "neighbor-address")
    vrfNeighborPrefixLength.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/" + vrfNeighborPrefixLength.EntityData.SegmentPath
    vrfNeighborPrefixLength.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighborPrefixLength.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighborPrefixLength.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighborPrefixLength.EntityData.Children = types.NewOrderedMap()
    vrfNeighborPrefixLength.EntityData.Children.Append("vrf-neighbor-afs", types.YChild{"VrfNeighborAfs", &vrfNeighborPrefixLength.VrfNeighborAfs})
    vrfNeighborPrefixLength.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &vrfNeighborPrefixLength.LocalAddress})
    vrfNeighborPrefixLength.EntityData.Children.Append("bmp-activates", types.YChild{"BmpActivates", &vrfNeighborPrefixLength.BmpActivates})
    vrfNeighborPrefixLength.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &vrfNeighborPrefixLength.EbgpMultihop})
    vrfNeighborPrefixLength.EntityData.Children.Append("remote-as", types.YChild{"RemoteAs", &vrfNeighborPrefixLength.RemoteAs})
    vrfNeighborPrefixLength.EntityData.Children.Append("local-as", types.YChild{"LocalAs", &vrfNeighborPrefixLength.LocalAs})
    vrfNeighborPrefixLength.EntityData.Children.Append("password", types.YChild{"Password", &vrfNeighborPrefixLength.Password})
    vrfNeighborPrefixLength.EntityData.Children.Append("advertisement-interval", types.YChild{"AdvertisementInterval", &vrfNeighborPrefixLength.AdvertisementInterval})
    vrfNeighborPrefixLength.EntityData.Children.Append("neighbor-cluster-id", types.YChild{"NeighborClusterId", &vrfNeighborPrefixLength.NeighborClusterId})
    vrfNeighborPrefixLength.EntityData.Children.Append("tcpmss", types.YChild{"Tcpmss", &vrfNeighborPrefixLength.Tcpmss})
    vrfNeighborPrefixLength.EntityData.Children.Append("tos", types.YChild{"Tos", &vrfNeighborPrefixLength.Tos})
    vrfNeighborPrefixLength.EntityData.Children.Append("update-in-filtering", types.YChild{"UpdateInFiltering", &vrfNeighborPrefixLength.UpdateInFiltering})
    vrfNeighborPrefixLength.EntityData.Children.Append("msg-log-out", types.YChild{"MsgLogOut", &vrfNeighborPrefixLength.MsgLogOut})
    vrfNeighborPrefixLength.EntityData.Children.Append("ao-keychain", types.YChild{"AoKeychain", &vrfNeighborPrefixLength.AoKeychain})
    vrfNeighborPrefixLength.EntityData.Children.Append("receive-buffer-size", types.YChild{"ReceiveBufferSize", &vrfNeighborPrefixLength.ReceiveBufferSize})
    vrfNeighborPrefixLength.EntityData.Children.Append("msg-log-in", types.YChild{"MsgLogIn", &vrfNeighborPrefixLength.MsgLogIn})
    vrfNeighborPrefixLength.EntityData.Children.Append("send-buffer-size", types.YChild{"SendBufferSize", &vrfNeighborPrefixLength.SendBufferSize})
    vrfNeighborPrefixLength.EntityData.Children.Append("timers", types.YChild{"Timers", &vrfNeighborPrefixLength.Timers})
    vrfNeighborPrefixLength.EntityData.Children.Append("keychain", types.YChild{"Keychain", &vrfNeighborPrefixLength.Keychain})
    vrfNeighborPrefixLength.EntityData.Children.Append("graceful-maintenance", types.YChild{"GracefulMaintenance", &vrfNeighborPrefixLength.GracefulMaintenance})
    vrfNeighborPrefixLength.EntityData.Leafs = types.NewOrderedMap()
    vrfNeighborPrefixLength.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", vrfNeighborPrefixLength.PrefixLength})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", vrfNeighborPrefixLength.NeighborAddress})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("internal-vpn-client-ibgp-ce", types.YLeaf{"InternalVpnClientIbgpCe", vrfNeighborPrefixLength.InternalVpnClientIbgpCe})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("session-group-add-member", types.YLeaf{"SessionGroupAddMember", vrfNeighborPrefixLength.SessionGroupAddMember})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("egress-peer-engineering", types.YLeaf{"EgressPeerEngineering", vrfNeighborPrefixLength.EgressPeerEngineering})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("neighbor-graceful-restart-stalepath-time", types.YLeaf{"NeighborGracefulRestartStalepathTime", vrfNeighborPrefixLength.NeighborGracefulRestartStalepathTime})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", vrfNeighborPrefixLength.Shutdown})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("description", types.YLeaf{"Description", vrfNeighborPrefixLength.Description})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("neighbor-group-add-member", types.YLeaf{"NeighborGroupAddMember", vrfNeighborPrefixLength.NeighborGroupAddMember})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("ebgp-recv-dmz", types.YLeaf{"EbgpRecvDmz", vrfNeighborPrefixLength.EbgpRecvDmz})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("neighbor-graceful-restart", types.YLeaf{"NeighborGracefulRestart", vrfNeighborPrefixLength.NeighborGracefulRestart})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("enforce-first-as", types.YLeaf{"EnforceFirstAs", vrfNeighborPrefixLength.EnforceFirstAs})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("idle-watch-time", types.YLeaf{"IdleWatchTime", vrfNeighborPrefixLength.IdleWatchTime})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("session-open-mode", types.YLeaf{"SessionOpenMode", vrfNeighborPrefixLength.SessionOpenMode})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", vrfNeighborPrefixLength.RpkiOriginAsValidationDisable})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("ebgp-send-dmz-enable-modes", types.YLeaf{"EbgpSendDmzEnableModes", vrfNeighborPrefixLength.EbgpSendDmzEnableModes})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("suppress-all-capabilities", types.YLeaf{"SuppressAllCapabilities", vrfNeighborPrefixLength.SuppressAllCapabilities})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("max-peers", types.YLeaf{"MaxPeers", vrfNeighborPrefixLength.MaxPeers})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", vrfNeighborPrefixLength.RpkiBestpathOriginAsAllowInvalid})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("additional-paths-send-capability", types.YLeaf{"AdditionalPathsSendCapability", vrfNeighborPrefixLength.AdditionalPathsSendCapability})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("propagate-dmz-link-bandwidth", types.YLeaf{"PropagateDmzLinkBandwidth", vrfNeighborPrefixLength.PropagateDmzLinkBandwidth})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("bfd-enable-modes", types.YLeaf{"BfdEnableModes", vrfNeighborPrefixLength.BfdEnableModes})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("ttl-security", types.YLeaf{"TtlSecurity", vrfNeighborPrefixLength.TtlSecurity})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("neighbor-graceful-restart-time", types.YLeaf{"NeighborGracefulRestartTime", vrfNeighborPrefixLength.NeighborGracefulRestartTime})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("bfd-multiplier", types.YLeaf{"BfdMultiplier", vrfNeighborPrefixLength.BfdMultiplier})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("bfd-minimum-interval", types.YLeaf{"BfdMinimumInterval", vrfNeighborPrefixLength.BfdMinimumInterval})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("remote-as-list", types.YLeaf{"RemoteAsList", vrfNeighborPrefixLength.RemoteAsList})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("additional-paths-receive-capability", types.YLeaf{"AdditionalPathsReceiveCapability", vrfNeighborPrefixLength.AdditionalPathsReceiveCapability})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("ignore-connected-check-ebgp", types.YLeaf{"IgnoreConnectedCheckEbgp", vrfNeighborPrefixLength.IgnoreConnectedCheckEbgp})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("suppress-four-byte-as-capability", types.YLeaf{"SuppressFourByteAsCapability", vrfNeighborPrefixLength.SuppressFourByteAsCapability})
    vrfNeighborPrefixLength.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", vrfNeighborPrefixLength.UpdateSourceInterface})

    vrfNeighborPrefixLength.EntityData.YListKeys = []string {"PrefixLength", "NeighborAddress"}

    return &(vrfNeighborPrefixLength.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family type of a VRF neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf.
    VrfNeighborAf []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetEntityData() *types.CommonEntityData {
    vrfNeighborAfs.EntityData.YFilter = vrfNeighborAfs.YFilter
    vrfNeighborAfs.EntityData.YangName = "vrf-neighbor-afs"
    vrfNeighborAfs.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighborAfs.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    vrfNeighborAfs.EntityData.SegmentPath = "vrf-neighbor-afs"
    vrfNeighborAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + vrfNeighborAfs.EntityData.SegmentPath
    vrfNeighborAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighborAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighborAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighborAfs.EntityData.Children = types.NewOrderedMap()
    vrfNeighborAfs.EntityData.Children.Append("vrf-neighbor-af", types.YChild{"VrfNeighborAf", nil})
    for i := range vrfNeighborAfs.VrfNeighborAf {
        vrfNeighborAfs.EntityData.Children.Append(types.GetSegmentPath(vrfNeighborAfs.VrfNeighborAf[i]), types.YChild{"VrfNeighborAf", vrfNeighborAfs.VrfNeighborAf[i]})
    }
    vrfNeighborAfs.EntityData.Leafs = types.NewOrderedMap()

    vrfNeighborAfs.EntityData.YListKeys = []string {}

    return &(vrfNeighborAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group. FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT. FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client. FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Name of the ORR group this neighbor is going to be part of. The type is
    // string.
    OptimalRouteReflectionGroup interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetEntityData() *types.CommonEntityData {
    vrfNeighborAf.EntityData.YFilter = vrfNeighborAf.YFilter
    vrfNeighborAf.EntityData.YangName = "vrf-neighbor-af"
    vrfNeighborAf.EntityData.BundleName = "cisco_ios_xr"
    vrfNeighborAf.EntityData.ParentYangName = "vrf-neighbor-afs"
    vrfNeighborAf.EntityData.SegmentPath = "vrf-neighbor-af" + types.AddKeyToken(vrfNeighborAf.AfName, "af-name")
    vrfNeighborAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/" + vrfNeighborAf.EntityData.SegmentPath
    vrfNeighborAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfNeighborAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfNeighborAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfNeighborAf.EntityData.Children = types.NewOrderedMap()
    vrfNeighborAf.EntityData.Children.Append("aigp-cost-community", types.YChild{"AigpCostCommunity", &vrfNeighborAf.AigpCostCommunity})
    vrfNeighborAf.EntityData.Children.Append("advertise-def-imp-disable-v6", types.YChild{"AdvertiseDefImpDisableV6", &vrfNeighborAf.AdvertiseDefImpDisableV6})
    vrfNeighborAf.EntityData.Children.Append("advertise-disable", types.YChild{"AdvertiseDisable", &vrfNeighborAf.AdvertiseDisable})
    vrfNeighborAf.EntityData.Children.Append("maximum-prefixes", types.YChild{"MaximumPrefixes", &vrfNeighborAf.MaximumPrefixes})
    vrfNeighborAf.EntityData.Children.Append("remove-private-as-entire-as-path-inbound", types.YChild{"RemovePrivateAsEntireAsPathInbound", &vrfNeighborAf.RemovePrivateAsEntireAsPathInbound})
    vrfNeighborAf.EntityData.Children.Append("advertise-def-imp-disable-v4", types.YChild{"AdvertiseDefImpDisableV4", &vrfNeighborAf.AdvertiseDefImpDisableV4})
    vrfNeighborAf.EntityData.Children.Append("advertise-l2vpn-evpn", types.YChild{"AdvertiseL2vpnEvpn", &vrfNeighborAf.AdvertiseL2vpnEvpn})
    vrfNeighborAf.EntityData.Children.Append("advertise-local-l2vpn-evpn", types.YChild{"AdvertiseLocalL2vpnEvpn", &vrfNeighborAf.AdvertiseLocalL2vpnEvpn})
    vrfNeighborAf.EntityData.Children.Append("neighbor-af-long-lived-graceful-restart-stale-time", types.YChild{"NeighborAfLongLivedGracefulRestartStaleTime", &vrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime})
    vrfNeighborAf.EntityData.Children.Append("site-of-origin", types.YChild{"SiteOfOrigin", &vrfNeighborAf.SiteOfOrigin})
    vrfNeighborAf.EntityData.Children.Append("advertise-v6", types.YChild{"AdvertiseV6", &vrfNeighborAf.AdvertiseV6})
    vrfNeighborAf.EntityData.Children.Append("advertise-local-v6", types.YChild{"AdvertiseLocalV6", &vrfNeighborAf.AdvertiseLocalV6})
    vrfNeighborAf.EntityData.Children.Append("import", types.YChild{"Import", &vrfNeighborAf.Import})
    vrfNeighborAf.EntityData.Children.Append("default-originate", types.YChild{"DefaultOriginate", &vrfNeighborAf.DefaultOriginate})
    vrfNeighborAf.EntityData.Children.Append("soft-reconfiguration", types.YChild{"SoftReconfiguration", &vrfNeighborAf.SoftReconfiguration})
    vrfNeighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v6", types.YChild{"AdvertiseVrfImpDisableV6", &vrfNeighborAf.AdvertiseVrfImpDisableV6})
    vrfNeighborAf.EntityData.Children.Append("advertise-v4", types.YChild{"AdvertiseV4", &vrfNeighborAf.AdvertiseV4})
    vrfNeighborAf.EntityData.Children.Append("advertise-local-v4", types.YChild{"AdvertiseLocalV4", &vrfNeighborAf.AdvertiseLocalV4})
    vrfNeighborAf.EntityData.Children.Append("remove-private-as-entire-as-path", types.YChild{"RemovePrivateAsEntireAsPath", &vrfNeighborAf.RemovePrivateAsEntireAsPath})
    vrfNeighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v4", types.YChild{"AdvertiseVrfImpDisableV4", &vrfNeighborAf.AdvertiseVrfImpDisableV4})
    vrfNeighborAf.EntityData.Leafs = types.NewOrderedMap()
    vrfNeighborAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", vrfNeighborAf.AfName})
    vrfNeighborAf.EntityData.Leafs.Append("neighbor-af-long-lived-graceful-restart-capable", types.YLeaf{"NeighborAfLongLivedGracefulRestartCapable", vrfNeighborAf.NeighborAfLongLivedGracefulRestartCapable})
    vrfNeighborAf.EntityData.Leafs.Append("send-ext-community-ebgp", types.YLeaf{"SendExtCommunityEbgp", vrfNeighborAf.SendExtCommunityEbgp})
    vrfNeighborAf.EntityData.Leafs.Append("accept-route-legacy-rt", types.YLeaf{"AcceptRouteLegacyRt", vrfNeighborAf.AcceptRouteLegacyRt})
    vrfNeighborAf.EntityData.Leafs.Append("send-community-ebgp", types.YLeaf{"SendCommunityEbgp", vrfNeighborAf.SendCommunityEbgp})
    vrfNeighborAf.EntityData.Leafs.Append("next-hop-unchanged", types.YLeaf{"NextHopUnchanged", vrfNeighborAf.NextHopUnchanged})
    vrfNeighborAf.EntityData.Leafs.Append("advertise-local-labeled-route", types.YLeaf{"AdvertiseLocalLabeledRoute", vrfNeighborAf.AdvertiseLocalLabeledRoute})
    vrfNeighborAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", vrfNeighborAf.RpkiOriginAsValidationDisable})
    vrfNeighborAf.EntityData.Leafs.Append("flowspec-validation", types.YLeaf{"FlowspecValidation", vrfNeighborAf.FlowspecValidation})
    vrfNeighborAf.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", vrfNeighborAf.EncapsulationType})
    vrfNeighborAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", vrfNeighborAf.RpkiBestpathOriginAsAllowInvalid})
    vrfNeighborAf.EntityData.Leafs.Append("enforce-multiple-labels", types.YLeaf{"EnforceMultipleLabels", vrfNeighborAf.EnforceMultipleLabels})
    vrfNeighborAf.EntityData.Leafs.Append("as-override", types.YLeaf{"AsOverride", vrfNeighborAf.AsOverride})
    vrfNeighborAf.EntityData.Leafs.Append("multipath", types.YLeaf{"Multipath", vrfNeighborAf.Multipath})
    vrfNeighborAf.EntityData.Leafs.Append("send-community-ebgp-graceful-shutdown", types.YLeaf{"SendCommunityEbgpGracefulShutdown", vrfNeighborAf.SendCommunityEbgpGracefulShutdown})
    vrfNeighborAf.EntityData.Leafs.Append("activate", types.YLeaf{"Activate", vrfNeighborAf.Activate})
    vrfNeighborAf.EntityData.Leafs.Append("prefix-orf-policy", types.YLeaf{"PrefixOrfPolicy", vrfNeighborAf.PrefixOrfPolicy})
    vrfNeighborAf.EntityData.Leafs.Append("aigp", types.YLeaf{"Aigp", vrfNeighborAf.Aigp})
    vrfNeighborAf.EntityData.Leafs.Append("aigp-send-med", types.YLeaf{"AigpSendMed", vrfNeighborAf.AigpSendMed})
    vrfNeighborAf.EntityData.Leafs.Append("allow-as-in", types.YLeaf{"AllowAsIn", vrfNeighborAf.AllowAsIn})
    vrfNeighborAf.EntityData.Leafs.Append("advertise-orf", types.YLeaf{"AdvertiseOrf", vrfNeighborAf.AdvertiseOrf})
    vrfNeighborAf.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", vrfNeighborAf.RouteReflectorClient})
    vrfNeighborAf.EntityData.Leafs.Append("next-hop-self", types.YLeaf{"NextHopSelf", vrfNeighborAf.NextHopSelf})
    vrfNeighborAf.EntityData.Leafs.Append("route-policy-in", types.YLeaf{"RoutePolicyIn", vrfNeighborAf.RoutePolicyIn})
    vrfNeighborAf.EntityData.Leafs.Append("default-weight", types.YLeaf{"DefaultWeight", vrfNeighborAf.DefaultWeight})
    vrfNeighborAf.EntityData.Leafs.Append("af-group", types.YLeaf{"AfGroup", vrfNeighborAf.AfGroup})
    vrfNeighborAf.EntityData.Leafs.Append("next-hop-unchanged-multipath", types.YLeaf{"NextHopUnchangedMultipath", vrfNeighborAf.NextHopUnchangedMultipath})
    vrfNeighborAf.EntityData.Leafs.Append("optimal-route-reflection-group", types.YLeaf{"OptimalRouteReflectionGroup", vrfNeighborAf.OptimalRouteReflectionGroup})
    vrfNeighborAf.EntityData.Leafs.Append("accept-own", types.YLeaf{"AcceptOwn", vrfNeighborAf.AcceptOwn})
    vrfNeighborAf.EntityData.Leafs.Append("route-policy-out", types.YLeaf{"RoutePolicyOut", vrfNeighborAf.RoutePolicyOut})
    vrfNeighborAf.EntityData.Leafs.Append("advertise-permanent-network", types.YLeaf{"AdvertisePermanentNetwork", vrfNeighborAf.AdvertisePermanentNetwork})

    vrfNeighborAf.EntityData.YListKeys = []string {"AfName"}

    return &(vrfNeighborAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetEntityData() *types.CommonEntityData {
    aigpCostCommunity.EntityData.YFilter = aigpCostCommunity.YFilter
    aigpCostCommunity.EntityData.YangName = "aigp-cost-community"
    aigpCostCommunity.EntityData.BundleName = "cisco_ios_xr"
    aigpCostCommunity.EntityData.ParentYangName = "vrf-neighbor-af"
    aigpCostCommunity.EntityData.SegmentPath = "aigp-cost-community"
    aigpCostCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + aigpCostCommunity.EntityData.SegmentPath
    aigpCostCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aigpCostCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aigpCostCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aigpCostCommunity.EntityData.Children = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", aigpCostCommunity.Enable})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-id", types.YLeaf{"CostCommunityId", aigpCostCommunity.CostCommunityId})
    aigpCostCommunity.EntityData.Leafs.Append("transitive", types.YLeaf{"Transitive", aigpCostCommunity.Transitive})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-poi-type", types.YLeaf{"CostCommunityPoiType", aigpCostCommunity.CostCommunityPoiType})

    aigpCostCommunity.EntityData.YListKeys = []string {}

    return &(aigpCostCommunity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV6.EntityData.YFilter = advertiseDefImpDisableV6.YFilter
    advertiseDefImpDisableV6.EntityData.YangName = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseDefImpDisableV6.EntityData.SegmentPath = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseDefImpDisableV6.EntityData.SegmentPath
    advertiseDefImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV6.AfName})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV6.AdvOption})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV6.RtType})

    advertiseDefImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetEntityData() *types.CommonEntityData {
    advertiseDisable.EntityData.YFilter = advertiseDisable.YFilter
    advertiseDisable.EntityData.YangName = "advertise-disable"
    advertiseDisable.EntityData.BundleName = "cisco_ios_xr"
    advertiseDisable.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseDisable.EntityData.SegmentPath = "advertise-disable"
    advertiseDisable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseDisable.EntityData.SegmentPath
    advertiseDisable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDisable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDisable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDisable.EntityData.Children = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDisable.AfName})
    advertiseDisable.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseDisable.ReorgOption})
    advertiseDisable.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDisable.RtType})

    advertiseDisable.EntityData.YListKeys = []string {}

    return &(advertiseDisable.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetEntityData() *types.CommonEntityData {
    maximumPrefixes.EntityData.YFilter = maximumPrefixes.YFilter
    maximumPrefixes.EntityData.YangName = "maximum-prefixes"
    maximumPrefixes.EntityData.BundleName = "cisco_ios_xr"
    maximumPrefixes.EntityData.ParentYangName = "vrf-neighbor-af"
    maximumPrefixes.EntityData.SegmentPath = "maximum-prefixes"
    maximumPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + maximumPrefixes.EntityData.SegmentPath
    maximumPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumPrefixes.EntityData.Children = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs.Append("prefix-limit", types.YLeaf{"PrefixLimit", maximumPrefixes.PrefixLimit})
    maximumPrefixes.EntityData.Leafs.Append("warning-percentage", types.YLeaf{"WarningPercentage", maximumPrefixes.WarningPercentage})
    maximumPrefixes.EntityData.Leafs.Append("warning-only", types.YLeaf{"WarningOnly", maximumPrefixes.WarningOnly})
    maximumPrefixes.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", maximumPrefixes.RestartTime})
    maximumPrefixes.EntityData.Leafs.Append("discard-extra-paths", types.YLeaf{"DiscardExtraPaths", maximumPrefixes.DiscardExtraPaths})

    maximumPrefixes.EntityData.YListKeys = []string {}

    return &(maximumPrefixes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPathInbound.EntityData.YFilter = removePrivateAsEntireAsPathInbound.YFilter
    removePrivateAsEntireAsPathInbound.EntityData.YangName = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPathInbound.EntityData.ParentYangName = "vrf-neighbor-af"
    removePrivateAsEntireAsPathInbound.EntityData.SegmentPath = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + removePrivateAsEntireAsPathInbound.EntityData.SegmentPath
    removePrivateAsEntireAsPathInbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPathInbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPathInbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPathInbound.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPathInbound.Enable})
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPathInbound.Entire})

    removePrivateAsEntireAsPathInbound.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPathInbound.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV4.EntityData.YFilter = advertiseDefImpDisableV4.YFilter
    advertiseDefImpDisableV4.EntityData.YangName = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseDefImpDisableV4.EntityData.SegmentPath = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseDefImpDisableV4.EntityData.SegmentPath
    advertiseDefImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV4.AfName})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV4.AdvOption})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV4.RtType})

    advertiseDefImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseL2vpnEvpn.EntityData.YFilter = advertiseL2vpnEvpn.YFilter
    advertiseL2vpnEvpn.EntityData.YangName = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseL2vpnEvpn.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseL2vpnEvpn.EntityData.SegmentPath = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseL2vpnEvpn.EntityData.SegmentPath
    advertiseL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseL2vpnEvpn.AfName})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseL2vpnEvpn.ReorgOption})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseL2vpnEvpn.RtType})

    advertiseL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseLocalL2vpnEvpn.EntityData.YFilter = advertiseLocalL2vpnEvpn.YFilter
    advertiseLocalL2vpnEvpn.EntityData.YangName = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalL2vpnEvpn.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseLocalL2vpnEvpn.EntityData.SegmentPath = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseLocalL2vpnEvpn.EntityData.SegmentPath
    advertiseLocalL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalL2vpnEvpn.AfName})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalL2vpnEvpn.ReorgOption})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalL2vpnEvpn.RtType})

    advertiseLocalL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseLocalL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetEntityData() *types.CommonEntityData {
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YFilter = neighborAfLongLivedGracefulRestartStaleTime.YFilter
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YangName = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleName = "cisco_ios_xr"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.ParentYangName = "vrf-neighbor-af"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Children = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-send", types.YLeaf{"StaleTimeSend", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend})
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-accept", types.YLeaf{"StaleTimeAccept", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept})

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YListKeys = []string {}

    return &(neighborAfLongLivedGracefulRestartStaleTime.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetEntityData() *types.CommonEntityData {
    siteOfOrigin.EntityData.YFilter = siteOfOrigin.YFilter
    siteOfOrigin.EntityData.YangName = "site-of-origin"
    siteOfOrigin.EntityData.BundleName = "cisco_ios_xr"
    siteOfOrigin.EntityData.ParentYangName = "vrf-neighbor-af"
    siteOfOrigin.EntityData.SegmentPath = "site-of-origin"
    siteOfOrigin.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + siteOfOrigin.EntityData.SegmentPath
    siteOfOrigin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siteOfOrigin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siteOfOrigin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siteOfOrigin.EntityData.Children = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs.Append("type", types.YLeaf{"Type", siteOfOrigin.Type})
    siteOfOrigin.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", siteOfOrigin.AsXx})
    siteOfOrigin.EntityData.Leafs.Append("as", types.YLeaf{"As", siteOfOrigin.As})
    siteOfOrigin.EntityData.Leafs.Append("as-index", types.YLeaf{"AsIndex", siteOfOrigin.AsIndex})
    siteOfOrigin.EntityData.Leafs.Append("address", types.YLeaf{"Address", siteOfOrigin.Address})
    siteOfOrigin.EntityData.Leafs.Append("address-index", types.YLeaf{"AddressIndex", siteOfOrigin.AddressIndex})

    siteOfOrigin.EntityData.YListKeys = []string {}

    return &(siteOfOrigin.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetEntityData() *types.CommonEntityData {
    advertiseV6.EntityData.YFilter = advertiseV6.YFilter
    advertiseV6.EntityData.YangName = "advertise-v6"
    advertiseV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseV6.EntityData.SegmentPath = "advertise-v6"
    advertiseV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseV6.EntityData.SegmentPath
    advertiseV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV6.EntityData.Children = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV6.AfName})
    advertiseV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV6.ReorgOption})
    advertiseV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV6.RtType})

    advertiseV6.EntityData.YListKeys = []string {}

    return &(advertiseV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetEntityData() *types.CommonEntityData {
    advertiseLocalV6.EntityData.YFilter = advertiseLocalV6.YFilter
    advertiseLocalV6.EntityData.YangName = "advertise-local-v6"
    advertiseLocalV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseLocalV6.EntityData.SegmentPath = "advertise-local-v6"
    advertiseLocalV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseLocalV6.EntityData.SegmentPath
    advertiseLocalV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV6.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV6.AfName})
    advertiseLocalV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV6.ReorgOption})
    advertiseLocalV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV6.RtType})

    advertiseLocalV6.EntityData.YListKeys = []string {}

    return &(advertiseLocalV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "import"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "vrf-neighbor-af"
    self.EntityData.SegmentPath = "import"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("import-stitching", types.YLeaf{"ImportStitching", self.ImportStitching})
    self.EntityData.Leafs.Append("import-reoriginate", types.YLeaf{"ImportReoriginate", self.ImportReoriginate})
    self.EntityData.Leafs.Append("import-reoriginate-stitching", types.YLeaf{"ImportReoriginateStitching", self.ImportReoriginateStitching})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetEntityData() *types.CommonEntityData {
    defaultOriginate.EntityData.YFilter = defaultOriginate.YFilter
    defaultOriginate.EntityData.YangName = "default-originate"
    defaultOriginate.EntityData.BundleName = "cisco_ios_xr"
    defaultOriginate.EntityData.ParentYangName = "vrf-neighbor-af"
    defaultOriginate.EntityData.SegmentPath = "default-originate"
    defaultOriginate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + defaultOriginate.EntityData.SegmentPath
    defaultOriginate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultOriginate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultOriginate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultOriginate.EntityData.Children = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", defaultOriginate.Enable})
    defaultOriginate.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", defaultOriginate.RoutePolicyName})

    defaultOriginate.EntityData.YListKeys = []string {}

    return &(defaultOriginate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetEntityData() *types.CommonEntityData {
    softReconfiguration.EntityData.YFilter = softReconfiguration.YFilter
    softReconfiguration.EntityData.YangName = "soft-reconfiguration"
    softReconfiguration.EntityData.BundleName = "cisco_ios_xr"
    softReconfiguration.EntityData.ParentYangName = "vrf-neighbor-af"
    softReconfiguration.EntityData.SegmentPath = "soft-reconfiguration"
    softReconfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + softReconfiguration.EntityData.SegmentPath
    softReconfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    softReconfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    softReconfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    softReconfiguration.EntityData.Children = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs.Append("inbound-soft", types.YLeaf{"InboundSoft", softReconfiguration.InboundSoft})
    softReconfiguration.EntityData.Leafs.Append("soft-always", types.YLeaf{"SoftAlways", softReconfiguration.SoftAlways})

    softReconfiguration.EntityData.YListKeys = []string {}

    return &(softReconfiguration.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV6.EntityData.YFilter = advertiseVrfImpDisableV6.YFilter
    advertiseVrfImpDisableV6.EntityData.YangName = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV6.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseVrfImpDisableV6.EntityData.SegmentPath = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseVrfImpDisableV6.EntityData.SegmentPath
    advertiseVrfImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV6.AfName})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV6.AdvOption})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV6.RtType})

    advertiseVrfImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetEntityData() *types.CommonEntityData {
    advertiseV4.EntityData.YFilter = advertiseV4.YFilter
    advertiseV4.EntityData.YangName = "advertise-v4"
    advertiseV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseV4.EntityData.SegmentPath = "advertise-v4"
    advertiseV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseV4.EntityData.SegmentPath
    advertiseV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV4.EntityData.Children = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV4.AfName})
    advertiseV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV4.ReorgOption})
    advertiseV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV4.RtType})

    advertiseV4.EntityData.YListKeys = []string {}

    return &(advertiseV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetEntityData() *types.CommonEntityData {
    advertiseLocalV4.EntityData.YFilter = advertiseLocalV4.YFilter
    advertiseLocalV4.EntityData.YangName = "advertise-local-v4"
    advertiseLocalV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseLocalV4.EntityData.SegmentPath = "advertise-local-v4"
    advertiseLocalV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseLocalV4.EntityData.SegmentPath
    advertiseLocalV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV4.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV4.AfName})
    advertiseLocalV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV4.ReorgOption})
    advertiseLocalV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV4.RtType})

    advertiseLocalV4.EntityData.YListKeys = []string {}

    return &(advertiseLocalV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPath.EntityData.YFilter = removePrivateAsEntireAsPath.YFilter
    removePrivateAsEntireAsPath.EntityData.YangName = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPath.EntityData.ParentYangName = "vrf-neighbor-af"
    removePrivateAsEntireAsPath.EntityData.SegmentPath = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + removePrivateAsEntireAsPath.EntityData.SegmentPath
    removePrivateAsEntireAsPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPath.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPath.Enable})
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPath.Entire})

    removePrivateAsEntireAsPath.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPath.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV4.EntityData.YFilter = advertiseVrfImpDisableV4.YFilter
    advertiseVrfImpDisableV4.EntityData.YangName = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV4.EntityData.ParentYangName = "vrf-neighbor-af"
    advertiseVrfImpDisableV4.EntityData.SegmentPath = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/vrf-neighbor-afs/vrf-neighbor-af/" + advertiseVrfImpDisableV4.EntityData.SegmentPath
    advertiseVrfImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV4.AfName})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV4.AdvOption})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV4.RtType})

    advertiseVrfImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("local-address-disable", types.YLeaf{"LocalAddressDisable", localAddress.LocalAddressDisable})
    localAddress.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", localAddress.LocalIpAddress})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate.
    BmpActivate []*Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetEntityData() *types.CommonEntityData {
    bmpActivates.EntityData.YFilter = bmpActivates.YFilter
    bmpActivates.EntityData.YangName = "bmp-activates"
    bmpActivates.EntityData.BundleName = "cisco_ios_xr"
    bmpActivates.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    bmpActivates.EntityData.SegmentPath = "bmp-activates"
    bmpActivates.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + bmpActivates.EntityData.SegmentPath
    bmpActivates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivates.EntityData.Children = types.NewOrderedMap()
    bmpActivates.EntityData.Children.Append("bmp-activate", types.YChild{"BmpActivate", nil})
    for i := range bmpActivates.BmpActivate {
        bmpActivates.EntityData.Children.Append(types.GetSegmentPath(bmpActivates.BmpActivate[i]), types.YChild{"BmpActivate", bmpActivates.BmpActivate[i]})
    }
    bmpActivates.EntityData.Leafs = types.NewOrderedMap()

    bmpActivates.EntityData.YListKeys = []string {}

    return &(bmpActivates.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetEntityData() *types.CommonEntityData {
    bmpActivate.EntityData.YFilter = bmpActivate.YFilter
    bmpActivate.EntityData.YangName = "bmp-activate"
    bmpActivate.EntityData.BundleName = "cisco_ios_xr"
    bmpActivate.EntityData.ParentYangName = "bmp-activates"
    bmpActivate.EntityData.SegmentPath = "bmp-activate" + types.AddKeyToken(bmpActivate.ServerId, "server-id")
    bmpActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/bmp-activates/" + bmpActivate.EntityData.SegmentPath
    bmpActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivate.EntityData.Children = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpActivate.ServerId})

    bmpActivate.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "cisco_ios_xr"
    ebgpMultihop.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs.Append("max-hop-count", types.YLeaf{"MaxHopCount", ebgpMultihop.MaxHopCount})
    ebgpMultihop.EntityData.Leafs.Append("mpls-deactivation", types.YLeaf{"MplsDeactivation", ebgpMultihop.MplsDeactivation})

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetEntityData() *types.CommonEntityData {
    remoteAs.EntityData.YFilter = remoteAs.YFilter
    remoteAs.EntityData.YangName = "remote-as"
    remoteAs.EntityData.BundleName = "cisco_ios_xr"
    remoteAs.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    remoteAs.EntityData.SegmentPath = "remote-as"
    remoteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + remoteAs.EntityData.SegmentPath
    remoteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteAs.EntityData.Children = types.NewOrderedMap()
    remoteAs.EntityData.Leafs = types.NewOrderedMap()
    remoteAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", remoteAs.AsXx})
    remoteAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", remoteAs.AsYy})

    remoteAs.EntityData.YListKeys = []string {}

    return &(remoteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetEntityData() *types.CommonEntityData {
    localAs.EntityData.YFilter = localAs.YFilter
    localAs.EntityData.YangName = "local-as"
    localAs.EntityData.BundleName = "cisco_ios_xr"
    localAs.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    localAs.EntityData.SegmentPath = "local-as"
    localAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + localAs.EntityData.SegmentPath
    localAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAs.EntityData.Children = types.NewOrderedMap()
    localAs.EntityData.Leafs = types.NewOrderedMap()
    localAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", localAs.AsXx})
    localAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", localAs.AsYy})
    localAs.EntityData.Leafs.Append("no-prepend", types.YLeaf{"NoPrepend", localAs.NoPrepend})
    localAs.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", localAs.Disable})
    localAs.EntityData.Leafs.Append("replace-as", types.YLeaf{"ReplaceAs", localAs.ReplaceAs})
    localAs.EntityData.Leafs.Append("dual-as", types.YLeaf{"DualAs", localAs.DualAs})

    localAs.EntityData.YListKeys = []string {}

    return &(localAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetEntityData() *types.CommonEntityData {
    password.EntityData.YFilter = password.YFilter
    password.EntityData.YangName = "password"
    password.EntityData.BundleName = "cisco_ios_xr"
    password.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    password.EntityData.SegmentPath = "password"
    password.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + password.EntityData.SegmentPath
    password.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    password.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    password.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    password.EntityData.Children = types.NewOrderedMap()
    password.EntityData.Leafs = types.NewOrderedMap()
    password.EntityData.Leafs.Append("password-disable", types.YLeaf{"PasswordDisable", password.PasswordDisable})
    password.EntityData.Leafs.Append("password", types.YLeaf{"Password", password.Password})

    password.EntityData.YListKeys = []string {}

    return &(password.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetEntityData() *types.CommonEntityData {
    advertisementInterval.EntityData.YFilter = advertisementInterval.YFilter
    advertisementInterval.EntityData.YangName = "advertisement-interval"
    advertisementInterval.EntityData.BundleName = "cisco_ios_xr"
    advertisementInterval.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    advertisementInterval.EntityData.SegmentPath = "advertisement-interval"
    advertisementInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + advertisementInterval.EntityData.SegmentPath
    advertisementInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisementInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisementInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisementInterval.EntityData.Children = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", advertisementInterval.MinimumInterval})
    advertisementInterval.EntityData.Leafs.Append("minimum-interval-msecs", types.YLeaf{"MinimumIntervalMsecs", advertisementInterval.MinimumIntervalMsecs})

    advertisementInterval.EntityData.YListKeys = []string {}

    return &(advertisementInterval.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetEntityData() *types.CommonEntityData {
    neighborClusterId.EntityData.YFilter = neighborClusterId.YFilter
    neighborClusterId.EntityData.YangName = "neighbor-cluster-id"
    neighborClusterId.EntityData.BundleName = "cisco_ios_xr"
    neighborClusterId.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    neighborClusterId.EntityData.SegmentPath = "neighbor-cluster-id"
    neighborClusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + neighborClusterId.EntityData.SegmentPath
    neighborClusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborClusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborClusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborClusterId.EntityData.Children = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", neighborClusterId.ClusterIdNumber})
    neighborClusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", neighborClusterId.ClusterIdAddress})

    neighborClusterId.EntityData.YListKeys = []string {}

    return &(neighborClusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetEntityData() *types.CommonEntityData {
    tcpmss.EntityData.YFilter = tcpmss.YFilter
    tcpmss.EntityData.YangName = "tcpmss"
    tcpmss.EntityData.BundleName = "cisco_ios_xr"
    tcpmss.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    tcpmss.EntityData.SegmentPath = "tcpmss"
    tcpmss.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + tcpmss.EntityData.SegmentPath
    tcpmss.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpmss.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpmss.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpmss.EntityData.Children = types.NewOrderedMap()
    tcpmss.EntityData.Leafs = types.NewOrderedMap()
    tcpmss.EntityData.Leafs.Append("tcpmss-disable", types.YLeaf{"TcpmssDisable", tcpmss.TcpmssDisable})
    tcpmss.EntityData.Leafs.Append("mss", types.YLeaf{"Mss", tcpmss.Mss})

    tcpmss.EntityData.YListKeys = []string {}

    return &(tcpmss.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetEntityData() *types.CommonEntityData {
    updateInFiltering.EntityData.YFilter = updateInFiltering.YFilter
    updateInFiltering.EntityData.YangName = "update-in-filtering"
    updateInFiltering.EntityData.BundleName = "cisco_ios_xr"
    updateInFiltering.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    updateInFiltering.EntityData.SegmentPath = "update-in-filtering"
    updateInFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + updateInFiltering.EntityData.SegmentPath
    updateInFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFiltering.EntityData.Children = types.NewOrderedMap()
    updateInFiltering.EntityData.Children.Append("update-in-filtering-message-buffers", types.YChild{"UpdateInFilteringMessageBuffers", &updateInFiltering.UpdateInFilteringMessageBuffers})
    updateInFiltering.EntityData.Leafs = types.NewOrderedMap()
    updateInFiltering.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", updateInFiltering.Enable})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-attribute-filter-group", types.YLeaf{"UpdateInFilteringAttributeFilterGroup", updateInFiltering.UpdateInFilteringAttributeFilterGroup})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-syslog-disable", types.YLeaf{"UpdateInFilteringSyslogDisable", updateInFiltering.UpdateInFilteringSyslogDisable})

    updateInFiltering.EntityData.YListKeys = []string {}

    return &(updateInFiltering.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetEntityData() *types.CommonEntityData {
    updateInFilteringMessageBuffers.EntityData.YFilter = updateInFilteringMessageBuffers.YFilter
    updateInFilteringMessageBuffers.EntityData.YangName = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.BundleName = "cisco_ios_xr"
    updateInFilteringMessageBuffers.EntityData.ParentYangName = "update-in-filtering"
    updateInFilteringMessageBuffers.EntityData.SegmentPath = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/update-in-filtering/" + updateInFilteringMessageBuffers.EntityData.SegmentPath
    updateInFilteringMessageBuffers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFilteringMessageBuffers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFilteringMessageBuffers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFilteringMessageBuffers.EntityData.Children = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("number-of-buffers", types.YLeaf{"NumberOfBuffers", updateInFilteringMessageBuffers.NumberOfBuffers})
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("non-circular-buffer", types.YLeaf{"NonCircularBuffer", updateInFilteringMessageBuffers.NonCircularBuffer})

    updateInFilteringMessageBuffers.EntityData.YListKeys = []string {}

    return &(updateInFilteringMessageBuffers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetEntityData() *types.CommonEntityData {
    msgLogOut.EntityData.YFilter = msgLogOut.YFilter
    msgLogOut.EntityData.YangName = "msg-log-out"
    msgLogOut.EntityData.BundleName = "cisco_ios_xr"
    msgLogOut.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    msgLogOut.EntityData.SegmentPath = "msg-log-out"
    msgLogOut.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + msgLogOut.EntityData.SegmentPath
    msgLogOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogOut.EntityData.Children = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogOut.MsgBufCount})
    msgLogOut.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogOut.MsgLogDisable})
    msgLogOut.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogOut.MsgLogInheritDisable})

    msgLogOut.EntityData.YListKeys = []string {}

    return &(msgLogOut.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AoKeychain
// Set or disable AO based authentication
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AoKeychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having AO keychain based authentication
    // even if the parent has one.FALSE to enable AO keychain based
    // authentication. The type is bool.
    AoKeychainDisable interface{}

    // Name of the AO keychain associated with this neighbor. The type is string.
    AoKeychainName interface{}

    // Include TCP options header with AO. The type is bool.
    AoIncludeTcpOptions interface{}

    // Accept new connections even though AO mismatched. The type is bool.
    AoAcceptMismatchConnection interface{}
}

func (aoKeychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AoKeychain) GetEntityData() *types.CommonEntityData {
    aoKeychain.EntityData.YFilter = aoKeychain.YFilter
    aoKeychain.EntityData.YangName = "ao-keychain"
    aoKeychain.EntityData.BundleName = "cisco_ios_xr"
    aoKeychain.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    aoKeychain.EntityData.SegmentPath = "ao-keychain"
    aoKeychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + aoKeychain.EntityData.SegmentPath
    aoKeychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aoKeychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aoKeychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aoKeychain.EntityData.Children = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs.Append("ao-keychain-disable", types.YLeaf{"AoKeychainDisable", aoKeychain.AoKeychainDisable})
    aoKeychain.EntityData.Leafs.Append("ao-keychain-name", types.YLeaf{"AoKeychainName", aoKeychain.AoKeychainName})
    aoKeychain.EntityData.Leafs.Append("ao-include-tcp-options", types.YLeaf{"AoIncludeTcpOptions", aoKeychain.AoIncludeTcpOptions})
    aoKeychain.EntityData.Leafs.Append("ao-accept-mismatch-connection", types.YLeaf{"AoAcceptMismatchConnection", aoKeychain.AoAcceptMismatchConnection})

    aoKeychain.EntityData.YListKeys = []string {}

    return &(aoKeychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetEntityData() *types.CommonEntityData {
    receiveBufferSize.EntityData.YFilter = receiveBufferSize.YFilter
    receiveBufferSize.EntityData.YangName = "receive-buffer-size"
    receiveBufferSize.EntityData.BundleName = "cisco_ios_xr"
    receiveBufferSize.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    receiveBufferSize.EntityData.SegmentPath = "receive-buffer-size"
    receiveBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + receiveBufferSize.EntityData.SegmentPath
    receiveBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveBufferSize.EntityData.Children = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveBufferSize.SocketReceiveSize})
    receiveBufferSize.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveBufferSize.BgpReceiveSize})

    receiveBufferSize.EntityData.YListKeys = []string {}

    return &(receiveBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetEntityData() *types.CommonEntityData {
    msgLogIn.EntityData.YFilter = msgLogIn.YFilter
    msgLogIn.EntityData.YangName = "msg-log-in"
    msgLogIn.EntityData.BundleName = "cisco_ios_xr"
    msgLogIn.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    msgLogIn.EntityData.SegmentPath = "msg-log-in"
    msgLogIn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + msgLogIn.EntityData.SegmentPath
    msgLogIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogIn.EntityData.Children = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogIn.MsgBufCount})
    msgLogIn.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogIn.MsgLogDisable})
    msgLogIn.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogIn.MsgLogInheritDisable})

    msgLogIn.EntityData.YListKeys = []string {}

    return &(msgLogIn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetEntityData() *types.CommonEntityData {
    sendBufferSize.EntityData.YFilter = sendBufferSize.YFilter
    sendBufferSize.EntityData.YangName = "send-buffer-size"
    sendBufferSize.EntityData.BundleName = "cisco_ios_xr"
    sendBufferSize.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    sendBufferSize.EntityData.SegmentPath = "send-buffer-size"
    sendBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + sendBufferSize.EntityData.SegmentPath
    sendBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendBufferSize.EntityData.Children = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendBufferSize.SocketSendSize})
    sendBufferSize.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendBufferSize.BgpSendSize})

    sendBufferSize.EntityData.YListKeys = []string {}

    return &(sendBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", timers.KeepaliveInterval})
    timers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", timers.HoldTime})
    timers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", timers.MinAcceptHoldTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "cisco_ios_xr"
    keychain.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()
    keychain.EntityData.Leafs.Append("keychain-disable", types.YLeaf{"KeychainDisable", keychain.KeychainDisable})
    keychain.EntityData.Leafs.Append("keychain-name", types.YLeaf{"KeychainName", keychain.KeychainName})

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetEntityData() *types.CommonEntityData {
    gracefulMaintenance.EntityData.YFilter = gracefulMaintenance.YFilter
    gracefulMaintenance.EntityData.YangName = "graceful-maintenance"
    gracefulMaintenance.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenance.EntityData.ParentYangName = "vrf-neighbor-prefix-length"
    gracefulMaintenance.EntityData.SegmentPath = "graceful-maintenance"
    gracefulMaintenance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/" + gracefulMaintenance.EntityData.SegmentPath
    gracefulMaintenance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenance.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-local-preference", types.YChild{"GracefulMaintenanceLocalPreference", &gracefulMaintenance.GracefulMaintenanceLocalPreference})
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-as-prepends", types.YChild{"GracefulMaintenanceAsPrepends", &gracefulMaintenance.GracefulMaintenanceAsPrepends})
    gracefulMaintenance.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", gracefulMaintenance.Enable})
    gracefulMaintenance.EntityData.Leafs.Append("graceful-maintenance-activate", types.YLeaf{"GracefulMaintenanceActivate", gracefulMaintenance.GracefulMaintenanceActivate})

    gracefulMaintenance.EntityData.YListKeys = []string {}

    return &(gracefulMaintenance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceLocalPreference.EntityData.YFilter = gracefulMaintenanceLocalPreference.YFilter
    gracefulMaintenanceLocalPreference.EntityData.YangName = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceLocalPreference.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceLocalPreference.EntityData.SegmentPath = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/graceful-maintenance/" + gracefulMaintenanceLocalPreference.EntityData.SegmentPath
    gracefulMaintenanceLocalPreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceLocalPreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceLocalPreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceLocalPreference.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("gshut-loc-pref-disable", types.YLeaf{"GshutLocPrefDisable", gracefulMaintenanceLocalPreference.GshutLocPrefDisable})
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", gracefulMaintenanceLocalPreference.LocalPreference})

    gracefulMaintenanceLocalPreference.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceLocalPreference.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceAsPrepends.EntityData.YFilter = gracefulMaintenanceAsPrepends.YFilter
    gracefulMaintenanceAsPrepends.EntityData.YangName = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceAsPrepends.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceAsPrepends.EntityData.SegmentPath = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/vrfs/vrf/vrf-neighbors/vrf-neighbor-prefix-length/graceful-maintenance/" + gracefulMaintenanceAsPrepends.EntityData.SegmentPath
    gracefulMaintenanceAsPrepends.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceAsPrepends.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceAsPrepends.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceAsPrepends.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("gshut-prepends-disable", types.YLeaf{"GshutPrependsDisable", gracefulMaintenanceAsPrepends.GshutPrependsDisable})
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("as-prepends", types.YLeaf{"AsPrepends", gracefulMaintenanceAsPrepends.AsPrepends})

    gracefulMaintenanceAsPrepends.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceAsPrepends.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf
// Global default config
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor, neighbor-group, af-group and session-group configuration.
    BgpEntity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity

    // Global default config.
    Global Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetEntityData() *types.CommonEntityData {
    defaultVrf.EntityData.YFilter = defaultVrf.YFilter
    defaultVrf.EntityData.YangName = "default-vrf"
    defaultVrf.EntityData.BundleName = "cisco_ios_xr"
    defaultVrf.EntityData.ParentYangName = "four-byte-as"
    defaultVrf.EntityData.SegmentPath = "default-vrf"
    defaultVrf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/" + defaultVrf.EntityData.SegmentPath
    defaultVrf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultVrf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultVrf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultVrf.EntityData.Children = types.NewOrderedMap()
    defaultVrf.EntityData.Children.Append("bgp-entity", types.YChild{"BgpEntity", &defaultVrf.BgpEntity})
    defaultVrf.EntityData.Children.Append("global", types.YChild{"Global", &defaultVrf.Global})
    defaultVrf.EntityData.Leafs = types.NewOrderedMap()

    defaultVrf.EntityData.YListKeys = []string {}

    return &(defaultVrf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity
// Neighbor, neighbor-group, af-group and
// session-group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Neighbor configuration.
    Neighbors Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors

    // Neighbor-group configuration.
    NeighborGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups

    // AF-group configuration.
    AfGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups

    // Session group configuration.
    SessionGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetEntityData() *types.CommonEntityData {
    bgpEntity.EntityData.YFilter = bgpEntity.YFilter
    bgpEntity.EntityData.YangName = "bgp-entity"
    bgpEntity.EntityData.BundleName = "cisco_ios_xr"
    bgpEntity.EntityData.ParentYangName = "default-vrf"
    bgpEntity.EntityData.SegmentPath = "bgp-entity"
    bgpEntity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/" + bgpEntity.EntityData.SegmentPath
    bgpEntity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bgpEntity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bgpEntity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bgpEntity.EntityData.Children = types.NewOrderedMap()
    bgpEntity.EntityData.Children.Append("neighbors", types.YChild{"Neighbors", &bgpEntity.Neighbors})
    bgpEntity.EntityData.Children.Append("neighbor-groups", types.YChild{"NeighborGroups", &bgpEntity.NeighborGroups})
    bgpEntity.EntityData.Children.Append("af-groups", types.YChild{"AfGroups", &bgpEntity.AfGroups})
    bgpEntity.EntityData.Children.Append("session-groups", types.YChild{"SessionGroups", &bgpEntity.SessionGroups})
    bgpEntity.EntityData.Leafs = types.NewOrderedMap()

    bgpEntity.EntityData.YListKeys = []string {}

    return &(bgpEntity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors
// Neighbor configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A particular BGP peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor.
    Neighbor []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor

    // A particular BGP peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength.
    NeighborPrefixLength []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetEntityData() *types.CommonEntityData {
    neighbors.EntityData.YFilter = neighbors.YFilter
    neighbors.EntityData.YangName = "neighbors"
    neighbors.EntityData.BundleName = "cisco_ios_xr"
    neighbors.EntityData.ParentYangName = "bgp-entity"
    neighbors.EntityData.SegmentPath = "neighbors"
    neighbors.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/" + neighbors.EntityData.SegmentPath
    neighbors.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbors.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbors.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbors.EntityData.Children = types.NewOrderedMap()
    neighbors.EntityData.Children.Append("neighbor", types.YChild{"Neighbor", nil})
    for i := range neighbors.Neighbor {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.Neighbor[i]), types.YChild{"Neighbor", neighbors.Neighbor[i]})
    }
    neighbors.EntityData.Children.Append("neighbor-prefix-length", types.YChild{"NeighborPrefixLength", nil})
    for i := range neighbors.NeighborPrefixLength {
        neighbors.EntityData.Children.Append(types.GetSegmentPath(neighbors.NeighborPrefixLength[i]), types.YChild{"NeighborPrefixLength", neighbors.NeighborPrefixLength[i]})
    }
    neighbors.EntityData.Leafs = types.NewOrderedMap()

    neighbors.EntityData.YListKeys = []string {}

    return &(neighbors.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor
// A particular BGP peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is BgpNbrgr.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability. FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // BGP neighbor AF configuration table.
    NeighborAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut

    // Set or disable AO based authentication.
    AoKeychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AoKeychain

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetEntityData() *types.CommonEntityData {
    neighbor.EntityData.YFilter = neighbor.YFilter
    neighbor.EntityData.YangName = "neighbor"
    neighbor.EntityData.BundleName = "cisco_ios_xr"
    neighbor.EntityData.ParentYangName = "neighbors"
    neighbor.EntityData.SegmentPath = "neighbor" + types.AddKeyToken(neighbor.NeighborAddress, "neighbor-address")
    neighbor.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/" + neighbor.EntityData.SegmentPath
    neighbor.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighbor.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighbor.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighbor.EntityData.Children = types.NewOrderedMap()
    neighbor.EntityData.Children.Append("neighbor-afs", types.YChild{"NeighborAfs", &neighbor.NeighborAfs})
    neighbor.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &neighbor.LocalAddress})
    neighbor.EntityData.Children.Append("bmp-activates", types.YChild{"BmpActivates", &neighbor.BmpActivates})
    neighbor.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &neighbor.EbgpMultihop})
    neighbor.EntityData.Children.Append("remote-as", types.YChild{"RemoteAs", &neighbor.RemoteAs})
    neighbor.EntityData.Children.Append("local-as", types.YChild{"LocalAs", &neighbor.LocalAs})
    neighbor.EntityData.Children.Append("password", types.YChild{"Password", &neighbor.Password})
    neighbor.EntityData.Children.Append("advertisement-interval", types.YChild{"AdvertisementInterval", &neighbor.AdvertisementInterval})
    neighbor.EntityData.Children.Append("neighbor-cluster-id", types.YChild{"NeighborClusterId", &neighbor.NeighborClusterId})
    neighbor.EntityData.Children.Append("tcpmss", types.YChild{"Tcpmss", &neighbor.Tcpmss})
    neighbor.EntityData.Children.Append("tos", types.YChild{"Tos", &neighbor.Tos})
    neighbor.EntityData.Children.Append("update-in-filtering", types.YChild{"UpdateInFiltering", &neighbor.UpdateInFiltering})
    neighbor.EntityData.Children.Append("msg-log-out", types.YChild{"MsgLogOut", &neighbor.MsgLogOut})
    neighbor.EntityData.Children.Append("ao-keychain", types.YChild{"AoKeychain", &neighbor.AoKeychain})
    neighbor.EntityData.Children.Append("receive-buffer-size", types.YChild{"ReceiveBufferSize", &neighbor.ReceiveBufferSize})
    neighbor.EntityData.Children.Append("msg-log-in", types.YChild{"MsgLogIn", &neighbor.MsgLogIn})
    neighbor.EntityData.Children.Append("send-buffer-size", types.YChild{"SendBufferSize", &neighbor.SendBufferSize})
    neighbor.EntityData.Children.Append("timers", types.YChild{"Timers", &neighbor.Timers})
    neighbor.EntityData.Children.Append("keychain", types.YChild{"Keychain", &neighbor.Keychain})
    neighbor.EntityData.Children.Append("graceful-maintenance", types.YChild{"GracefulMaintenance", &neighbor.GracefulMaintenance})
    neighbor.EntityData.Leafs = types.NewOrderedMap()
    neighbor.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighbor.NeighborAddress})
    neighbor.EntityData.Leafs.Append("internal-vpn-client-ibgp-ce", types.YLeaf{"InternalVpnClientIbgpCe", neighbor.InternalVpnClientIbgpCe})
    neighbor.EntityData.Leafs.Append("session-group-add-member", types.YLeaf{"SessionGroupAddMember", neighbor.SessionGroupAddMember})
    neighbor.EntityData.Leafs.Append("egress-peer-engineering", types.YLeaf{"EgressPeerEngineering", neighbor.EgressPeerEngineering})
    neighbor.EntityData.Leafs.Append("neighbor-graceful-restart-stalepath-time", types.YLeaf{"NeighborGracefulRestartStalepathTime", neighbor.NeighborGracefulRestartStalepathTime})
    neighbor.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", neighbor.Shutdown})
    neighbor.EntityData.Leafs.Append("description", types.YLeaf{"Description", neighbor.Description})
    neighbor.EntityData.Leafs.Append("neighbor-group-add-member", types.YLeaf{"NeighborGroupAddMember", neighbor.NeighborGroupAddMember})
    neighbor.EntityData.Leafs.Append("ebgp-recv-dmz", types.YLeaf{"EbgpRecvDmz", neighbor.EbgpRecvDmz})
    neighbor.EntityData.Leafs.Append("neighbor-graceful-restart", types.YLeaf{"NeighborGracefulRestart", neighbor.NeighborGracefulRestart})
    neighbor.EntityData.Leafs.Append("enforce-first-as", types.YLeaf{"EnforceFirstAs", neighbor.EnforceFirstAs})
    neighbor.EntityData.Leafs.Append("idle-watch-time", types.YLeaf{"IdleWatchTime", neighbor.IdleWatchTime})
    neighbor.EntityData.Leafs.Append("session-open-mode", types.YLeaf{"SessionOpenMode", neighbor.SessionOpenMode})
    neighbor.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", neighbor.RpkiOriginAsValidationDisable})
    neighbor.EntityData.Leafs.Append("ebgp-send-dmz-enable-modes", types.YLeaf{"EbgpSendDmzEnableModes", neighbor.EbgpSendDmzEnableModes})
    neighbor.EntityData.Leafs.Append("suppress-all-capabilities", types.YLeaf{"SuppressAllCapabilities", neighbor.SuppressAllCapabilities})
    neighbor.EntityData.Leafs.Append("max-peers", types.YLeaf{"MaxPeers", neighbor.MaxPeers})
    neighbor.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", neighbor.RpkiBestpathOriginAsAllowInvalid})
    neighbor.EntityData.Leafs.Append("additional-paths-send-capability", types.YLeaf{"AdditionalPathsSendCapability", neighbor.AdditionalPathsSendCapability})
    neighbor.EntityData.Leafs.Append("propagate-dmz-link-bandwidth", types.YLeaf{"PropagateDmzLinkBandwidth", neighbor.PropagateDmzLinkBandwidth})
    neighbor.EntityData.Leafs.Append("bfd-enable-modes", types.YLeaf{"BfdEnableModes", neighbor.BfdEnableModes})
    neighbor.EntityData.Leafs.Append("ttl-security", types.YLeaf{"TtlSecurity", neighbor.TtlSecurity})
    neighbor.EntityData.Leafs.Append("neighbor-graceful-restart-time", types.YLeaf{"NeighborGracefulRestartTime", neighbor.NeighborGracefulRestartTime})
    neighbor.EntityData.Leafs.Append("bfd-multiplier", types.YLeaf{"BfdMultiplier", neighbor.BfdMultiplier})
    neighbor.EntityData.Leafs.Append("bfd-minimum-interval", types.YLeaf{"BfdMinimumInterval", neighbor.BfdMinimumInterval})
    neighbor.EntityData.Leafs.Append("remote-as-list", types.YLeaf{"RemoteAsList", neighbor.RemoteAsList})
    neighbor.EntityData.Leafs.Append("additional-paths-receive-capability", types.YLeaf{"AdditionalPathsReceiveCapability", neighbor.AdditionalPathsReceiveCapability})
    neighbor.EntityData.Leafs.Append("ignore-connected-check-ebgp", types.YLeaf{"IgnoreConnectedCheckEbgp", neighbor.IgnoreConnectedCheckEbgp})
    neighbor.EntityData.Leafs.Append("suppress-four-byte-as-capability", types.YLeaf{"SuppressFourByteAsCapability", neighbor.SuppressFourByteAsCapability})
    neighbor.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", neighbor.UpdateSourceInterface})

    neighbor.EntityData.YListKeys = []string {"NeighborAddress"}

    return &(neighbor.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs
// BGP neighbor AF configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family type of neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf.
    NeighborAf []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetEntityData() *types.CommonEntityData {
    neighborAfs.EntityData.YFilter = neighborAfs.YFilter
    neighborAfs.EntityData.YangName = "neighbor-afs"
    neighborAfs.EntityData.BundleName = "cisco_ios_xr"
    neighborAfs.EntityData.ParentYangName = "neighbor"
    neighborAfs.EntityData.SegmentPath = "neighbor-afs"
    neighborAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + neighborAfs.EntityData.SegmentPath
    neighborAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfs.EntityData.Children = types.NewOrderedMap()
    neighborAfs.EntityData.Children.Append("neighbor-af", types.YChild{"NeighborAf", nil})
    for i := range neighborAfs.NeighborAf {
        neighborAfs.EntityData.Children.Append(types.GetSegmentPath(neighborAfs.NeighborAf[i]), types.YChild{"NeighborAf", neighborAfs.NeighborAf[i]})
    }
    neighborAfs.EntityData.Leafs = types.NewOrderedMap()

    neighborAfs.EntityData.YListKeys = []string {}

    return &(neighborAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf
// Address family type of neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2vpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group. FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT. FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client. FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Name of the ORR group this neighbor is going to be part of. The type is
    // string.
    OptimalRouteReflectionGroup interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetEntityData() *types.CommonEntityData {
    neighborAf.EntityData.YFilter = neighborAf.YFilter
    neighborAf.EntityData.YangName = "neighbor-af"
    neighborAf.EntityData.BundleName = "cisco_ios_xr"
    neighborAf.EntityData.ParentYangName = "neighbor-afs"
    neighborAf.EntityData.SegmentPath = "neighbor-af" + types.AddKeyToken(neighborAf.AfName, "af-name")
    neighborAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/" + neighborAf.EntityData.SegmentPath
    neighborAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAf.EntityData.Children = types.NewOrderedMap()
    neighborAf.EntityData.Children.Append("aigp-cost-community", types.YChild{"AigpCostCommunity", &neighborAf.AigpCostCommunity})
    neighborAf.EntityData.Children.Append("advertise-def-imp-disable-v6", types.YChild{"AdvertiseDefImpDisableV6", &neighborAf.AdvertiseDefImpDisableV6})
    neighborAf.EntityData.Children.Append("advertise-disable", types.YChild{"AdvertiseDisable", &neighborAf.AdvertiseDisable})
    neighborAf.EntityData.Children.Append("maximum-prefixes", types.YChild{"MaximumPrefixes", &neighborAf.MaximumPrefixes})
    neighborAf.EntityData.Children.Append("remove-private-as-entire-as-path-inbound", types.YChild{"RemovePrivateAsEntireAsPathInbound", &neighborAf.RemovePrivateAsEntireAsPathInbound})
    neighborAf.EntityData.Children.Append("advertise-def-imp-disable-v4", types.YChild{"AdvertiseDefImpDisableV4", &neighborAf.AdvertiseDefImpDisableV4})
    neighborAf.EntityData.Children.Append("advertise-l2vpn-evpn", types.YChild{"AdvertiseL2vpnEvpn", &neighborAf.AdvertiseL2vpnEvpn})
    neighborAf.EntityData.Children.Append("advertise-local-l2vpn-evpn", types.YChild{"AdvertiseLocalL2vpnEvpn", &neighborAf.AdvertiseLocalL2vpnEvpn})
    neighborAf.EntityData.Children.Append("neighbor-af-long-lived-graceful-restart-stale-time", types.YChild{"NeighborAfLongLivedGracefulRestartStaleTime", &neighborAf.NeighborAfLongLivedGracefulRestartStaleTime})
    neighborAf.EntityData.Children.Append("advertise-v6", types.YChild{"AdvertiseV6", &neighborAf.AdvertiseV6})
    neighborAf.EntityData.Children.Append("advertise-local-v6", types.YChild{"AdvertiseLocalV6", &neighborAf.AdvertiseLocalV6})
    neighborAf.EntityData.Children.Append("import", types.YChild{"Import", &neighborAf.Import})
    neighborAf.EntityData.Children.Append("default-originate", types.YChild{"DefaultOriginate", &neighborAf.DefaultOriginate})
    neighborAf.EntityData.Children.Append("soft-reconfiguration", types.YChild{"SoftReconfiguration", &neighborAf.SoftReconfiguration})
    neighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v6", types.YChild{"AdvertiseVrfImpDisableV6", &neighborAf.AdvertiseVrfImpDisableV6})
    neighborAf.EntityData.Children.Append("advertise-v4", types.YChild{"AdvertiseV4", &neighborAf.AdvertiseV4})
    neighborAf.EntityData.Children.Append("advertise-local-v4", types.YChild{"AdvertiseLocalV4", &neighborAf.AdvertiseLocalV4})
    neighborAf.EntityData.Children.Append("remove-private-as-entire-as-path", types.YChild{"RemovePrivateAsEntireAsPath", &neighborAf.RemovePrivateAsEntireAsPath})
    neighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v4", types.YChild{"AdvertiseVrfImpDisableV4", &neighborAf.AdvertiseVrfImpDisableV4})
    neighborAf.EntityData.Leafs = types.NewOrderedMap()
    neighborAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", neighborAf.AfName})
    neighborAf.EntityData.Leafs.Append("neighbor-af-long-lived-graceful-restart-capable", types.YLeaf{"NeighborAfLongLivedGracefulRestartCapable", neighborAf.NeighborAfLongLivedGracefulRestartCapable})
    neighborAf.EntityData.Leafs.Append("l2vpn-signalling", types.YLeaf{"L2vpnSignalling", neighborAf.L2vpnSignalling})
    neighborAf.EntityData.Leafs.Append("send-ext-community-ebgp", types.YLeaf{"SendExtCommunityEbgp", neighborAf.SendExtCommunityEbgp})
    neighborAf.EntityData.Leafs.Append("accept-route-legacy-rt", types.YLeaf{"AcceptRouteLegacyRt", neighborAf.AcceptRouteLegacyRt})
    neighborAf.EntityData.Leafs.Append("send-community-ebgp", types.YLeaf{"SendCommunityEbgp", neighborAf.SendCommunityEbgp})
    neighborAf.EntityData.Leafs.Append("send-multicast-attr", types.YLeaf{"SendMulticastAttr", neighborAf.SendMulticastAttr})
    neighborAf.EntityData.Leafs.Append("next-hop-unchanged", types.YLeaf{"NextHopUnchanged", neighborAf.NextHopUnchanged})
    neighborAf.EntityData.Leafs.Append("advertise-local-labeled-route", types.YLeaf{"AdvertiseLocalLabeledRoute", neighborAf.AdvertiseLocalLabeledRoute})
    neighborAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", neighborAf.RpkiOriginAsValidationDisable})
    neighborAf.EntityData.Leafs.Append("flowspec-validation", types.YLeaf{"FlowspecValidation", neighborAf.FlowspecValidation})
    neighborAf.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", neighborAf.EncapsulationType})
    neighborAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", neighborAf.RpkiBestpathOriginAsAllowInvalid})
    neighborAf.EntityData.Leafs.Append("enforce-multiple-labels", types.YLeaf{"EnforceMultipleLabels", neighborAf.EnforceMultipleLabels})
    neighborAf.EntityData.Leafs.Append("as-override", types.YLeaf{"AsOverride", neighborAf.AsOverride})
    neighborAf.EntityData.Leafs.Append("multipath", types.YLeaf{"Multipath", neighborAf.Multipath})
    neighborAf.EntityData.Leafs.Append("send-community-ebgp-graceful-shutdown", types.YLeaf{"SendCommunityEbgpGracefulShutdown", neighborAf.SendCommunityEbgpGracefulShutdown})
    neighborAf.EntityData.Leafs.Append("activate", types.YLeaf{"Activate", neighborAf.Activate})
    neighborAf.EntityData.Leafs.Append("prefix-orf-policy", types.YLeaf{"PrefixOrfPolicy", neighborAf.PrefixOrfPolicy})
    neighborAf.EntityData.Leafs.Append("aigp", types.YLeaf{"Aigp", neighborAf.Aigp})
    neighborAf.EntityData.Leafs.Append("aigp-send-med", types.YLeaf{"AigpSendMed", neighborAf.AigpSendMed})
    neighborAf.EntityData.Leafs.Append("allow-as-in", types.YLeaf{"AllowAsIn", neighborAf.AllowAsIn})
    neighborAf.EntityData.Leafs.Append("advertise-orf", types.YLeaf{"AdvertiseOrf", neighborAf.AdvertiseOrf})
    neighborAf.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", neighborAf.RouteReflectorClient})
    neighborAf.EntityData.Leafs.Append("next-hop-self", types.YLeaf{"NextHopSelf", neighborAf.NextHopSelf})
    neighborAf.EntityData.Leafs.Append("route-policy-in", types.YLeaf{"RoutePolicyIn", neighborAf.RoutePolicyIn})
    neighborAf.EntityData.Leafs.Append("default-weight", types.YLeaf{"DefaultWeight", neighborAf.DefaultWeight})
    neighborAf.EntityData.Leafs.Append("af-group", types.YLeaf{"AfGroup", neighborAf.AfGroup})
    neighborAf.EntityData.Leafs.Append("next-hop-unchanged-multipath", types.YLeaf{"NextHopUnchangedMultipath", neighborAf.NextHopUnchangedMultipath})
    neighborAf.EntityData.Leafs.Append("optimal-route-reflection-group", types.YLeaf{"OptimalRouteReflectionGroup", neighborAf.OptimalRouteReflectionGroup})
    neighborAf.EntityData.Leafs.Append("accept-own", types.YLeaf{"AcceptOwn", neighborAf.AcceptOwn})
    neighborAf.EntityData.Leafs.Append("route-policy-out", types.YLeaf{"RoutePolicyOut", neighborAf.RoutePolicyOut})
    neighborAf.EntityData.Leafs.Append("advertise-permanent-network", types.YLeaf{"AdvertisePermanentNetwork", neighborAf.AdvertisePermanentNetwork})

    neighborAf.EntityData.YListKeys = []string {"AfName"}

    return &(neighborAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetEntityData() *types.CommonEntityData {
    aigpCostCommunity.EntityData.YFilter = aigpCostCommunity.YFilter
    aigpCostCommunity.EntityData.YangName = "aigp-cost-community"
    aigpCostCommunity.EntityData.BundleName = "cisco_ios_xr"
    aigpCostCommunity.EntityData.ParentYangName = "neighbor-af"
    aigpCostCommunity.EntityData.SegmentPath = "aigp-cost-community"
    aigpCostCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + aigpCostCommunity.EntityData.SegmentPath
    aigpCostCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aigpCostCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aigpCostCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aigpCostCommunity.EntityData.Children = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", aigpCostCommunity.Enable})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-id", types.YLeaf{"CostCommunityId", aigpCostCommunity.CostCommunityId})
    aigpCostCommunity.EntityData.Leafs.Append("transitive", types.YLeaf{"Transitive", aigpCostCommunity.Transitive})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-poi-type", types.YLeaf{"CostCommunityPoiType", aigpCostCommunity.CostCommunityPoiType})

    aigpCostCommunity.EntityData.YListKeys = []string {}

    return &(aigpCostCommunity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV6.EntityData.YFilter = advertiseDefImpDisableV6.YFilter
    advertiseDefImpDisableV6.EntityData.YangName = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV6.EntityData.ParentYangName = "neighbor-af"
    advertiseDefImpDisableV6.EntityData.SegmentPath = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseDefImpDisableV6.EntityData.SegmentPath
    advertiseDefImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV6.AfName})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV6.AdvOption})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV6.RtType})

    advertiseDefImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetEntityData() *types.CommonEntityData {
    advertiseDisable.EntityData.YFilter = advertiseDisable.YFilter
    advertiseDisable.EntityData.YangName = "advertise-disable"
    advertiseDisable.EntityData.BundleName = "cisco_ios_xr"
    advertiseDisable.EntityData.ParentYangName = "neighbor-af"
    advertiseDisable.EntityData.SegmentPath = "advertise-disable"
    advertiseDisable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseDisable.EntityData.SegmentPath
    advertiseDisable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDisable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDisable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDisable.EntityData.Children = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDisable.AfName})
    advertiseDisable.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseDisable.ReorgOption})
    advertiseDisable.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDisable.RtType})

    advertiseDisable.EntityData.YListKeys = []string {}

    return &(advertiseDisable.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetEntityData() *types.CommonEntityData {
    maximumPrefixes.EntityData.YFilter = maximumPrefixes.YFilter
    maximumPrefixes.EntityData.YangName = "maximum-prefixes"
    maximumPrefixes.EntityData.BundleName = "cisco_ios_xr"
    maximumPrefixes.EntityData.ParentYangName = "neighbor-af"
    maximumPrefixes.EntityData.SegmentPath = "maximum-prefixes"
    maximumPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + maximumPrefixes.EntityData.SegmentPath
    maximumPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumPrefixes.EntityData.Children = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs.Append("prefix-limit", types.YLeaf{"PrefixLimit", maximumPrefixes.PrefixLimit})
    maximumPrefixes.EntityData.Leafs.Append("warning-percentage", types.YLeaf{"WarningPercentage", maximumPrefixes.WarningPercentage})
    maximumPrefixes.EntityData.Leafs.Append("warning-only", types.YLeaf{"WarningOnly", maximumPrefixes.WarningOnly})
    maximumPrefixes.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", maximumPrefixes.RestartTime})
    maximumPrefixes.EntityData.Leafs.Append("discard-extra-paths", types.YLeaf{"DiscardExtraPaths", maximumPrefixes.DiscardExtraPaths})

    maximumPrefixes.EntityData.YListKeys = []string {}

    return &(maximumPrefixes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPathInbound.EntityData.YFilter = removePrivateAsEntireAsPathInbound.YFilter
    removePrivateAsEntireAsPathInbound.EntityData.YangName = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPathInbound.EntityData.ParentYangName = "neighbor-af"
    removePrivateAsEntireAsPathInbound.EntityData.SegmentPath = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + removePrivateAsEntireAsPathInbound.EntityData.SegmentPath
    removePrivateAsEntireAsPathInbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPathInbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPathInbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPathInbound.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPathInbound.Enable})
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPathInbound.Entire})

    removePrivateAsEntireAsPathInbound.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPathInbound.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV4.EntityData.YFilter = advertiseDefImpDisableV4.YFilter
    advertiseDefImpDisableV4.EntityData.YangName = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV4.EntityData.ParentYangName = "neighbor-af"
    advertiseDefImpDisableV4.EntityData.SegmentPath = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseDefImpDisableV4.EntityData.SegmentPath
    advertiseDefImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV4.AfName})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV4.AdvOption})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV4.RtType})

    advertiseDefImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseL2vpnEvpn.EntityData.YFilter = advertiseL2vpnEvpn.YFilter
    advertiseL2vpnEvpn.EntityData.YangName = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseL2vpnEvpn.EntityData.ParentYangName = "neighbor-af"
    advertiseL2vpnEvpn.EntityData.SegmentPath = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseL2vpnEvpn.EntityData.SegmentPath
    advertiseL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseL2vpnEvpn.AfName})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseL2vpnEvpn.ReorgOption})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseL2vpnEvpn.RtType})

    advertiseL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseLocalL2vpnEvpn.EntityData.YFilter = advertiseLocalL2vpnEvpn.YFilter
    advertiseLocalL2vpnEvpn.EntityData.YangName = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalL2vpnEvpn.EntityData.ParentYangName = "neighbor-af"
    advertiseLocalL2vpnEvpn.EntityData.SegmentPath = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseLocalL2vpnEvpn.EntityData.SegmentPath
    advertiseLocalL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalL2vpnEvpn.AfName})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalL2vpnEvpn.ReorgOption})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalL2vpnEvpn.RtType})

    advertiseLocalL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseLocalL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetEntityData() *types.CommonEntityData {
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YFilter = neighborAfLongLivedGracefulRestartStaleTime.YFilter
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YangName = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleName = "cisco_ios_xr"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.ParentYangName = "neighbor-af"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Children = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-send", types.YLeaf{"StaleTimeSend", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend})
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-accept", types.YLeaf{"StaleTimeAccept", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept})

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YListKeys = []string {}

    return &(neighborAfLongLivedGracefulRestartStaleTime.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetEntityData() *types.CommonEntityData {
    advertiseV6.EntityData.YFilter = advertiseV6.YFilter
    advertiseV6.EntityData.YangName = "advertise-v6"
    advertiseV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseV6.EntityData.ParentYangName = "neighbor-af"
    advertiseV6.EntityData.SegmentPath = "advertise-v6"
    advertiseV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseV6.EntityData.SegmentPath
    advertiseV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV6.EntityData.Children = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV6.AfName})
    advertiseV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV6.ReorgOption})
    advertiseV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV6.RtType})

    advertiseV6.EntityData.YListKeys = []string {}

    return &(advertiseV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetEntityData() *types.CommonEntityData {
    advertiseLocalV6.EntityData.YFilter = advertiseLocalV6.YFilter
    advertiseLocalV6.EntityData.YangName = "advertise-local-v6"
    advertiseLocalV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV6.EntityData.ParentYangName = "neighbor-af"
    advertiseLocalV6.EntityData.SegmentPath = "advertise-local-v6"
    advertiseLocalV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseLocalV6.EntityData.SegmentPath
    advertiseLocalV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV6.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV6.AfName})
    advertiseLocalV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV6.ReorgOption})
    advertiseLocalV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV6.RtType})

    advertiseLocalV6.EntityData.YListKeys = []string {}

    return &(advertiseLocalV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "import"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "neighbor-af"
    self.EntityData.SegmentPath = "import"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("import-stitching", types.YLeaf{"ImportStitching", self.ImportStitching})
    self.EntityData.Leafs.Append("import-reoriginate", types.YLeaf{"ImportReoriginate", self.ImportReoriginate})
    self.EntityData.Leafs.Append("import-reoriginate-stitching", types.YLeaf{"ImportReoriginateStitching", self.ImportReoriginateStitching})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetEntityData() *types.CommonEntityData {
    defaultOriginate.EntityData.YFilter = defaultOriginate.YFilter
    defaultOriginate.EntityData.YangName = "default-originate"
    defaultOriginate.EntityData.BundleName = "cisco_ios_xr"
    defaultOriginate.EntityData.ParentYangName = "neighbor-af"
    defaultOriginate.EntityData.SegmentPath = "default-originate"
    defaultOriginate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + defaultOriginate.EntityData.SegmentPath
    defaultOriginate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultOriginate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultOriginate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultOriginate.EntityData.Children = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", defaultOriginate.Enable})
    defaultOriginate.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", defaultOriginate.RoutePolicyName})

    defaultOriginate.EntityData.YListKeys = []string {}

    return &(defaultOriginate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetEntityData() *types.CommonEntityData {
    softReconfiguration.EntityData.YFilter = softReconfiguration.YFilter
    softReconfiguration.EntityData.YangName = "soft-reconfiguration"
    softReconfiguration.EntityData.BundleName = "cisco_ios_xr"
    softReconfiguration.EntityData.ParentYangName = "neighbor-af"
    softReconfiguration.EntityData.SegmentPath = "soft-reconfiguration"
    softReconfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + softReconfiguration.EntityData.SegmentPath
    softReconfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    softReconfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    softReconfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    softReconfiguration.EntityData.Children = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs.Append("inbound-soft", types.YLeaf{"InboundSoft", softReconfiguration.InboundSoft})
    softReconfiguration.EntityData.Leafs.Append("soft-always", types.YLeaf{"SoftAlways", softReconfiguration.SoftAlways})

    softReconfiguration.EntityData.YListKeys = []string {}

    return &(softReconfiguration.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV6.EntityData.YFilter = advertiseVrfImpDisableV6.YFilter
    advertiseVrfImpDisableV6.EntityData.YangName = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV6.EntityData.ParentYangName = "neighbor-af"
    advertiseVrfImpDisableV6.EntityData.SegmentPath = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseVrfImpDisableV6.EntityData.SegmentPath
    advertiseVrfImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV6.AfName})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV6.AdvOption})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV6.RtType})

    advertiseVrfImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetEntityData() *types.CommonEntityData {
    advertiseV4.EntityData.YFilter = advertiseV4.YFilter
    advertiseV4.EntityData.YangName = "advertise-v4"
    advertiseV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseV4.EntityData.ParentYangName = "neighbor-af"
    advertiseV4.EntityData.SegmentPath = "advertise-v4"
    advertiseV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseV4.EntityData.SegmentPath
    advertiseV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV4.EntityData.Children = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV4.AfName})
    advertiseV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV4.ReorgOption})
    advertiseV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV4.RtType})

    advertiseV4.EntityData.YListKeys = []string {}

    return &(advertiseV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetEntityData() *types.CommonEntityData {
    advertiseLocalV4.EntityData.YFilter = advertiseLocalV4.YFilter
    advertiseLocalV4.EntityData.YangName = "advertise-local-v4"
    advertiseLocalV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV4.EntityData.ParentYangName = "neighbor-af"
    advertiseLocalV4.EntityData.SegmentPath = "advertise-local-v4"
    advertiseLocalV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseLocalV4.EntityData.SegmentPath
    advertiseLocalV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV4.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV4.AfName})
    advertiseLocalV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV4.ReorgOption})
    advertiseLocalV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV4.RtType})

    advertiseLocalV4.EntityData.YListKeys = []string {}

    return &(advertiseLocalV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPath.EntityData.YFilter = removePrivateAsEntireAsPath.YFilter
    removePrivateAsEntireAsPath.EntityData.YangName = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPath.EntityData.ParentYangName = "neighbor-af"
    removePrivateAsEntireAsPath.EntityData.SegmentPath = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + removePrivateAsEntireAsPath.EntityData.SegmentPath
    removePrivateAsEntireAsPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPath.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPath.Enable})
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPath.Entire})

    removePrivateAsEntireAsPath.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPath.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV4.EntityData.YFilter = advertiseVrfImpDisableV4.YFilter
    advertiseVrfImpDisableV4.EntityData.YangName = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV4.EntityData.ParentYangName = "neighbor-af"
    advertiseVrfImpDisableV4.EntityData.SegmentPath = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/neighbor-afs/neighbor-af/" + advertiseVrfImpDisableV4.EntityData.SegmentPath
    advertiseVrfImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV4.AfName})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV4.AdvOption})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV4.RtType})

    advertiseVrfImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "neighbor"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("local-address-disable", types.YLeaf{"LocalAddressDisable", localAddress.LocalAddressDisable})
    localAddress.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", localAddress.LocalIpAddress})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate.
    BmpActivate []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetEntityData() *types.CommonEntityData {
    bmpActivates.EntityData.YFilter = bmpActivates.YFilter
    bmpActivates.EntityData.YangName = "bmp-activates"
    bmpActivates.EntityData.BundleName = "cisco_ios_xr"
    bmpActivates.EntityData.ParentYangName = "neighbor"
    bmpActivates.EntityData.SegmentPath = "bmp-activates"
    bmpActivates.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + bmpActivates.EntityData.SegmentPath
    bmpActivates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivates.EntityData.Children = types.NewOrderedMap()
    bmpActivates.EntityData.Children.Append("bmp-activate", types.YChild{"BmpActivate", nil})
    for i := range bmpActivates.BmpActivate {
        bmpActivates.EntityData.Children.Append(types.GetSegmentPath(bmpActivates.BmpActivate[i]), types.YChild{"BmpActivate", bmpActivates.BmpActivate[i]})
    }
    bmpActivates.EntityData.Leafs = types.NewOrderedMap()

    bmpActivates.EntityData.YListKeys = []string {}

    return &(bmpActivates.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetEntityData() *types.CommonEntityData {
    bmpActivate.EntityData.YFilter = bmpActivate.YFilter
    bmpActivate.EntityData.YangName = "bmp-activate"
    bmpActivate.EntityData.BundleName = "cisco_ios_xr"
    bmpActivate.EntityData.ParentYangName = "bmp-activates"
    bmpActivate.EntityData.SegmentPath = "bmp-activate" + types.AddKeyToken(bmpActivate.ServerId, "server-id")
    bmpActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/bmp-activates/" + bmpActivate.EntityData.SegmentPath
    bmpActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivate.EntityData.Children = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpActivate.ServerId})

    bmpActivate.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "cisco_ios_xr"
    ebgpMultihop.EntityData.ParentYangName = "neighbor"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs.Append("max-hop-count", types.YLeaf{"MaxHopCount", ebgpMultihop.MaxHopCount})
    ebgpMultihop.EntityData.Leafs.Append("mpls-deactivation", types.YLeaf{"MplsDeactivation", ebgpMultihop.MplsDeactivation})

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetEntityData() *types.CommonEntityData {
    remoteAs.EntityData.YFilter = remoteAs.YFilter
    remoteAs.EntityData.YangName = "remote-as"
    remoteAs.EntityData.BundleName = "cisco_ios_xr"
    remoteAs.EntityData.ParentYangName = "neighbor"
    remoteAs.EntityData.SegmentPath = "remote-as"
    remoteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + remoteAs.EntityData.SegmentPath
    remoteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteAs.EntityData.Children = types.NewOrderedMap()
    remoteAs.EntityData.Leafs = types.NewOrderedMap()
    remoteAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", remoteAs.AsXx})
    remoteAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", remoteAs.AsYy})

    remoteAs.EntityData.YListKeys = []string {}

    return &(remoteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetEntityData() *types.CommonEntityData {
    localAs.EntityData.YFilter = localAs.YFilter
    localAs.EntityData.YangName = "local-as"
    localAs.EntityData.BundleName = "cisco_ios_xr"
    localAs.EntityData.ParentYangName = "neighbor"
    localAs.EntityData.SegmentPath = "local-as"
    localAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + localAs.EntityData.SegmentPath
    localAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAs.EntityData.Children = types.NewOrderedMap()
    localAs.EntityData.Leafs = types.NewOrderedMap()
    localAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", localAs.AsXx})
    localAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", localAs.AsYy})
    localAs.EntityData.Leafs.Append("no-prepend", types.YLeaf{"NoPrepend", localAs.NoPrepend})
    localAs.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", localAs.Disable})
    localAs.EntityData.Leafs.Append("replace-as", types.YLeaf{"ReplaceAs", localAs.ReplaceAs})
    localAs.EntityData.Leafs.Append("dual-as", types.YLeaf{"DualAs", localAs.DualAs})

    localAs.EntityData.YListKeys = []string {}

    return &(localAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetEntityData() *types.CommonEntityData {
    password.EntityData.YFilter = password.YFilter
    password.EntityData.YangName = "password"
    password.EntityData.BundleName = "cisco_ios_xr"
    password.EntityData.ParentYangName = "neighbor"
    password.EntityData.SegmentPath = "password"
    password.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + password.EntityData.SegmentPath
    password.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    password.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    password.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    password.EntityData.Children = types.NewOrderedMap()
    password.EntityData.Leafs = types.NewOrderedMap()
    password.EntityData.Leafs.Append("password-disable", types.YLeaf{"PasswordDisable", password.PasswordDisable})
    password.EntityData.Leafs.Append("password", types.YLeaf{"Password", password.Password})

    password.EntityData.YListKeys = []string {}

    return &(password.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetEntityData() *types.CommonEntityData {
    advertisementInterval.EntityData.YFilter = advertisementInterval.YFilter
    advertisementInterval.EntityData.YangName = "advertisement-interval"
    advertisementInterval.EntityData.BundleName = "cisco_ios_xr"
    advertisementInterval.EntityData.ParentYangName = "neighbor"
    advertisementInterval.EntityData.SegmentPath = "advertisement-interval"
    advertisementInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + advertisementInterval.EntityData.SegmentPath
    advertisementInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisementInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisementInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisementInterval.EntityData.Children = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", advertisementInterval.MinimumInterval})
    advertisementInterval.EntityData.Leafs.Append("minimum-interval-msecs", types.YLeaf{"MinimumIntervalMsecs", advertisementInterval.MinimumIntervalMsecs})

    advertisementInterval.EntityData.YListKeys = []string {}

    return &(advertisementInterval.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetEntityData() *types.CommonEntityData {
    neighborClusterId.EntityData.YFilter = neighborClusterId.YFilter
    neighborClusterId.EntityData.YangName = "neighbor-cluster-id"
    neighborClusterId.EntityData.BundleName = "cisco_ios_xr"
    neighborClusterId.EntityData.ParentYangName = "neighbor"
    neighborClusterId.EntityData.SegmentPath = "neighbor-cluster-id"
    neighborClusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + neighborClusterId.EntityData.SegmentPath
    neighborClusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborClusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborClusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborClusterId.EntityData.Children = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", neighborClusterId.ClusterIdNumber})
    neighborClusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", neighborClusterId.ClusterIdAddress})

    neighborClusterId.EntityData.YListKeys = []string {}

    return &(neighborClusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetEntityData() *types.CommonEntityData {
    tcpmss.EntityData.YFilter = tcpmss.YFilter
    tcpmss.EntityData.YangName = "tcpmss"
    tcpmss.EntityData.BundleName = "cisco_ios_xr"
    tcpmss.EntityData.ParentYangName = "neighbor"
    tcpmss.EntityData.SegmentPath = "tcpmss"
    tcpmss.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + tcpmss.EntityData.SegmentPath
    tcpmss.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpmss.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpmss.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpmss.EntityData.Children = types.NewOrderedMap()
    tcpmss.EntityData.Leafs = types.NewOrderedMap()
    tcpmss.EntityData.Leafs.Append("tcpmss-disable", types.YLeaf{"TcpmssDisable", tcpmss.TcpmssDisable})
    tcpmss.EntityData.Leafs.Append("mss", types.YLeaf{"Mss", tcpmss.Mss})

    tcpmss.EntityData.YListKeys = []string {}

    return &(tcpmss.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "neighbor"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetEntityData() *types.CommonEntityData {
    updateInFiltering.EntityData.YFilter = updateInFiltering.YFilter
    updateInFiltering.EntityData.YangName = "update-in-filtering"
    updateInFiltering.EntityData.BundleName = "cisco_ios_xr"
    updateInFiltering.EntityData.ParentYangName = "neighbor"
    updateInFiltering.EntityData.SegmentPath = "update-in-filtering"
    updateInFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + updateInFiltering.EntityData.SegmentPath
    updateInFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFiltering.EntityData.Children = types.NewOrderedMap()
    updateInFiltering.EntityData.Children.Append("update-in-filtering-message-buffers", types.YChild{"UpdateInFilteringMessageBuffers", &updateInFiltering.UpdateInFilteringMessageBuffers})
    updateInFiltering.EntityData.Leafs = types.NewOrderedMap()
    updateInFiltering.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", updateInFiltering.Enable})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-attribute-filter-group", types.YLeaf{"UpdateInFilteringAttributeFilterGroup", updateInFiltering.UpdateInFilteringAttributeFilterGroup})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-syslog-disable", types.YLeaf{"UpdateInFilteringSyslogDisable", updateInFiltering.UpdateInFilteringSyslogDisable})

    updateInFiltering.EntityData.YListKeys = []string {}

    return &(updateInFiltering.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetEntityData() *types.CommonEntityData {
    updateInFilteringMessageBuffers.EntityData.YFilter = updateInFilteringMessageBuffers.YFilter
    updateInFilteringMessageBuffers.EntityData.YangName = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.BundleName = "cisco_ios_xr"
    updateInFilteringMessageBuffers.EntityData.ParentYangName = "update-in-filtering"
    updateInFilteringMessageBuffers.EntityData.SegmentPath = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/update-in-filtering/" + updateInFilteringMessageBuffers.EntityData.SegmentPath
    updateInFilteringMessageBuffers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFilteringMessageBuffers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFilteringMessageBuffers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFilteringMessageBuffers.EntityData.Children = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("number-of-buffers", types.YLeaf{"NumberOfBuffers", updateInFilteringMessageBuffers.NumberOfBuffers})
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("non-circular-buffer", types.YLeaf{"NonCircularBuffer", updateInFilteringMessageBuffers.NonCircularBuffer})

    updateInFilteringMessageBuffers.EntityData.YListKeys = []string {}

    return &(updateInFilteringMessageBuffers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetEntityData() *types.CommonEntityData {
    msgLogOut.EntityData.YFilter = msgLogOut.YFilter
    msgLogOut.EntityData.YangName = "msg-log-out"
    msgLogOut.EntityData.BundleName = "cisco_ios_xr"
    msgLogOut.EntityData.ParentYangName = "neighbor"
    msgLogOut.EntityData.SegmentPath = "msg-log-out"
    msgLogOut.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + msgLogOut.EntityData.SegmentPath
    msgLogOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogOut.EntityData.Children = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogOut.MsgBufCount})
    msgLogOut.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogOut.MsgLogDisable})
    msgLogOut.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogOut.MsgLogInheritDisable})

    msgLogOut.EntityData.YListKeys = []string {}

    return &(msgLogOut.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AoKeychain
// Set or disable AO based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AoKeychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having AO keychain based authentication
    // even if the parent has one.FALSE to enable AO keychain based
    // authentication. The type is bool.
    AoKeychainDisable interface{}

    // Name of the AO keychain associated with this neighbor. The type is string.
    AoKeychainName interface{}

    // Include TCP options header with AO. The type is bool.
    AoIncludeTcpOptions interface{}

    // Accept new connections even though AO mismatched. The type is bool.
    AoAcceptMismatchConnection interface{}
}

func (aoKeychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AoKeychain) GetEntityData() *types.CommonEntityData {
    aoKeychain.EntityData.YFilter = aoKeychain.YFilter
    aoKeychain.EntityData.YangName = "ao-keychain"
    aoKeychain.EntityData.BundleName = "cisco_ios_xr"
    aoKeychain.EntityData.ParentYangName = "neighbor"
    aoKeychain.EntityData.SegmentPath = "ao-keychain"
    aoKeychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + aoKeychain.EntityData.SegmentPath
    aoKeychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aoKeychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aoKeychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aoKeychain.EntityData.Children = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs.Append("ao-keychain-disable", types.YLeaf{"AoKeychainDisable", aoKeychain.AoKeychainDisable})
    aoKeychain.EntityData.Leafs.Append("ao-keychain-name", types.YLeaf{"AoKeychainName", aoKeychain.AoKeychainName})
    aoKeychain.EntityData.Leafs.Append("ao-include-tcp-options", types.YLeaf{"AoIncludeTcpOptions", aoKeychain.AoIncludeTcpOptions})
    aoKeychain.EntityData.Leafs.Append("ao-accept-mismatch-connection", types.YLeaf{"AoAcceptMismatchConnection", aoKeychain.AoAcceptMismatchConnection})

    aoKeychain.EntityData.YListKeys = []string {}

    return &(aoKeychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetEntityData() *types.CommonEntityData {
    receiveBufferSize.EntityData.YFilter = receiveBufferSize.YFilter
    receiveBufferSize.EntityData.YangName = "receive-buffer-size"
    receiveBufferSize.EntityData.BundleName = "cisco_ios_xr"
    receiveBufferSize.EntityData.ParentYangName = "neighbor"
    receiveBufferSize.EntityData.SegmentPath = "receive-buffer-size"
    receiveBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + receiveBufferSize.EntityData.SegmentPath
    receiveBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveBufferSize.EntityData.Children = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveBufferSize.SocketReceiveSize})
    receiveBufferSize.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveBufferSize.BgpReceiveSize})

    receiveBufferSize.EntityData.YListKeys = []string {}

    return &(receiveBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetEntityData() *types.CommonEntityData {
    msgLogIn.EntityData.YFilter = msgLogIn.YFilter
    msgLogIn.EntityData.YangName = "msg-log-in"
    msgLogIn.EntityData.BundleName = "cisco_ios_xr"
    msgLogIn.EntityData.ParentYangName = "neighbor"
    msgLogIn.EntityData.SegmentPath = "msg-log-in"
    msgLogIn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + msgLogIn.EntityData.SegmentPath
    msgLogIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogIn.EntityData.Children = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogIn.MsgBufCount})
    msgLogIn.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogIn.MsgLogDisable})
    msgLogIn.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogIn.MsgLogInheritDisable})

    msgLogIn.EntityData.YListKeys = []string {}

    return &(msgLogIn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetEntityData() *types.CommonEntityData {
    sendBufferSize.EntityData.YFilter = sendBufferSize.YFilter
    sendBufferSize.EntityData.YangName = "send-buffer-size"
    sendBufferSize.EntityData.BundleName = "cisco_ios_xr"
    sendBufferSize.EntityData.ParentYangName = "neighbor"
    sendBufferSize.EntityData.SegmentPath = "send-buffer-size"
    sendBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + sendBufferSize.EntityData.SegmentPath
    sendBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendBufferSize.EntityData.Children = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendBufferSize.SocketSendSize})
    sendBufferSize.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendBufferSize.BgpSendSize})

    sendBufferSize.EntityData.YListKeys = []string {}

    return &(sendBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "neighbor"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", timers.KeepaliveInterval})
    timers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", timers.HoldTime})
    timers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", timers.MinAcceptHoldTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "cisco_ios_xr"
    keychain.EntityData.ParentYangName = "neighbor"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()
    keychain.EntityData.Leafs.Append("keychain-disable", types.YLeaf{"KeychainDisable", keychain.KeychainDisable})
    keychain.EntityData.Leafs.Append("keychain-name", types.YLeaf{"KeychainName", keychain.KeychainName})

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetEntityData() *types.CommonEntityData {
    gracefulMaintenance.EntityData.YFilter = gracefulMaintenance.YFilter
    gracefulMaintenance.EntityData.YangName = "graceful-maintenance"
    gracefulMaintenance.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenance.EntityData.ParentYangName = "neighbor"
    gracefulMaintenance.EntityData.SegmentPath = "graceful-maintenance"
    gracefulMaintenance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/" + gracefulMaintenance.EntityData.SegmentPath
    gracefulMaintenance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenance.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-local-preference", types.YChild{"GracefulMaintenanceLocalPreference", &gracefulMaintenance.GracefulMaintenanceLocalPreference})
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-as-prepends", types.YChild{"GracefulMaintenanceAsPrepends", &gracefulMaintenance.GracefulMaintenanceAsPrepends})
    gracefulMaintenance.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", gracefulMaintenance.Enable})
    gracefulMaintenance.EntityData.Leafs.Append("graceful-maintenance-activate", types.YLeaf{"GracefulMaintenanceActivate", gracefulMaintenance.GracefulMaintenanceActivate})

    gracefulMaintenance.EntityData.YListKeys = []string {}

    return &(gracefulMaintenance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceLocalPreference.EntityData.YFilter = gracefulMaintenanceLocalPreference.YFilter
    gracefulMaintenanceLocalPreference.EntityData.YangName = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceLocalPreference.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceLocalPreference.EntityData.SegmentPath = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/graceful-maintenance/" + gracefulMaintenanceLocalPreference.EntityData.SegmentPath
    gracefulMaintenanceLocalPreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceLocalPreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceLocalPreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceLocalPreference.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("gshut-loc-pref-disable", types.YLeaf{"GshutLocPrefDisable", gracefulMaintenanceLocalPreference.GshutLocPrefDisable})
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", gracefulMaintenanceLocalPreference.LocalPreference})

    gracefulMaintenanceLocalPreference.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceLocalPreference.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceAsPrepends.EntityData.YFilter = gracefulMaintenanceAsPrepends.YFilter
    gracefulMaintenanceAsPrepends.EntityData.YangName = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceAsPrepends.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceAsPrepends.EntityData.SegmentPath = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor/graceful-maintenance/" + gracefulMaintenanceAsPrepends.EntityData.SegmentPath
    gracefulMaintenanceAsPrepends.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceAsPrepends.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceAsPrepends.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceAsPrepends.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("gshut-prepends-disable", types.YLeaf{"GshutPrependsDisable", gracefulMaintenanceAsPrepends.GshutPrependsDisable})
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("as-prepends", types.YLeaf{"AsPrepends", gracefulMaintenanceAsPrepends.AsPrepends})

    gracefulMaintenanceAsPrepends.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceAsPrepends.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength
// A particular BGP peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Prefix length. The type is interface{} with range:
    // 0..127.
    PrefixLength interface{}

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is BgpNbrgr.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability. FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // BGP neighbor AF configuration table.
    NeighborAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut

    // Set or disable AO based authentication.
    AoKeychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AoKeychain

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetEntityData() *types.CommonEntityData {
    neighborPrefixLength.EntityData.YFilter = neighborPrefixLength.YFilter
    neighborPrefixLength.EntityData.YangName = "neighbor-prefix-length"
    neighborPrefixLength.EntityData.BundleName = "cisco_ios_xr"
    neighborPrefixLength.EntityData.ParentYangName = "neighbors"
    neighborPrefixLength.EntityData.SegmentPath = "neighbor-prefix-length" + types.AddKeyToken(neighborPrefixLength.PrefixLength, "prefix-length") + types.AddKeyToken(neighborPrefixLength.NeighborAddress, "neighbor-address")
    neighborPrefixLength.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/" + neighborPrefixLength.EntityData.SegmentPath
    neighborPrefixLength.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborPrefixLength.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborPrefixLength.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborPrefixLength.EntityData.Children = types.NewOrderedMap()
    neighborPrefixLength.EntityData.Children.Append("neighbor-afs", types.YChild{"NeighborAfs", &neighborPrefixLength.NeighborAfs})
    neighborPrefixLength.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &neighborPrefixLength.LocalAddress})
    neighborPrefixLength.EntityData.Children.Append("bmp-activates", types.YChild{"BmpActivates", &neighborPrefixLength.BmpActivates})
    neighborPrefixLength.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &neighborPrefixLength.EbgpMultihop})
    neighborPrefixLength.EntityData.Children.Append("remote-as", types.YChild{"RemoteAs", &neighborPrefixLength.RemoteAs})
    neighborPrefixLength.EntityData.Children.Append("local-as", types.YChild{"LocalAs", &neighborPrefixLength.LocalAs})
    neighborPrefixLength.EntityData.Children.Append("password", types.YChild{"Password", &neighborPrefixLength.Password})
    neighborPrefixLength.EntityData.Children.Append("advertisement-interval", types.YChild{"AdvertisementInterval", &neighborPrefixLength.AdvertisementInterval})
    neighborPrefixLength.EntityData.Children.Append("neighbor-cluster-id", types.YChild{"NeighborClusterId", &neighborPrefixLength.NeighborClusterId})
    neighborPrefixLength.EntityData.Children.Append("tcpmss", types.YChild{"Tcpmss", &neighborPrefixLength.Tcpmss})
    neighborPrefixLength.EntityData.Children.Append("tos", types.YChild{"Tos", &neighborPrefixLength.Tos})
    neighborPrefixLength.EntityData.Children.Append("update-in-filtering", types.YChild{"UpdateInFiltering", &neighborPrefixLength.UpdateInFiltering})
    neighborPrefixLength.EntityData.Children.Append("msg-log-out", types.YChild{"MsgLogOut", &neighborPrefixLength.MsgLogOut})
    neighborPrefixLength.EntityData.Children.Append("ao-keychain", types.YChild{"AoKeychain", &neighborPrefixLength.AoKeychain})
    neighborPrefixLength.EntityData.Children.Append("receive-buffer-size", types.YChild{"ReceiveBufferSize", &neighborPrefixLength.ReceiveBufferSize})
    neighborPrefixLength.EntityData.Children.Append("msg-log-in", types.YChild{"MsgLogIn", &neighborPrefixLength.MsgLogIn})
    neighborPrefixLength.EntityData.Children.Append("send-buffer-size", types.YChild{"SendBufferSize", &neighborPrefixLength.SendBufferSize})
    neighborPrefixLength.EntityData.Children.Append("timers", types.YChild{"Timers", &neighborPrefixLength.Timers})
    neighborPrefixLength.EntityData.Children.Append("keychain", types.YChild{"Keychain", &neighborPrefixLength.Keychain})
    neighborPrefixLength.EntityData.Children.Append("graceful-maintenance", types.YChild{"GracefulMaintenance", &neighborPrefixLength.GracefulMaintenance})
    neighborPrefixLength.EntityData.Leafs = types.NewOrderedMap()
    neighborPrefixLength.EntityData.Leafs.Append("prefix-length", types.YLeaf{"PrefixLength", neighborPrefixLength.PrefixLength})
    neighborPrefixLength.EntityData.Leafs.Append("neighbor-address", types.YLeaf{"NeighborAddress", neighborPrefixLength.NeighborAddress})
    neighborPrefixLength.EntityData.Leafs.Append("internal-vpn-client-ibgp-ce", types.YLeaf{"InternalVpnClientIbgpCe", neighborPrefixLength.InternalVpnClientIbgpCe})
    neighborPrefixLength.EntityData.Leafs.Append("session-group-add-member", types.YLeaf{"SessionGroupAddMember", neighborPrefixLength.SessionGroupAddMember})
    neighborPrefixLength.EntityData.Leafs.Append("egress-peer-engineering", types.YLeaf{"EgressPeerEngineering", neighborPrefixLength.EgressPeerEngineering})
    neighborPrefixLength.EntityData.Leafs.Append("neighbor-graceful-restart-stalepath-time", types.YLeaf{"NeighborGracefulRestartStalepathTime", neighborPrefixLength.NeighborGracefulRestartStalepathTime})
    neighborPrefixLength.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", neighborPrefixLength.Shutdown})
    neighborPrefixLength.EntityData.Leafs.Append("description", types.YLeaf{"Description", neighborPrefixLength.Description})
    neighborPrefixLength.EntityData.Leafs.Append("neighbor-group-add-member", types.YLeaf{"NeighborGroupAddMember", neighborPrefixLength.NeighborGroupAddMember})
    neighborPrefixLength.EntityData.Leafs.Append("ebgp-recv-dmz", types.YLeaf{"EbgpRecvDmz", neighborPrefixLength.EbgpRecvDmz})
    neighborPrefixLength.EntityData.Leafs.Append("neighbor-graceful-restart", types.YLeaf{"NeighborGracefulRestart", neighborPrefixLength.NeighborGracefulRestart})
    neighborPrefixLength.EntityData.Leafs.Append("enforce-first-as", types.YLeaf{"EnforceFirstAs", neighborPrefixLength.EnforceFirstAs})
    neighborPrefixLength.EntityData.Leafs.Append("idle-watch-time", types.YLeaf{"IdleWatchTime", neighborPrefixLength.IdleWatchTime})
    neighborPrefixLength.EntityData.Leafs.Append("session-open-mode", types.YLeaf{"SessionOpenMode", neighborPrefixLength.SessionOpenMode})
    neighborPrefixLength.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", neighborPrefixLength.RpkiOriginAsValidationDisable})
    neighborPrefixLength.EntityData.Leafs.Append("ebgp-send-dmz-enable-modes", types.YLeaf{"EbgpSendDmzEnableModes", neighborPrefixLength.EbgpSendDmzEnableModes})
    neighborPrefixLength.EntityData.Leafs.Append("suppress-all-capabilities", types.YLeaf{"SuppressAllCapabilities", neighborPrefixLength.SuppressAllCapabilities})
    neighborPrefixLength.EntityData.Leafs.Append("max-peers", types.YLeaf{"MaxPeers", neighborPrefixLength.MaxPeers})
    neighborPrefixLength.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", neighborPrefixLength.RpkiBestpathOriginAsAllowInvalid})
    neighborPrefixLength.EntityData.Leafs.Append("additional-paths-send-capability", types.YLeaf{"AdditionalPathsSendCapability", neighborPrefixLength.AdditionalPathsSendCapability})
    neighborPrefixLength.EntityData.Leafs.Append("propagate-dmz-link-bandwidth", types.YLeaf{"PropagateDmzLinkBandwidth", neighborPrefixLength.PropagateDmzLinkBandwidth})
    neighborPrefixLength.EntityData.Leafs.Append("bfd-enable-modes", types.YLeaf{"BfdEnableModes", neighborPrefixLength.BfdEnableModes})
    neighborPrefixLength.EntityData.Leafs.Append("ttl-security", types.YLeaf{"TtlSecurity", neighborPrefixLength.TtlSecurity})
    neighborPrefixLength.EntityData.Leafs.Append("neighbor-graceful-restart-time", types.YLeaf{"NeighborGracefulRestartTime", neighborPrefixLength.NeighborGracefulRestartTime})
    neighborPrefixLength.EntityData.Leafs.Append("bfd-multiplier", types.YLeaf{"BfdMultiplier", neighborPrefixLength.BfdMultiplier})
    neighborPrefixLength.EntityData.Leafs.Append("bfd-minimum-interval", types.YLeaf{"BfdMinimumInterval", neighborPrefixLength.BfdMinimumInterval})
    neighborPrefixLength.EntityData.Leafs.Append("remote-as-list", types.YLeaf{"RemoteAsList", neighborPrefixLength.RemoteAsList})
    neighborPrefixLength.EntityData.Leafs.Append("additional-paths-receive-capability", types.YLeaf{"AdditionalPathsReceiveCapability", neighborPrefixLength.AdditionalPathsReceiveCapability})
    neighborPrefixLength.EntityData.Leafs.Append("ignore-connected-check-ebgp", types.YLeaf{"IgnoreConnectedCheckEbgp", neighborPrefixLength.IgnoreConnectedCheckEbgp})
    neighborPrefixLength.EntityData.Leafs.Append("suppress-four-byte-as-capability", types.YLeaf{"SuppressFourByteAsCapability", neighborPrefixLength.SuppressFourByteAsCapability})
    neighborPrefixLength.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", neighborPrefixLength.UpdateSourceInterface})

    neighborPrefixLength.EntityData.YListKeys = []string {"PrefixLength", "NeighborAddress"}

    return &(neighborPrefixLength.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs
// BGP neighbor AF configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family type of neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf.
    NeighborAf []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetEntityData() *types.CommonEntityData {
    neighborAfs.EntityData.YFilter = neighborAfs.YFilter
    neighborAfs.EntityData.YangName = "neighbor-afs"
    neighborAfs.EntityData.BundleName = "cisco_ios_xr"
    neighborAfs.EntityData.ParentYangName = "neighbor-prefix-length"
    neighborAfs.EntityData.SegmentPath = "neighbor-afs"
    neighborAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + neighborAfs.EntityData.SegmentPath
    neighborAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfs.EntityData.Children = types.NewOrderedMap()
    neighborAfs.EntityData.Children.Append("neighbor-af", types.YChild{"NeighborAf", nil})
    for i := range neighborAfs.NeighborAf {
        neighborAfs.EntityData.Children.Append(types.GetSegmentPath(neighborAfs.NeighborAf[i]), types.YChild{"NeighborAf", neighborAfs.NeighborAf[i]})
    }
    neighborAfs.EntityData.Leafs = types.NewOrderedMap()

    neighborAfs.EntityData.YListKeys = []string {}

    return &(neighborAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf
// Address family type of neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2vpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group. FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT. FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client. FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Name of the ORR group this neighbor is going to be part of. The type is
    // string.
    OptimalRouteReflectionGroup interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetEntityData() *types.CommonEntityData {
    neighborAf.EntityData.YFilter = neighborAf.YFilter
    neighborAf.EntityData.YangName = "neighbor-af"
    neighborAf.EntityData.BundleName = "cisco_ios_xr"
    neighborAf.EntityData.ParentYangName = "neighbor-afs"
    neighborAf.EntityData.SegmentPath = "neighbor-af" + types.AddKeyToken(neighborAf.AfName, "af-name")
    neighborAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/" + neighborAf.EntityData.SegmentPath
    neighborAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAf.EntityData.Children = types.NewOrderedMap()
    neighborAf.EntityData.Children.Append("aigp-cost-community", types.YChild{"AigpCostCommunity", &neighborAf.AigpCostCommunity})
    neighborAf.EntityData.Children.Append("advertise-def-imp-disable-v6", types.YChild{"AdvertiseDefImpDisableV6", &neighborAf.AdvertiseDefImpDisableV6})
    neighborAf.EntityData.Children.Append("advertise-disable", types.YChild{"AdvertiseDisable", &neighborAf.AdvertiseDisable})
    neighborAf.EntityData.Children.Append("maximum-prefixes", types.YChild{"MaximumPrefixes", &neighborAf.MaximumPrefixes})
    neighborAf.EntityData.Children.Append("remove-private-as-entire-as-path-inbound", types.YChild{"RemovePrivateAsEntireAsPathInbound", &neighborAf.RemovePrivateAsEntireAsPathInbound})
    neighborAf.EntityData.Children.Append("advertise-def-imp-disable-v4", types.YChild{"AdvertiseDefImpDisableV4", &neighborAf.AdvertiseDefImpDisableV4})
    neighborAf.EntityData.Children.Append("advertise-l2vpn-evpn", types.YChild{"AdvertiseL2vpnEvpn", &neighborAf.AdvertiseL2vpnEvpn})
    neighborAf.EntityData.Children.Append("advertise-local-l2vpn-evpn", types.YChild{"AdvertiseLocalL2vpnEvpn", &neighborAf.AdvertiseLocalL2vpnEvpn})
    neighborAf.EntityData.Children.Append("neighbor-af-long-lived-graceful-restart-stale-time", types.YChild{"NeighborAfLongLivedGracefulRestartStaleTime", &neighborAf.NeighborAfLongLivedGracefulRestartStaleTime})
    neighborAf.EntityData.Children.Append("advertise-v6", types.YChild{"AdvertiseV6", &neighborAf.AdvertiseV6})
    neighborAf.EntityData.Children.Append("advertise-local-v6", types.YChild{"AdvertiseLocalV6", &neighborAf.AdvertiseLocalV6})
    neighborAf.EntityData.Children.Append("import", types.YChild{"Import", &neighborAf.Import})
    neighborAf.EntityData.Children.Append("default-originate", types.YChild{"DefaultOriginate", &neighborAf.DefaultOriginate})
    neighborAf.EntityData.Children.Append("soft-reconfiguration", types.YChild{"SoftReconfiguration", &neighborAf.SoftReconfiguration})
    neighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v6", types.YChild{"AdvertiseVrfImpDisableV6", &neighborAf.AdvertiseVrfImpDisableV6})
    neighborAf.EntityData.Children.Append("advertise-v4", types.YChild{"AdvertiseV4", &neighborAf.AdvertiseV4})
    neighborAf.EntityData.Children.Append("advertise-local-v4", types.YChild{"AdvertiseLocalV4", &neighborAf.AdvertiseLocalV4})
    neighborAf.EntityData.Children.Append("remove-private-as-entire-as-path", types.YChild{"RemovePrivateAsEntireAsPath", &neighborAf.RemovePrivateAsEntireAsPath})
    neighborAf.EntityData.Children.Append("advertise-vrf-imp-disable-v4", types.YChild{"AdvertiseVrfImpDisableV4", &neighborAf.AdvertiseVrfImpDisableV4})
    neighborAf.EntityData.Leafs = types.NewOrderedMap()
    neighborAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", neighborAf.AfName})
    neighborAf.EntityData.Leafs.Append("neighbor-af-long-lived-graceful-restart-capable", types.YLeaf{"NeighborAfLongLivedGracefulRestartCapable", neighborAf.NeighborAfLongLivedGracefulRestartCapable})
    neighborAf.EntityData.Leafs.Append("l2vpn-signalling", types.YLeaf{"L2vpnSignalling", neighborAf.L2vpnSignalling})
    neighborAf.EntityData.Leafs.Append("send-ext-community-ebgp", types.YLeaf{"SendExtCommunityEbgp", neighborAf.SendExtCommunityEbgp})
    neighborAf.EntityData.Leafs.Append("accept-route-legacy-rt", types.YLeaf{"AcceptRouteLegacyRt", neighborAf.AcceptRouteLegacyRt})
    neighborAf.EntityData.Leafs.Append("send-community-ebgp", types.YLeaf{"SendCommunityEbgp", neighborAf.SendCommunityEbgp})
    neighborAf.EntityData.Leafs.Append("send-multicast-attr", types.YLeaf{"SendMulticastAttr", neighborAf.SendMulticastAttr})
    neighborAf.EntityData.Leafs.Append("next-hop-unchanged", types.YLeaf{"NextHopUnchanged", neighborAf.NextHopUnchanged})
    neighborAf.EntityData.Leafs.Append("advertise-local-labeled-route", types.YLeaf{"AdvertiseLocalLabeledRoute", neighborAf.AdvertiseLocalLabeledRoute})
    neighborAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", neighborAf.RpkiOriginAsValidationDisable})
    neighborAf.EntityData.Leafs.Append("flowspec-validation", types.YLeaf{"FlowspecValidation", neighborAf.FlowspecValidation})
    neighborAf.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", neighborAf.EncapsulationType})
    neighborAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", neighborAf.RpkiBestpathOriginAsAllowInvalid})
    neighborAf.EntityData.Leafs.Append("enforce-multiple-labels", types.YLeaf{"EnforceMultipleLabels", neighborAf.EnforceMultipleLabels})
    neighborAf.EntityData.Leafs.Append("as-override", types.YLeaf{"AsOverride", neighborAf.AsOverride})
    neighborAf.EntityData.Leafs.Append("multipath", types.YLeaf{"Multipath", neighborAf.Multipath})
    neighborAf.EntityData.Leafs.Append("send-community-ebgp-graceful-shutdown", types.YLeaf{"SendCommunityEbgpGracefulShutdown", neighborAf.SendCommunityEbgpGracefulShutdown})
    neighborAf.EntityData.Leafs.Append("activate", types.YLeaf{"Activate", neighborAf.Activate})
    neighborAf.EntityData.Leafs.Append("prefix-orf-policy", types.YLeaf{"PrefixOrfPolicy", neighborAf.PrefixOrfPolicy})
    neighborAf.EntityData.Leafs.Append("aigp", types.YLeaf{"Aigp", neighborAf.Aigp})
    neighborAf.EntityData.Leafs.Append("aigp-send-med", types.YLeaf{"AigpSendMed", neighborAf.AigpSendMed})
    neighborAf.EntityData.Leafs.Append("allow-as-in", types.YLeaf{"AllowAsIn", neighborAf.AllowAsIn})
    neighborAf.EntityData.Leafs.Append("advertise-orf", types.YLeaf{"AdvertiseOrf", neighborAf.AdvertiseOrf})
    neighborAf.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", neighborAf.RouteReflectorClient})
    neighborAf.EntityData.Leafs.Append("next-hop-self", types.YLeaf{"NextHopSelf", neighborAf.NextHopSelf})
    neighborAf.EntityData.Leafs.Append("route-policy-in", types.YLeaf{"RoutePolicyIn", neighborAf.RoutePolicyIn})
    neighborAf.EntityData.Leafs.Append("default-weight", types.YLeaf{"DefaultWeight", neighborAf.DefaultWeight})
    neighborAf.EntityData.Leafs.Append("af-group", types.YLeaf{"AfGroup", neighborAf.AfGroup})
    neighborAf.EntityData.Leafs.Append("next-hop-unchanged-multipath", types.YLeaf{"NextHopUnchangedMultipath", neighborAf.NextHopUnchangedMultipath})
    neighborAf.EntityData.Leafs.Append("optimal-route-reflection-group", types.YLeaf{"OptimalRouteReflectionGroup", neighborAf.OptimalRouteReflectionGroup})
    neighborAf.EntityData.Leafs.Append("accept-own", types.YLeaf{"AcceptOwn", neighborAf.AcceptOwn})
    neighborAf.EntityData.Leafs.Append("route-policy-out", types.YLeaf{"RoutePolicyOut", neighborAf.RoutePolicyOut})
    neighborAf.EntityData.Leafs.Append("advertise-permanent-network", types.YLeaf{"AdvertisePermanentNetwork", neighborAf.AdvertisePermanentNetwork})

    neighborAf.EntityData.YListKeys = []string {"AfName"}

    return &(neighborAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetEntityData() *types.CommonEntityData {
    aigpCostCommunity.EntityData.YFilter = aigpCostCommunity.YFilter
    aigpCostCommunity.EntityData.YangName = "aigp-cost-community"
    aigpCostCommunity.EntityData.BundleName = "cisco_ios_xr"
    aigpCostCommunity.EntityData.ParentYangName = "neighbor-af"
    aigpCostCommunity.EntityData.SegmentPath = "aigp-cost-community"
    aigpCostCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + aigpCostCommunity.EntityData.SegmentPath
    aigpCostCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aigpCostCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aigpCostCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aigpCostCommunity.EntityData.Children = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", aigpCostCommunity.Enable})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-id", types.YLeaf{"CostCommunityId", aigpCostCommunity.CostCommunityId})
    aigpCostCommunity.EntityData.Leafs.Append("transitive", types.YLeaf{"Transitive", aigpCostCommunity.Transitive})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-poi-type", types.YLeaf{"CostCommunityPoiType", aigpCostCommunity.CostCommunityPoiType})

    aigpCostCommunity.EntityData.YListKeys = []string {}

    return &(aigpCostCommunity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV6.EntityData.YFilter = advertiseDefImpDisableV6.YFilter
    advertiseDefImpDisableV6.EntityData.YangName = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV6.EntityData.ParentYangName = "neighbor-af"
    advertiseDefImpDisableV6.EntityData.SegmentPath = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseDefImpDisableV6.EntityData.SegmentPath
    advertiseDefImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV6.AfName})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV6.AdvOption})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV6.RtType})

    advertiseDefImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetEntityData() *types.CommonEntityData {
    advertiseDisable.EntityData.YFilter = advertiseDisable.YFilter
    advertiseDisable.EntityData.YangName = "advertise-disable"
    advertiseDisable.EntityData.BundleName = "cisco_ios_xr"
    advertiseDisable.EntityData.ParentYangName = "neighbor-af"
    advertiseDisable.EntityData.SegmentPath = "advertise-disable"
    advertiseDisable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseDisable.EntityData.SegmentPath
    advertiseDisable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDisable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDisable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDisable.EntityData.Children = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDisable.AfName})
    advertiseDisable.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseDisable.ReorgOption})
    advertiseDisable.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDisable.RtType})

    advertiseDisable.EntityData.YListKeys = []string {}

    return &(advertiseDisable.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetEntityData() *types.CommonEntityData {
    maximumPrefixes.EntityData.YFilter = maximumPrefixes.YFilter
    maximumPrefixes.EntityData.YangName = "maximum-prefixes"
    maximumPrefixes.EntityData.BundleName = "cisco_ios_xr"
    maximumPrefixes.EntityData.ParentYangName = "neighbor-af"
    maximumPrefixes.EntityData.SegmentPath = "maximum-prefixes"
    maximumPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + maximumPrefixes.EntityData.SegmentPath
    maximumPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumPrefixes.EntityData.Children = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs.Append("prefix-limit", types.YLeaf{"PrefixLimit", maximumPrefixes.PrefixLimit})
    maximumPrefixes.EntityData.Leafs.Append("warning-percentage", types.YLeaf{"WarningPercentage", maximumPrefixes.WarningPercentage})
    maximumPrefixes.EntityData.Leafs.Append("warning-only", types.YLeaf{"WarningOnly", maximumPrefixes.WarningOnly})
    maximumPrefixes.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", maximumPrefixes.RestartTime})
    maximumPrefixes.EntityData.Leafs.Append("discard-extra-paths", types.YLeaf{"DiscardExtraPaths", maximumPrefixes.DiscardExtraPaths})

    maximumPrefixes.EntityData.YListKeys = []string {}

    return &(maximumPrefixes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPathInbound.EntityData.YFilter = removePrivateAsEntireAsPathInbound.YFilter
    removePrivateAsEntireAsPathInbound.EntityData.YangName = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPathInbound.EntityData.ParentYangName = "neighbor-af"
    removePrivateAsEntireAsPathInbound.EntityData.SegmentPath = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + removePrivateAsEntireAsPathInbound.EntityData.SegmentPath
    removePrivateAsEntireAsPathInbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPathInbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPathInbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPathInbound.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPathInbound.Enable})
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPathInbound.Entire})

    removePrivateAsEntireAsPathInbound.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPathInbound.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV4.EntityData.YFilter = advertiseDefImpDisableV4.YFilter
    advertiseDefImpDisableV4.EntityData.YangName = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV4.EntityData.ParentYangName = "neighbor-af"
    advertiseDefImpDisableV4.EntityData.SegmentPath = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseDefImpDisableV4.EntityData.SegmentPath
    advertiseDefImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV4.AfName})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV4.AdvOption})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV4.RtType})

    advertiseDefImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseL2vpnEvpn.EntityData.YFilter = advertiseL2vpnEvpn.YFilter
    advertiseL2vpnEvpn.EntityData.YangName = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseL2vpnEvpn.EntityData.ParentYangName = "neighbor-af"
    advertiseL2vpnEvpn.EntityData.SegmentPath = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseL2vpnEvpn.EntityData.SegmentPath
    advertiseL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseL2vpnEvpn.AfName})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseL2vpnEvpn.ReorgOption})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseL2vpnEvpn.RtType})

    advertiseL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseLocalL2vpnEvpn.EntityData.YFilter = advertiseLocalL2vpnEvpn.YFilter
    advertiseLocalL2vpnEvpn.EntityData.YangName = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalL2vpnEvpn.EntityData.ParentYangName = "neighbor-af"
    advertiseLocalL2vpnEvpn.EntityData.SegmentPath = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseLocalL2vpnEvpn.EntityData.SegmentPath
    advertiseLocalL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalL2vpnEvpn.AfName})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalL2vpnEvpn.ReorgOption})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalL2vpnEvpn.RtType})

    advertiseLocalL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseLocalL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetEntityData() *types.CommonEntityData {
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YFilter = neighborAfLongLivedGracefulRestartStaleTime.YFilter
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YangName = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleName = "cisco_ios_xr"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.ParentYangName = "neighbor-af"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Children = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-send", types.YLeaf{"StaleTimeSend", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend})
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-accept", types.YLeaf{"StaleTimeAccept", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept})

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YListKeys = []string {}

    return &(neighborAfLongLivedGracefulRestartStaleTime.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetEntityData() *types.CommonEntityData {
    advertiseV6.EntityData.YFilter = advertiseV6.YFilter
    advertiseV6.EntityData.YangName = "advertise-v6"
    advertiseV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseV6.EntityData.ParentYangName = "neighbor-af"
    advertiseV6.EntityData.SegmentPath = "advertise-v6"
    advertiseV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseV6.EntityData.SegmentPath
    advertiseV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV6.EntityData.Children = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV6.AfName})
    advertiseV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV6.ReorgOption})
    advertiseV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV6.RtType})

    advertiseV6.EntityData.YListKeys = []string {}

    return &(advertiseV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetEntityData() *types.CommonEntityData {
    advertiseLocalV6.EntityData.YFilter = advertiseLocalV6.YFilter
    advertiseLocalV6.EntityData.YangName = "advertise-local-v6"
    advertiseLocalV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV6.EntityData.ParentYangName = "neighbor-af"
    advertiseLocalV6.EntityData.SegmentPath = "advertise-local-v6"
    advertiseLocalV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseLocalV6.EntityData.SegmentPath
    advertiseLocalV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV6.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV6.AfName})
    advertiseLocalV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV6.ReorgOption})
    advertiseLocalV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV6.RtType})

    advertiseLocalV6.EntityData.YListKeys = []string {}

    return &(advertiseLocalV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "import"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "neighbor-af"
    self.EntityData.SegmentPath = "import"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("import-stitching", types.YLeaf{"ImportStitching", self.ImportStitching})
    self.EntityData.Leafs.Append("import-reoriginate", types.YLeaf{"ImportReoriginate", self.ImportReoriginate})
    self.EntityData.Leafs.Append("import-reoriginate-stitching", types.YLeaf{"ImportReoriginateStitching", self.ImportReoriginateStitching})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetEntityData() *types.CommonEntityData {
    defaultOriginate.EntityData.YFilter = defaultOriginate.YFilter
    defaultOriginate.EntityData.YangName = "default-originate"
    defaultOriginate.EntityData.BundleName = "cisco_ios_xr"
    defaultOriginate.EntityData.ParentYangName = "neighbor-af"
    defaultOriginate.EntityData.SegmentPath = "default-originate"
    defaultOriginate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + defaultOriginate.EntityData.SegmentPath
    defaultOriginate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultOriginate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultOriginate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultOriginate.EntityData.Children = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", defaultOriginate.Enable})
    defaultOriginate.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", defaultOriginate.RoutePolicyName})

    defaultOriginate.EntityData.YListKeys = []string {}

    return &(defaultOriginate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetEntityData() *types.CommonEntityData {
    softReconfiguration.EntityData.YFilter = softReconfiguration.YFilter
    softReconfiguration.EntityData.YangName = "soft-reconfiguration"
    softReconfiguration.EntityData.BundleName = "cisco_ios_xr"
    softReconfiguration.EntityData.ParentYangName = "neighbor-af"
    softReconfiguration.EntityData.SegmentPath = "soft-reconfiguration"
    softReconfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + softReconfiguration.EntityData.SegmentPath
    softReconfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    softReconfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    softReconfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    softReconfiguration.EntityData.Children = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs.Append("inbound-soft", types.YLeaf{"InboundSoft", softReconfiguration.InboundSoft})
    softReconfiguration.EntityData.Leafs.Append("soft-always", types.YLeaf{"SoftAlways", softReconfiguration.SoftAlways})

    softReconfiguration.EntityData.YListKeys = []string {}

    return &(softReconfiguration.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV6.EntityData.YFilter = advertiseVrfImpDisableV6.YFilter
    advertiseVrfImpDisableV6.EntityData.YangName = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV6.EntityData.ParentYangName = "neighbor-af"
    advertiseVrfImpDisableV6.EntityData.SegmentPath = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseVrfImpDisableV6.EntityData.SegmentPath
    advertiseVrfImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV6.AfName})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV6.AdvOption})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV6.RtType})

    advertiseVrfImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetEntityData() *types.CommonEntityData {
    advertiseV4.EntityData.YFilter = advertiseV4.YFilter
    advertiseV4.EntityData.YangName = "advertise-v4"
    advertiseV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseV4.EntityData.ParentYangName = "neighbor-af"
    advertiseV4.EntityData.SegmentPath = "advertise-v4"
    advertiseV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseV4.EntityData.SegmentPath
    advertiseV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV4.EntityData.Children = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV4.AfName})
    advertiseV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV4.ReorgOption})
    advertiseV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV4.RtType})

    advertiseV4.EntityData.YListKeys = []string {}

    return &(advertiseV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetEntityData() *types.CommonEntityData {
    advertiseLocalV4.EntityData.YFilter = advertiseLocalV4.YFilter
    advertiseLocalV4.EntityData.YangName = "advertise-local-v4"
    advertiseLocalV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV4.EntityData.ParentYangName = "neighbor-af"
    advertiseLocalV4.EntityData.SegmentPath = "advertise-local-v4"
    advertiseLocalV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseLocalV4.EntityData.SegmentPath
    advertiseLocalV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV4.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV4.AfName})
    advertiseLocalV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV4.ReorgOption})
    advertiseLocalV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV4.RtType})

    advertiseLocalV4.EntityData.YListKeys = []string {}

    return &(advertiseLocalV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPath.EntityData.YFilter = removePrivateAsEntireAsPath.YFilter
    removePrivateAsEntireAsPath.EntityData.YangName = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPath.EntityData.ParentYangName = "neighbor-af"
    removePrivateAsEntireAsPath.EntityData.SegmentPath = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + removePrivateAsEntireAsPath.EntityData.SegmentPath
    removePrivateAsEntireAsPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPath.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPath.Enable})
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPath.Entire})

    removePrivateAsEntireAsPath.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPath.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV4.EntityData.YFilter = advertiseVrfImpDisableV4.YFilter
    advertiseVrfImpDisableV4.EntityData.YangName = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV4.EntityData.ParentYangName = "neighbor-af"
    advertiseVrfImpDisableV4.EntityData.SegmentPath = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/neighbor-afs/neighbor-af/" + advertiseVrfImpDisableV4.EntityData.SegmentPath
    advertiseVrfImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV4.AfName})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV4.AdvOption})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV4.RtType})

    advertiseVrfImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "neighbor-prefix-length"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("local-address-disable", types.YLeaf{"LocalAddressDisable", localAddress.LocalAddressDisable})
    localAddress.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", localAddress.LocalIpAddress})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate.
    BmpActivate []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetEntityData() *types.CommonEntityData {
    bmpActivates.EntityData.YFilter = bmpActivates.YFilter
    bmpActivates.EntityData.YangName = "bmp-activates"
    bmpActivates.EntityData.BundleName = "cisco_ios_xr"
    bmpActivates.EntityData.ParentYangName = "neighbor-prefix-length"
    bmpActivates.EntityData.SegmentPath = "bmp-activates"
    bmpActivates.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + bmpActivates.EntityData.SegmentPath
    bmpActivates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivates.EntityData.Children = types.NewOrderedMap()
    bmpActivates.EntityData.Children.Append("bmp-activate", types.YChild{"BmpActivate", nil})
    for i := range bmpActivates.BmpActivate {
        bmpActivates.EntityData.Children.Append(types.GetSegmentPath(bmpActivates.BmpActivate[i]), types.YChild{"BmpActivate", bmpActivates.BmpActivate[i]})
    }
    bmpActivates.EntityData.Leafs = types.NewOrderedMap()

    bmpActivates.EntityData.YListKeys = []string {}

    return &(bmpActivates.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetEntityData() *types.CommonEntityData {
    bmpActivate.EntityData.YFilter = bmpActivate.YFilter
    bmpActivate.EntityData.YangName = "bmp-activate"
    bmpActivate.EntityData.BundleName = "cisco_ios_xr"
    bmpActivate.EntityData.ParentYangName = "bmp-activates"
    bmpActivate.EntityData.SegmentPath = "bmp-activate" + types.AddKeyToken(bmpActivate.ServerId, "server-id")
    bmpActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/bmp-activates/" + bmpActivate.EntityData.SegmentPath
    bmpActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivate.EntityData.Children = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpActivate.ServerId})

    bmpActivate.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "cisco_ios_xr"
    ebgpMultihop.EntityData.ParentYangName = "neighbor-prefix-length"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs.Append("max-hop-count", types.YLeaf{"MaxHopCount", ebgpMultihop.MaxHopCount})
    ebgpMultihop.EntityData.Leafs.Append("mpls-deactivation", types.YLeaf{"MplsDeactivation", ebgpMultihop.MplsDeactivation})

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetEntityData() *types.CommonEntityData {
    remoteAs.EntityData.YFilter = remoteAs.YFilter
    remoteAs.EntityData.YangName = "remote-as"
    remoteAs.EntityData.BundleName = "cisco_ios_xr"
    remoteAs.EntityData.ParentYangName = "neighbor-prefix-length"
    remoteAs.EntityData.SegmentPath = "remote-as"
    remoteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + remoteAs.EntityData.SegmentPath
    remoteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteAs.EntityData.Children = types.NewOrderedMap()
    remoteAs.EntityData.Leafs = types.NewOrderedMap()
    remoteAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", remoteAs.AsXx})
    remoteAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", remoteAs.AsYy})

    remoteAs.EntityData.YListKeys = []string {}

    return &(remoteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetEntityData() *types.CommonEntityData {
    localAs.EntityData.YFilter = localAs.YFilter
    localAs.EntityData.YangName = "local-as"
    localAs.EntityData.BundleName = "cisco_ios_xr"
    localAs.EntityData.ParentYangName = "neighbor-prefix-length"
    localAs.EntityData.SegmentPath = "local-as"
    localAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + localAs.EntityData.SegmentPath
    localAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAs.EntityData.Children = types.NewOrderedMap()
    localAs.EntityData.Leafs = types.NewOrderedMap()
    localAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", localAs.AsXx})
    localAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", localAs.AsYy})
    localAs.EntityData.Leafs.Append("no-prepend", types.YLeaf{"NoPrepend", localAs.NoPrepend})
    localAs.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", localAs.Disable})
    localAs.EntityData.Leafs.Append("replace-as", types.YLeaf{"ReplaceAs", localAs.ReplaceAs})
    localAs.EntityData.Leafs.Append("dual-as", types.YLeaf{"DualAs", localAs.DualAs})

    localAs.EntityData.YListKeys = []string {}

    return &(localAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetEntityData() *types.CommonEntityData {
    password.EntityData.YFilter = password.YFilter
    password.EntityData.YangName = "password"
    password.EntityData.BundleName = "cisco_ios_xr"
    password.EntityData.ParentYangName = "neighbor-prefix-length"
    password.EntityData.SegmentPath = "password"
    password.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + password.EntityData.SegmentPath
    password.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    password.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    password.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    password.EntityData.Children = types.NewOrderedMap()
    password.EntityData.Leafs = types.NewOrderedMap()
    password.EntityData.Leafs.Append("password-disable", types.YLeaf{"PasswordDisable", password.PasswordDisable})
    password.EntityData.Leafs.Append("password", types.YLeaf{"Password", password.Password})

    password.EntityData.YListKeys = []string {}

    return &(password.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetEntityData() *types.CommonEntityData {
    advertisementInterval.EntityData.YFilter = advertisementInterval.YFilter
    advertisementInterval.EntityData.YangName = "advertisement-interval"
    advertisementInterval.EntityData.BundleName = "cisco_ios_xr"
    advertisementInterval.EntityData.ParentYangName = "neighbor-prefix-length"
    advertisementInterval.EntityData.SegmentPath = "advertisement-interval"
    advertisementInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + advertisementInterval.EntityData.SegmentPath
    advertisementInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisementInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisementInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisementInterval.EntityData.Children = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", advertisementInterval.MinimumInterval})
    advertisementInterval.EntityData.Leafs.Append("minimum-interval-msecs", types.YLeaf{"MinimumIntervalMsecs", advertisementInterval.MinimumIntervalMsecs})

    advertisementInterval.EntityData.YListKeys = []string {}

    return &(advertisementInterval.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetEntityData() *types.CommonEntityData {
    neighborClusterId.EntityData.YFilter = neighborClusterId.YFilter
    neighborClusterId.EntityData.YangName = "neighbor-cluster-id"
    neighborClusterId.EntityData.BundleName = "cisco_ios_xr"
    neighborClusterId.EntityData.ParentYangName = "neighbor-prefix-length"
    neighborClusterId.EntityData.SegmentPath = "neighbor-cluster-id"
    neighborClusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + neighborClusterId.EntityData.SegmentPath
    neighborClusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborClusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborClusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborClusterId.EntityData.Children = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", neighborClusterId.ClusterIdNumber})
    neighborClusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", neighborClusterId.ClusterIdAddress})

    neighborClusterId.EntityData.YListKeys = []string {}

    return &(neighborClusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetEntityData() *types.CommonEntityData {
    tcpmss.EntityData.YFilter = tcpmss.YFilter
    tcpmss.EntityData.YangName = "tcpmss"
    tcpmss.EntityData.BundleName = "cisco_ios_xr"
    tcpmss.EntityData.ParentYangName = "neighbor-prefix-length"
    tcpmss.EntityData.SegmentPath = "tcpmss"
    tcpmss.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + tcpmss.EntityData.SegmentPath
    tcpmss.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpmss.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpmss.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpmss.EntityData.Children = types.NewOrderedMap()
    tcpmss.EntityData.Leafs = types.NewOrderedMap()
    tcpmss.EntityData.Leafs.Append("tcpmss-disable", types.YLeaf{"TcpmssDisable", tcpmss.TcpmssDisable})
    tcpmss.EntityData.Leafs.Append("mss", types.YLeaf{"Mss", tcpmss.Mss})

    tcpmss.EntityData.YListKeys = []string {}

    return &(tcpmss.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "neighbor-prefix-length"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetEntityData() *types.CommonEntityData {
    updateInFiltering.EntityData.YFilter = updateInFiltering.YFilter
    updateInFiltering.EntityData.YangName = "update-in-filtering"
    updateInFiltering.EntityData.BundleName = "cisco_ios_xr"
    updateInFiltering.EntityData.ParentYangName = "neighbor-prefix-length"
    updateInFiltering.EntityData.SegmentPath = "update-in-filtering"
    updateInFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + updateInFiltering.EntityData.SegmentPath
    updateInFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFiltering.EntityData.Children = types.NewOrderedMap()
    updateInFiltering.EntityData.Children.Append("update-in-filtering-message-buffers", types.YChild{"UpdateInFilteringMessageBuffers", &updateInFiltering.UpdateInFilteringMessageBuffers})
    updateInFiltering.EntityData.Leafs = types.NewOrderedMap()
    updateInFiltering.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", updateInFiltering.Enable})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-attribute-filter-group", types.YLeaf{"UpdateInFilteringAttributeFilterGroup", updateInFiltering.UpdateInFilteringAttributeFilterGroup})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-syslog-disable", types.YLeaf{"UpdateInFilteringSyslogDisable", updateInFiltering.UpdateInFilteringSyslogDisable})

    updateInFiltering.EntityData.YListKeys = []string {}

    return &(updateInFiltering.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetEntityData() *types.CommonEntityData {
    updateInFilteringMessageBuffers.EntityData.YFilter = updateInFilteringMessageBuffers.YFilter
    updateInFilteringMessageBuffers.EntityData.YangName = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.BundleName = "cisco_ios_xr"
    updateInFilteringMessageBuffers.EntityData.ParentYangName = "update-in-filtering"
    updateInFilteringMessageBuffers.EntityData.SegmentPath = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/update-in-filtering/" + updateInFilteringMessageBuffers.EntityData.SegmentPath
    updateInFilteringMessageBuffers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFilteringMessageBuffers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFilteringMessageBuffers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFilteringMessageBuffers.EntityData.Children = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("number-of-buffers", types.YLeaf{"NumberOfBuffers", updateInFilteringMessageBuffers.NumberOfBuffers})
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("non-circular-buffer", types.YLeaf{"NonCircularBuffer", updateInFilteringMessageBuffers.NonCircularBuffer})

    updateInFilteringMessageBuffers.EntityData.YListKeys = []string {}

    return &(updateInFilteringMessageBuffers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetEntityData() *types.CommonEntityData {
    msgLogOut.EntityData.YFilter = msgLogOut.YFilter
    msgLogOut.EntityData.YangName = "msg-log-out"
    msgLogOut.EntityData.BundleName = "cisco_ios_xr"
    msgLogOut.EntityData.ParentYangName = "neighbor-prefix-length"
    msgLogOut.EntityData.SegmentPath = "msg-log-out"
    msgLogOut.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + msgLogOut.EntityData.SegmentPath
    msgLogOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogOut.EntityData.Children = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogOut.MsgBufCount})
    msgLogOut.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogOut.MsgLogDisable})
    msgLogOut.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogOut.MsgLogInheritDisable})

    msgLogOut.EntityData.YListKeys = []string {}

    return &(msgLogOut.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AoKeychain
// Set or disable AO based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AoKeychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having AO keychain based authentication
    // even if the parent has one.FALSE to enable AO keychain based
    // authentication. The type is bool.
    AoKeychainDisable interface{}

    // Name of the AO keychain associated with this neighbor. The type is string.
    AoKeychainName interface{}

    // Include TCP options header with AO. The type is bool.
    AoIncludeTcpOptions interface{}

    // Accept new connections even though AO mismatched. The type is bool.
    AoAcceptMismatchConnection interface{}
}

func (aoKeychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AoKeychain) GetEntityData() *types.CommonEntityData {
    aoKeychain.EntityData.YFilter = aoKeychain.YFilter
    aoKeychain.EntityData.YangName = "ao-keychain"
    aoKeychain.EntityData.BundleName = "cisco_ios_xr"
    aoKeychain.EntityData.ParentYangName = "neighbor-prefix-length"
    aoKeychain.EntityData.SegmentPath = "ao-keychain"
    aoKeychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + aoKeychain.EntityData.SegmentPath
    aoKeychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aoKeychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aoKeychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aoKeychain.EntityData.Children = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs.Append("ao-keychain-disable", types.YLeaf{"AoKeychainDisable", aoKeychain.AoKeychainDisable})
    aoKeychain.EntityData.Leafs.Append("ao-keychain-name", types.YLeaf{"AoKeychainName", aoKeychain.AoKeychainName})
    aoKeychain.EntityData.Leafs.Append("ao-include-tcp-options", types.YLeaf{"AoIncludeTcpOptions", aoKeychain.AoIncludeTcpOptions})
    aoKeychain.EntityData.Leafs.Append("ao-accept-mismatch-connection", types.YLeaf{"AoAcceptMismatchConnection", aoKeychain.AoAcceptMismatchConnection})

    aoKeychain.EntityData.YListKeys = []string {}

    return &(aoKeychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetEntityData() *types.CommonEntityData {
    receiveBufferSize.EntityData.YFilter = receiveBufferSize.YFilter
    receiveBufferSize.EntityData.YangName = "receive-buffer-size"
    receiveBufferSize.EntityData.BundleName = "cisco_ios_xr"
    receiveBufferSize.EntityData.ParentYangName = "neighbor-prefix-length"
    receiveBufferSize.EntityData.SegmentPath = "receive-buffer-size"
    receiveBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + receiveBufferSize.EntityData.SegmentPath
    receiveBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveBufferSize.EntityData.Children = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveBufferSize.SocketReceiveSize})
    receiveBufferSize.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveBufferSize.BgpReceiveSize})

    receiveBufferSize.EntityData.YListKeys = []string {}

    return &(receiveBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetEntityData() *types.CommonEntityData {
    msgLogIn.EntityData.YFilter = msgLogIn.YFilter
    msgLogIn.EntityData.YangName = "msg-log-in"
    msgLogIn.EntityData.BundleName = "cisco_ios_xr"
    msgLogIn.EntityData.ParentYangName = "neighbor-prefix-length"
    msgLogIn.EntityData.SegmentPath = "msg-log-in"
    msgLogIn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + msgLogIn.EntityData.SegmentPath
    msgLogIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogIn.EntityData.Children = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogIn.MsgBufCount})
    msgLogIn.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogIn.MsgLogDisable})
    msgLogIn.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogIn.MsgLogInheritDisable})

    msgLogIn.EntityData.YListKeys = []string {}

    return &(msgLogIn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetEntityData() *types.CommonEntityData {
    sendBufferSize.EntityData.YFilter = sendBufferSize.YFilter
    sendBufferSize.EntityData.YangName = "send-buffer-size"
    sendBufferSize.EntityData.BundleName = "cisco_ios_xr"
    sendBufferSize.EntityData.ParentYangName = "neighbor-prefix-length"
    sendBufferSize.EntityData.SegmentPath = "send-buffer-size"
    sendBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + sendBufferSize.EntityData.SegmentPath
    sendBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendBufferSize.EntityData.Children = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendBufferSize.SocketSendSize})
    sendBufferSize.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendBufferSize.BgpSendSize})

    sendBufferSize.EntityData.YListKeys = []string {}

    return &(sendBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "neighbor-prefix-length"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", timers.KeepaliveInterval})
    timers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", timers.HoldTime})
    timers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", timers.MinAcceptHoldTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "cisco_ios_xr"
    keychain.EntityData.ParentYangName = "neighbor-prefix-length"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()
    keychain.EntityData.Leafs.Append("keychain-disable", types.YLeaf{"KeychainDisable", keychain.KeychainDisable})
    keychain.EntityData.Leafs.Append("keychain-name", types.YLeaf{"KeychainName", keychain.KeychainName})

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetEntityData() *types.CommonEntityData {
    gracefulMaintenance.EntityData.YFilter = gracefulMaintenance.YFilter
    gracefulMaintenance.EntityData.YangName = "graceful-maintenance"
    gracefulMaintenance.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenance.EntityData.ParentYangName = "neighbor-prefix-length"
    gracefulMaintenance.EntityData.SegmentPath = "graceful-maintenance"
    gracefulMaintenance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/" + gracefulMaintenance.EntityData.SegmentPath
    gracefulMaintenance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenance.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-local-preference", types.YChild{"GracefulMaintenanceLocalPreference", &gracefulMaintenance.GracefulMaintenanceLocalPreference})
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-as-prepends", types.YChild{"GracefulMaintenanceAsPrepends", &gracefulMaintenance.GracefulMaintenanceAsPrepends})
    gracefulMaintenance.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", gracefulMaintenance.Enable})
    gracefulMaintenance.EntityData.Leafs.Append("graceful-maintenance-activate", types.YLeaf{"GracefulMaintenanceActivate", gracefulMaintenance.GracefulMaintenanceActivate})

    gracefulMaintenance.EntityData.YListKeys = []string {}

    return &(gracefulMaintenance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceLocalPreference.EntityData.YFilter = gracefulMaintenanceLocalPreference.YFilter
    gracefulMaintenanceLocalPreference.EntityData.YangName = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceLocalPreference.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceLocalPreference.EntityData.SegmentPath = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/graceful-maintenance/" + gracefulMaintenanceLocalPreference.EntityData.SegmentPath
    gracefulMaintenanceLocalPreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceLocalPreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceLocalPreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceLocalPreference.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("gshut-loc-pref-disable", types.YLeaf{"GshutLocPrefDisable", gracefulMaintenanceLocalPreference.GshutLocPrefDisable})
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", gracefulMaintenanceLocalPreference.LocalPreference})

    gracefulMaintenanceLocalPreference.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceLocalPreference.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceAsPrepends.EntityData.YFilter = gracefulMaintenanceAsPrepends.YFilter
    gracefulMaintenanceAsPrepends.EntityData.YangName = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceAsPrepends.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceAsPrepends.EntityData.SegmentPath = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbors/neighbor-prefix-length/graceful-maintenance/" + gracefulMaintenanceAsPrepends.EntityData.SegmentPath
    gracefulMaintenanceAsPrepends.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceAsPrepends.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceAsPrepends.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceAsPrepends.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("gshut-prepends-disable", types.YLeaf{"GshutPrependsDisable", gracefulMaintenanceAsPrepends.GshutPrependsDisable})
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("as-prepends", types.YLeaf{"AsPrepends", gracefulMaintenanceAsPrepends.AsPrepends})

    gracefulMaintenanceAsPrepends.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceAsPrepends.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups
// Neighbor-group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A particular BGP neighbor group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup.
    NeighborGroup []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetEntityData() *types.CommonEntityData {
    neighborGroups.EntityData.YFilter = neighborGroups.YFilter
    neighborGroups.EntityData.YangName = "neighbor-groups"
    neighborGroups.EntityData.BundleName = "cisco_ios_xr"
    neighborGroups.EntityData.ParentYangName = "bgp-entity"
    neighborGroups.EntityData.SegmentPath = "neighbor-groups"
    neighborGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/" + neighborGroups.EntityData.SegmentPath
    neighborGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborGroups.EntityData.Children = types.NewOrderedMap()
    neighborGroups.EntityData.Children.Append("neighbor-group", types.YChild{"NeighborGroup", nil})
    for i := range neighborGroups.NeighborGroup {
        neighborGroups.EntityData.Children.Append(types.GetSegmentPath(neighborGroups.NeighborGroup[i]), types.YChild{"NeighborGroup", neighborGroups.NeighborGroup[i]})
    }
    neighborGroups.EntityData.Leafs = types.NewOrderedMap()

    neighborGroups.EntityData.YListKeys = []string {}

    return &(neighborGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup
// A particular BGP neighbor group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP neighbor group name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    NeighborGroupName interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is BgpNbrgr.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability. FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // Create this group. Deletion of this object causes deletion of all the
    // objects under NeighborGroup/SessionGroup associated with this object. The
    // type is interface{}.
    Create interface{}

    // BGP neighbor-group AF configuration table.
    NeighborGroupAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut

    // Set or disable AO based authentication.
    AoKeychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AoKeychain

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetEntityData() *types.CommonEntityData {
    neighborGroup.EntityData.YFilter = neighborGroup.YFilter
    neighborGroup.EntityData.YangName = "neighbor-group"
    neighborGroup.EntityData.BundleName = "cisco_ios_xr"
    neighborGroup.EntityData.ParentYangName = "neighbor-groups"
    neighborGroup.EntityData.SegmentPath = "neighbor-group" + types.AddKeyToken(neighborGroup.NeighborGroupName, "neighbor-group-name")
    neighborGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/" + neighborGroup.EntityData.SegmentPath
    neighborGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborGroup.EntityData.Children = types.NewOrderedMap()
    neighborGroup.EntityData.Children.Append("neighbor-group-afs", types.YChild{"NeighborGroupAfs", &neighborGroup.NeighborGroupAfs})
    neighborGroup.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &neighborGroup.LocalAddress})
    neighborGroup.EntityData.Children.Append("bmp-activates", types.YChild{"BmpActivates", &neighborGroup.BmpActivates})
    neighborGroup.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &neighborGroup.EbgpMultihop})
    neighborGroup.EntityData.Children.Append("remote-as", types.YChild{"RemoteAs", &neighborGroup.RemoteAs})
    neighborGroup.EntityData.Children.Append("local-as", types.YChild{"LocalAs", &neighborGroup.LocalAs})
    neighborGroup.EntityData.Children.Append("password", types.YChild{"Password", &neighborGroup.Password})
    neighborGroup.EntityData.Children.Append("advertisement-interval", types.YChild{"AdvertisementInterval", &neighborGroup.AdvertisementInterval})
    neighborGroup.EntityData.Children.Append("neighbor-cluster-id", types.YChild{"NeighborClusterId", &neighborGroup.NeighborClusterId})
    neighborGroup.EntityData.Children.Append("tcpmss", types.YChild{"Tcpmss", &neighborGroup.Tcpmss})
    neighborGroup.EntityData.Children.Append("tos", types.YChild{"Tos", &neighborGroup.Tos})
    neighborGroup.EntityData.Children.Append("update-in-filtering", types.YChild{"UpdateInFiltering", &neighborGroup.UpdateInFiltering})
    neighborGroup.EntityData.Children.Append("msg-log-out", types.YChild{"MsgLogOut", &neighborGroup.MsgLogOut})
    neighborGroup.EntityData.Children.Append("ao-keychain", types.YChild{"AoKeychain", &neighborGroup.AoKeychain})
    neighborGroup.EntityData.Children.Append("receive-buffer-size", types.YChild{"ReceiveBufferSize", &neighborGroup.ReceiveBufferSize})
    neighborGroup.EntityData.Children.Append("msg-log-in", types.YChild{"MsgLogIn", &neighborGroup.MsgLogIn})
    neighborGroup.EntityData.Children.Append("send-buffer-size", types.YChild{"SendBufferSize", &neighborGroup.SendBufferSize})
    neighborGroup.EntityData.Children.Append("timers", types.YChild{"Timers", &neighborGroup.Timers})
    neighborGroup.EntityData.Children.Append("keychain", types.YChild{"Keychain", &neighborGroup.Keychain})
    neighborGroup.EntityData.Children.Append("graceful-maintenance", types.YChild{"GracefulMaintenance", &neighborGroup.GracefulMaintenance})
    neighborGroup.EntityData.Leafs = types.NewOrderedMap()
    neighborGroup.EntityData.Leafs.Append("neighbor-group-name", types.YLeaf{"NeighborGroupName", neighborGroup.NeighborGroupName})
    neighborGroup.EntityData.Leafs.Append("neighbor-group-add-member", types.YLeaf{"NeighborGroupAddMember", neighborGroup.NeighborGroupAddMember})
    neighborGroup.EntityData.Leafs.Append("internal-vpn-client-ibgp-ce", types.YLeaf{"InternalVpnClientIbgpCe", neighborGroup.InternalVpnClientIbgpCe})
    neighborGroup.EntityData.Leafs.Append("session-group-add-member", types.YLeaf{"SessionGroupAddMember", neighborGroup.SessionGroupAddMember})
    neighborGroup.EntityData.Leafs.Append("egress-peer-engineering", types.YLeaf{"EgressPeerEngineering", neighborGroup.EgressPeerEngineering})
    neighborGroup.EntityData.Leafs.Append("neighbor-graceful-restart-stalepath-time", types.YLeaf{"NeighborGracefulRestartStalepathTime", neighborGroup.NeighborGracefulRestartStalepathTime})
    neighborGroup.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", neighborGroup.Shutdown})
    neighborGroup.EntityData.Leafs.Append("description", types.YLeaf{"Description", neighborGroup.Description})
    neighborGroup.EntityData.Leafs.Append("ebgp-recv-dmz", types.YLeaf{"EbgpRecvDmz", neighborGroup.EbgpRecvDmz})
    neighborGroup.EntityData.Leafs.Append("neighbor-graceful-restart", types.YLeaf{"NeighborGracefulRestart", neighborGroup.NeighborGracefulRestart})
    neighborGroup.EntityData.Leafs.Append("enforce-first-as", types.YLeaf{"EnforceFirstAs", neighborGroup.EnforceFirstAs})
    neighborGroup.EntityData.Leafs.Append("idle-watch-time", types.YLeaf{"IdleWatchTime", neighborGroup.IdleWatchTime})
    neighborGroup.EntityData.Leafs.Append("session-open-mode", types.YLeaf{"SessionOpenMode", neighborGroup.SessionOpenMode})
    neighborGroup.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", neighborGroup.RpkiOriginAsValidationDisable})
    neighborGroup.EntityData.Leafs.Append("ebgp-send-dmz-enable-modes", types.YLeaf{"EbgpSendDmzEnableModes", neighborGroup.EbgpSendDmzEnableModes})
    neighborGroup.EntityData.Leafs.Append("suppress-all-capabilities", types.YLeaf{"SuppressAllCapabilities", neighborGroup.SuppressAllCapabilities})
    neighborGroup.EntityData.Leafs.Append("max-peers", types.YLeaf{"MaxPeers", neighborGroup.MaxPeers})
    neighborGroup.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", neighborGroup.RpkiBestpathOriginAsAllowInvalid})
    neighborGroup.EntityData.Leafs.Append("additional-paths-send-capability", types.YLeaf{"AdditionalPathsSendCapability", neighborGroup.AdditionalPathsSendCapability})
    neighborGroup.EntityData.Leafs.Append("propagate-dmz-link-bandwidth", types.YLeaf{"PropagateDmzLinkBandwidth", neighborGroup.PropagateDmzLinkBandwidth})
    neighborGroup.EntityData.Leafs.Append("bfd-enable-modes", types.YLeaf{"BfdEnableModes", neighborGroup.BfdEnableModes})
    neighborGroup.EntityData.Leafs.Append("ttl-security", types.YLeaf{"TtlSecurity", neighborGroup.TtlSecurity})
    neighborGroup.EntityData.Leafs.Append("neighbor-graceful-restart-time", types.YLeaf{"NeighborGracefulRestartTime", neighborGroup.NeighborGracefulRestartTime})
    neighborGroup.EntityData.Leafs.Append("bfd-multiplier", types.YLeaf{"BfdMultiplier", neighborGroup.BfdMultiplier})
    neighborGroup.EntityData.Leafs.Append("bfd-minimum-interval", types.YLeaf{"BfdMinimumInterval", neighborGroup.BfdMinimumInterval})
    neighborGroup.EntityData.Leafs.Append("remote-as-list", types.YLeaf{"RemoteAsList", neighborGroup.RemoteAsList})
    neighborGroup.EntityData.Leafs.Append("additional-paths-receive-capability", types.YLeaf{"AdditionalPathsReceiveCapability", neighborGroup.AdditionalPathsReceiveCapability})
    neighborGroup.EntityData.Leafs.Append("ignore-connected-check-ebgp", types.YLeaf{"IgnoreConnectedCheckEbgp", neighborGroup.IgnoreConnectedCheckEbgp})
    neighborGroup.EntityData.Leafs.Append("suppress-four-byte-as-capability", types.YLeaf{"SuppressFourByteAsCapability", neighborGroup.SuppressFourByteAsCapability})
    neighborGroup.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", neighborGroup.UpdateSourceInterface})
    neighborGroup.EntityData.Leafs.Append("create", types.YLeaf{"Create", neighborGroup.Create})

    neighborGroup.EntityData.YListKeys = []string {"NeighborGroupName"}

    return &(neighborGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs
// BGP neighbor-group AF configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family type of neighbor group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf.
    NeighborGroupAf []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetEntityData() *types.CommonEntityData {
    neighborGroupAfs.EntityData.YFilter = neighborGroupAfs.YFilter
    neighborGroupAfs.EntityData.YangName = "neighbor-group-afs"
    neighborGroupAfs.EntityData.BundleName = "cisco_ios_xr"
    neighborGroupAfs.EntityData.ParentYangName = "neighbor-group"
    neighborGroupAfs.EntityData.SegmentPath = "neighbor-group-afs"
    neighborGroupAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + neighborGroupAfs.EntityData.SegmentPath
    neighborGroupAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborGroupAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborGroupAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborGroupAfs.EntityData.Children = types.NewOrderedMap()
    neighborGroupAfs.EntityData.Children.Append("neighbor-group-af", types.YChild{"NeighborGroupAf", nil})
    for i := range neighborGroupAfs.NeighborGroupAf {
        neighborGroupAfs.EntityData.Children.Append(types.GetSegmentPath(neighborGroupAfs.NeighborGroupAf[i]), types.YChild{"NeighborGroupAf", neighborGroupAfs.NeighborGroupAf[i]})
    }
    neighborGroupAfs.EntityData.Leafs = types.NewOrderedMap()

    neighborGroupAfs.EntityData.YListKeys = []string {}

    return &(neighborGroupAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf
// Address family type of neighbor group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP neighbor group address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2vpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group. FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT. FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client. FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Name of the ORR group this neighbor is going to be part of. The type is
    // string.
    OptimalRouteReflectionGroup interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2vpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2vpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetEntityData() *types.CommonEntityData {
    neighborGroupAf.EntityData.YFilter = neighborGroupAf.YFilter
    neighborGroupAf.EntityData.YangName = "neighbor-group-af"
    neighborGroupAf.EntityData.BundleName = "cisco_ios_xr"
    neighborGroupAf.EntityData.ParentYangName = "neighbor-group-afs"
    neighborGroupAf.EntityData.SegmentPath = "neighbor-group-af" + types.AddKeyToken(neighborGroupAf.AfName, "af-name")
    neighborGroupAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/" + neighborGroupAf.EntityData.SegmentPath
    neighborGroupAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborGroupAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborGroupAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborGroupAf.EntityData.Children = types.NewOrderedMap()
    neighborGroupAf.EntityData.Children.Append("aigp-cost-community", types.YChild{"AigpCostCommunity", &neighborGroupAf.AigpCostCommunity})
    neighborGroupAf.EntityData.Children.Append("advertise-def-imp-disable-v6", types.YChild{"AdvertiseDefImpDisableV6", &neighborGroupAf.AdvertiseDefImpDisableV6})
    neighborGroupAf.EntityData.Children.Append("advertise-disable", types.YChild{"AdvertiseDisable", &neighborGroupAf.AdvertiseDisable})
    neighborGroupAf.EntityData.Children.Append("maximum-prefixes", types.YChild{"MaximumPrefixes", &neighborGroupAf.MaximumPrefixes})
    neighborGroupAf.EntityData.Children.Append("remove-private-as-entire-as-path-inbound", types.YChild{"RemovePrivateAsEntireAsPathInbound", &neighborGroupAf.RemovePrivateAsEntireAsPathInbound})
    neighborGroupAf.EntityData.Children.Append("advertise-def-imp-disable-v4", types.YChild{"AdvertiseDefImpDisableV4", &neighborGroupAf.AdvertiseDefImpDisableV4})
    neighborGroupAf.EntityData.Children.Append("advertise-l2vpn-evpn", types.YChild{"AdvertiseL2vpnEvpn", &neighborGroupAf.AdvertiseL2vpnEvpn})
    neighborGroupAf.EntityData.Children.Append("advertise-local-l2vpn-evpn", types.YChild{"AdvertiseLocalL2vpnEvpn", &neighborGroupAf.AdvertiseLocalL2vpnEvpn})
    neighborGroupAf.EntityData.Children.Append("neighbor-af-long-lived-graceful-restart-stale-time", types.YChild{"NeighborAfLongLivedGracefulRestartStaleTime", &neighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime})
    neighborGroupAf.EntityData.Children.Append("site-of-origin", types.YChild{"SiteOfOrigin", &neighborGroupAf.SiteOfOrigin})
    neighborGroupAf.EntityData.Children.Append("advertise-v6", types.YChild{"AdvertiseV6", &neighborGroupAf.AdvertiseV6})
    neighborGroupAf.EntityData.Children.Append("advertise-local-v6", types.YChild{"AdvertiseLocalV6", &neighborGroupAf.AdvertiseLocalV6})
    neighborGroupAf.EntityData.Children.Append("import", types.YChild{"Import", &neighborGroupAf.Import})
    neighborGroupAf.EntityData.Children.Append("default-originate", types.YChild{"DefaultOriginate", &neighborGroupAf.DefaultOriginate})
    neighborGroupAf.EntityData.Children.Append("soft-reconfiguration", types.YChild{"SoftReconfiguration", &neighborGroupAf.SoftReconfiguration})
    neighborGroupAf.EntityData.Children.Append("advertise-vrf-imp-disable-v6", types.YChild{"AdvertiseVrfImpDisableV6", &neighborGroupAf.AdvertiseVrfImpDisableV6})
    neighborGroupAf.EntityData.Children.Append("advertise-v4", types.YChild{"AdvertiseV4", &neighborGroupAf.AdvertiseV4})
    neighborGroupAf.EntityData.Children.Append("advertise-local-v4", types.YChild{"AdvertiseLocalV4", &neighborGroupAf.AdvertiseLocalV4})
    neighborGroupAf.EntityData.Children.Append("remove-private-as-entire-as-path", types.YChild{"RemovePrivateAsEntireAsPath", &neighborGroupAf.RemovePrivateAsEntireAsPath})
    neighborGroupAf.EntityData.Children.Append("advertise-vrf-imp-disable-v4", types.YChild{"AdvertiseVrfImpDisableV4", &neighborGroupAf.AdvertiseVrfImpDisableV4})
    neighborGroupAf.EntityData.Leafs = types.NewOrderedMap()
    neighborGroupAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", neighborGroupAf.AfName})
    neighborGroupAf.EntityData.Leafs.Append("neighbor-af-long-lived-graceful-restart-capable", types.YLeaf{"NeighborAfLongLivedGracefulRestartCapable", neighborGroupAf.NeighborAfLongLivedGracefulRestartCapable})
    neighborGroupAf.EntityData.Leafs.Append("l2vpn-signalling", types.YLeaf{"L2vpnSignalling", neighborGroupAf.L2vpnSignalling})
    neighborGroupAf.EntityData.Leafs.Append("send-ext-community-ebgp", types.YLeaf{"SendExtCommunityEbgp", neighborGroupAf.SendExtCommunityEbgp})
    neighborGroupAf.EntityData.Leafs.Append("accept-route-legacy-rt", types.YLeaf{"AcceptRouteLegacyRt", neighborGroupAf.AcceptRouteLegacyRt})
    neighborGroupAf.EntityData.Leafs.Append("send-community-ebgp", types.YLeaf{"SendCommunityEbgp", neighborGroupAf.SendCommunityEbgp})
    neighborGroupAf.EntityData.Leafs.Append("send-multicast-attr", types.YLeaf{"SendMulticastAttr", neighborGroupAf.SendMulticastAttr})
    neighborGroupAf.EntityData.Leafs.Append("next-hop-unchanged", types.YLeaf{"NextHopUnchanged", neighborGroupAf.NextHopUnchanged})
    neighborGroupAf.EntityData.Leafs.Append("advertise-local-labeled-route", types.YLeaf{"AdvertiseLocalLabeledRoute", neighborGroupAf.AdvertiseLocalLabeledRoute})
    neighborGroupAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", neighborGroupAf.RpkiOriginAsValidationDisable})
    neighborGroupAf.EntityData.Leafs.Append("flowspec-validation", types.YLeaf{"FlowspecValidation", neighborGroupAf.FlowspecValidation})
    neighborGroupAf.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", neighborGroupAf.EncapsulationType})
    neighborGroupAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", neighborGroupAf.RpkiBestpathOriginAsAllowInvalid})
    neighborGroupAf.EntityData.Leafs.Append("enforce-multiple-labels", types.YLeaf{"EnforceMultipleLabels", neighborGroupAf.EnforceMultipleLabels})
    neighborGroupAf.EntityData.Leafs.Append("as-override", types.YLeaf{"AsOverride", neighborGroupAf.AsOverride})
    neighborGroupAf.EntityData.Leafs.Append("multipath", types.YLeaf{"Multipath", neighborGroupAf.Multipath})
    neighborGroupAf.EntityData.Leafs.Append("send-community-ebgp-graceful-shutdown", types.YLeaf{"SendCommunityEbgpGracefulShutdown", neighborGroupAf.SendCommunityEbgpGracefulShutdown})
    neighborGroupAf.EntityData.Leafs.Append("activate", types.YLeaf{"Activate", neighborGroupAf.Activate})
    neighborGroupAf.EntityData.Leafs.Append("prefix-orf-policy", types.YLeaf{"PrefixOrfPolicy", neighborGroupAf.PrefixOrfPolicy})
    neighborGroupAf.EntityData.Leafs.Append("aigp", types.YLeaf{"Aigp", neighborGroupAf.Aigp})
    neighborGroupAf.EntityData.Leafs.Append("aigp-send-med", types.YLeaf{"AigpSendMed", neighborGroupAf.AigpSendMed})
    neighborGroupAf.EntityData.Leafs.Append("allow-as-in", types.YLeaf{"AllowAsIn", neighborGroupAf.AllowAsIn})
    neighborGroupAf.EntityData.Leafs.Append("advertise-orf", types.YLeaf{"AdvertiseOrf", neighborGroupAf.AdvertiseOrf})
    neighborGroupAf.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", neighborGroupAf.RouteReflectorClient})
    neighborGroupAf.EntityData.Leafs.Append("next-hop-self", types.YLeaf{"NextHopSelf", neighborGroupAf.NextHopSelf})
    neighborGroupAf.EntityData.Leafs.Append("route-policy-in", types.YLeaf{"RoutePolicyIn", neighborGroupAf.RoutePolicyIn})
    neighborGroupAf.EntityData.Leafs.Append("default-weight", types.YLeaf{"DefaultWeight", neighborGroupAf.DefaultWeight})
    neighborGroupAf.EntityData.Leafs.Append("af-group", types.YLeaf{"AfGroup", neighborGroupAf.AfGroup})
    neighborGroupAf.EntityData.Leafs.Append("next-hop-unchanged-multipath", types.YLeaf{"NextHopUnchangedMultipath", neighborGroupAf.NextHopUnchangedMultipath})
    neighborGroupAf.EntityData.Leafs.Append("optimal-route-reflection-group", types.YLeaf{"OptimalRouteReflectionGroup", neighborGroupAf.OptimalRouteReflectionGroup})
    neighborGroupAf.EntityData.Leafs.Append("accept-own", types.YLeaf{"AcceptOwn", neighborGroupAf.AcceptOwn})
    neighborGroupAf.EntityData.Leafs.Append("route-policy-out", types.YLeaf{"RoutePolicyOut", neighborGroupAf.RoutePolicyOut})
    neighborGroupAf.EntityData.Leafs.Append("advertise-permanent-network", types.YLeaf{"AdvertisePermanentNetwork", neighborGroupAf.AdvertisePermanentNetwork})

    neighborGroupAf.EntityData.YListKeys = []string {"AfName"}

    return &(neighborGroupAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetEntityData() *types.CommonEntityData {
    aigpCostCommunity.EntityData.YFilter = aigpCostCommunity.YFilter
    aigpCostCommunity.EntityData.YangName = "aigp-cost-community"
    aigpCostCommunity.EntityData.BundleName = "cisco_ios_xr"
    aigpCostCommunity.EntityData.ParentYangName = "neighbor-group-af"
    aigpCostCommunity.EntityData.SegmentPath = "aigp-cost-community"
    aigpCostCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + aigpCostCommunity.EntityData.SegmentPath
    aigpCostCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aigpCostCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aigpCostCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aigpCostCommunity.EntityData.Children = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", aigpCostCommunity.Enable})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-id", types.YLeaf{"CostCommunityId", aigpCostCommunity.CostCommunityId})
    aigpCostCommunity.EntityData.Leafs.Append("transitive", types.YLeaf{"Transitive", aigpCostCommunity.Transitive})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-poi-type", types.YLeaf{"CostCommunityPoiType", aigpCostCommunity.CostCommunityPoiType})

    aigpCostCommunity.EntityData.YListKeys = []string {}

    return &(aigpCostCommunity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV6.EntityData.YFilter = advertiseDefImpDisableV6.YFilter
    advertiseDefImpDisableV6.EntityData.YangName = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV6.EntityData.ParentYangName = "neighbor-group-af"
    advertiseDefImpDisableV6.EntityData.SegmentPath = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseDefImpDisableV6.EntityData.SegmentPath
    advertiseDefImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV6.AfName})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV6.AdvOption})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV6.RtType})

    advertiseDefImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetEntityData() *types.CommonEntityData {
    advertiseDisable.EntityData.YFilter = advertiseDisable.YFilter
    advertiseDisable.EntityData.YangName = "advertise-disable"
    advertiseDisable.EntityData.BundleName = "cisco_ios_xr"
    advertiseDisable.EntityData.ParentYangName = "neighbor-group-af"
    advertiseDisable.EntityData.SegmentPath = "advertise-disable"
    advertiseDisable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseDisable.EntityData.SegmentPath
    advertiseDisable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDisable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDisable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDisable.EntityData.Children = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDisable.AfName})
    advertiseDisable.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseDisable.ReorgOption})
    advertiseDisable.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDisable.RtType})

    advertiseDisable.EntityData.YListKeys = []string {}

    return &(advertiseDisable.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetEntityData() *types.CommonEntityData {
    maximumPrefixes.EntityData.YFilter = maximumPrefixes.YFilter
    maximumPrefixes.EntityData.YangName = "maximum-prefixes"
    maximumPrefixes.EntityData.BundleName = "cisco_ios_xr"
    maximumPrefixes.EntityData.ParentYangName = "neighbor-group-af"
    maximumPrefixes.EntityData.SegmentPath = "maximum-prefixes"
    maximumPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + maximumPrefixes.EntityData.SegmentPath
    maximumPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumPrefixes.EntityData.Children = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs.Append("prefix-limit", types.YLeaf{"PrefixLimit", maximumPrefixes.PrefixLimit})
    maximumPrefixes.EntityData.Leafs.Append("warning-percentage", types.YLeaf{"WarningPercentage", maximumPrefixes.WarningPercentage})
    maximumPrefixes.EntityData.Leafs.Append("warning-only", types.YLeaf{"WarningOnly", maximumPrefixes.WarningOnly})
    maximumPrefixes.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", maximumPrefixes.RestartTime})
    maximumPrefixes.EntityData.Leafs.Append("discard-extra-paths", types.YLeaf{"DiscardExtraPaths", maximumPrefixes.DiscardExtraPaths})

    maximumPrefixes.EntityData.YListKeys = []string {}

    return &(maximumPrefixes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPathInbound.EntityData.YFilter = removePrivateAsEntireAsPathInbound.YFilter
    removePrivateAsEntireAsPathInbound.EntityData.YangName = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPathInbound.EntityData.ParentYangName = "neighbor-group-af"
    removePrivateAsEntireAsPathInbound.EntityData.SegmentPath = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + removePrivateAsEntireAsPathInbound.EntityData.SegmentPath
    removePrivateAsEntireAsPathInbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPathInbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPathInbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPathInbound.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPathInbound.Enable})
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPathInbound.Entire})

    removePrivateAsEntireAsPathInbound.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPathInbound.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV4.EntityData.YFilter = advertiseDefImpDisableV4.YFilter
    advertiseDefImpDisableV4.EntityData.YangName = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV4.EntityData.ParentYangName = "neighbor-group-af"
    advertiseDefImpDisableV4.EntityData.SegmentPath = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseDefImpDisableV4.EntityData.SegmentPath
    advertiseDefImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV4.AfName})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV4.AdvOption})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV4.RtType})

    advertiseDefImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2vpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseL2vpnEvpn.EntityData.YFilter = advertiseL2vpnEvpn.YFilter
    advertiseL2vpnEvpn.EntityData.YangName = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseL2vpnEvpn.EntityData.ParentYangName = "neighbor-group-af"
    advertiseL2vpnEvpn.EntityData.SegmentPath = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseL2vpnEvpn.EntityData.SegmentPath
    advertiseL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseL2vpnEvpn.AfName})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseL2vpnEvpn.ReorgOption})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseL2vpnEvpn.RtType})

    advertiseL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2vpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseLocalL2vpnEvpn.EntityData.YFilter = advertiseLocalL2vpnEvpn.YFilter
    advertiseLocalL2vpnEvpn.EntityData.YangName = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalL2vpnEvpn.EntityData.ParentYangName = "neighbor-group-af"
    advertiseLocalL2vpnEvpn.EntityData.SegmentPath = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseLocalL2vpnEvpn.EntityData.SegmentPath
    advertiseLocalL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalL2vpnEvpn.AfName})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalL2vpnEvpn.ReorgOption})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalL2vpnEvpn.RtType})

    advertiseLocalL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseLocalL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetEntityData() *types.CommonEntityData {
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YFilter = neighborAfLongLivedGracefulRestartStaleTime.YFilter
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YangName = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleName = "cisco_ios_xr"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.ParentYangName = "neighbor-group-af"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Children = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-send", types.YLeaf{"StaleTimeSend", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend})
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-accept", types.YLeaf{"StaleTimeAccept", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept})

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YListKeys = []string {}

    return &(neighborAfLongLivedGracefulRestartStaleTime.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetEntityData() *types.CommonEntityData {
    siteOfOrigin.EntityData.YFilter = siteOfOrigin.YFilter
    siteOfOrigin.EntityData.YangName = "site-of-origin"
    siteOfOrigin.EntityData.BundleName = "cisco_ios_xr"
    siteOfOrigin.EntityData.ParentYangName = "neighbor-group-af"
    siteOfOrigin.EntityData.SegmentPath = "site-of-origin"
    siteOfOrigin.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + siteOfOrigin.EntityData.SegmentPath
    siteOfOrigin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siteOfOrigin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siteOfOrigin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siteOfOrigin.EntityData.Children = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs.Append("type", types.YLeaf{"Type", siteOfOrigin.Type})
    siteOfOrigin.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", siteOfOrigin.AsXx})
    siteOfOrigin.EntityData.Leafs.Append("as", types.YLeaf{"As", siteOfOrigin.As})
    siteOfOrigin.EntityData.Leafs.Append("as-index", types.YLeaf{"AsIndex", siteOfOrigin.AsIndex})
    siteOfOrigin.EntityData.Leafs.Append("address", types.YLeaf{"Address", siteOfOrigin.Address})
    siteOfOrigin.EntityData.Leafs.Append("address-index", types.YLeaf{"AddressIndex", siteOfOrigin.AddressIndex})

    siteOfOrigin.EntityData.YListKeys = []string {}

    return &(siteOfOrigin.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetEntityData() *types.CommonEntityData {
    advertiseV6.EntityData.YFilter = advertiseV6.YFilter
    advertiseV6.EntityData.YangName = "advertise-v6"
    advertiseV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseV6.EntityData.ParentYangName = "neighbor-group-af"
    advertiseV6.EntityData.SegmentPath = "advertise-v6"
    advertiseV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseV6.EntityData.SegmentPath
    advertiseV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV6.EntityData.Children = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV6.AfName})
    advertiseV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV6.ReorgOption})
    advertiseV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV6.RtType})

    advertiseV6.EntityData.YListKeys = []string {}

    return &(advertiseV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetEntityData() *types.CommonEntityData {
    advertiseLocalV6.EntityData.YFilter = advertiseLocalV6.YFilter
    advertiseLocalV6.EntityData.YangName = "advertise-local-v6"
    advertiseLocalV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV6.EntityData.ParentYangName = "neighbor-group-af"
    advertiseLocalV6.EntityData.SegmentPath = "advertise-local-v6"
    advertiseLocalV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseLocalV6.EntityData.SegmentPath
    advertiseLocalV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV6.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV6.AfName})
    advertiseLocalV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV6.ReorgOption})
    advertiseLocalV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV6.RtType})

    advertiseLocalV6.EntityData.YListKeys = []string {}

    return &(advertiseLocalV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "import"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "neighbor-group-af"
    self.EntityData.SegmentPath = "import"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("import-stitching", types.YLeaf{"ImportStitching", self.ImportStitching})
    self.EntityData.Leafs.Append("import-reoriginate", types.YLeaf{"ImportReoriginate", self.ImportReoriginate})
    self.EntityData.Leafs.Append("import-reoriginate-stitching", types.YLeaf{"ImportReoriginateStitching", self.ImportReoriginateStitching})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetEntityData() *types.CommonEntityData {
    defaultOriginate.EntityData.YFilter = defaultOriginate.YFilter
    defaultOriginate.EntityData.YangName = "default-originate"
    defaultOriginate.EntityData.BundleName = "cisco_ios_xr"
    defaultOriginate.EntityData.ParentYangName = "neighbor-group-af"
    defaultOriginate.EntityData.SegmentPath = "default-originate"
    defaultOriginate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + defaultOriginate.EntityData.SegmentPath
    defaultOriginate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultOriginate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultOriginate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultOriginate.EntityData.Children = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", defaultOriginate.Enable})
    defaultOriginate.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", defaultOriginate.RoutePolicyName})

    defaultOriginate.EntityData.YListKeys = []string {}

    return &(defaultOriginate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetEntityData() *types.CommonEntityData {
    softReconfiguration.EntityData.YFilter = softReconfiguration.YFilter
    softReconfiguration.EntityData.YangName = "soft-reconfiguration"
    softReconfiguration.EntityData.BundleName = "cisco_ios_xr"
    softReconfiguration.EntityData.ParentYangName = "neighbor-group-af"
    softReconfiguration.EntityData.SegmentPath = "soft-reconfiguration"
    softReconfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + softReconfiguration.EntityData.SegmentPath
    softReconfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    softReconfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    softReconfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    softReconfiguration.EntityData.Children = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs.Append("inbound-soft", types.YLeaf{"InboundSoft", softReconfiguration.InboundSoft})
    softReconfiguration.EntityData.Leafs.Append("soft-always", types.YLeaf{"SoftAlways", softReconfiguration.SoftAlways})

    softReconfiguration.EntityData.YListKeys = []string {}

    return &(softReconfiguration.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV6.EntityData.YFilter = advertiseVrfImpDisableV6.YFilter
    advertiseVrfImpDisableV6.EntityData.YangName = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV6.EntityData.ParentYangName = "neighbor-group-af"
    advertiseVrfImpDisableV6.EntityData.SegmentPath = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseVrfImpDisableV6.EntityData.SegmentPath
    advertiseVrfImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV6.AfName})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV6.AdvOption})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV6.RtType})

    advertiseVrfImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetEntityData() *types.CommonEntityData {
    advertiseV4.EntityData.YFilter = advertiseV4.YFilter
    advertiseV4.EntityData.YangName = "advertise-v4"
    advertiseV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseV4.EntityData.ParentYangName = "neighbor-group-af"
    advertiseV4.EntityData.SegmentPath = "advertise-v4"
    advertiseV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseV4.EntityData.SegmentPath
    advertiseV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV4.EntityData.Children = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV4.AfName})
    advertiseV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV4.ReorgOption})
    advertiseV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV4.RtType})

    advertiseV4.EntityData.YListKeys = []string {}

    return &(advertiseV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetEntityData() *types.CommonEntityData {
    advertiseLocalV4.EntityData.YFilter = advertiseLocalV4.YFilter
    advertiseLocalV4.EntityData.YangName = "advertise-local-v4"
    advertiseLocalV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV4.EntityData.ParentYangName = "neighbor-group-af"
    advertiseLocalV4.EntityData.SegmentPath = "advertise-local-v4"
    advertiseLocalV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseLocalV4.EntityData.SegmentPath
    advertiseLocalV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV4.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV4.AfName})
    advertiseLocalV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV4.ReorgOption})
    advertiseLocalV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV4.RtType})

    advertiseLocalV4.EntityData.YListKeys = []string {}

    return &(advertiseLocalV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPath.EntityData.YFilter = removePrivateAsEntireAsPath.YFilter
    removePrivateAsEntireAsPath.EntityData.YangName = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPath.EntityData.ParentYangName = "neighbor-group-af"
    removePrivateAsEntireAsPath.EntityData.SegmentPath = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + removePrivateAsEntireAsPath.EntityData.SegmentPath
    removePrivateAsEntireAsPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPath.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPath.Enable})
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPath.Entire})

    removePrivateAsEntireAsPath.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPath.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV4.EntityData.YFilter = advertiseVrfImpDisableV4.YFilter
    advertiseVrfImpDisableV4.EntityData.YangName = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV4.EntityData.ParentYangName = "neighbor-group-af"
    advertiseVrfImpDisableV4.EntityData.SegmentPath = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/neighbor-group-afs/neighbor-group-af/" + advertiseVrfImpDisableV4.EntityData.SegmentPath
    advertiseVrfImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV4.AfName})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV4.AdvOption})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV4.RtType})

    advertiseVrfImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "neighbor-group"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("local-address-disable", types.YLeaf{"LocalAddressDisable", localAddress.LocalAddressDisable})
    localAddress.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", localAddress.LocalIpAddress})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate.
    BmpActivate []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetEntityData() *types.CommonEntityData {
    bmpActivates.EntityData.YFilter = bmpActivates.YFilter
    bmpActivates.EntityData.YangName = "bmp-activates"
    bmpActivates.EntityData.BundleName = "cisco_ios_xr"
    bmpActivates.EntityData.ParentYangName = "neighbor-group"
    bmpActivates.EntityData.SegmentPath = "bmp-activates"
    bmpActivates.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + bmpActivates.EntityData.SegmentPath
    bmpActivates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivates.EntityData.Children = types.NewOrderedMap()
    bmpActivates.EntityData.Children.Append("bmp-activate", types.YChild{"BmpActivate", nil})
    for i := range bmpActivates.BmpActivate {
        bmpActivates.EntityData.Children.Append(types.GetSegmentPath(bmpActivates.BmpActivate[i]), types.YChild{"BmpActivate", bmpActivates.BmpActivate[i]})
    }
    bmpActivates.EntityData.Leafs = types.NewOrderedMap()

    bmpActivates.EntityData.YListKeys = []string {}

    return &(bmpActivates.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetEntityData() *types.CommonEntityData {
    bmpActivate.EntityData.YFilter = bmpActivate.YFilter
    bmpActivate.EntityData.YangName = "bmp-activate"
    bmpActivate.EntityData.BundleName = "cisco_ios_xr"
    bmpActivate.EntityData.ParentYangName = "bmp-activates"
    bmpActivate.EntityData.SegmentPath = "bmp-activate" + types.AddKeyToken(bmpActivate.ServerId, "server-id")
    bmpActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/bmp-activates/" + bmpActivate.EntityData.SegmentPath
    bmpActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivate.EntityData.Children = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpActivate.ServerId})

    bmpActivate.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "cisco_ios_xr"
    ebgpMultihop.EntityData.ParentYangName = "neighbor-group"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs.Append("max-hop-count", types.YLeaf{"MaxHopCount", ebgpMultihop.MaxHopCount})
    ebgpMultihop.EntityData.Leafs.Append("mpls-deactivation", types.YLeaf{"MplsDeactivation", ebgpMultihop.MplsDeactivation})

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetEntityData() *types.CommonEntityData {
    remoteAs.EntityData.YFilter = remoteAs.YFilter
    remoteAs.EntityData.YangName = "remote-as"
    remoteAs.EntityData.BundleName = "cisco_ios_xr"
    remoteAs.EntityData.ParentYangName = "neighbor-group"
    remoteAs.EntityData.SegmentPath = "remote-as"
    remoteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + remoteAs.EntityData.SegmentPath
    remoteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteAs.EntityData.Children = types.NewOrderedMap()
    remoteAs.EntityData.Leafs = types.NewOrderedMap()
    remoteAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", remoteAs.AsXx})
    remoteAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", remoteAs.AsYy})

    remoteAs.EntityData.YListKeys = []string {}

    return &(remoteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetEntityData() *types.CommonEntityData {
    localAs.EntityData.YFilter = localAs.YFilter
    localAs.EntityData.YangName = "local-as"
    localAs.EntityData.BundleName = "cisco_ios_xr"
    localAs.EntityData.ParentYangName = "neighbor-group"
    localAs.EntityData.SegmentPath = "local-as"
    localAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + localAs.EntityData.SegmentPath
    localAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAs.EntityData.Children = types.NewOrderedMap()
    localAs.EntityData.Leafs = types.NewOrderedMap()
    localAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", localAs.AsXx})
    localAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", localAs.AsYy})
    localAs.EntityData.Leafs.Append("no-prepend", types.YLeaf{"NoPrepend", localAs.NoPrepend})
    localAs.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", localAs.Disable})
    localAs.EntityData.Leafs.Append("replace-as", types.YLeaf{"ReplaceAs", localAs.ReplaceAs})
    localAs.EntityData.Leafs.Append("dual-as", types.YLeaf{"DualAs", localAs.DualAs})

    localAs.EntityData.YListKeys = []string {}

    return &(localAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetEntityData() *types.CommonEntityData {
    password.EntityData.YFilter = password.YFilter
    password.EntityData.YangName = "password"
    password.EntityData.BundleName = "cisco_ios_xr"
    password.EntityData.ParentYangName = "neighbor-group"
    password.EntityData.SegmentPath = "password"
    password.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + password.EntityData.SegmentPath
    password.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    password.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    password.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    password.EntityData.Children = types.NewOrderedMap()
    password.EntityData.Leafs = types.NewOrderedMap()
    password.EntityData.Leafs.Append("password-disable", types.YLeaf{"PasswordDisable", password.PasswordDisable})
    password.EntityData.Leafs.Append("password", types.YLeaf{"Password", password.Password})

    password.EntityData.YListKeys = []string {}

    return &(password.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetEntityData() *types.CommonEntityData {
    advertisementInterval.EntityData.YFilter = advertisementInterval.YFilter
    advertisementInterval.EntityData.YangName = "advertisement-interval"
    advertisementInterval.EntityData.BundleName = "cisco_ios_xr"
    advertisementInterval.EntityData.ParentYangName = "neighbor-group"
    advertisementInterval.EntityData.SegmentPath = "advertisement-interval"
    advertisementInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + advertisementInterval.EntityData.SegmentPath
    advertisementInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisementInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisementInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisementInterval.EntityData.Children = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", advertisementInterval.MinimumInterval})
    advertisementInterval.EntityData.Leafs.Append("minimum-interval-msecs", types.YLeaf{"MinimumIntervalMsecs", advertisementInterval.MinimumIntervalMsecs})

    advertisementInterval.EntityData.YListKeys = []string {}

    return &(advertisementInterval.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetEntityData() *types.CommonEntityData {
    neighborClusterId.EntityData.YFilter = neighborClusterId.YFilter
    neighborClusterId.EntityData.YangName = "neighbor-cluster-id"
    neighborClusterId.EntityData.BundleName = "cisco_ios_xr"
    neighborClusterId.EntityData.ParentYangName = "neighbor-group"
    neighborClusterId.EntityData.SegmentPath = "neighbor-cluster-id"
    neighborClusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + neighborClusterId.EntityData.SegmentPath
    neighborClusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborClusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborClusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborClusterId.EntityData.Children = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", neighborClusterId.ClusterIdNumber})
    neighborClusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", neighborClusterId.ClusterIdAddress})

    neighborClusterId.EntityData.YListKeys = []string {}

    return &(neighborClusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetEntityData() *types.CommonEntityData {
    tcpmss.EntityData.YFilter = tcpmss.YFilter
    tcpmss.EntityData.YangName = "tcpmss"
    tcpmss.EntityData.BundleName = "cisco_ios_xr"
    tcpmss.EntityData.ParentYangName = "neighbor-group"
    tcpmss.EntityData.SegmentPath = "tcpmss"
    tcpmss.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + tcpmss.EntityData.SegmentPath
    tcpmss.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpmss.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpmss.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpmss.EntityData.Children = types.NewOrderedMap()
    tcpmss.EntityData.Leafs = types.NewOrderedMap()
    tcpmss.EntityData.Leafs.Append("tcpmss-disable", types.YLeaf{"TcpmssDisable", tcpmss.TcpmssDisable})
    tcpmss.EntityData.Leafs.Append("mss", types.YLeaf{"Mss", tcpmss.Mss})

    tcpmss.EntityData.YListKeys = []string {}

    return &(tcpmss.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "neighbor-group"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetEntityData() *types.CommonEntityData {
    updateInFiltering.EntityData.YFilter = updateInFiltering.YFilter
    updateInFiltering.EntityData.YangName = "update-in-filtering"
    updateInFiltering.EntityData.BundleName = "cisco_ios_xr"
    updateInFiltering.EntityData.ParentYangName = "neighbor-group"
    updateInFiltering.EntityData.SegmentPath = "update-in-filtering"
    updateInFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + updateInFiltering.EntityData.SegmentPath
    updateInFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFiltering.EntityData.Children = types.NewOrderedMap()
    updateInFiltering.EntityData.Children.Append("update-in-filtering-message-buffers", types.YChild{"UpdateInFilteringMessageBuffers", &updateInFiltering.UpdateInFilteringMessageBuffers})
    updateInFiltering.EntityData.Leafs = types.NewOrderedMap()
    updateInFiltering.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", updateInFiltering.Enable})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-attribute-filter-group", types.YLeaf{"UpdateInFilteringAttributeFilterGroup", updateInFiltering.UpdateInFilteringAttributeFilterGroup})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-syslog-disable", types.YLeaf{"UpdateInFilteringSyslogDisable", updateInFiltering.UpdateInFilteringSyslogDisable})

    updateInFiltering.EntityData.YListKeys = []string {}

    return &(updateInFiltering.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetEntityData() *types.CommonEntityData {
    updateInFilteringMessageBuffers.EntityData.YFilter = updateInFilteringMessageBuffers.YFilter
    updateInFilteringMessageBuffers.EntityData.YangName = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.BundleName = "cisco_ios_xr"
    updateInFilteringMessageBuffers.EntityData.ParentYangName = "update-in-filtering"
    updateInFilteringMessageBuffers.EntityData.SegmentPath = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/update-in-filtering/" + updateInFilteringMessageBuffers.EntityData.SegmentPath
    updateInFilteringMessageBuffers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFilteringMessageBuffers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFilteringMessageBuffers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFilteringMessageBuffers.EntityData.Children = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("number-of-buffers", types.YLeaf{"NumberOfBuffers", updateInFilteringMessageBuffers.NumberOfBuffers})
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("non-circular-buffer", types.YLeaf{"NonCircularBuffer", updateInFilteringMessageBuffers.NonCircularBuffer})

    updateInFilteringMessageBuffers.EntityData.YListKeys = []string {}

    return &(updateInFilteringMessageBuffers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetEntityData() *types.CommonEntityData {
    msgLogOut.EntityData.YFilter = msgLogOut.YFilter
    msgLogOut.EntityData.YangName = "msg-log-out"
    msgLogOut.EntityData.BundleName = "cisco_ios_xr"
    msgLogOut.EntityData.ParentYangName = "neighbor-group"
    msgLogOut.EntityData.SegmentPath = "msg-log-out"
    msgLogOut.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + msgLogOut.EntityData.SegmentPath
    msgLogOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogOut.EntityData.Children = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogOut.MsgBufCount})
    msgLogOut.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogOut.MsgLogDisable})
    msgLogOut.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogOut.MsgLogInheritDisable})

    msgLogOut.EntityData.YListKeys = []string {}

    return &(msgLogOut.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AoKeychain
// Set or disable AO based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AoKeychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having AO keychain based authentication
    // even if the parent has one.FALSE to enable AO keychain based
    // authentication. The type is bool.
    AoKeychainDisable interface{}

    // Name of the AO keychain associated with this neighbor. The type is string.
    AoKeychainName interface{}

    // Include TCP options header with AO. The type is bool.
    AoIncludeTcpOptions interface{}

    // Accept new connections even though AO mismatched. The type is bool.
    AoAcceptMismatchConnection interface{}
}

func (aoKeychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AoKeychain) GetEntityData() *types.CommonEntityData {
    aoKeychain.EntityData.YFilter = aoKeychain.YFilter
    aoKeychain.EntityData.YangName = "ao-keychain"
    aoKeychain.EntityData.BundleName = "cisco_ios_xr"
    aoKeychain.EntityData.ParentYangName = "neighbor-group"
    aoKeychain.EntityData.SegmentPath = "ao-keychain"
    aoKeychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + aoKeychain.EntityData.SegmentPath
    aoKeychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aoKeychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aoKeychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aoKeychain.EntityData.Children = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs.Append("ao-keychain-disable", types.YLeaf{"AoKeychainDisable", aoKeychain.AoKeychainDisable})
    aoKeychain.EntityData.Leafs.Append("ao-keychain-name", types.YLeaf{"AoKeychainName", aoKeychain.AoKeychainName})
    aoKeychain.EntityData.Leafs.Append("ao-include-tcp-options", types.YLeaf{"AoIncludeTcpOptions", aoKeychain.AoIncludeTcpOptions})
    aoKeychain.EntityData.Leafs.Append("ao-accept-mismatch-connection", types.YLeaf{"AoAcceptMismatchConnection", aoKeychain.AoAcceptMismatchConnection})

    aoKeychain.EntityData.YListKeys = []string {}

    return &(aoKeychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetEntityData() *types.CommonEntityData {
    receiveBufferSize.EntityData.YFilter = receiveBufferSize.YFilter
    receiveBufferSize.EntityData.YangName = "receive-buffer-size"
    receiveBufferSize.EntityData.BundleName = "cisco_ios_xr"
    receiveBufferSize.EntityData.ParentYangName = "neighbor-group"
    receiveBufferSize.EntityData.SegmentPath = "receive-buffer-size"
    receiveBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + receiveBufferSize.EntityData.SegmentPath
    receiveBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveBufferSize.EntityData.Children = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveBufferSize.SocketReceiveSize})
    receiveBufferSize.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveBufferSize.BgpReceiveSize})

    receiveBufferSize.EntityData.YListKeys = []string {}

    return &(receiveBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetEntityData() *types.CommonEntityData {
    msgLogIn.EntityData.YFilter = msgLogIn.YFilter
    msgLogIn.EntityData.YangName = "msg-log-in"
    msgLogIn.EntityData.BundleName = "cisco_ios_xr"
    msgLogIn.EntityData.ParentYangName = "neighbor-group"
    msgLogIn.EntityData.SegmentPath = "msg-log-in"
    msgLogIn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + msgLogIn.EntityData.SegmentPath
    msgLogIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogIn.EntityData.Children = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogIn.MsgBufCount})
    msgLogIn.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogIn.MsgLogDisable})
    msgLogIn.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogIn.MsgLogInheritDisable})

    msgLogIn.EntityData.YListKeys = []string {}

    return &(msgLogIn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetEntityData() *types.CommonEntityData {
    sendBufferSize.EntityData.YFilter = sendBufferSize.YFilter
    sendBufferSize.EntityData.YangName = "send-buffer-size"
    sendBufferSize.EntityData.BundleName = "cisco_ios_xr"
    sendBufferSize.EntityData.ParentYangName = "neighbor-group"
    sendBufferSize.EntityData.SegmentPath = "send-buffer-size"
    sendBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + sendBufferSize.EntityData.SegmentPath
    sendBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendBufferSize.EntityData.Children = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendBufferSize.SocketSendSize})
    sendBufferSize.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendBufferSize.BgpSendSize})

    sendBufferSize.EntityData.YListKeys = []string {}

    return &(sendBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "neighbor-group"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", timers.KeepaliveInterval})
    timers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", timers.HoldTime})
    timers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", timers.MinAcceptHoldTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "cisco_ios_xr"
    keychain.EntityData.ParentYangName = "neighbor-group"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()
    keychain.EntityData.Leafs.Append("keychain-disable", types.YLeaf{"KeychainDisable", keychain.KeychainDisable})
    keychain.EntityData.Leafs.Append("keychain-name", types.YLeaf{"KeychainName", keychain.KeychainName})

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetEntityData() *types.CommonEntityData {
    gracefulMaintenance.EntityData.YFilter = gracefulMaintenance.YFilter
    gracefulMaintenance.EntityData.YangName = "graceful-maintenance"
    gracefulMaintenance.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenance.EntityData.ParentYangName = "neighbor-group"
    gracefulMaintenance.EntityData.SegmentPath = "graceful-maintenance"
    gracefulMaintenance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/" + gracefulMaintenance.EntityData.SegmentPath
    gracefulMaintenance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenance.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-local-preference", types.YChild{"GracefulMaintenanceLocalPreference", &gracefulMaintenance.GracefulMaintenanceLocalPreference})
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-as-prepends", types.YChild{"GracefulMaintenanceAsPrepends", &gracefulMaintenance.GracefulMaintenanceAsPrepends})
    gracefulMaintenance.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", gracefulMaintenance.Enable})
    gracefulMaintenance.EntityData.Leafs.Append("graceful-maintenance-activate", types.YLeaf{"GracefulMaintenanceActivate", gracefulMaintenance.GracefulMaintenanceActivate})

    gracefulMaintenance.EntityData.YListKeys = []string {}

    return &(gracefulMaintenance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceLocalPreference.EntityData.YFilter = gracefulMaintenanceLocalPreference.YFilter
    gracefulMaintenanceLocalPreference.EntityData.YangName = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceLocalPreference.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceLocalPreference.EntityData.SegmentPath = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/graceful-maintenance/" + gracefulMaintenanceLocalPreference.EntityData.SegmentPath
    gracefulMaintenanceLocalPreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceLocalPreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceLocalPreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceLocalPreference.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("gshut-loc-pref-disable", types.YLeaf{"GshutLocPrefDisable", gracefulMaintenanceLocalPreference.GshutLocPrefDisable})
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", gracefulMaintenanceLocalPreference.LocalPreference})

    gracefulMaintenanceLocalPreference.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceLocalPreference.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceAsPrepends.EntityData.YFilter = gracefulMaintenanceAsPrepends.YFilter
    gracefulMaintenanceAsPrepends.EntityData.YangName = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceAsPrepends.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceAsPrepends.EntityData.SegmentPath = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/neighbor-groups/neighbor-group/graceful-maintenance/" + gracefulMaintenanceAsPrepends.EntityData.SegmentPath
    gracefulMaintenanceAsPrepends.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceAsPrepends.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceAsPrepends.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceAsPrepends.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("gshut-prepends-disable", types.YLeaf{"GshutPrependsDisable", gracefulMaintenanceAsPrepends.GshutPrependsDisable})
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("as-prepends", types.YLeaf{"AsPrepends", gracefulMaintenanceAsPrepends.AsPrepends})

    gracefulMaintenanceAsPrepends.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceAsPrepends.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups
// AF-group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A particular BGP AF group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup.
    AfGroup []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetEntityData() *types.CommonEntityData {
    afGroups.EntityData.YFilter = afGroups.YFilter
    afGroups.EntityData.YangName = "af-groups"
    afGroups.EntityData.BundleName = "cisco_ios_xr"
    afGroups.EntityData.ParentYangName = "bgp-entity"
    afGroups.EntityData.SegmentPath = "af-groups"
    afGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/" + afGroups.EntityData.SegmentPath
    afGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afGroups.EntityData.Children = types.NewOrderedMap()
    afGroups.EntityData.Children.Append("af-group", types.YChild{"AfGroup", nil})
    for i := range afGroups.AfGroup {
        afGroups.EntityData.Children.Append(types.GetSegmentPath(afGroups.AfGroup[i]), types.YChild{"AfGroup", afGroups.AfGroup[i]})
    }
    afGroups.EntityData.Leafs = types.NewOrderedMap()

    afGroups.EntityData.YListKeys = []string {}

    return &(afGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup
// A particular BGP AF group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP AF group name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    AfGroupName interface{}

    // AF group configuration table.
    AfGroupAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetEntityData() *types.CommonEntityData {
    afGroup.EntityData.YFilter = afGroup.YFilter
    afGroup.EntityData.YangName = "af-group"
    afGroup.EntityData.BundleName = "cisco_ios_xr"
    afGroup.EntityData.ParentYangName = "af-groups"
    afGroup.EntityData.SegmentPath = "af-group" + types.AddKeyToken(afGroup.AfGroupName, "af-group-name")
    afGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/" + afGroup.EntityData.SegmentPath
    afGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afGroup.EntityData.Children = types.NewOrderedMap()
    afGroup.EntityData.Children.Append("af-group-afs", types.YChild{"AfGroupAfs", &afGroup.AfGroupAfs})
    afGroup.EntityData.Leafs = types.NewOrderedMap()
    afGroup.EntityData.Leafs.Append("af-group-name", types.YLeaf{"AfGroupName", afGroup.AfGroupName})

    afGroup.EntityData.YListKeys = []string {"AfGroupName"}

    return &(afGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs
// AF group configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family type of an AF group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf.
    AfGroupAf []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetEntityData() *types.CommonEntityData {
    afGroupAfs.EntityData.YFilter = afGroupAfs.YFilter
    afGroupAfs.EntityData.YangName = "af-group-afs"
    afGroupAfs.EntityData.BundleName = "cisco_ios_xr"
    afGroupAfs.EntityData.ParentYangName = "af-group"
    afGroupAfs.EntityData.SegmentPath = "af-group-afs"
    afGroupAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/" + afGroupAfs.EntityData.SegmentPath
    afGroupAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afGroupAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afGroupAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afGroupAfs.EntityData.Children = types.NewOrderedMap()
    afGroupAfs.EntityData.Children.Append("af-group-af", types.YChild{"AfGroupAf", nil})
    for i := range afGroupAfs.AfGroupAf {
        afGroupAfs.EntityData.Children.Append(types.GetSegmentPath(afGroupAfs.AfGroupAf[i]), types.YChild{"AfGroupAf", afGroupAfs.AfGroupAf[i]})
    }
    afGroupAfs.EntityData.Leafs = types.NewOrderedMap()

    afGroupAfs.EntityData.YListKeys = []string {}

    return &(afGroupAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf
// Address family type of an AF group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP AF group address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // Create this address family group. Deletion of this object causes deletion
    // of all the objects under AFGroup associated with this object. The type is
    // interface{}.
    Create interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2vpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group. FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT. FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client. FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Name of the ORR group this neighbor is going to be part of. The type is
    // string.
    OptimalRouteReflectionGroup interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2vpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2vpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2vpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetEntityData() *types.CommonEntityData {
    afGroupAf.EntityData.YFilter = afGroupAf.YFilter
    afGroupAf.EntityData.YangName = "af-group-af"
    afGroupAf.EntityData.BundleName = "cisco_ios_xr"
    afGroupAf.EntityData.ParentYangName = "af-group-afs"
    afGroupAf.EntityData.SegmentPath = "af-group-af" + types.AddKeyToken(afGroupAf.AfName, "af-name")
    afGroupAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/" + afGroupAf.EntityData.SegmentPath
    afGroupAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    afGroupAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    afGroupAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    afGroupAf.EntityData.Children = types.NewOrderedMap()
    afGroupAf.EntityData.Children.Append("aigp-cost-community", types.YChild{"AigpCostCommunity", &afGroupAf.AigpCostCommunity})
    afGroupAf.EntityData.Children.Append("advertise-def-imp-disable-v6", types.YChild{"AdvertiseDefImpDisableV6", &afGroupAf.AdvertiseDefImpDisableV6})
    afGroupAf.EntityData.Children.Append("advertise-disable", types.YChild{"AdvertiseDisable", &afGroupAf.AdvertiseDisable})
    afGroupAf.EntityData.Children.Append("maximum-prefixes", types.YChild{"MaximumPrefixes", &afGroupAf.MaximumPrefixes})
    afGroupAf.EntityData.Children.Append("remove-private-as-entire-as-path-inbound", types.YChild{"RemovePrivateAsEntireAsPathInbound", &afGroupAf.RemovePrivateAsEntireAsPathInbound})
    afGroupAf.EntityData.Children.Append("advertise-def-imp-disable-v4", types.YChild{"AdvertiseDefImpDisableV4", &afGroupAf.AdvertiseDefImpDisableV4})
    afGroupAf.EntityData.Children.Append("advertise-l2vpn-evpn", types.YChild{"AdvertiseL2vpnEvpn", &afGroupAf.AdvertiseL2vpnEvpn})
    afGroupAf.EntityData.Children.Append("advertise-local-l2vpn-evpn", types.YChild{"AdvertiseLocalL2vpnEvpn", &afGroupAf.AdvertiseLocalL2vpnEvpn})
    afGroupAf.EntityData.Children.Append("neighbor-af-long-lived-graceful-restart-stale-time", types.YChild{"NeighborAfLongLivedGracefulRestartStaleTime", &afGroupAf.NeighborAfLongLivedGracefulRestartStaleTime})
    afGroupAf.EntityData.Children.Append("site-of-origin", types.YChild{"SiteOfOrigin", &afGroupAf.SiteOfOrigin})
    afGroupAf.EntityData.Children.Append("advertise-v6", types.YChild{"AdvertiseV6", &afGroupAf.AdvertiseV6})
    afGroupAf.EntityData.Children.Append("advertise-local-v6", types.YChild{"AdvertiseLocalV6", &afGroupAf.AdvertiseLocalV6})
    afGroupAf.EntityData.Children.Append("import", types.YChild{"Import", &afGroupAf.Import})
    afGroupAf.EntityData.Children.Append("default-originate", types.YChild{"DefaultOriginate", &afGroupAf.DefaultOriginate})
    afGroupAf.EntityData.Children.Append("soft-reconfiguration", types.YChild{"SoftReconfiguration", &afGroupAf.SoftReconfiguration})
    afGroupAf.EntityData.Children.Append("advertise-vrf-imp-disable-v6", types.YChild{"AdvertiseVrfImpDisableV6", &afGroupAf.AdvertiseVrfImpDisableV6})
    afGroupAf.EntityData.Children.Append("advertise-v4", types.YChild{"AdvertiseV4", &afGroupAf.AdvertiseV4})
    afGroupAf.EntityData.Children.Append("advertise-local-v4", types.YChild{"AdvertiseLocalV4", &afGroupAf.AdvertiseLocalV4})
    afGroupAf.EntityData.Children.Append("remove-private-as-entire-as-path", types.YChild{"RemovePrivateAsEntireAsPath", &afGroupAf.RemovePrivateAsEntireAsPath})
    afGroupAf.EntityData.Children.Append("advertise-vrf-imp-disable-v4", types.YChild{"AdvertiseVrfImpDisableV4", &afGroupAf.AdvertiseVrfImpDisableV4})
    afGroupAf.EntityData.Leafs = types.NewOrderedMap()
    afGroupAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", afGroupAf.AfName})
    afGroupAf.EntityData.Leafs.Append("af-group", types.YLeaf{"AfGroup", afGroupAf.AfGroup})
    afGroupAf.EntityData.Leafs.Append("create", types.YLeaf{"Create", afGroupAf.Create})
    afGroupAf.EntityData.Leafs.Append("neighbor-af-long-lived-graceful-restart-capable", types.YLeaf{"NeighborAfLongLivedGracefulRestartCapable", afGroupAf.NeighborAfLongLivedGracefulRestartCapable})
    afGroupAf.EntityData.Leafs.Append("l2vpn-signalling", types.YLeaf{"L2vpnSignalling", afGroupAf.L2vpnSignalling})
    afGroupAf.EntityData.Leafs.Append("send-ext-community-ebgp", types.YLeaf{"SendExtCommunityEbgp", afGroupAf.SendExtCommunityEbgp})
    afGroupAf.EntityData.Leafs.Append("accept-route-legacy-rt", types.YLeaf{"AcceptRouteLegacyRt", afGroupAf.AcceptRouteLegacyRt})
    afGroupAf.EntityData.Leafs.Append("send-community-ebgp", types.YLeaf{"SendCommunityEbgp", afGroupAf.SendCommunityEbgp})
    afGroupAf.EntityData.Leafs.Append("send-multicast-attr", types.YLeaf{"SendMulticastAttr", afGroupAf.SendMulticastAttr})
    afGroupAf.EntityData.Leafs.Append("next-hop-unchanged", types.YLeaf{"NextHopUnchanged", afGroupAf.NextHopUnchanged})
    afGroupAf.EntityData.Leafs.Append("advertise-local-labeled-route", types.YLeaf{"AdvertiseLocalLabeledRoute", afGroupAf.AdvertiseLocalLabeledRoute})
    afGroupAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", afGroupAf.RpkiOriginAsValidationDisable})
    afGroupAf.EntityData.Leafs.Append("flowspec-validation", types.YLeaf{"FlowspecValidation", afGroupAf.FlowspecValidation})
    afGroupAf.EntityData.Leafs.Append("encapsulation-type", types.YLeaf{"EncapsulationType", afGroupAf.EncapsulationType})
    afGroupAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", afGroupAf.RpkiBestpathOriginAsAllowInvalid})
    afGroupAf.EntityData.Leafs.Append("enforce-multiple-labels", types.YLeaf{"EnforceMultipleLabels", afGroupAf.EnforceMultipleLabels})
    afGroupAf.EntityData.Leafs.Append("as-override", types.YLeaf{"AsOverride", afGroupAf.AsOverride})
    afGroupAf.EntityData.Leafs.Append("multipath", types.YLeaf{"Multipath", afGroupAf.Multipath})
    afGroupAf.EntityData.Leafs.Append("send-community-ebgp-graceful-shutdown", types.YLeaf{"SendCommunityEbgpGracefulShutdown", afGroupAf.SendCommunityEbgpGracefulShutdown})
    afGroupAf.EntityData.Leafs.Append("prefix-orf-policy", types.YLeaf{"PrefixOrfPolicy", afGroupAf.PrefixOrfPolicy})
    afGroupAf.EntityData.Leafs.Append("aigp", types.YLeaf{"Aigp", afGroupAf.Aigp})
    afGroupAf.EntityData.Leafs.Append("aigp-send-med", types.YLeaf{"AigpSendMed", afGroupAf.AigpSendMed})
    afGroupAf.EntityData.Leafs.Append("allow-as-in", types.YLeaf{"AllowAsIn", afGroupAf.AllowAsIn})
    afGroupAf.EntityData.Leafs.Append("advertise-orf", types.YLeaf{"AdvertiseOrf", afGroupAf.AdvertiseOrf})
    afGroupAf.EntityData.Leafs.Append("route-reflector-client", types.YLeaf{"RouteReflectorClient", afGroupAf.RouteReflectorClient})
    afGroupAf.EntityData.Leafs.Append("next-hop-self", types.YLeaf{"NextHopSelf", afGroupAf.NextHopSelf})
    afGroupAf.EntityData.Leafs.Append("route-policy-in", types.YLeaf{"RoutePolicyIn", afGroupAf.RoutePolicyIn})
    afGroupAf.EntityData.Leafs.Append("default-weight", types.YLeaf{"DefaultWeight", afGroupAf.DefaultWeight})
    afGroupAf.EntityData.Leafs.Append("next-hop-unchanged-multipath", types.YLeaf{"NextHopUnchangedMultipath", afGroupAf.NextHopUnchangedMultipath})
    afGroupAf.EntityData.Leafs.Append("optimal-route-reflection-group", types.YLeaf{"OptimalRouteReflectionGroup", afGroupAf.OptimalRouteReflectionGroup})
    afGroupAf.EntityData.Leafs.Append("accept-own", types.YLeaf{"AcceptOwn", afGroupAf.AcceptOwn})
    afGroupAf.EntityData.Leafs.Append("route-policy-out", types.YLeaf{"RoutePolicyOut", afGroupAf.RoutePolicyOut})
    afGroupAf.EntityData.Leafs.Append("advertise-permanent-network", types.YLeaf{"AdvertisePermanentNetwork", afGroupAf.AdvertisePermanentNetwork})

    afGroupAf.EntityData.YListKeys = []string {"AfName"}

    return &(afGroupAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetEntityData() *types.CommonEntityData {
    aigpCostCommunity.EntityData.YFilter = aigpCostCommunity.YFilter
    aigpCostCommunity.EntityData.YangName = "aigp-cost-community"
    aigpCostCommunity.EntityData.BundleName = "cisco_ios_xr"
    aigpCostCommunity.EntityData.ParentYangName = "af-group-af"
    aigpCostCommunity.EntityData.SegmentPath = "aigp-cost-community"
    aigpCostCommunity.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + aigpCostCommunity.EntityData.SegmentPath
    aigpCostCommunity.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aigpCostCommunity.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aigpCostCommunity.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aigpCostCommunity.EntityData.Children = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs = types.NewOrderedMap()
    aigpCostCommunity.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", aigpCostCommunity.Enable})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-id", types.YLeaf{"CostCommunityId", aigpCostCommunity.CostCommunityId})
    aigpCostCommunity.EntityData.Leafs.Append("transitive", types.YLeaf{"Transitive", aigpCostCommunity.Transitive})
    aigpCostCommunity.EntityData.Leafs.Append("cost-community-poi-type", types.YLeaf{"CostCommunityPoiType", aigpCostCommunity.CostCommunityPoiType})

    aigpCostCommunity.EntityData.YListKeys = []string {}

    return &(aigpCostCommunity.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV6.EntityData.YFilter = advertiseDefImpDisableV6.YFilter
    advertiseDefImpDisableV6.EntityData.YangName = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV6.EntityData.ParentYangName = "af-group-af"
    advertiseDefImpDisableV6.EntityData.SegmentPath = "advertise-def-imp-disable-v6"
    advertiseDefImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseDefImpDisableV6.EntityData.SegmentPath
    advertiseDefImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV6.AfName})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV6.AdvOption})
    advertiseDefImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV6.RtType})

    advertiseDefImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetEntityData() *types.CommonEntityData {
    advertiseDisable.EntityData.YFilter = advertiseDisable.YFilter
    advertiseDisable.EntityData.YangName = "advertise-disable"
    advertiseDisable.EntityData.BundleName = "cisco_ios_xr"
    advertiseDisable.EntityData.ParentYangName = "af-group-af"
    advertiseDisable.EntityData.SegmentPath = "advertise-disable"
    advertiseDisable.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseDisable.EntityData.SegmentPath
    advertiseDisable.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDisable.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDisable.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDisable.EntityData.Children = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs = types.NewOrderedMap()
    advertiseDisable.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDisable.AfName})
    advertiseDisable.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseDisable.ReorgOption})
    advertiseDisable.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDisable.RtType})

    advertiseDisable.EntityData.YListKeys = []string {}

    return &(advertiseDisable.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetEntityData() *types.CommonEntityData {
    maximumPrefixes.EntityData.YFilter = maximumPrefixes.YFilter
    maximumPrefixes.EntityData.YangName = "maximum-prefixes"
    maximumPrefixes.EntityData.BundleName = "cisco_ios_xr"
    maximumPrefixes.EntityData.ParentYangName = "af-group-af"
    maximumPrefixes.EntityData.SegmentPath = "maximum-prefixes"
    maximumPrefixes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + maximumPrefixes.EntityData.SegmentPath
    maximumPrefixes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    maximumPrefixes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    maximumPrefixes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    maximumPrefixes.EntityData.Children = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs = types.NewOrderedMap()
    maximumPrefixes.EntityData.Leafs.Append("prefix-limit", types.YLeaf{"PrefixLimit", maximumPrefixes.PrefixLimit})
    maximumPrefixes.EntityData.Leafs.Append("warning-percentage", types.YLeaf{"WarningPercentage", maximumPrefixes.WarningPercentage})
    maximumPrefixes.EntityData.Leafs.Append("warning-only", types.YLeaf{"WarningOnly", maximumPrefixes.WarningOnly})
    maximumPrefixes.EntityData.Leafs.Append("restart-time", types.YLeaf{"RestartTime", maximumPrefixes.RestartTime})
    maximumPrefixes.EntityData.Leafs.Append("discard-extra-paths", types.YLeaf{"DiscardExtraPaths", maximumPrefixes.DiscardExtraPaths})

    maximumPrefixes.EntityData.YListKeys = []string {}

    return &(maximumPrefixes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPathInbound.EntityData.YFilter = removePrivateAsEntireAsPathInbound.YFilter
    removePrivateAsEntireAsPathInbound.EntityData.YangName = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPathInbound.EntityData.ParentYangName = "af-group-af"
    removePrivateAsEntireAsPathInbound.EntityData.SegmentPath = "remove-private-as-entire-as-path-inbound"
    removePrivateAsEntireAsPathInbound.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + removePrivateAsEntireAsPathInbound.EntityData.SegmentPath
    removePrivateAsEntireAsPathInbound.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPathInbound.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPathInbound.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPathInbound.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPathInbound.Enable})
    removePrivateAsEntireAsPathInbound.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPathInbound.Entire})

    removePrivateAsEntireAsPathInbound.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPathInbound.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseDefImpDisableV4.EntityData.YFilter = advertiseDefImpDisableV4.YFilter
    advertiseDefImpDisableV4.EntityData.YangName = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseDefImpDisableV4.EntityData.ParentYangName = "af-group-af"
    advertiseDefImpDisableV4.EntityData.SegmentPath = "advertise-def-imp-disable-v4"
    advertiseDefImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseDefImpDisableV4.EntityData.SegmentPath
    advertiseDefImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseDefImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseDefImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseDefImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseDefImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseDefImpDisableV4.AfName})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseDefImpDisableV4.AdvOption})
    advertiseDefImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseDefImpDisableV4.RtType})

    advertiseDefImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseDefImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2vpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseL2vpnEvpn.EntityData.YFilter = advertiseL2vpnEvpn.YFilter
    advertiseL2vpnEvpn.EntityData.YangName = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseL2vpnEvpn.EntityData.ParentYangName = "af-group-af"
    advertiseL2vpnEvpn.EntityData.SegmentPath = "advertise-l2vpn-evpn"
    advertiseL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseL2vpnEvpn.EntityData.SegmentPath
    advertiseL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseL2vpnEvpn.AfName})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseL2vpnEvpn.ReorgOption})
    advertiseL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseL2vpnEvpn.RtType})

    advertiseL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2vpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2vpnEvpn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2vpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2vpnEvpn) GetEntityData() *types.CommonEntityData {
    advertiseLocalL2vpnEvpn.EntityData.YFilter = advertiseLocalL2vpnEvpn.YFilter
    advertiseLocalL2vpnEvpn.EntityData.YangName = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalL2vpnEvpn.EntityData.ParentYangName = "af-group-af"
    advertiseLocalL2vpnEvpn.EntityData.SegmentPath = "advertise-local-l2vpn-evpn"
    advertiseLocalL2vpnEvpn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseLocalL2vpnEvpn.EntityData.SegmentPath
    advertiseLocalL2vpnEvpn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalL2vpnEvpn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalL2vpnEvpn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalL2vpnEvpn.EntityData.Children = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalL2vpnEvpn.AfName})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalL2vpnEvpn.ReorgOption})
    advertiseLocalL2vpnEvpn.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalL2vpnEvpn.RtType})

    advertiseLocalL2vpnEvpn.EntityData.YListKeys = []string {}

    return &(advertiseLocalL2vpnEvpn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetEntityData() *types.CommonEntityData {
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YFilter = neighborAfLongLivedGracefulRestartStaleTime.YFilter
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YangName = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleName = "cisco_ios_xr"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.ParentYangName = "af-group-af"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath = "neighbor-af-long-lived-graceful-restart-stale-time"
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + neighborAfLongLivedGracefulRestartStaleTime.EntityData.SegmentPath
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Children = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs = types.NewOrderedMap()
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-send", types.YLeaf{"StaleTimeSend", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend})
    neighborAfLongLivedGracefulRestartStaleTime.EntityData.Leafs.Append("stale-time-accept", types.YLeaf{"StaleTimeAccept", neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept})

    neighborAfLongLivedGracefulRestartStaleTime.EntityData.YListKeys = []string {}

    return &(neighborAfLongLivedGracefulRestartStaleTime.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetEntityData() *types.CommonEntityData {
    siteOfOrigin.EntityData.YFilter = siteOfOrigin.YFilter
    siteOfOrigin.EntityData.YangName = "site-of-origin"
    siteOfOrigin.EntityData.BundleName = "cisco_ios_xr"
    siteOfOrigin.EntityData.ParentYangName = "af-group-af"
    siteOfOrigin.EntityData.SegmentPath = "site-of-origin"
    siteOfOrigin.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + siteOfOrigin.EntityData.SegmentPath
    siteOfOrigin.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    siteOfOrigin.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    siteOfOrigin.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    siteOfOrigin.EntityData.Children = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs = types.NewOrderedMap()
    siteOfOrigin.EntityData.Leafs.Append("type", types.YLeaf{"Type", siteOfOrigin.Type})
    siteOfOrigin.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", siteOfOrigin.AsXx})
    siteOfOrigin.EntityData.Leafs.Append("as", types.YLeaf{"As", siteOfOrigin.As})
    siteOfOrigin.EntityData.Leafs.Append("as-index", types.YLeaf{"AsIndex", siteOfOrigin.AsIndex})
    siteOfOrigin.EntityData.Leafs.Append("address", types.YLeaf{"Address", siteOfOrigin.Address})
    siteOfOrigin.EntityData.Leafs.Append("address-index", types.YLeaf{"AddressIndex", siteOfOrigin.AddressIndex})

    siteOfOrigin.EntityData.YListKeys = []string {}

    return &(siteOfOrigin.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetEntityData() *types.CommonEntityData {
    advertiseV6.EntityData.YFilter = advertiseV6.YFilter
    advertiseV6.EntityData.YangName = "advertise-v6"
    advertiseV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseV6.EntityData.ParentYangName = "af-group-af"
    advertiseV6.EntityData.SegmentPath = "advertise-v6"
    advertiseV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseV6.EntityData.SegmentPath
    advertiseV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV6.EntityData.Children = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV6.AfName})
    advertiseV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV6.ReorgOption})
    advertiseV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV6.RtType})

    advertiseV6.EntityData.YListKeys = []string {}

    return &(advertiseV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetEntityData() *types.CommonEntityData {
    advertiseLocalV6.EntityData.YFilter = advertiseLocalV6.YFilter
    advertiseLocalV6.EntityData.YangName = "advertise-local-v6"
    advertiseLocalV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV6.EntityData.ParentYangName = "af-group-af"
    advertiseLocalV6.EntityData.SegmentPath = "advertise-local-v6"
    advertiseLocalV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseLocalV6.EntityData.SegmentPath
    advertiseLocalV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV6.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV6.AfName})
    advertiseLocalV6.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV6.ReorgOption})
    advertiseLocalV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV6.RtType})

    advertiseLocalV6.EntityData.YListKeys = []string {}

    return &(advertiseLocalV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetEntityData() *types.CommonEntityData {
    self.EntityData.YFilter = self.YFilter
    self.EntityData.YangName = "import"
    self.EntityData.BundleName = "cisco_ios_xr"
    self.EntityData.ParentYangName = "af-group-af"
    self.EntityData.SegmentPath = "import"
    self.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + self.EntityData.SegmentPath
    self.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    self.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    self.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    self.EntityData.Children = types.NewOrderedMap()
    self.EntityData.Leafs = types.NewOrderedMap()
    self.EntityData.Leafs.Append("import-stitching", types.YLeaf{"ImportStitching", self.ImportStitching})
    self.EntityData.Leafs.Append("import-reoriginate", types.YLeaf{"ImportReoriginate", self.ImportReoriginate})
    self.EntityData.Leafs.Append("import-reoriginate-stitching", types.YLeaf{"ImportReoriginateStitching", self.ImportReoriginateStitching})

    self.EntityData.YListKeys = []string {}

    return &(self.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetEntityData() *types.CommonEntityData {
    defaultOriginate.EntityData.YFilter = defaultOriginate.YFilter
    defaultOriginate.EntityData.YangName = "default-originate"
    defaultOriginate.EntityData.BundleName = "cisco_ios_xr"
    defaultOriginate.EntityData.ParentYangName = "af-group-af"
    defaultOriginate.EntityData.SegmentPath = "default-originate"
    defaultOriginate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + defaultOriginate.EntityData.SegmentPath
    defaultOriginate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    defaultOriginate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    defaultOriginate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    defaultOriginate.EntityData.Children = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs = types.NewOrderedMap()
    defaultOriginate.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", defaultOriginate.Enable})
    defaultOriginate.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", defaultOriginate.RoutePolicyName})

    defaultOriginate.EntityData.YListKeys = []string {}

    return &(defaultOriginate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetEntityData() *types.CommonEntityData {
    softReconfiguration.EntityData.YFilter = softReconfiguration.YFilter
    softReconfiguration.EntityData.YangName = "soft-reconfiguration"
    softReconfiguration.EntityData.BundleName = "cisco_ios_xr"
    softReconfiguration.EntityData.ParentYangName = "af-group-af"
    softReconfiguration.EntityData.SegmentPath = "soft-reconfiguration"
    softReconfiguration.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + softReconfiguration.EntityData.SegmentPath
    softReconfiguration.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    softReconfiguration.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    softReconfiguration.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    softReconfiguration.EntityData.Children = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs = types.NewOrderedMap()
    softReconfiguration.EntityData.Leafs.Append("inbound-soft", types.YLeaf{"InboundSoft", softReconfiguration.InboundSoft})
    softReconfiguration.EntityData.Leafs.Append("soft-always", types.YLeaf{"SoftAlways", softReconfiguration.SoftAlways})

    softReconfiguration.EntityData.YListKeys = []string {}

    return &(softReconfiguration.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV6.EntityData.YFilter = advertiseVrfImpDisableV6.YFilter
    advertiseVrfImpDisableV6.EntityData.YangName = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV6.EntityData.ParentYangName = "af-group-af"
    advertiseVrfImpDisableV6.EntityData.SegmentPath = "advertise-vrf-imp-disable-v6"
    advertiseVrfImpDisableV6.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseVrfImpDisableV6.EntityData.SegmentPath
    advertiseVrfImpDisableV6.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV6.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV6.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV6.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV6.AfName})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV6.AdvOption})
    advertiseVrfImpDisableV6.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV6.RtType})

    advertiseVrfImpDisableV6.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV6.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetEntityData() *types.CommonEntityData {
    advertiseV4.EntityData.YFilter = advertiseV4.YFilter
    advertiseV4.EntityData.YangName = "advertise-v4"
    advertiseV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseV4.EntityData.ParentYangName = "af-group-af"
    advertiseV4.EntityData.SegmentPath = "advertise-v4"
    advertiseV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseV4.EntityData.SegmentPath
    advertiseV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseV4.EntityData.Children = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseV4.AfName})
    advertiseV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseV4.ReorgOption})
    advertiseV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseV4.RtType})

    advertiseV4.EntityData.YListKeys = []string {}

    return &(advertiseV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetEntityData() *types.CommonEntityData {
    advertiseLocalV4.EntityData.YFilter = advertiseLocalV4.YFilter
    advertiseLocalV4.EntityData.YangName = "advertise-local-v4"
    advertiseLocalV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseLocalV4.EntityData.ParentYangName = "af-group-af"
    advertiseLocalV4.EntityData.SegmentPath = "advertise-local-v4"
    advertiseLocalV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseLocalV4.EntityData.SegmentPath
    advertiseLocalV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseLocalV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseLocalV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseLocalV4.EntityData.Children = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseLocalV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseLocalV4.AfName})
    advertiseLocalV4.EntityData.Leafs.Append("reorg-option", types.YLeaf{"ReorgOption", advertiseLocalV4.ReorgOption})
    advertiseLocalV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseLocalV4.RtType})

    advertiseLocalV4.EntityData.YListKeys = []string {}

    return &(advertiseLocalV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetEntityData() *types.CommonEntityData {
    removePrivateAsEntireAsPath.EntityData.YFilter = removePrivateAsEntireAsPath.YFilter
    removePrivateAsEntireAsPath.EntityData.YangName = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.BundleName = "cisco_ios_xr"
    removePrivateAsEntireAsPath.EntityData.ParentYangName = "af-group-af"
    removePrivateAsEntireAsPath.EntityData.SegmentPath = "remove-private-as-entire-as-path"
    removePrivateAsEntireAsPath.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + removePrivateAsEntireAsPath.EntityData.SegmentPath
    removePrivateAsEntireAsPath.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    removePrivateAsEntireAsPath.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    removePrivateAsEntireAsPath.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    removePrivateAsEntireAsPath.EntityData.Children = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs = types.NewOrderedMap()
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", removePrivateAsEntireAsPath.Enable})
    removePrivateAsEntireAsPath.EntityData.Leafs.Append("entire", types.YLeaf{"Entire", removePrivateAsEntireAsPath.Entire})

    removePrivateAsEntireAsPath.EntityData.YListKeys = []string {}

    return &(removePrivateAsEntireAsPath.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4 struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetEntityData() *types.CommonEntityData {
    advertiseVrfImpDisableV4.EntityData.YFilter = advertiseVrfImpDisableV4.YFilter
    advertiseVrfImpDisableV4.EntityData.YangName = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.BundleName = "cisco_ios_xr"
    advertiseVrfImpDisableV4.EntityData.ParentYangName = "af-group-af"
    advertiseVrfImpDisableV4.EntityData.SegmentPath = "advertise-vrf-imp-disable-v4"
    advertiseVrfImpDisableV4.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/af-groups/af-group/af-group-afs/af-group-af/" + advertiseVrfImpDisableV4.EntityData.SegmentPath
    advertiseVrfImpDisableV4.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertiseVrfImpDisableV4.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertiseVrfImpDisableV4.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertiseVrfImpDisableV4.EntityData.Children = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs = types.NewOrderedMap()
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", advertiseVrfImpDisableV4.AfName})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("adv-option", types.YLeaf{"AdvOption", advertiseVrfImpDisableV4.AdvOption})
    advertiseVrfImpDisableV4.EntityData.Leafs.Append("rt-type", types.YLeaf{"RtType", advertiseVrfImpDisableV4.RtType})

    advertiseVrfImpDisableV4.EntityData.YListKeys = []string {}

    return &(advertiseVrfImpDisableV4.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups
// Session group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A particular BGP session group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup.
    SessionGroup []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetEntityData() *types.CommonEntityData {
    sessionGroups.EntityData.YFilter = sessionGroups.YFilter
    sessionGroups.EntityData.YangName = "session-groups"
    sessionGroups.EntityData.BundleName = "cisco_ios_xr"
    sessionGroups.EntityData.ParentYangName = "bgp-entity"
    sessionGroups.EntityData.SegmentPath = "session-groups"
    sessionGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/" + sessionGroups.EntityData.SegmentPath
    sessionGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionGroups.EntityData.Children = types.NewOrderedMap()
    sessionGroups.EntityData.Children.Append("session-group", types.YChild{"SessionGroup", nil})
    for i := range sessionGroups.SessionGroup {
        sessionGroups.EntityData.Children.Append(types.GetSegmentPath(sessionGroups.SessionGroup[i]), types.YChild{"SessionGroup", sessionGroups.SessionGroup[i]})
    }
    sessionGroups.EntityData.Leafs = types.NewOrderedMap()

    sessionGroups.EntityData.YListKeys = []string {}

    return &(sessionGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup
// A particular BGP session group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BGP session group name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    SessionGroupName interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart supportfor neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is BgpNbrgr.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability. FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // Create this group. Deletion of this object causes deletion of all the
    // objects under NeighborGroup/SessionGroup associated with this object. The
    // type is interface{}.
    Create interface{}

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut

    // Set or disable AO based authentication.
    AoKeychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AoKeychain

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetEntityData() *types.CommonEntityData {
    sessionGroup.EntityData.YFilter = sessionGroup.YFilter
    sessionGroup.EntityData.YangName = "session-group"
    sessionGroup.EntityData.BundleName = "cisco_ios_xr"
    sessionGroup.EntityData.ParentYangName = "session-groups"
    sessionGroup.EntityData.SegmentPath = "session-group" + types.AddKeyToken(sessionGroup.SessionGroupName, "session-group-name")
    sessionGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/" + sessionGroup.EntityData.SegmentPath
    sessionGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sessionGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sessionGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sessionGroup.EntityData.Children = types.NewOrderedMap()
    sessionGroup.EntityData.Children.Append("local-address", types.YChild{"LocalAddress", &sessionGroup.LocalAddress})
    sessionGroup.EntityData.Children.Append("bmp-activates", types.YChild{"BmpActivates", &sessionGroup.BmpActivates})
    sessionGroup.EntityData.Children.Append("ebgp-multihop", types.YChild{"EbgpMultihop", &sessionGroup.EbgpMultihop})
    sessionGroup.EntityData.Children.Append("remote-as", types.YChild{"RemoteAs", &sessionGroup.RemoteAs})
    sessionGroup.EntityData.Children.Append("local-as", types.YChild{"LocalAs", &sessionGroup.LocalAs})
    sessionGroup.EntityData.Children.Append("password", types.YChild{"Password", &sessionGroup.Password})
    sessionGroup.EntityData.Children.Append("advertisement-interval", types.YChild{"AdvertisementInterval", &sessionGroup.AdvertisementInterval})
    sessionGroup.EntityData.Children.Append("neighbor-cluster-id", types.YChild{"NeighborClusterId", &sessionGroup.NeighborClusterId})
    sessionGroup.EntityData.Children.Append("tcpmss", types.YChild{"Tcpmss", &sessionGroup.Tcpmss})
    sessionGroup.EntityData.Children.Append("tos", types.YChild{"Tos", &sessionGroup.Tos})
    sessionGroup.EntityData.Children.Append("update-in-filtering", types.YChild{"UpdateInFiltering", &sessionGroup.UpdateInFiltering})
    sessionGroup.EntityData.Children.Append("msg-log-out", types.YChild{"MsgLogOut", &sessionGroup.MsgLogOut})
    sessionGroup.EntityData.Children.Append("ao-keychain", types.YChild{"AoKeychain", &sessionGroup.AoKeychain})
    sessionGroup.EntityData.Children.Append("receive-buffer-size", types.YChild{"ReceiveBufferSize", &sessionGroup.ReceiveBufferSize})
    sessionGroup.EntityData.Children.Append("msg-log-in", types.YChild{"MsgLogIn", &sessionGroup.MsgLogIn})
    sessionGroup.EntityData.Children.Append("send-buffer-size", types.YChild{"SendBufferSize", &sessionGroup.SendBufferSize})
    sessionGroup.EntityData.Children.Append("timers", types.YChild{"Timers", &sessionGroup.Timers})
    sessionGroup.EntityData.Children.Append("keychain", types.YChild{"Keychain", &sessionGroup.Keychain})
    sessionGroup.EntityData.Children.Append("graceful-maintenance", types.YChild{"GracefulMaintenance", &sessionGroup.GracefulMaintenance})
    sessionGroup.EntityData.Leafs = types.NewOrderedMap()
    sessionGroup.EntityData.Leafs.Append("session-group-name", types.YLeaf{"SessionGroupName", sessionGroup.SessionGroupName})
    sessionGroup.EntityData.Leafs.Append("session-group-add-member", types.YLeaf{"SessionGroupAddMember", sessionGroup.SessionGroupAddMember})
    sessionGroup.EntityData.Leafs.Append("internal-vpn-client-ibgp-ce", types.YLeaf{"InternalVpnClientIbgpCe", sessionGroup.InternalVpnClientIbgpCe})
    sessionGroup.EntityData.Leafs.Append("egress-peer-engineering", types.YLeaf{"EgressPeerEngineering", sessionGroup.EgressPeerEngineering})
    sessionGroup.EntityData.Leafs.Append("neighbor-graceful-restart-stalepath-time", types.YLeaf{"NeighborGracefulRestartStalepathTime", sessionGroup.NeighborGracefulRestartStalepathTime})
    sessionGroup.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", sessionGroup.Shutdown})
    sessionGroup.EntityData.Leafs.Append("description", types.YLeaf{"Description", sessionGroup.Description})
    sessionGroup.EntityData.Leafs.Append("ebgp-recv-dmz", types.YLeaf{"EbgpRecvDmz", sessionGroup.EbgpRecvDmz})
    sessionGroup.EntityData.Leafs.Append("neighbor-graceful-restart", types.YLeaf{"NeighborGracefulRestart", sessionGroup.NeighborGracefulRestart})
    sessionGroup.EntityData.Leafs.Append("enforce-first-as", types.YLeaf{"EnforceFirstAs", sessionGroup.EnforceFirstAs})
    sessionGroup.EntityData.Leafs.Append("idle-watch-time", types.YLeaf{"IdleWatchTime", sessionGroup.IdleWatchTime})
    sessionGroup.EntityData.Leafs.Append("session-open-mode", types.YLeaf{"SessionOpenMode", sessionGroup.SessionOpenMode})
    sessionGroup.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", sessionGroup.RpkiOriginAsValidationDisable})
    sessionGroup.EntityData.Leafs.Append("ebgp-send-dmz-enable-modes", types.YLeaf{"EbgpSendDmzEnableModes", sessionGroup.EbgpSendDmzEnableModes})
    sessionGroup.EntityData.Leafs.Append("suppress-all-capabilities", types.YLeaf{"SuppressAllCapabilities", sessionGroup.SuppressAllCapabilities})
    sessionGroup.EntityData.Leafs.Append("max-peers", types.YLeaf{"MaxPeers", sessionGroup.MaxPeers})
    sessionGroup.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", sessionGroup.RpkiBestpathOriginAsAllowInvalid})
    sessionGroup.EntityData.Leafs.Append("additional-paths-send-capability", types.YLeaf{"AdditionalPathsSendCapability", sessionGroup.AdditionalPathsSendCapability})
    sessionGroup.EntityData.Leafs.Append("propagate-dmz-link-bandwidth", types.YLeaf{"PropagateDmzLinkBandwidth", sessionGroup.PropagateDmzLinkBandwidth})
    sessionGroup.EntityData.Leafs.Append("bfd-enable-modes", types.YLeaf{"BfdEnableModes", sessionGroup.BfdEnableModes})
    sessionGroup.EntityData.Leafs.Append("ttl-security", types.YLeaf{"TtlSecurity", sessionGroup.TtlSecurity})
    sessionGroup.EntityData.Leafs.Append("neighbor-graceful-restart-time", types.YLeaf{"NeighborGracefulRestartTime", sessionGroup.NeighborGracefulRestartTime})
    sessionGroup.EntityData.Leafs.Append("bfd-multiplier", types.YLeaf{"BfdMultiplier", sessionGroup.BfdMultiplier})
    sessionGroup.EntityData.Leafs.Append("bfd-minimum-interval", types.YLeaf{"BfdMinimumInterval", sessionGroup.BfdMinimumInterval})
    sessionGroup.EntityData.Leafs.Append("remote-as-list", types.YLeaf{"RemoteAsList", sessionGroup.RemoteAsList})
    sessionGroup.EntityData.Leafs.Append("additional-paths-receive-capability", types.YLeaf{"AdditionalPathsReceiveCapability", sessionGroup.AdditionalPathsReceiveCapability})
    sessionGroup.EntityData.Leafs.Append("ignore-connected-check-ebgp", types.YLeaf{"IgnoreConnectedCheckEbgp", sessionGroup.IgnoreConnectedCheckEbgp})
    sessionGroup.EntityData.Leafs.Append("suppress-four-byte-as-capability", types.YLeaf{"SuppressFourByteAsCapability", sessionGroup.SuppressFourByteAsCapability})
    sessionGroup.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", sessionGroup.UpdateSourceInterface})
    sessionGroup.EntityData.Leafs.Append("create", types.YLeaf{"Create", sessionGroup.Create})

    sessionGroup.EntityData.YListKeys = []string {"SessionGroupName"}

    return &(sessionGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetEntityData() *types.CommonEntityData {
    localAddress.EntityData.YFilter = localAddress.YFilter
    localAddress.EntityData.YangName = "local-address"
    localAddress.EntityData.BundleName = "cisco_ios_xr"
    localAddress.EntityData.ParentYangName = "session-group"
    localAddress.EntityData.SegmentPath = "local-address"
    localAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + localAddress.EntityData.SegmentPath
    localAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAddress.EntityData.Children = types.NewOrderedMap()
    localAddress.EntityData.Leafs = types.NewOrderedMap()
    localAddress.EntityData.Leafs.Append("local-address-disable", types.YLeaf{"LocalAddressDisable", localAddress.LocalAddressDisable})
    localAddress.EntityData.Leafs.Append("local-ip-address", types.YLeaf{"LocalIpAddress", localAddress.LocalIpAddress})

    localAddress.EntityData.YListKeys = []string {}

    return &(localAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate.
    BmpActivate []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetEntityData() *types.CommonEntityData {
    bmpActivates.EntityData.YFilter = bmpActivates.YFilter
    bmpActivates.EntityData.YangName = "bmp-activates"
    bmpActivates.EntityData.BundleName = "cisco_ios_xr"
    bmpActivates.EntityData.ParentYangName = "session-group"
    bmpActivates.EntityData.SegmentPath = "bmp-activates"
    bmpActivates.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + bmpActivates.EntityData.SegmentPath
    bmpActivates.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivates.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivates.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivates.EntityData.Children = types.NewOrderedMap()
    bmpActivates.EntityData.Children.Append("bmp-activate", types.YChild{"BmpActivate", nil})
    for i := range bmpActivates.BmpActivate {
        bmpActivates.EntityData.Children.Append(types.GetSegmentPath(bmpActivates.BmpActivate[i]), types.YChild{"BmpActivate", bmpActivates.BmpActivate[i]})
    }
    bmpActivates.EntityData.Leafs = types.NewOrderedMap()

    bmpActivates.EntityData.YListKeys = []string {}

    return &(bmpActivates.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetEntityData() *types.CommonEntityData {
    bmpActivate.EntityData.YFilter = bmpActivate.YFilter
    bmpActivate.EntityData.YangName = "bmp-activate"
    bmpActivate.EntityData.BundleName = "cisco_ios_xr"
    bmpActivate.EntityData.ParentYangName = "bmp-activates"
    bmpActivate.EntityData.SegmentPath = "bmp-activate" + types.AddKeyToken(bmpActivate.ServerId, "server-id")
    bmpActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/bmp-activates/" + bmpActivate.EntityData.SegmentPath
    bmpActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpActivate.EntityData.Children = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs = types.NewOrderedMap()
    bmpActivate.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpActivate.ServerId})

    bmpActivate.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetEntityData() *types.CommonEntityData {
    ebgpMultihop.EntityData.YFilter = ebgpMultihop.YFilter
    ebgpMultihop.EntityData.YangName = "ebgp-multihop"
    ebgpMultihop.EntityData.BundleName = "cisco_ios_xr"
    ebgpMultihop.EntityData.ParentYangName = "session-group"
    ebgpMultihop.EntityData.SegmentPath = "ebgp-multihop"
    ebgpMultihop.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + ebgpMultihop.EntityData.SegmentPath
    ebgpMultihop.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgpMultihop.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgpMultihop.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgpMultihop.EntityData.Children = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs = types.NewOrderedMap()
    ebgpMultihop.EntityData.Leafs.Append("max-hop-count", types.YLeaf{"MaxHopCount", ebgpMultihop.MaxHopCount})
    ebgpMultihop.EntityData.Leafs.Append("mpls-deactivation", types.YLeaf{"MplsDeactivation", ebgpMultihop.MplsDeactivation})

    ebgpMultihop.EntityData.YListKeys = []string {}

    return &(ebgpMultihop.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetEntityData() *types.CommonEntityData {
    remoteAs.EntityData.YFilter = remoteAs.YFilter
    remoteAs.EntityData.YangName = "remote-as"
    remoteAs.EntityData.BundleName = "cisco_ios_xr"
    remoteAs.EntityData.ParentYangName = "session-group"
    remoteAs.EntityData.SegmentPath = "remote-as"
    remoteAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + remoteAs.EntityData.SegmentPath
    remoteAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    remoteAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    remoteAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    remoteAs.EntityData.Children = types.NewOrderedMap()
    remoteAs.EntityData.Leafs = types.NewOrderedMap()
    remoteAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", remoteAs.AsXx})
    remoteAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", remoteAs.AsYy})

    remoteAs.EntityData.YListKeys = []string {}

    return &(remoteAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetEntityData() *types.CommonEntityData {
    localAs.EntityData.YFilter = localAs.YFilter
    localAs.EntityData.YangName = "local-as"
    localAs.EntityData.BundleName = "cisco_ios_xr"
    localAs.EntityData.ParentYangName = "session-group"
    localAs.EntityData.SegmentPath = "local-as"
    localAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + localAs.EntityData.SegmentPath
    localAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    localAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    localAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    localAs.EntityData.Children = types.NewOrderedMap()
    localAs.EntityData.Leafs = types.NewOrderedMap()
    localAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", localAs.AsXx})
    localAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", localAs.AsYy})
    localAs.EntityData.Leafs.Append("no-prepend", types.YLeaf{"NoPrepend", localAs.NoPrepend})
    localAs.EntityData.Leafs.Append("disable", types.YLeaf{"Disable", localAs.Disable})
    localAs.EntityData.Leafs.Append("replace-as", types.YLeaf{"ReplaceAs", localAs.ReplaceAs})
    localAs.EntityData.Leafs.Append("dual-as", types.YLeaf{"DualAs", localAs.DualAs})

    localAs.EntityData.YListKeys = []string {}

    return &(localAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetEntityData() *types.CommonEntityData {
    password.EntityData.YFilter = password.YFilter
    password.EntityData.YangName = "password"
    password.EntityData.BundleName = "cisco_ios_xr"
    password.EntityData.ParentYangName = "session-group"
    password.EntityData.SegmentPath = "password"
    password.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + password.EntityData.SegmentPath
    password.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    password.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    password.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    password.EntityData.Children = types.NewOrderedMap()
    password.EntityData.Leafs = types.NewOrderedMap()
    password.EntityData.Leafs.Append("password-disable", types.YLeaf{"PasswordDisable", password.PasswordDisable})
    password.EntityData.Leafs.Append("password", types.YLeaf{"Password", password.Password})

    password.EntityData.YListKeys = []string {}

    return &(password.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetEntityData() *types.CommonEntityData {
    advertisementInterval.EntityData.YFilter = advertisementInterval.YFilter
    advertisementInterval.EntityData.YangName = "advertisement-interval"
    advertisementInterval.EntityData.BundleName = "cisco_ios_xr"
    advertisementInterval.EntityData.ParentYangName = "session-group"
    advertisementInterval.EntityData.SegmentPath = "advertisement-interval"
    advertisementInterval.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + advertisementInterval.EntityData.SegmentPath
    advertisementInterval.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    advertisementInterval.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    advertisementInterval.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    advertisementInterval.EntityData.Children = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs = types.NewOrderedMap()
    advertisementInterval.EntityData.Leafs.Append("minimum-interval", types.YLeaf{"MinimumInterval", advertisementInterval.MinimumInterval})
    advertisementInterval.EntityData.Leafs.Append("minimum-interval-msecs", types.YLeaf{"MinimumIntervalMsecs", advertisementInterval.MinimumIntervalMsecs})

    advertisementInterval.EntityData.YListKeys = []string {}

    return &(advertisementInterval.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetEntityData() *types.CommonEntityData {
    neighborClusterId.EntityData.YFilter = neighborClusterId.YFilter
    neighborClusterId.EntityData.YangName = "neighbor-cluster-id"
    neighborClusterId.EntityData.BundleName = "cisco_ios_xr"
    neighborClusterId.EntityData.ParentYangName = "session-group"
    neighborClusterId.EntityData.SegmentPath = "neighbor-cluster-id"
    neighborClusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + neighborClusterId.EntityData.SegmentPath
    neighborClusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    neighborClusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    neighborClusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    neighborClusterId.EntityData.Children = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs = types.NewOrderedMap()
    neighborClusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", neighborClusterId.ClusterIdNumber})
    neighborClusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", neighborClusterId.ClusterIdAddress})

    neighborClusterId.EntityData.YListKeys = []string {}

    return &(neighborClusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetEntityData() *types.CommonEntityData {
    tcpmss.EntityData.YFilter = tcpmss.YFilter
    tcpmss.EntityData.YangName = "tcpmss"
    tcpmss.EntityData.BundleName = "cisco_ios_xr"
    tcpmss.EntityData.ParentYangName = "session-group"
    tcpmss.EntityData.SegmentPath = "tcpmss"
    tcpmss.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + tcpmss.EntityData.SegmentPath
    tcpmss.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tcpmss.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tcpmss.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tcpmss.EntityData.Children = types.NewOrderedMap()
    tcpmss.EntityData.Leafs = types.NewOrderedMap()
    tcpmss.EntityData.Leafs.Append("tcpmss-disable", types.YLeaf{"TcpmssDisable", tcpmss.TcpmssDisable})
    tcpmss.EntityData.Leafs.Append("mss", types.YLeaf{"Mss", tcpmss.Mss})

    tcpmss.EntityData.YListKeys = []string {}

    return &(tcpmss.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "session-group"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetEntityData() *types.CommonEntityData {
    updateInFiltering.EntityData.YFilter = updateInFiltering.YFilter
    updateInFiltering.EntityData.YangName = "update-in-filtering"
    updateInFiltering.EntityData.BundleName = "cisco_ios_xr"
    updateInFiltering.EntityData.ParentYangName = "session-group"
    updateInFiltering.EntityData.SegmentPath = "update-in-filtering"
    updateInFiltering.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + updateInFiltering.EntityData.SegmentPath
    updateInFiltering.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFiltering.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFiltering.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFiltering.EntityData.Children = types.NewOrderedMap()
    updateInFiltering.EntityData.Children.Append("update-in-filtering-message-buffers", types.YChild{"UpdateInFilteringMessageBuffers", &updateInFiltering.UpdateInFilteringMessageBuffers})
    updateInFiltering.EntityData.Leafs = types.NewOrderedMap()
    updateInFiltering.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", updateInFiltering.Enable})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-attribute-filter-group", types.YLeaf{"UpdateInFilteringAttributeFilterGroup", updateInFiltering.UpdateInFilteringAttributeFilterGroup})
    updateInFiltering.EntityData.Leafs.Append("update-in-filtering-syslog-disable", types.YLeaf{"UpdateInFilteringSyslogDisable", updateInFiltering.UpdateInFilteringSyslogDisable})

    updateInFiltering.EntityData.YListKeys = []string {}

    return &(updateInFiltering.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetEntityData() *types.CommonEntityData {
    updateInFilteringMessageBuffers.EntityData.YFilter = updateInFilteringMessageBuffers.YFilter
    updateInFilteringMessageBuffers.EntityData.YangName = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.BundleName = "cisco_ios_xr"
    updateInFilteringMessageBuffers.EntityData.ParentYangName = "update-in-filtering"
    updateInFilteringMessageBuffers.EntityData.SegmentPath = "update-in-filtering-message-buffers"
    updateInFilteringMessageBuffers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/update-in-filtering/" + updateInFilteringMessageBuffers.EntityData.SegmentPath
    updateInFilteringMessageBuffers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateInFilteringMessageBuffers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateInFilteringMessageBuffers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateInFilteringMessageBuffers.EntityData.Children = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs = types.NewOrderedMap()
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("number-of-buffers", types.YLeaf{"NumberOfBuffers", updateInFilteringMessageBuffers.NumberOfBuffers})
    updateInFilteringMessageBuffers.EntityData.Leafs.Append("non-circular-buffer", types.YLeaf{"NonCircularBuffer", updateInFilteringMessageBuffers.NonCircularBuffer})

    updateInFilteringMessageBuffers.EntityData.YListKeys = []string {}

    return &(updateInFilteringMessageBuffers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetEntityData() *types.CommonEntityData {
    msgLogOut.EntityData.YFilter = msgLogOut.YFilter
    msgLogOut.EntityData.YangName = "msg-log-out"
    msgLogOut.EntityData.BundleName = "cisco_ios_xr"
    msgLogOut.EntityData.ParentYangName = "session-group"
    msgLogOut.EntityData.SegmentPath = "msg-log-out"
    msgLogOut.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + msgLogOut.EntityData.SegmentPath
    msgLogOut.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogOut.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogOut.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogOut.EntityData.Children = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs = types.NewOrderedMap()
    msgLogOut.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogOut.MsgBufCount})
    msgLogOut.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogOut.MsgLogDisable})
    msgLogOut.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogOut.MsgLogInheritDisable})

    msgLogOut.EntityData.YListKeys = []string {}

    return &(msgLogOut.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AoKeychain
// Set or disable AO based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AoKeychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having AO keychain based authentication
    // even if the parent has one.FALSE to enable AO keychain based
    // authentication. The type is bool.
    AoKeychainDisable interface{}

    // Name of the AO keychain associated with this neighbor. The type is string.
    AoKeychainName interface{}

    // Include TCP options header with AO. The type is bool.
    AoIncludeTcpOptions interface{}

    // Accept new connections even though AO mismatched. The type is bool.
    AoAcceptMismatchConnection interface{}
}

func (aoKeychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AoKeychain) GetEntityData() *types.CommonEntityData {
    aoKeychain.EntityData.YFilter = aoKeychain.YFilter
    aoKeychain.EntityData.YangName = "ao-keychain"
    aoKeychain.EntityData.BundleName = "cisco_ios_xr"
    aoKeychain.EntityData.ParentYangName = "session-group"
    aoKeychain.EntityData.SegmentPath = "ao-keychain"
    aoKeychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + aoKeychain.EntityData.SegmentPath
    aoKeychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aoKeychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aoKeychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aoKeychain.EntityData.Children = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs = types.NewOrderedMap()
    aoKeychain.EntityData.Leafs.Append("ao-keychain-disable", types.YLeaf{"AoKeychainDisable", aoKeychain.AoKeychainDisable})
    aoKeychain.EntityData.Leafs.Append("ao-keychain-name", types.YLeaf{"AoKeychainName", aoKeychain.AoKeychainName})
    aoKeychain.EntityData.Leafs.Append("ao-include-tcp-options", types.YLeaf{"AoIncludeTcpOptions", aoKeychain.AoIncludeTcpOptions})
    aoKeychain.EntityData.Leafs.Append("ao-accept-mismatch-connection", types.YLeaf{"AoAcceptMismatchConnection", aoKeychain.AoAcceptMismatchConnection})

    aoKeychain.EntityData.YListKeys = []string {}

    return &(aoKeychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetEntityData() *types.CommonEntityData {
    receiveBufferSize.EntityData.YFilter = receiveBufferSize.YFilter
    receiveBufferSize.EntityData.YangName = "receive-buffer-size"
    receiveBufferSize.EntityData.BundleName = "cisco_ios_xr"
    receiveBufferSize.EntityData.ParentYangName = "session-group"
    receiveBufferSize.EntityData.SegmentPath = "receive-buffer-size"
    receiveBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + receiveBufferSize.EntityData.SegmentPath
    receiveBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveBufferSize.EntityData.Children = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs = types.NewOrderedMap()
    receiveBufferSize.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveBufferSize.SocketReceiveSize})
    receiveBufferSize.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveBufferSize.BgpReceiveSize})

    receiveBufferSize.EntityData.YListKeys = []string {}

    return &(receiveBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetEntityData() *types.CommonEntityData {
    msgLogIn.EntityData.YFilter = msgLogIn.YFilter
    msgLogIn.EntityData.YangName = "msg-log-in"
    msgLogIn.EntityData.BundleName = "cisco_ios_xr"
    msgLogIn.EntityData.ParentYangName = "session-group"
    msgLogIn.EntityData.SegmentPath = "msg-log-in"
    msgLogIn.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + msgLogIn.EntityData.SegmentPath
    msgLogIn.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    msgLogIn.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    msgLogIn.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    msgLogIn.EntityData.Children = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs = types.NewOrderedMap()
    msgLogIn.EntityData.Leafs.Append("msg-buf-count", types.YLeaf{"MsgBufCount", msgLogIn.MsgBufCount})
    msgLogIn.EntityData.Leafs.Append("msg-log-disable", types.YLeaf{"MsgLogDisable", msgLogIn.MsgLogDisable})
    msgLogIn.EntityData.Leafs.Append("msg-log-inherit-disable", types.YLeaf{"MsgLogInheritDisable", msgLogIn.MsgLogInheritDisable})

    msgLogIn.EntityData.YListKeys = []string {}

    return &(msgLogIn.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetEntityData() *types.CommonEntityData {
    sendBufferSize.EntityData.YFilter = sendBufferSize.YFilter
    sendBufferSize.EntityData.YangName = "send-buffer-size"
    sendBufferSize.EntityData.BundleName = "cisco_ios_xr"
    sendBufferSize.EntityData.ParentYangName = "session-group"
    sendBufferSize.EntityData.SegmentPath = "send-buffer-size"
    sendBufferSize.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + sendBufferSize.EntityData.SegmentPath
    sendBufferSize.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendBufferSize.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendBufferSize.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendBufferSize.EntityData.Children = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs = types.NewOrderedMap()
    sendBufferSize.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendBufferSize.SocketSendSize})
    sendBufferSize.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendBufferSize.BgpSendSize})

    sendBufferSize.EntityData.YListKeys = []string {}

    return &(sendBufferSize.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetEntityData() *types.CommonEntityData {
    timers.EntityData.YFilter = timers.YFilter
    timers.EntityData.YangName = "timers"
    timers.EntityData.BundleName = "cisco_ios_xr"
    timers.EntityData.ParentYangName = "session-group"
    timers.EntityData.SegmentPath = "timers"
    timers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + timers.EntityData.SegmentPath
    timers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    timers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    timers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    timers.EntityData.Children = types.NewOrderedMap()
    timers.EntityData.Leafs = types.NewOrderedMap()
    timers.EntityData.Leafs.Append("keepalive-interval", types.YLeaf{"KeepaliveInterval", timers.KeepaliveInterval})
    timers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", timers.HoldTime})
    timers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", timers.MinAcceptHoldTime})

    timers.EntityData.YListKeys = []string {}

    return &(timers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetEntityData() *types.CommonEntityData {
    keychain.EntityData.YFilter = keychain.YFilter
    keychain.EntityData.YangName = "keychain"
    keychain.EntityData.BundleName = "cisco_ios_xr"
    keychain.EntityData.ParentYangName = "session-group"
    keychain.EntityData.SegmentPath = "keychain"
    keychain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + keychain.EntityData.SegmentPath
    keychain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    keychain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    keychain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    keychain.EntityData.Children = types.NewOrderedMap()
    keychain.EntityData.Leafs = types.NewOrderedMap()
    keychain.EntityData.Leafs.Append("keychain-disable", types.YLeaf{"KeychainDisable", keychain.KeychainDisable})
    keychain.EntityData.Leafs.Append("keychain-name", types.YLeaf{"KeychainName", keychain.KeychainName})

    keychain.EntityData.YListKeys = []string {}

    return &(keychain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetEntityData() *types.CommonEntityData {
    gracefulMaintenance.EntityData.YFilter = gracefulMaintenance.YFilter
    gracefulMaintenance.EntityData.YangName = "graceful-maintenance"
    gracefulMaintenance.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenance.EntityData.ParentYangName = "session-group"
    gracefulMaintenance.EntityData.SegmentPath = "graceful-maintenance"
    gracefulMaintenance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/" + gracefulMaintenance.EntityData.SegmentPath
    gracefulMaintenance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenance.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-local-preference", types.YChild{"GracefulMaintenanceLocalPreference", &gracefulMaintenance.GracefulMaintenanceLocalPreference})
    gracefulMaintenance.EntityData.Children.Append("graceful-maintenance-as-prepends", types.YChild{"GracefulMaintenanceAsPrepends", &gracefulMaintenance.GracefulMaintenanceAsPrepends})
    gracefulMaintenance.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenance.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", gracefulMaintenance.Enable})
    gracefulMaintenance.EntityData.Leafs.Append("graceful-maintenance-activate", types.YLeaf{"GracefulMaintenanceActivate", gracefulMaintenance.GracefulMaintenanceActivate})

    gracefulMaintenance.EntityData.YListKeys = []string {}

    return &(gracefulMaintenance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceLocalPreference.EntityData.YFilter = gracefulMaintenanceLocalPreference.YFilter
    gracefulMaintenanceLocalPreference.EntityData.YangName = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceLocalPreference.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceLocalPreference.EntityData.SegmentPath = "graceful-maintenance-local-preference"
    gracefulMaintenanceLocalPreference.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/graceful-maintenance/" + gracefulMaintenanceLocalPreference.EntityData.SegmentPath
    gracefulMaintenanceLocalPreference.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceLocalPreference.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceLocalPreference.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceLocalPreference.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("gshut-loc-pref-disable", types.YLeaf{"GshutLocPrefDisable", gracefulMaintenanceLocalPreference.GshutLocPrefDisable})
    gracefulMaintenanceLocalPreference.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", gracefulMaintenanceLocalPreference.LocalPreference})

    gracefulMaintenanceLocalPreference.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceLocalPreference.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetEntityData() *types.CommonEntityData {
    gracefulMaintenanceAsPrepends.EntityData.YFilter = gracefulMaintenanceAsPrepends.YFilter
    gracefulMaintenanceAsPrepends.EntityData.YangName = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.BundleName = "cisco_ios_xr"
    gracefulMaintenanceAsPrepends.EntityData.ParentYangName = "graceful-maintenance"
    gracefulMaintenanceAsPrepends.EntityData.SegmentPath = "graceful-maintenance-as-prepends"
    gracefulMaintenanceAsPrepends.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/bgp-entity/session-groups/session-group/graceful-maintenance/" + gracefulMaintenanceAsPrepends.EntityData.SegmentPath
    gracefulMaintenanceAsPrepends.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    gracefulMaintenanceAsPrepends.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    gracefulMaintenanceAsPrepends.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    gracefulMaintenanceAsPrepends.EntityData.Children = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs = types.NewOrderedMap()
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("gshut-prepends-disable", types.YLeaf{"GshutPrependsDisable", gracefulMaintenanceAsPrepends.GshutPrependsDisable})
    gracefulMaintenanceAsPrepends.EntityData.Leafs.Append("as-prepends", types.YLeaf{"AsPrepends", gracefulMaintenanceAsPrepends.AsPrepends})

    gracefulMaintenanceAsPrepends.EntityData.YListKeys = []string {}

    return &(gracefulMaintenanceAsPrepends.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global
// Global default config
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable graceful restart support. The type is interface{}.
    GracefulRestart interface{}

    // Enables logging of update generation events. The type is interface{}.
    UpdateOutLogging interface{}

    // Install diversion path to RIB/CEF. The type is interface{}.
    InstallDiversion interface{}

    // Set the delay for triggering nexthop recalculations. The type is
    // interface{} with range: 0..300. Units are second. The default value is 5.
    NextHopTriggerDelay interface{}

    // TRUE to Enable non-stop routing supportFALSE to Disable non-stop routing
    // support. The type is bool.
    Nsr interface{}

    // Include extra detail in neighbor change messages. The type is interface{}.
    NeighborLoggingDetail interface{}

    // Connect to PIM/PIM6. The type is interface{}.
    Mvpn interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Configure background scanner interval for generic scanner. The type is
    // interface{} with range: 5..3600. Units are second. The default value is 60.
    GlobalScanTime interface{}

    // Prefix validation time (in seconds). Range : 5 - 60. Specify 0 to disable
    // the timer. The type is interface{} with range: 0..60. Units are second.
    RpkiOriginAsValidationTime interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Time before stale routes are purged. The type is interface{} with range:
    // 1..6000. Units are second. The default value is 600.
    GracefulRestartPurgeTime interface{}

    // Allow all attributes to be modified by outbound policy for iBGP peers. The
    // type is interface{}.
    EnforceIbgpOutPolicy interface{}

    // Upper bound on update generation transient memory usage for the process.
    // The type is interface{} with range: 16..2048. Units are megabyte. The
    // default value is 512.
    UpdateLimitProcess interface{}

    // Restart time advertised to neighbors. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    GracefulRestartTime interface{}

    // Inbound update basic error-handling for IBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingBasicIbgpDisable interface{}

    // Allow duplicate table config and disable update generation. The type is
    // interface{}.
    ReadOnly interface{}

    // Maximum time to wait for restart of GR capable peers. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    GracefulRestartStalepathTime interface{}

    // Inbound update extended error-handling for EBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingExtendedEbgp interface{}

    // Inbound update basic error-handling for EBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingBasicEbgpDisable interface{}

    // Reset gracefully if configuration change forces a peer reset. The type is
    // interface{}.
    GracefulReset interface{}

    // Enable AS-path loop checking for iBGP peers. The type is interface{}.
    IgpLoopCheck interface{}

    // Inbound update extended error-handling for IBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingExtendedIbgp interface{}

    // Configure Router-id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    RouterId interface{}

    // Disable enforce the first AS for EBGP routes. The type is interface{}.
    DisableEnforceFirstAs interface{}

    // Change default route selection criteria to ignore cost community
    // comparison. The type is interface{}.
    BestPathCostCommunity interface{}

    // Change default route selection criteria to ignore AIGP unless both paths
    // whichare compared have AIGP attribute. The type is interface{}.
    BestPathAigpIgnore interface{}

    // Change default route selection criteria to ignore AS path length. The type
    // is interface{}.
    BestPathAsPathLength interface{}

    // Allow redistribution of iBGP into IGPs (dangerous). The type is
    // interface{}.
    IgpRedistInternal interface{}

    // Change default multi-route selection criteria to ignore everything onwards
    // as-path check. The type is interface{}.
    MultiPathAsPathIgnoreOnwards interface{}

    // Disable immediate reset session if a link to a directly connected external
    // peer goes down. The type is interface{}.
    DisableFastExternalFallover interface{}

    // If eBGP neighbor is configured without a route-policy,the routes from that
    // neighbor are not accepted by default.This knob overrides the default
    // behavior. When configured,routes from the eBGP neighbors with no policy are
    // accepted. The type is interface{}.
    UnsafeEbgpPolicy interface{}

    // Default redistributed metric. The type is interface{} with range:
    // 1..4294967295.
    DefaultMetric interface{}

    // Control distribution of default information. The type is interface{}.
    DefaultInfoOriginate interface{}

    // RPKI origin-AS validity signal ibgp. The type is interface{}.
    RpkiOriginAsValiditySignalIbgp interface{}

    // RPKI bestpath use origin-AS validity. The type is interface{}.
    RpkiBestpathUseOriginAsValidity interface{}

    // Change default route selection criteria and allow the comparing of MED
    // among confederation paths. The type is interface{}.
    BestPathConfederationPaths interface{}

    // Change default multi-route selection criteria to relax as-path checking -
    // only require same aspath length. The type is interface{}.
    BestPathAsMultipathRelax interface{}

    // Disable automatic soft peer reset on policy reconfiguration. The type is
    // interface{}.
    DisableAutoSoftReset interface{}

    // Disable inbound and outbound messagelogging for all neighbors under the
    // vrf. The type is interface{}.
    DisableMsgLog interface{}

    // Change default route selection criteria to ignore IGP Metric . The type is
    // interface{}.
    BestPathIgpMetricIgnore interface{}

    // Enable path resolution for nexthops using default route. The type is
    // interface{}.
    NextHopResAllowDefault interface{}

    // Enable mpls forwarding path for ibgp learnt nexthops. The type is
    // interface{}.
    NextHopMplsFwdIbgp interface{}

    // Disable neighbor change logging. The type is interface{}.
    DisableNeighborLogging interface{}

    // Change default route selection criteria and allow comparing of MED from
    // different neighbors. The type is interface{}.
    BestPathMedAlways interface{}

    // Change default route selection criteria and compare router-id for identical
    // EBGP paths. The type is interface{}.
    BestPathRouterId interface{}

    // Treat missing MED as the least preferred one. The type is interface{}.
    BestPathMedMissing interface{}

    // Configure default local preference. The type is interface{} with range:
    // 0..4294967295. The default value is 100.
    LocalPreference interface{}

    // Configure Route-Reflector Cluster-id.
    ClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId

    // Set write-queue limit for each update group.
    WriteLimit Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit

    // Set the max initial delay for sending updates.
    UpdateDelay Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay

    // AS League.
    AsLeague Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague

    // RPKI server configuration.
    RpkiServers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers

    // AS-list group lists.
    AsListGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups

    // Maximum number that can be configured.
    Limits Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits

    // Set routing domain confederation AS.
    ConfederationDomain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain

    // Define peer ASes in BGP confederation.
    ConfederationPeerAses Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses

    // Attribute-filter groups list.
    AttributeFilterGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups

    // Activate Graceful Maintenance Mode for all neighbors with graceful
    // maintenance config.
    GlobalGracefulMaintenanceActivate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate

    // Global AF-specific configuration.
    GlobalAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs

    // RPKI static route configuration.
    RpkiStaticRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes

    // Configure list of MPLS activated interfaces.
    MplsActivatedInterfaces Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces

    // Adjust routing timers.
    GlobalTimers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers

    // BFD configuration.
    Bfd Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd

    // set socket parameters.
    SendSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes

    // Set socket and BGP receive buffer sizes.
    ReceiveSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetEntityData() *types.CommonEntityData {
    global.EntityData.YFilter = global.YFilter
    global.EntityData.YangName = "global"
    global.EntityData.BundleName = "cisco_ios_xr"
    global.EntityData.ParentYangName = "default-vrf"
    global.EntityData.SegmentPath = "global"
    global.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/" + global.EntityData.SegmentPath
    global.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    global.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    global.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    global.EntityData.Children = types.NewOrderedMap()
    global.EntityData.Children.Append("cluster-id", types.YChild{"ClusterId", &global.ClusterId})
    global.EntityData.Children.Append("write-limit", types.YChild{"WriteLimit", &global.WriteLimit})
    global.EntityData.Children.Append("update-delay", types.YChild{"UpdateDelay", &global.UpdateDelay})
    global.EntityData.Children.Append("as-league", types.YChild{"AsLeague", &global.AsLeague})
    global.EntityData.Children.Append("rpki-servers", types.YChild{"RpkiServers", &global.RpkiServers})
    global.EntityData.Children.Append("as-list-groups", types.YChild{"AsListGroups", &global.AsListGroups})
    global.EntityData.Children.Append("limits", types.YChild{"Limits", &global.Limits})
    global.EntityData.Children.Append("confederation-domain", types.YChild{"ConfederationDomain", &global.ConfederationDomain})
    global.EntityData.Children.Append("confederation-peer-ases", types.YChild{"ConfederationPeerAses", &global.ConfederationPeerAses})
    global.EntityData.Children.Append("attribute-filter-groups", types.YChild{"AttributeFilterGroups", &global.AttributeFilterGroups})
    global.EntityData.Children.Append("global-graceful-maintenance-activate", types.YChild{"GlobalGracefulMaintenanceActivate", &global.GlobalGracefulMaintenanceActivate})
    global.EntityData.Children.Append("global-afs", types.YChild{"GlobalAfs", &global.GlobalAfs})
    global.EntityData.Children.Append("rpki-static-routes", types.YChild{"RpkiStaticRoutes", &global.RpkiStaticRoutes})
    global.EntityData.Children.Append("mpls-activated-interfaces", types.YChild{"MplsActivatedInterfaces", &global.MplsActivatedInterfaces})
    global.EntityData.Children.Append("global-timers", types.YChild{"GlobalTimers", &global.GlobalTimers})
    global.EntityData.Children.Append("bfd", types.YChild{"Bfd", &global.Bfd})
    global.EntityData.Children.Append("send-socket-buffer-sizes", types.YChild{"SendSocketBufferSizes", &global.SendSocketBufferSizes})
    global.EntityData.Children.Append("receive-socket-buffer-sizes", types.YChild{"ReceiveSocketBufferSizes", &global.ReceiveSocketBufferSizes})
    global.EntityData.Leafs = types.NewOrderedMap()
    global.EntityData.Leafs.Append("graceful-restart", types.YLeaf{"GracefulRestart", global.GracefulRestart})
    global.EntityData.Leafs.Append("update-out-logging", types.YLeaf{"UpdateOutLogging", global.UpdateOutLogging})
    global.EntityData.Leafs.Append("install-diversion", types.YLeaf{"InstallDiversion", global.InstallDiversion})
    global.EntityData.Leafs.Append("next-hop-trigger-delay", types.YLeaf{"NextHopTriggerDelay", global.NextHopTriggerDelay})
    global.EntityData.Leafs.Append("nsr", types.YLeaf{"Nsr", global.Nsr})
    global.EntityData.Leafs.Append("neighbor-logging-detail", types.YLeaf{"NeighborLoggingDetail", global.NeighborLoggingDetail})
    global.EntityData.Leafs.Append("mvpn", types.YLeaf{"Mvpn", global.Mvpn})
    global.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", global.RpkiOriginAsValidationDisable})
    global.EntityData.Leafs.Append("global-scan-time", types.YLeaf{"GlobalScanTime", global.GlobalScanTime})
    global.EntityData.Leafs.Append("rpki-origin-as-validation-time", types.YLeaf{"RpkiOriginAsValidationTime", global.RpkiOriginAsValidationTime})
    global.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", global.RpkiBestpathOriginAsAllowInvalid})
    global.EntityData.Leafs.Append("graceful-restart-purge-time", types.YLeaf{"GracefulRestartPurgeTime", global.GracefulRestartPurgeTime})
    global.EntityData.Leafs.Append("enforce-ibgp-out-policy", types.YLeaf{"EnforceIbgpOutPolicy", global.EnforceIbgpOutPolicy})
    global.EntityData.Leafs.Append("update-limit-process", types.YLeaf{"UpdateLimitProcess", global.UpdateLimitProcess})
    global.EntityData.Leafs.Append("graceful-restart-time", types.YLeaf{"GracefulRestartTime", global.GracefulRestartTime})
    global.EntityData.Leafs.Append("update-error-handling-basic-ibgp-disable", types.YLeaf{"UpdateErrorHandlingBasicIbgpDisable", global.UpdateErrorHandlingBasicIbgpDisable})
    global.EntityData.Leafs.Append("read-only", types.YLeaf{"ReadOnly", global.ReadOnly})
    global.EntityData.Leafs.Append("graceful-restart-stalepath-time", types.YLeaf{"GracefulRestartStalepathTime", global.GracefulRestartStalepathTime})
    global.EntityData.Leafs.Append("update-error-handling-extended-ebgp", types.YLeaf{"UpdateErrorHandlingExtendedEbgp", global.UpdateErrorHandlingExtendedEbgp})
    global.EntityData.Leafs.Append("update-error-handling-basic-ebgp-disable", types.YLeaf{"UpdateErrorHandlingBasicEbgpDisable", global.UpdateErrorHandlingBasicEbgpDisable})
    global.EntityData.Leafs.Append("graceful-reset", types.YLeaf{"GracefulReset", global.GracefulReset})
    global.EntityData.Leafs.Append("igp-loop-check", types.YLeaf{"IgpLoopCheck", global.IgpLoopCheck})
    global.EntityData.Leafs.Append("update-error-handling-extended-ibgp", types.YLeaf{"UpdateErrorHandlingExtendedIbgp", global.UpdateErrorHandlingExtendedIbgp})
    global.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", global.RouterId})
    global.EntityData.Leafs.Append("disable-enforce-first-as", types.YLeaf{"DisableEnforceFirstAs", global.DisableEnforceFirstAs})
    global.EntityData.Leafs.Append("best-path-cost-community", types.YLeaf{"BestPathCostCommunity", global.BestPathCostCommunity})
    global.EntityData.Leafs.Append("best-path-aigp-ignore", types.YLeaf{"BestPathAigpIgnore", global.BestPathAigpIgnore})
    global.EntityData.Leafs.Append("best-path-as-path-length", types.YLeaf{"BestPathAsPathLength", global.BestPathAsPathLength})
    global.EntityData.Leafs.Append("igp-redist-internal", types.YLeaf{"IgpRedistInternal", global.IgpRedistInternal})
    global.EntityData.Leafs.Append("multi-path-as-path-ignore-onwards", types.YLeaf{"MultiPathAsPathIgnoreOnwards", global.MultiPathAsPathIgnoreOnwards})
    global.EntityData.Leafs.Append("disable-fast-external-fallover", types.YLeaf{"DisableFastExternalFallover", global.DisableFastExternalFallover})
    global.EntityData.Leafs.Append("unsafe-ebgp-policy", types.YLeaf{"UnsafeEbgpPolicy", global.UnsafeEbgpPolicy})
    global.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", global.DefaultMetric})
    global.EntityData.Leafs.Append("default-info-originate", types.YLeaf{"DefaultInfoOriginate", global.DefaultInfoOriginate})
    global.EntityData.Leafs.Append("rpki-origin-as-validity-signal-ibgp", types.YLeaf{"RpkiOriginAsValiditySignalIbgp", global.RpkiOriginAsValiditySignalIbgp})
    global.EntityData.Leafs.Append("rpki-bestpath-use-origin-as-validity", types.YLeaf{"RpkiBestpathUseOriginAsValidity", global.RpkiBestpathUseOriginAsValidity})
    global.EntityData.Leafs.Append("best-path-confederation-paths", types.YLeaf{"BestPathConfederationPaths", global.BestPathConfederationPaths})
    global.EntityData.Leafs.Append("best-path-as-multipath-relax", types.YLeaf{"BestPathAsMultipathRelax", global.BestPathAsMultipathRelax})
    global.EntityData.Leafs.Append("disable-auto-soft-reset", types.YLeaf{"DisableAutoSoftReset", global.DisableAutoSoftReset})
    global.EntityData.Leafs.Append("disable-msg-log", types.YLeaf{"DisableMsgLog", global.DisableMsgLog})
    global.EntityData.Leafs.Append("best-path-igp-metric-ignore", types.YLeaf{"BestPathIgpMetricIgnore", global.BestPathIgpMetricIgnore})
    global.EntityData.Leafs.Append("next-hop-res-allow-default", types.YLeaf{"NextHopResAllowDefault", global.NextHopResAllowDefault})
    global.EntityData.Leafs.Append("next-hop-mpls-fwd-ibgp", types.YLeaf{"NextHopMplsFwdIbgp", global.NextHopMplsFwdIbgp})
    global.EntityData.Leafs.Append("disable-neighbor-logging", types.YLeaf{"DisableNeighborLogging", global.DisableNeighborLogging})
    global.EntityData.Leafs.Append("best-path-med-always", types.YLeaf{"BestPathMedAlways", global.BestPathMedAlways})
    global.EntityData.Leafs.Append("best-path-router-id", types.YLeaf{"BestPathRouterId", global.BestPathRouterId})
    global.EntityData.Leafs.Append("best-path-med-missing", types.YLeaf{"BestPathMedMissing", global.BestPathMedMissing})
    global.EntityData.Leafs.Append("local-preference", types.YLeaf{"LocalPreference", global.LocalPreference})

    global.EntityData.YListKeys = []string {}

    return &(global.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId
// Configure Route-Reflector Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetEntityData() *types.CommonEntityData {
    clusterId.EntityData.YFilter = clusterId.YFilter
    clusterId.EntityData.YangName = "cluster-id"
    clusterId.EntityData.BundleName = "cisco_ios_xr"
    clusterId.EntityData.ParentYangName = "global"
    clusterId.EntityData.SegmentPath = "cluster-id"
    clusterId.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + clusterId.EntityData.SegmentPath
    clusterId.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    clusterId.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    clusterId.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    clusterId.EntityData.Children = types.NewOrderedMap()
    clusterId.EntityData.Leafs = types.NewOrderedMap()
    clusterId.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", clusterId.ClusterIdNumber})
    clusterId.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", clusterId.ClusterIdAddress})

    clusterId.EntityData.YListKeys = []string {}

    return &(clusterId.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit
// Set write-queue limit for each update group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Number of messages to be formatted per update group. The type is
    // interface{} with range: 500..100000000. The default value is 50000.
    FormattedMessages interface{}

    // Number of messages that can be enqueued in total. The type is interface{}
    // with range: 500..100000000. The default value is 250000.
    EnqueuedMessages interface{}

    // TRUE to enable desynchronization, FALSE otherwise. The type is bool. The
    // default value is false.
    Desynchronize interface{}
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetEntityData() *types.CommonEntityData {
    writeLimit.EntityData.YFilter = writeLimit.YFilter
    writeLimit.EntityData.YangName = "write-limit"
    writeLimit.EntityData.BundleName = "cisco_ios_xr"
    writeLimit.EntityData.ParentYangName = "global"
    writeLimit.EntityData.SegmentPath = "write-limit"
    writeLimit.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + writeLimit.EntityData.SegmentPath
    writeLimit.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    writeLimit.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    writeLimit.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    writeLimit.EntityData.Children = types.NewOrderedMap()
    writeLimit.EntityData.Leafs = types.NewOrderedMap()
    writeLimit.EntityData.Leafs.Append("formatted-messages", types.YLeaf{"FormattedMessages", writeLimit.FormattedMessages})
    writeLimit.EntityData.Leafs.Append("enqueued-messages", types.YLeaf{"EnqueuedMessages", writeLimit.EnqueuedMessages})
    writeLimit.EntityData.Leafs.Append("desynchronize", types.YLeaf{"Desynchronize", writeLimit.Desynchronize})

    writeLimit.EntityData.YListKeys = []string {}

    return &(writeLimit.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay
// Set the max initial delay for sending
// updates
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Delay value (seconds). The type is interface{} with range: 0..3600. Units
    // are second. The default value is 120.
    Delay interface{}

    // Set to TRUE to disable keepalive trigger bestpath and delay is enforced.
    // The type is bool. The default value is false.
    Always interface{}
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetEntityData() *types.CommonEntityData {
    updateDelay.EntityData.YFilter = updateDelay.YFilter
    updateDelay.EntityData.YangName = "update-delay"
    updateDelay.EntityData.BundleName = "cisco_ios_xr"
    updateDelay.EntityData.ParentYangName = "global"
    updateDelay.EntityData.SegmentPath = "update-delay"
    updateDelay.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + updateDelay.EntityData.SegmentPath
    updateDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    updateDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    updateDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    updateDelay.EntityData.Children = types.NewOrderedMap()
    updateDelay.EntityData.Leafs = types.NewOrderedMap()
    updateDelay.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", updateDelay.Delay})
    updateDelay.EntityData.Leafs.Append("always", types.YLeaf{"Always", updateDelay.Always})

    updateDelay.EntityData.YListKeys = []string {}

    return &(updateDelay.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague
// AS League
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AS League creation. The type is interface{}.
    Enable interface{}

    // AS League Peers.
    Peers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetEntityData() *types.CommonEntityData {
    asLeague.EntityData.YFilter = asLeague.YFilter
    asLeague.EntityData.YangName = "as-league"
    asLeague.EntityData.BundleName = "cisco_ios_xr"
    asLeague.EntityData.ParentYangName = "global"
    asLeague.EntityData.SegmentPath = "as-league"
    asLeague.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + asLeague.EntityData.SegmentPath
    asLeague.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asLeague.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asLeague.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asLeague.EntityData.Children = types.NewOrderedMap()
    asLeague.EntityData.Children.Append("peers", types.YChild{"Peers", &asLeague.Peers})
    asLeague.EntityData.Leafs = types.NewOrderedMap()
    asLeague.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", asLeague.Enable})

    asLeague.EntityData.YListKeys = []string {}

    return &(asLeague.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers
// AS League Peers
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AS League Peer AS. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer.
    Peer []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetEntityData() *types.CommonEntityData {
    peers.EntityData.YFilter = peers.YFilter
    peers.EntityData.YangName = "peers"
    peers.EntityData.BundleName = "cisco_ios_xr"
    peers.EntityData.ParentYangName = "as-league"
    peers.EntityData.SegmentPath = "peers"
    peers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/as-league/" + peers.EntityData.SegmentPath
    peers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peers.EntityData.Children = types.NewOrderedMap()
    peers.EntityData.Children.Append("peer", types.YChild{"Peer", nil})
    for i := range peers.Peer {
        peers.EntityData.Children.Append(types.GetSegmentPath(peers.Peer[i]), types.YChild{"Peer", peers.Peer[i]})
    }
    peers.EntityData.Leafs = types.NewOrderedMap()

    peers.EntityData.YListKeys = []string {}

    return &(peers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer
// AS League Peer AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. xx of peer AS xx.yy. The type is interface{} with
    // range: 0..4294967295.
    AsXx interface{}

    // This attribute is a key. yy of peer AS xx.yy. The type is interface{} with
    // range: 0..4294967295.
    AsYy interface{}
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetEntityData() *types.CommonEntityData {
    peer.EntityData.YFilter = peer.YFilter
    peer.EntityData.YangName = "peer"
    peer.EntityData.BundleName = "cisco_ios_xr"
    peer.EntityData.ParentYangName = "peers"
    peer.EntityData.SegmentPath = "peer" + types.AddKeyToken(peer.AsXx, "as-xx") + types.AddKeyToken(peer.AsYy, "as-yy")
    peer.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/as-league/peers/" + peer.EntityData.SegmentPath
    peer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    peer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    peer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    peer.EntityData.Children = types.NewOrderedMap()
    peer.EntityData.Leafs = types.NewOrderedMap()
    peer.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", peer.AsXx})
    peer.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", peer.AsYy})

    peer.EntityData.YListKeys = []string {"AsXx", "AsYy"}

    return &(peer.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers
// RPKI server configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPKI server configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer.
    RpkiServer []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetEntityData() *types.CommonEntityData {
    rpkiServers.EntityData.YFilter = rpkiServers.YFilter
    rpkiServers.EntityData.YangName = "rpki-servers"
    rpkiServers.EntityData.BundleName = "cisco_ios_xr"
    rpkiServers.EntityData.ParentYangName = "global"
    rpkiServers.EntityData.SegmentPath = "rpki-servers"
    rpkiServers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + rpkiServers.EntityData.SegmentPath
    rpkiServers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpkiServers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpkiServers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpkiServers.EntityData.Children = types.NewOrderedMap()
    rpkiServers.EntityData.Children.Append("rpki-server", types.YChild{"RpkiServer", nil})
    for i := range rpkiServers.RpkiServer {
        rpkiServers.EntityData.Children.Append(types.GetSegmentPath(rpkiServers.RpkiServer[i]), types.YChild{"RpkiServer", rpkiServers.RpkiServer[i]})
    }
    rpkiServers.EntityData.Leafs = types.NewOrderedMap()

    rpkiServers.EntityData.YListKeys = []string {}

    return &(rpkiServers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer
// RPKI server configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Server address (opaque string). The type is string
    // with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    Server interface{}

    // RPKI server configuration. The type is interface{}.
    Enable interface{}

    // RPKI server shutdown. The type is interface{}.
    Shutdown interface{}

    // RPKI server password. The type is string.
    Password interface{}

    // RPKI server response-time (15-3600 seconds). The type is interface{} with
    // range: 15..3600. Units are second.
    ResponseTime interface{}

    // RPKI server username. The type is string.
    Username interface{}

    // RPKI server refresh-time (15-3600 seconds). The type is interface{} with
    // range: 15..3600. Units are second.
    RefreshTime interface{}

    // RPKI server purge-time (30-360 seconds). The type is interface{} with
    // range: 30..360. Units are second.
    PurgeTime interface{}

    // RPKI server transport.
    Transport Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetEntityData() *types.CommonEntityData {
    rpkiServer.EntityData.YFilter = rpkiServer.YFilter
    rpkiServer.EntityData.YangName = "rpki-server"
    rpkiServer.EntityData.BundleName = "cisco_ios_xr"
    rpkiServer.EntityData.ParentYangName = "rpki-servers"
    rpkiServer.EntityData.SegmentPath = "rpki-server" + types.AddKeyToken(rpkiServer.Server, "server")
    rpkiServer.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/rpki-servers/" + rpkiServer.EntityData.SegmentPath
    rpkiServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpkiServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpkiServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpkiServer.EntityData.Children = types.NewOrderedMap()
    rpkiServer.EntityData.Children.Append("transport", types.YChild{"Transport", &rpkiServer.Transport})
    rpkiServer.EntityData.Leafs = types.NewOrderedMap()
    rpkiServer.EntityData.Leafs.Append("server", types.YLeaf{"Server", rpkiServer.Server})
    rpkiServer.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", rpkiServer.Enable})
    rpkiServer.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", rpkiServer.Shutdown})
    rpkiServer.EntityData.Leafs.Append("password", types.YLeaf{"Password", rpkiServer.Password})
    rpkiServer.EntityData.Leafs.Append("response-time", types.YLeaf{"ResponseTime", rpkiServer.ResponseTime})
    rpkiServer.EntityData.Leafs.Append("username", types.YLeaf{"Username", rpkiServer.Username})
    rpkiServer.EntityData.Leafs.Append("refresh-time", types.YLeaf{"RefreshTime", rpkiServer.RefreshTime})
    rpkiServer.EntityData.Leafs.Append("purge-time", types.YLeaf{"PurgeTime", rpkiServer.PurgeTime})

    rpkiServer.EntityData.YListKeys = []string {"Server"}

    return &(rpkiServer.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport
// RPKI server transport
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPKI server transport. The type is BgpRpkiTransport. The default value is
    // ssh.
    Transport interface{}

    // port. The type is interface{} with range: 1..65535. The default value is
    // 22.
    Port interface{}
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetEntityData() *types.CommonEntityData {
    transport.EntityData.YFilter = transport.YFilter
    transport.EntityData.YangName = "transport"
    transport.EntityData.BundleName = "cisco_ios_xr"
    transport.EntityData.ParentYangName = "rpki-server"
    transport.EntityData.SegmentPath = "transport"
    transport.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/rpki-servers/rpki-server/" + transport.EntityData.SegmentPath
    transport.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    transport.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    transport.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    transport.EntityData.Children = types.NewOrderedMap()
    transport.EntityData.Leafs = types.NewOrderedMap()
    transport.EntityData.Leafs.Append("transport", types.YLeaf{"Transport", transport.Transport})
    transport.EntityData.Leafs.Append("port", types.YLeaf{"Port", transport.Port})

    transport.EntityData.YListKeys = []string {}

    return &(transport.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups
// AS-list group lists
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AS-List group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup.
    AsListGroup []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetEntityData() *types.CommonEntityData {
    asListGroups.EntityData.YFilter = asListGroups.YFilter
    asListGroups.EntityData.YangName = "as-list-groups"
    asListGroups.EntityData.BundleName = "cisco_ios_xr"
    asListGroups.EntityData.ParentYangName = "global"
    asListGroups.EntityData.SegmentPath = "as-list-groups"
    asListGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + asListGroups.EntityData.SegmentPath
    asListGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asListGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asListGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asListGroups.EntityData.Children = types.NewOrderedMap()
    asListGroups.EntityData.Children.Append("as-list-group", types.YChild{"AsListGroup", nil})
    for i := range asListGroups.AsListGroup {
        asListGroups.EntityData.Children.Append(types.GetSegmentPath(asListGroups.AsListGroup[i]), types.YChild{"AsListGroup", asListGroups.AsListGroup[i]})
    }
    asListGroups.EntityData.Leafs = types.NewOrderedMap()

    asListGroups.EntityData.YListKeys = []string {}

    return &(asListGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup
// AS-List group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Group name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    AsListGroupName interface{}

    // AS-List group creation. The type is interface{}.
    Enable interface{}

    // AS list.
    Ases Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetEntityData() *types.CommonEntityData {
    asListGroup.EntityData.YFilter = asListGroup.YFilter
    asListGroup.EntityData.YangName = "as-list-group"
    asListGroup.EntityData.BundleName = "cisco_ios_xr"
    asListGroup.EntityData.ParentYangName = "as-list-groups"
    asListGroup.EntityData.SegmentPath = "as-list-group" + types.AddKeyToken(asListGroup.AsListGroupName, "as-list-group-name")
    asListGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/as-list-groups/" + asListGroup.EntityData.SegmentPath
    asListGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    asListGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    asListGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    asListGroup.EntityData.Children = types.NewOrderedMap()
    asListGroup.EntityData.Children.Append("ases", types.YChild{"Ases", &asListGroup.Ases})
    asListGroup.EntityData.Leafs = types.NewOrderedMap()
    asListGroup.EntityData.Leafs.Append("as-list-group-name", types.YLeaf{"AsListGroupName", asListGroup.AsListGroupName})
    asListGroup.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", asListGroup.Enable})

    asListGroup.EntityData.YListKeys = []string {"AsListGroupName"}

    return &(asListGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases
// AS list
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // AS-List group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As.
    As []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetEntityData() *types.CommonEntityData {
    ases.EntityData.YFilter = ases.YFilter
    ases.EntityData.YangName = "ases"
    ases.EntityData.BundleName = "cisco_ios_xr"
    ases.EntityData.ParentYangName = "as-list-group"
    ases.EntityData.SegmentPath = "ases"
    ases.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/as-list-groups/as-list-group/" + ases.EntityData.SegmentPath
    ases.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ases.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ases.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ases.EntityData.Children = types.NewOrderedMap()
    ases.EntityData.Children.Append("as", types.YChild{"As", nil})
    for i := range ases.As {
        ases.EntityData.Children.Append(types.GetSegmentPath(ases.As[i]), types.YChild{"As", ases.As[i]})
    }
    ases.EntityData.Leafs = types.NewOrderedMap()

    ases.EntityData.YListKeys = []string {}

    return &(ases.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As
// AS-List group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. xx of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsXx interface{}

    // This attribute is a key. yy of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetEntityData() *types.CommonEntityData {
    as.EntityData.YFilter = as.YFilter
    as.EntityData.YangName = "as"
    as.EntityData.BundleName = "cisco_ios_xr"
    as.EntityData.ParentYangName = "ases"
    as.EntityData.SegmentPath = "as" + types.AddKeyToken(as.AsXx, "as-xx") + types.AddKeyToken(as.AsYy, "as-yy")
    as.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/as-list-groups/as-list-group/ases/" + as.EntityData.SegmentPath
    as.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    as.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    as.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    as.EntityData.Children = types.NewOrderedMap()
    as.EntityData.Leafs = types.NewOrderedMap()
    as.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", as.AsXx})
    as.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", as.AsYy})

    as.EntityData.YListKeys = []string {"AsXx", "AsYy"}

    return &(as.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits
// Maximum number that can be configured
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Maximum number of neighbors that can be configured. The type is interface{}
    // with range: 1..15000. The default value is 10000.
    MaximumNeighbors interface{}
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetEntityData() *types.CommonEntityData {
    limits.EntityData.YFilter = limits.YFilter
    limits.EntityData.YangName = "limits"
    limits.EntityData.BundleName = "cisco_ios_xr"
    limits.EntityData.ParentYangName = "global"
    limits.EntityData.SegmentPath = "limits"
    limits.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + limits.EntityData.SegmentPath
    limits.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    limits.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    limits.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    limits.EntityData.Children = types.NewOrderedMap()
    limits.EntityData.Leafs = types.NewOrderedMap()
    limits.EntityData.Leafs.Append("maximum-neighbors", types.YLeaf{"MaximumNeighbors", limits.MaximumNeighbors})

    limits.EntityData.YListKeys = []string {}

    return &(limits.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain
// Set routing domain confederation AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetEntityData() *types.CommonEntityData {
    confederationDomain.EntityData.YFilter = confederationDomain.YFilter
    confederationDomain.EntityData.YangName = "confederation-domain"
    confederationDomain.EntityData.BundleName = "cisco_ios_xr"
    confederationDomain.EntityData.ParentYangName = "global"
    confederationDomain.EntityData.SegmentPath = "confederation-domain"
    confederationDomain.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + confederationDomain.EntityData.SegmentPath
    confederationDomain.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    confederationDomain.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    confederationDomain.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    confederationDomain.EntityData.Children = types.NewOrderedMap()
    confederationDomain.EntityData.Leafs = types.NewOrderedMap()
    confederationDomain.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", confederationDomain.AsXx})
    confederationDomain.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", confederationDomain.AsYy})

    confederationDomain.EntityData.YListKeys = []string {}

    return &(confederationDomain.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses
// Define peer ASes in BGP confederation
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Confederation peer AS. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs.
    ConfederationPeerAs []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetEntityData() *types.CommonEntityData {
    confederationPeerAses.EntityData.YFilter = confederationPeerAses.YFilter
    confederationPeerAses.EntityData.YangName = "confederation-peer-ases"
    confederationPeerAses.EntityData.BundleName = "cisco_ios_xr"
    confederationPeerAses.EntityData.ParentYangName = "global"
    confederationPeerAses.EntityData.SegmentPath = "confederation-peer-ases"
    confederationPeerAses.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + confederationPeerAses.EntityData.SegmentPath
    confederationPeerAses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    confederationPeerAses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    confederationPeerAses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    confederationPeerAses.EntityData.Children = types.NewOrderedMap()
    confederationPeerAses.EntityData.Children.Append("confederation-peer-as", types.YChild{"ConfederationPeerAs", nil})
    for i := range confederationPeerAses.ConfederationPeerAs {
        confederationPeerAses.EntityData.Children.Append(types.GetSegmentPath(confederationPeerAses.ConfederationPeerAs[i]), types.YChild{"ConfederationPeerAs", confederationPeerAses.ConfederationPeerAs[i]})
    }
    confederationPeerAses.EntityData.Leafs = types.NewOrderedMap()

    confederationPeerAses.EntityData.YListKeys = []string {}

    return &(confederationPeerAses.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs
// Confederation peer AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. xx of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsXx interface{}

    // This attribute is a key. yy of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetEntityData() *types.CommonEntityData {
    confederationPeerAs.EntityData.YFilter = confederationPeerAs.YFilter
    confederationPeerAs.EntityData.YangName = "confederation-peer-as"
    confederationPeerAs.EntityData.BundleName = "cisco_ios_xr"
    confederationPeerAs.EntityData.ParentYangName = "confederation-peer-ases"
    confederationPeerAs.EntityData.SegmentPath = "confederation-peer-as" + types.AddKeyToken(confederationPeerAs.AsXx, "as-xx") + types.AddKeyToken(confederationPeerAs.AsYy, "as-yy")
    confederationPeerAs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/confederation-peer-ases/" + confederationPeerAs.EntityData.SegmentPath
    confederationPeerAs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    confederationPeerAs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    confederationPeerAs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    confederationPeerAs.EntityData.Children = types.NewOrderedMap()
    confederationPeerAs.EntityData.Leafs = types.NewOrderedMap()
    confederationPeerAs.EntityData.Leafs.Append("as-xx", types.YLeaf{"AsXx", confederationPeerAs.AsXx})
    confederationPeerAs.EntityData.Leafs.Append("as-yy", types.YLeaf{"AsYy", confederationPeerAs.AsYy})

    confederationPeerAs.EntityData.YListKeys = []string {"AsXx", "AsYy"}

    return &(confederationPeerAs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups
// Attribute-filter groups list
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Attribute-filter group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup.
    AttributeFilterGroup []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetEntityData() *types.CommonEntityData {
    attributeFilterGroups.EntityData.YFilter = attributeFilterGroups.YFilter
    attributeFilterGroups.EntityData.YangName = "attribute-filter-groups"
    attributeFilterGroups.EntityData.BundleName = "cisco_ios_xr"
    attributeFilterGroups.EntityData.ParentYangName = "global"
    attributeFilterGroups.EntityData.SegmentPath = "attribute-filter-groups"
    attributeFilterGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + attributeFilterGroups.EntityData.SegmentPath
    attributeFilterGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributeFilterGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributeFilterGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributeFilterGroups.EntityData.Children = types.NewOrderedMap()
    attributeFilterGroups.EntityData.Children.Append("attribute-filter-group", types.YChild{"AttributeFilterGroup", nil})
    for i := range attributeFilterGroups.AttributeFilterGroup {
        attributeFilterGroups.EntityData.Children.Append(types.GetSegmentPath(attributeFilterGroups.AttributeFilterGroup[i]), types.YChild{"AttributeFilterGroup", attributeFilterGroups.AttributeFilterGroup[i]})
    }
    attributeFilterGroups.EntityData.Leafs = types.NewOrderedMap()

    attributeFilterGroups.EntityData.YListKeys = []string {}

    return &(attributeFilterGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup
// Attribute-filter group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Group name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    AttributeFilterGroupName interface{}

    // Attribute-filter group creation. The type is interface{}.
    Enable interface{}

    // Attribute-filter group attributes list.
    AttributeFilters Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetEntityData() *types.CommonEntityData {
    attributeFilterGroup.EntityData.YFilter = attributeFilterGroup.YFilter
    attributeFilterGroup.EntityData.YangName = "attribute-filter-group"
    attributeFilterGroup.EntityData.BundleName = "cisco_ios_xr"
    attributeFilterGroup.EntityData.ParentYangName = "attribute-filter-groups"
    attributeFilterGroup.EntityData.SegmentPath = "attribute-filter-group" + types.AddKeyToken(attributeFilterGroup.AttributeFilterGroupName, "attribute-filter-group-name")
    attributeFilterGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/attribute-filter-groups/" + attributeFilterGroup.EntityData.SegmentPath
    attributeFilterGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributeFilterGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributeFilterGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributeFilterGroup.EntityData.Children = types.NewOrderedMap()
    attributeFilterGroup.EntityData.Children.Append("attribute-filters", types.YChild{"AttributeFilters", &attributeFilterGroup.AttributeFilters})
    attributeFilterGroup.EntityData.Leafs = types.NewOrderedMap()
    attributeFilterGroup.EntityData.Leafs.Append("attribute-filter-group-name", types.YLeaf{"AttributeFilterGroupName", attributeFilterGroup.AttributeFilterGroupName})
    attributeFilterGroup.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", attributeFilterGroup.Enable})

    attributeFilterGroup.EntityData.YListKeys = []string {"AttributeFilterGroupName"}

    return &(attributeFilterGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters
// Attribute-filter group attributes list
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Attribute-filter group attribute. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter.
    AttributeFilter []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetEntityData() *types.CommonEntityData {
    attributeFilters.EntityData.YFilter = attributeFilters.YFilter
    attributeFilters.EntityData.YangName = "attribute-filters"
    attributeFilters.EntityData.BundleName = "cisco_ios_xr"
    attributeFilters.EntityData.ParentYangName = "attribute-filter-group"
    attributeFilters.EntityData.SegmentPath = "attribute-filters"
    attributeFilters.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/attribute-filter-groups/attribute-filter-group/" + attributeFilters.EntityData.SegmentPath
    attributeFilters.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributeFilters.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributeFilters.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributeFilters.EntityData.Children = types.NewOrderedMap()
    attributeFilters.EntityData.Children.Append("attribute-filter", types.YChild{"AttributeFilter", nil})
    for i := range attributeFilters.AttributeFilter {
        attributeFilters.EntityData.Children.Append(types.GetSegmentPath(attributeFilters.AttributeFilter[i]), types.YChild{"AttributeFilter", attributeFilters.AttributeFilter[i]})
    }
    attributeFilters.EntityData.Leafs = types.NewOrderedMap()

    attributeFilters.EntityData.YListKeys = []string {}

    return &(attributeFilters.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter
// Attribute-filter group attribute
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Start of attribute range. The type is interface{}
    // with range: 0..256.
    AttributeStart interface{}

    // This attribute is a key. End of attribute range. The type is interface{}
    // with range: 0..256.
    AttributeEnd interface{}

    // Filtering action. The type is BgpUpdateFilterAction. This attribute is
    // mandatory.
    FilterAction interface{}
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetEntityData() *types.CommonEntityData {
    attributeFilter.EntityData.YFilter = attributeFilter.YFilter
    attributeFilter.EntityData.YangName = "attribute-filter"
    attributeFilter.EntityData.BundleName = "cisco_ios_xr"
    attributeFilter.EntityData.ParentYangName = "attribute-filters"
    attributeFilter.EntityData.SegmentPath = "attribute-filter" + types.AddKeyToken(attributeFilter.AttributeStart, "attribute-start") + types.AddKeyToken(attributeFilter.AttributeEnd, "attribute-end")
    attributeFilter.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/attribute-filter-groups/attribute-filter-group/attribute-filters/" + attributeFilter.EntityData.SegmentPath
    attributeFilter.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    attributeFilter.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    attributeFilter.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    attributeFilter.EntityData.Children = types.NewOrderedMap()
    attributeFilter.EntityData.Leafs = types.NewOrderedMap()
    attributeFilter.EntityData.Leafs.Append("attribute-start", types.YLeaf{"AttributeStart", attributeFilter.AttributeStart})
    attributeFilter.EntityData.Leafs.Append("attribute-end", types.YLeaf{"AttributeEnd", attributeFilter.AttributeEnd})
    attributeFilter.EntityData.Leafs.Append("filter-action", types.YLeaf{"FilterAction", attributeFilter.FilterAction})

    attributeFilter.EntityData.YListKeys = []string {"AttributeStart", "AttributeEnd"}

    return &(attributeFilter.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate
// Activate Graceful Maintenance Mode for all
// neighbors with graceful maintenance config
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Also for neighbors without graceful maintenance config. The type is bool.
    AllNeighbors interface{}

    // Keep routes in RIB once BGP stops. The type is bool.
    RetainRoutes interface{}
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetEntityData() *types.CommonEntityData {
    globalGracefulMaintenanceActivate.EntityData.YFilter = globalGracefulMaintenanceActivate.YFilter
    globalGracefulMaintenanceActivate.EntityData.YangName = "global-graceful-maintenance-activate"
    globalGracefulMaintenanceActivate.EntityData.BundleName = "cisco_ios_xr"
    globalGracefulMaintenanceActivate.EntityData.ParentYangName = "global"
    globalGracefulMaintenanceActivate.EntityData.SegmentPath = "global-graceful-maintenance-activate"
    globalGracefulMaintenanceActivate.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + globalGracefulMaintenanceActivate.EntityData.SegmentPath
    globalGracefulMaintenanceActivate.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalGracefulMaintenanceActivate.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalGracefulMaintenanceActivate.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalGracefulMaintenanceActivate.EntityData.Children = types.NewOrderedMap()
    globalGracefulMaintenanceActivate.EntityData.Leafs = types.NewOrderedMap()
    globalGracefulMaintenanceActivate.EntityData.Leafs.Append("all-neighbors", types.YLeaf{"AllNeighbors", globalGracefulMaintenanceActivate.AllNeighbors})
    globalGracefulMaintenanceActivate.EntityData.Leafs.Append("retain-routes", types.YLeaf{"RetainRoutes", globalGracefulMaintenanceActivate.RetainRoutes})

    globalGracefulMaintenanceActivate.EntityData.YListKeys = []string {}

    return &(globalGracefulMaintenanceActivate.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs
// Global AF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Global AF-specific configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf.
    GlobalAf []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetEntityData() *types.CommonEntityData {
    globalAfs.EntityData.YFilter = globalAfs.YFilter
    globalAfs.EntityData.YangName = "global-afs"
    globalAfs.EntityData.BundleName = "cisco_ios_xr"
    globalAfs.EntityData.ParentYangName = "global"
    globalAfs.EntityData.SegmentPath = "global-afs"
    globalAfs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + globalAfs.EntityData.SegmentPath
    globalAfs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalAfs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalAfs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalAfs.EntityData.Children = types.NewOrderedMap()
    globalAfs.EntityData.Children.Append("global-af", types.YChild{"GlobalAf", nil})
    for i := range globalAfs.GlobalAf {
        globalAfs.EntityData.Children.Append(types.GetSegmentPath(globalAfs.GlobalAf[i]), types.YChild{"GlobalAf", globalAfs.GlobalAf[i]})
    }
    globalAfs.EntityData.Leafs = types.NewOrderedMap()

    globalAfs.EntityData.YListKeys = []string {}

    return &(globalAfs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf
// Global AF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address family. The type is BgpAddressFamily.
    AfName interface{}

    // RNH install format type: extcomm - install rnh as opaque and extcomms,
    // extcomm-only - install rnh as extcomms only. The type is
    // BgpRnhInstallFormat.
    RnhInstallFormat interface{}

    // Enable install remote MVPN routes to PIM in default VRF. The type is
    // interface{}.
    InterAsInstall interface{}

    // Enable segmented multicast. The type is interface{}.
    SegmentedMcast interface{}

    // Implicit import configuration. The type is interface{}.
    ImplicitImport interface{}

    // Disable default Martian Check. The type is interface{}.
    DisableDefaultMartianCheck interface{}

    // Next hop Critical Trigger Delay. The type is interface{} with range:
    // 0..4294967295. Units are millisecond. The default value is 3000.
    NextHopCriticalTriggerDelay interface{}

    // Next hop Non-critical Trigger Delay. The type is interface{} with range:
    // 0..4294967295. Units are millisecond. The default value is 10000.
    NextHopNonCriticalTriggerDelay interface{}

    // Calculate label-security RPF lists and install to RIB/LSD. The type is
    // interface{}.
    LabelSecurityRpf interface{}

    // Use IGP SR label for resolution configuration. The type is interface{}.
    UseIgpsrLabel interface{}

    // Label retention time in minutes. The type is interface{} with range: 3..60.
    // Units are minute.
    LabelRetain interface{}

    // Configure background scanner interval for this address family. The type is
    // interface{} with range: 5..3600. Units are second. The default value is 60.
    ScanTime interface{}

    // Route policy name to apply to configure source route-target. The type is
    // string.
    SourceRouteTargetPolicy interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Upper bound on update generation transient memory usage for every EBGP
    // Sub-group. The type is interface{} with range: 1..512. Units are megabyte.
    // The default value is 32.
    UpdateLimitSubGroupEbgp interface{}

    // Upper bound on update generation transient memory usage for the
    // address-family. The type is interface{} with range: 4..2048. Units are
    // megabyte. The default value is 256.
    UpdateLimitAddressFamily interface{}

    // Upper bound on update generation transient memory usage for every IBGP
    // Sub-group. The type is interface{} with range: 1..512. Units are megabyte.
    // The default value is 32.
    UpdateLimitSubGroupIbgp interface{}

    // Disable client-to-client reflection. The type is interface{}.
    DisableClientToClientRr interface{}

    // Next hop policy to filter out nexthop notification. The type is string.
    NextHopRoutePolicy interface{}

    // Enable global table multicast. The type is interface{}.
    GlobalTableMcast interface{}

    // Wait for route install before sending updates to neighbors. The type is
    // interface{}.
    WaitRibInstall interface{}

    // Retrieve prefix sid mapping from SRMS. The type is interface{}.
    PrefixSidMap interface{}

    // RPKI origin-AS validation enable. The type is interface{}.
    RpkiOriginAsValidationEnable interface{}

    // Update generation delay (in minutes) after a MED change. The type is
    // interface{} with range: 0..10. Units are minute. The default value is 10.
    DynamicMedInterval interface{}

    // Enable the address family. Deletion of this object causes deletion of all
    // the objects under GlobalAF/VRFGlobalAF associated with this object . The
    // type is interface{}.
    Enable interface{}

    // Configure policy for installation of routes to RIB. The type is string.
    TablePolicy interface{}

    // Attribute download configuration. The type is interface{}.
    AttributeDownload interface{}

    // TRUE to enable BE FALSE to disable BE inheritance from a parent. The type
    // is bool.
    BestExternal interface{}

    // RPKI origin-AS validity signal ibgp. The type is interface{}.
    RpkiOriginAsValiditySignalIbgp interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsReceive interface{}

    // Route policy for permanent networks. The type is string.
    PermanentNetwork interface{}

    // RPKI bestpath use origin-AS validity. The type is interface{}.
    RpkiBestpathUseOriginAsValidity interface{}

    // Label allocation mode: per-ce  Set per CE label mode,per-vrf Set per VRF
    // label mode. The type is string.
    Srv6LabelAllocationMode interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Minimum prefix-length for nexthop resolution. The type is interface{} with
    // range: 0..128. The default value is 0.
    NextHopResolutionPrefixLengthMinimum interface{}

    // TRUE to reset weight on import. FALSE to not reset and to prevent
    // inheritance from a parent. The type is bool.
    ResetWeightOnImport interface{}

    // Advertise additional paths Send capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsSend interface{}

    // Enable/disable advertisement of routes with local-label via Unicast SAFI.
    // The type is BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRouteSafiUnicast interface{}

    // Disable outbound AS Path loop check. The type is interface{}.
    DisableAsPathLoopCheck interface{}

    // Redistribute information for IS-IS routes .
    IsisRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes

    // <ASN, router-id> tuple to use to identify the link-state domain.
    DomainDistinguisher Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher

    // Configurations to be inherited to all vrfs.
    VrfAll Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll

    // Disable client-to-client reflection for a cluster.
    DisableClusterClientToClientRrs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs

    // Delay timer to batch label processing.
    LabelDelay Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay

    // Use eBGP multipaths.
    Ebgp Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp

    // Use eiBGP multipaths.
    Eibgp Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp

    // Accept received updates with the specified attributes.
    RetainRt Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt

    // Use iBGP multipaths.
    Ibgp Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp

    // Delay timer to batch import processing.
    ImportDelay Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay

    // Configure BGP aggregate entries.
    AggregateAddresses Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses

    // Table of multiple ORR groups.
    OptimalRouteReflectorGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups

    // Enable route-flap dampening.
    Dampening Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening

    // Redistribute RIP routes.
    RipRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes

    // Redistribute lisp routes.
    LispRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes

    // Redistribute static routes.
    StaticRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes

    // Define an administrative distance.
    Distance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance

    // Redistribute information for Application routes.
    ApplicationRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes

    // BGP 6PE/MPLS-VPN label allocation mode.
    LabelMode Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode

    // Redistribute information for EIGRP routes.
    EigrpRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes

    // Specify a network to announce via BGP.
    SourcedNetworks Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks

    // Redistribute connected routes.
    ConnectedRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes

    // Label allocation policy.
    AllocateLabel Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel

    // Configure additional paths selection.
    AdditionalPathsSelection Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection

    // Redistribute information for OSPF routes.
    OspfRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes

    // Redistribute mobile routes.
    MobileRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes

    // Redistribute subscriber routes.
    SubscriberRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetEntityData() *types.CommonEntityData {
    globalAf.EntityData.YFilter = globalAf.YFilter
    globalAf.EntityData.YangName = "global-af"
    globalAf.EntityData.BundleName = "cisco_ios_xr"
    globalAf.EntityData.ParentYangName = "global-afs"
    globalAf.EntityData.SegmentPath = "global-af" + types.AddKeyToken(globalAf.AfName, "af-name")
    globalAf.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/" + globalAf.EntityData.SegmentPath
    globalAf.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalAf.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalAf.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalAf.EntityData.Children = types.NewOrderedMap()
    globalAf.EntityData.Children.Append("isis-routes", types.YChild{"IsisRoutes", &globalAf.IsisRoutes})
    globalAf.EntityData.Children.Append("domain-distinguisher", types.YChild{"DomainDistinguisher", &globalAf.DomainDistinguisher})
    globalAf.EntityData.Children.Append("vrf-all", types.YChild{"VrfAll", &globalAf.VrfAll})
    globalAf.EntityData.Children.Append("disable-cluster-client-to-client-rrs", types.YChild{"DisableClusterClientToClientRrs", &globalAf.DisableClusterClientToClientRrs})
    globalAf.EntityData.Children.Append("label-delay", types.YChild{"LabelDelay", &globalAf.LabelDelay})
    globalAf.EntityData.Children.Append("ebgp", types.YChild{"Ebgp", &globalAf.Ebgp})
    globalAf.EntityData.Children.Append("eibgp", types.YChild{"Eibgp", &globalAf.Eibgp})
    globalAf.EntityData.Children.Append("retain-rt", types.YChild{"RetainRt", &globalAf.RetainRt})
    globalAf.EntityData.Children.Append("ibgp", types.YChild{"Ibgp", &globalAf.Ibgp})
    globalAf.EntityData.Children.Append("import-delay", types.YChild{"ImportDelay", &globalAf.ImportDelay})
    globalAf.EntityData.Children.Append("aggregate-addresses", types.YChild{"AggregateAddresses", &globalAf.AggregateAddresses})
    globalAf.EntityData.Children.Append("optimal-route-reflector-groups", types.YChild{"OptimalRouteReflectorGroups", &globalAf.OptimalRouteReflectorGroups})
    globalAf.EntityData.Children.Append("dampening", types.YChild{"Dampening", &globalAf.Dampening})
    globalAf.EntityData.Children.Append("rip-routes", types.YChild{"RipRoutes", &globalAf.RipRoutes})
    globalAf.EntityData.Children.Append("lisp-routes", types.YChild{"LispRoutes", &globalAf.LispRoutes})
    globalAf.EntityData.Children.Append("static-routes", types.YChild{"StaticRoutes", &globalAf.StaticRoutes})
    globalAf.EntityData.Children.Append("distance", types.YChild{"Distance", &globalAf.Distance})
    globalAf.EntityData.Children.Append("application-routes", types.YChild{"ApplicationRoutes", &globalAf.ApplicationRoutes})
    globalAf.EntityData.Children.Append("label-mode", types.YChild{"LabelMode", &globalAf.LabelMode})
    globalAf.EntityData.Children.Append("eigrp-routes", types.YChild{"EigrpRoutes", &globalAf.EigrpRoutes})
    globalAf.EntityData.Children.Append("sourced-networks", types.YChild{"SourcedNetworks", &globalAf.SourcedNetworks})
    globalAf.EntityData.Children.Append("connected-routes", types.YChild{"ConnectedRoutes", &globalAf.ConnectedRoutes})
    globalAf.EntityData.Children.Append("allocate-label", types.YChild{"AllocateLabel", &globalAf.AllocateLabel})
    globalAf.EntityData.Children.Append("additional-paths-selection", types.YChild{"AdditionalPathsSelection", &globalAf.AdditionalPathsSelection})
    globalAf.EntityData.Children.Append("ospf-routes", types.YChild{"OspfRoutes", &globalAf.OspfRoutes})
    globalAf.EntityData.Children.Append("mobile-routes", types.YChild{"MobileRoutes", &globalAf.MobileRoutes})
    globalAf.EntityData.Children.Append("subscriber-routes", types.YChild{"SubscriberRoutes", &globalAf.SubscriberRoutes})
    globalAf.EntityData.Leafs = types.NewOrderedMap()
    globalAf.EntityData.Leafs.Append("af-name", types.YLeaf{"AfName", globalAf.AfName})
    globalAf.EntityData.Leafs.Append("rnh-install-format", types.YLeaf{"RnhInstallFormat", globalAf.RnhInstallFormat})
    globalAf.EntityData.Leafs.Append("inter-as-install", types.YLeaf{"InterAsInstall", globalAf.InterAsInstall})
    globalAf.EntityData.Leafs.Append("segmented-mcast", types.YLeaf{"SegmentedMcast", globalAf.SegmentedMcast})
    globalAf.EntityData.Leafs.Append("implicit-import", types.YLeaf{"ImplicitImport", globalAf.ImplicitImport})
    globalAf.EntityData.Leafs.Append("disable-default-martian-check", types.YLeaf{"DisableDefaultMartianCheck", globalAf.DisableDefaultMartianCheck})
    globalAf.EntityData.Leafs.Append("next-hop-critical-trigger-delay", types.YLeaf{"NextHopCriticalTriggerDelay", globalAf.NextHopCriticalTriggerDelay})
    globalAf.EntityData.Leafs.Append("next-hop-non-critical-trigger-delay", types.YLeaf{"NextHopNonCriticalTriggerDelay", globalAf.NextHopNonCriticalTriggerDelay})
    globalAf.EntityData.Leafs.Append("label-security-rpf", types.YLeaf{"LabelSecurityRpf", globalAf.LabelSecurityRpf})
    globalAf.EntityData.Leafs.Append("use-igpsr-label", types.YLeaf{"UseIgpsrLabel", globalAf.UseIgpsrLabel})
    globalAf.EntityData.Leafs.Append("label-retain", types.YLeaf{"LabelRetain", globalAf.LabelRetain})
    globalAf.EntityData.Leafs.Append("scan-time", types.YLeaf{"ScanTime", globalAf.ScanTime})
    globalAf.EntityData.Leafs.Append("source-route-target-policy", types.YLeaf{"SourceRouteTargetPolicy", globalAf.SourceRouteTargetPolicy})
    globalAf.EntityData.Leafs.Append("rpki-origin-as-validation-disable", types.YLeaf{"RpkiOriginAsValidationDisable", globalAf.RpkiOriginAsValidationDisable})
    globalAf.EntityData.Leafs.Append("update-limit-sub-group-ebgp", types.YLeaf{"UpdateLimitSubGroupEbgp", globalAf.UpdateLimitSubGroupEbgp})
    globalAf.EntityData.Leafs.Append("update-limit-address-family", types.YLeaf{"UpdateLimitAddressFamily", globalAf.UpdateLimitAddressFamily})
    globalAf.EntityData.Leafs.Append("update-limit-sub-group-ibgp", types.YLeaf{"UpdateLimitSubGroupIbgp", globalAf.UpdateLimitSubGroupIbgp})
    globalAf.EntityData.Leafs.Append("disable-client-to-client-rr", types.YLeaf{"DisableClientToClientRr", globalAf.DisableClientToClientRr})
    globalAf.EntityData.Leafs.Append("next-hop-route-policy", types.YLeaf{"NextHopRoutePolicy", globalAf.NextHopRoutePolicy})
    globalAf.EntityData.Leafs.Append("global-table-mcast", types.YLeaf{"GlobalTableMcast", globalAf.GlobalTableMcast})
    globalAf.EntityData.Leafs.Append("wait-rib-install", types.YLeaf{"WaitRibInstall", globalAf.WaitRibInstall})
    globalAf.EntityData.Leafs.Append("prefix-sid-map", types.YLeaf{"PrefixSidMap", globalAf.PrefixSidMap})
    globalAf.EntityData.Leafs.Append("rpki-origin-as-validation-enable", types.YLeaf{"RpkiOriginAsValidationEnable", globalAf.RpkiOriginAsValidationEnable})
    globalAf.EntityData.Leafs.Append("dynamic-med-interval", types.YLeaf{"DynamicMedInterval", globalAf.DynamicMedInterval})
    globalAf.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", globalAf.Enable})
    globalAf.EntityData.Leafs.Append("table-policy", types.YLeaf{"TablePolicy", globalAf.TablePolicy})
    globalAf.EntityData.Leafs.Append("attribute-download", types.YLeaf{"AttributeDownload", globalAf.AttributeDownload})
    globalAf.EntityData.Leafs.Append("best-external", types.YLeaf{"BestExternal", globalAf.BestExternal})
    globalAf.EntityData.Leafs.Append("rpki-origin-as-validity-signal-ibgp", types.YLeaf{"RpkiOriginAsValiditySignalIbgp", globalAf.RpkiOriginAsValiditySignalIbgp})
    globalAf.EntityData.Leafs.Append("additional-paths-receive", types.YLeaf{"AdditionalPathsReceive", globalAf.AdditionalPathsReceive})
    globalAf.EntityData.Leafs.Append("permanent-network", types.YLeaf{"PermanentNetwork", globalAf.PermanentNetwork})
    globalAf.EntityData.Leafs.Append("rpki-bestpath-use-origin-as-validity", types.YLeaf{"RpkiBestpathUseOriginAsValidity", globalAf.RpkiBestpathUseOriginAsValidity})
    globalAf.EntityData.Leafs.Append("srv6-label-allocation-mode", types.YLeaf{"Srv6LabelAllocationMode", globalAf.Srv6LabelAllocationMode})
    globalAf.EntityData.Leafs.Append("rpki-bestpath-origin-as-allow-invalid", types.YLeaf{"RpkiBestpathOriginAsAllowInvalid", globalAf.RpkiBestpathOriginAsAllowInvalid})
    globalAf.EntityData.Leafs.Append("next-hop-resolution-prefix-length-minimum", types.YLeaf{"NextHopResolutionPrefixLengthMinimum", globalAf.NextHopResolutionPrefixLengthMinimum})
    globalAf.EntityData.Leafs.Append("reset-weight-on-import", types.YLeaf{"ResetWeightOnImport", globalAf.ResetWeightOnImport})
    globalAf.EntityData.Leafs.Append("additional-paths-send", types.YLeaf{"AdditionalPathsSend", globalAf.AdditionalPathsSend})
    globalAf.EntityData.Leafs.Append("advertise-local-labeled-route-safi-unicast", types.YLeaf{"AdvertiseLocalLabeledRouteSafiUnicast", globalAf.AdvertiseLocalLabeledRouteSafiUnicast})
    globalAf.EntityData.Leafs.Append("disable-as-path-loop-check", types.YLeaf{"DisableAsPathLoopCheck", globalAf.DisableAsPathLoopCheck})

    globalAf.EntityData.YListKeys = []string {"AfName"}

    return &(globalAf.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes
// Redistribute information for IS-IS routes
// .
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute IS-IS routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute.
    IsisRoute []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetEntityData() *types.CommonEntityData {
    isisRoutes.EntityData.YFilter = isisRoutes.YFilter
    isisRoutes.EntityData.YangName = "isis-routes"
    isisRoutes.EntityData.BundleName = "cisco_ios_xr"
    isisRoutes.EntityData.ParentYangName = "global-af"
    isisRoutes.EntityData.SegmentPath = "isis-routes"
    isisRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + isisRoutes.EntityData.SegmentPath
    isisRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisRoutes.EntityData.Children = types.NewOrderedMap()
    isisRoutes.EntityData.Children.Append("isis-route", types.YChild{"IsisRoute", nil})
    for i := range isisRoutes.IsisRoute {
        isisRoutes.EntityData.Children.Append(types.GetSegmentPath(isisRoutes.IsisRoute[i]), types.YChild{"IsisRoute", isisRoutes.IsisRoute[i]})
    }
    isisRoutes.EntityData.Leafs = types.NewOrderedMap()

    isisRoutes.EntityData.YListKeys = []string {}

    return &(isisRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute
// Redistribute IS-IS routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. IS-IS instance name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for level 1 routes, 02 for level 2 routes, 04 for
    // level 1 inter-area routes. Logical combinations permitted. The type is
    // string with pattern: [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetEntityData() *types.CommonEntityData {
    isisRoute.EntityData.YFilter = isisRoute.YFilter
    isisRoute.EntityData.YangName = "isis-route"
    isisRoute.EntityData.BundleName = "cisco_ios_xr"
    isisRoute.EntityData.ParentYangName = "isis-routes"
    isisRoute.EntityData.SegmentPath = "isis-route" + types.AddKeyToken(isisRoute.InstanceName, "instance-name")
    isisRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/isis-routes/" + isisRoute.EntityData.SegmentPath
    isisRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    isisRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    isisRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    isisRoute.EntityData.Children = types.NewOrderedMap()
    isisRoute.EntityData.Leafs = types.NewOrderedMap()
    isisRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", isisRoute.InstanceName})
    isisRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", isisRoute.DefaultMetric})
    isisRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", isisRoute.RoutePolicyName})
    isisRoute.EntityData.Leafs.Append("redist-type", types.YLeaf{"RedistType", isisRoute.RedistType})

    isisRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(isisRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher
// <ASN, router-id> tuple to use to identify
// the link-state domain
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // AS Number. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    As interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    RouterId interface{}
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetEntityData() *types.CommonEntityData {
    domainDistinguisher.EntityData.YFilter = domainDistinguisher.YFilter
    domainDistinguisher.EntityData.YangName = "domain-distinguisher"
    domainDistinguisher.EntityData.BundleName = "cisco_ios_xr"
    domainDistinguisher.EntityData.ParentYangName = "global-af"
    domainDistinguisher.EntityData.SegmentPath = "domain-distinguisher"
    domainDistinguisher.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + domainDistinguisher.EntityData.SegmentPath
    domainDistinguisher.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    domainDistinguisher.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    domainDistinguisher.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    domainDistinguisher.EntityData.Children = types.NewOrderedMap()
    domainDistinguisher.EntityData.Leafs = types.NewOrderedMap()
    domainDistinguisher.EntityData.Leafs.Append("as", types.YLeaf{"As", domainDistinguisher.As})
    domainDistinguisher.EntityData.Leafs.Append("router-id", types.YLeaf{"RouterId", domainDistinguisher.RouterId})

    domainDistinguisher.EntityData.YListKeys = []string {}

    return &(domainDistinguisher.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll
// Configurations to be inherited to all
// vrfs
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RNH install format type: extcomm - install rnh as opaque and extcomms,
    // extcomm-only - install rnh as extcomms only. The type is
    // BgpRnhInstallFormat.
    RnhInstallFormat interface{}

    // Enable vrf all configuration submode. The type is interface{}.
    Enable interface{}

    // Configure policy for installation of routes to RIB. The type is string.
    TablePolicy interface{}

    // Enable sourcing of import route-targets from import-policy. The type is
    // interface{}.
    SourceRtImportPolicy interface{}

    // Label allocation mode: per-ce  Set per CE label mode,per-vrf Set per VRF
    // label mode. The type is string.
    Srv6LabelAllocationMode interface{}

    // MPLS-VPN label allocation mode.
    LabelMode Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetEntityData() *types.CommonEntityData {
    vrfAll.EntityData.YFilter = vrfAll.YFilter
    vrfAll.EntityData.YangName = "vrf-all"
    vrfAll.EntityData.BundleName = "cisco_ios_xr"
    vrfAll.EntityData.ParentYangName = "global-af"
    vrfAll.EntityData.SegmentPath = "vrf-all"
    vrfAll.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + vrfAll.EntityData.SegmentPath
    vrfAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    vrfAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    vrfAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    vrfAll.EntityData.Children = types.NewOrderedMap()
    vrfAll.EntityData.Children.Append("label-mode", types.YChild{"LabelMode", &vrfAll.LabelMode})
    vrfAll.EntityData.Leafs = types.NewOrderedMap()
    vrfAll.EntityData.Leafs.Append("rnh-install-format", types.YLeaf{"RnhInstallFormat", vrfAll.RnhInstallFormat})
    vrfAll.EntityData.Leafs.Append("enable", types.YLeaf{"Enable", vrfAll.Enable})
    vrfAll.EntityData.Leafs.Append("table-policy", types.YLeaf{"TablePolicy", vrfAll.TablePolicy})
    vrfAll.EntityData.Leafs.Append("source-rt-import-policy", types.YLeaf{"SourceRtImportPolicy", vrfAll.SourceRtImportPolicy})
    vrfAll.EntityData.Leafs.Append("srv6-label-allocation-mode", types.YLeaf{"Srv6LabelAllocationMode", vrfAll.Srv6LabelAllocationMode})

    vrfAll.EntityData.YListKeys = []string {}

    return &(vrfAll.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode
// MPLS-VPN label allocation mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label allocation mode: per-ce  Set per CE label mode, per-vrf Set per VRF
    // label mode. The type is string.
    LabelAllocationMode interface{}

    // Label mode route policy name. The type is string.
    RoutePolicyName interface{}
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetEntityData() *types.CommonEntityData {
    labelMode.EntityData.YFilter = labelMode.YFilter
    labelMode.EntityData.YangName = "label-mode"
    labelMode.EntityData.BundleName = "cisco_ios_xr"
    labelMode.EntityData.ParentYangName = "vrf-all"
    labelMode.EntityData.SegmentPath = "label-mode"
    labelMode.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/vrf-all/" + labelMode.EntityData.SegmentPath
    labelMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelMode.EntityData.Children = types.NewOrderedMap()
    labelMode.EntityData.Leafs = types.NewOrderedMap()
    labelMode.EntityData.Leafs.Append("label-allocation-mode", types.YLeaf{"LabelAllocationMode", labelMode.LabelAllocationMode})
    labelMode.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", labelMode.RoutePolicyName})

    labelMode.EntityData.YListKeys = []string {}

    return &(labelMode.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs
// Disable client-to-client reflection for a
// cluster
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Cluster ID for which reflection is to be disbled. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr.
    DisableClusterClientToClientRr []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetEntityData() *types.CommonEntityData {
    disableClusterClientToClientRrs.EntityData.YFilter = disableClusterClientToClientRrs.YFilter
    disableClusterClientToClientRrs.EntityData.YangName = "disable-cluster-client-to-client-rrs"
    disableClusterClientToClientRrs.EntityData.BundleName = "cisco_ios_xr"
    disableClusterClientToClientRrs.EntityData.ParentYangName = "global-af"
    disableClusterClientToClientRrs.EntityData.SegmentPath = "disable-cluster-client-to-client-rrs"
    disableClusterClientToClientRrs.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + disableClusterClientToClientRrs.EntityData.SegmentPath
    disableClusterClientToClientRrs.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disableClusterClientToClientRrs.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disableClusterClientToClientRrs.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disableClusterClientToClientRrs.EntityData.Children = types.NewOrderedMap()
    disableClusterClientToClientRrs.EntityData.Children.Append("disable-cluster-client-to-client-rr", types.YChild{"DisableClusterClientToClientRr", nil})
    for i := range disableClusterClientToClientRrs.DisableClusterClientToClientRr {
        disableClusterClientToClientRrs.EntityData.Children.Append(types.GetSegmentPath(disableClusterClientToClientRrs.DisableClusterClientToClientRr[i]), types.YChild{"DisableClusterClientToClientRr", disableClusterClientToClientRrs.DisableClusterClientToClientRr[i]})
    }
    disableClusterClientToClientRrs.EntityData.Leafs = types.NewOrderedMap()

    disableClusterClientToClientRrs.EntityData.YListKeys = []string {}

    return &(disableClusterClientToClientRrs.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr
// Cluster ID for which reflection is to be
// disbled
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Type of cluster-id. The type is BgpClusterId.
    ClusterType interface{}

    // number. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number.
    Number []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number

    // ipv4 address. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address.
    Ipv4Address []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetEntityData() *types.CommonEntityData {
    disableClusterClientToClientRr.EntityData.YFilter = disableClusterClientToClientRr.YFilter
    disableClusterClientToClientRr.EntityData.YangName = "disable-cluster-client-to-client-rr"
    disableClusterClientToClientRr.EntityData.BundleName = "cisco_ios_xr"
    disableClusterClientToClientRr.EntityData.ParentYangName = "disable-cluster-client-to-client-rrs"
    disableClusterClientToClientRr.EntityData.SegmentPath = "disable-cluster-client-to-client-rr" + types.AddKeyToken(disableClusterClientToClientRr.ClusterType, "cluster-type")
    disableClusterClientToClientRr.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/disable-cluster-client-to-client-rrs/" + disableClusterClientToClientRr.EntityData.SegmentPath
    disableClusterClientToClientRr.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    disableClusterClientToClientRr.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    disableClusterClientToClientRr.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    disableClusterClientToClientRr.EntityData.Children = types.NewOrderedMap()
    disableClusterClientToClientRr.EntityData.Children.Append("number", types.YChild{"Number", nil})
    for i := range disableClusterClientToClientRr.Number {
        disableClusterClientToClientRr.EntityData.Children.Append(types.GetSegmentPath(disableClusterClientToClientRr.Number[i]), types.YChild{"Number", disableClusterClientToClientRr.Number[i]})
    }
    disableClusterClientToClientRr.EntityData.Children.Append("ipv4-address", types.YChild{"Ipv4Address", nil})
    for i := range disableClusterClientToClientRr.Ipv4Address {
        disableClusterClientToClientRr.EntityData.Children.Append(types.GetSegmentPath(disableClusterClientToClientRr.Ipv4Address[i]), types.YChild{"Ipv4Address", disableClusterClientToClientRr.Ipv4Address[i]})
    }
    disableClusterClientToClientRr.EntityData.Leafs = types.NewOrderedMap()
    disableClusterClientToClientRr.EntityData.Leafs.Append("cluster-type", types.YLeaf{"ClusterType", disableClusterClientToClientRr.ClusterType})

    disableClusterClientToClientRr.EntityData.YListKeys = []string {"ClusterType"}

    return &(disableClusterClientToClientRr.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number
// number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Cluster ID: if configured as a number. The type is
    // interface{} with range: 0..4294967295.
    ClusterIdNumber interface{}
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetEntityData() *types.CommonEntityData {
    number.EntityData.YFilter = number.YFilter
    number.EntityData.YangName = "number"
    number.EntityData.BundleName = "cisco_ios_xr"
    number.EntityData.ParentYangName = "disable-cluster-client-to-client-rr"
    number.EntityData.SegmentPath = "number" + types.AddKeyToken(number.ClusterIdNumber, "cluster-id-number")
    number.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/disable-cluster-client-to-client-rrs/disable-cluster-client-to-client-rr/" + number.EntityData.SegmentPath
    number.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    number.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    number.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    number.EntityData.Children = types.NewOrderedMap()
    number.EntityData.Leafs = types.NewOrderedMap()
    number.EntityData.Leafs.Append("cluster-id-number", types.YLeaf{"ClusterIdNumber", number.ClusterIdNumber})

    number.EntityData.YListKeys = []string {"ClusterIdNumber"}

    return &(number.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address
// ipv4 address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Cluster ID: if configured as an IP Address. The
    // type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetEntityData() *types.CommonEntityData {
    ipv4Address.EntityData.YFilter = ipv4Address.YFilter
    ipv4Address.EntityData.YangName = "ipv4-address"
    ipv4Address.EntityData.BundleName = "cisco_ios_xr"
    ipv4Address.EntityData.ParentYangName = "disable-cluster-client-to-client-rr"
    ipv4Address.EntityData.SegmentPath = "ipv4-address" + types.AddKeyToken(ipv4Address.ClusterIdAddress, "cluster-id-address")
    ipv4Address.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/disable-cluster-client-to-client-rrs/disable-cluster-client-to-client-rr/" + ipv4Address.EntityData.SegmentPath
    ipv4Address.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ipv4Address.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ipv4Address.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ipv4Address.EntityData.Children = types.NewOrderedMap()
    ipv4Address.EntityData.Leafs = types.NewOrderedMap()
    ipv4Address.EntityData.Leafs.Append("cluster-id-address", types.YLeaf{"ClusterIdAddress", ipv4Address.ClusterIdAddress})

    ipv4Address.EntityData.YListKeys = []string {"ClusterIdAddress"}

    return &(ipv4Address.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay
// Delay timer to batch label processing.
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Delay, seconds part. The type is interface{} with range: 0..10. This
    // attribute is mandatory. Units are second.
    Seconds interface{}

    // Delay, milliseconds part. The type is interface{} with range: 0..999. This
    // attribute is mandatory. Units are millisecond.
    Milliseconds interface{}
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetEntityData() *types.CommonEntityData {
    labelDelay.EntityData.YFilter = labelDelay.YFilter
    labelDelay.EntityData.YangName = "label-delay"
    labelDelay.EntityData.BundleName = "cisco_ios_xr"
    labelDelay.EntityData.ParentYangName = "global-af"
    labelDelay.EntityData.SegmentPath = "label-delay"
    labelDelay.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + labelDelay.EntityData.SegmentPath
    labelDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelDelay.EntityData.Children = types.NewOrderedMap()
    labelDelay.EntityData.Leafs = types.NewOrderedMap()
    labelDelay.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", labelDelay.Seconds})
    labelDelay.EntityData.Leafs.Append("milliseconds", types.YLeaf{"Milliseconds", labelDelay.Milliseconds})

    labelDelay.EntityData.YListKeys = []string {}

    return &(labelDelay.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp
// Use eBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of paths. The type is interface{} with range: 2..64. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetEntityData() *types.CommonEntityData {
    ebgp.EntityData.YFilter = ebgp.YFilter
    ebgp.EntityData.YangName = "ebgp"
    ebgp.EntityData.BundleName = "cisco_ios_xr"
    ebgp.EntityData.ParentYangName = "global-af"
    ebgp.EntityData.SegmentPath = "ebgp"
    ebgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + ebgp.EntityData.SegmentPath
    ebgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ebgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ebgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ebgp.EntityData.Children = types.NewOrderedMap()
    ebgp.EntityData.Leafs = types.NewOrderedMap()
    ebgp.EntityData.Leafs.Append("paths-value", types.YLeaf{"PathsValue", ebgp.PathsValue})
    ebgp.EntityData.Leafs.Append("unequal-cost", types.YLeaf{"UnequalCost", ebgp.UnequalCost})
    ebgp.EntityData.Leafs.Append("selective", types.YLeaf{"Selective", ebgp.Selective})
    ebgp.EntityData.Leafs.Append("order-by-igp-metric", types.YLeaf{"OrderByIgpMetric", ebgp.OrderByIgpMetric})

    ebgp.EntityData.YListKeys = []string {}

    return &(ebgp.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp
// Use eiBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of paths. The type is interface{} with range: 2..64. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetEntityData() *types.CommonEntityData {
    eibgp.EntityData.YFilter = eibgp.YFilter
    eibgp.EntityData.YangName = "eibgp"
    eibgp.EntityData.BundleName = "cisco_ios_xr"
    eibgp.EntityData.ParentYangName = "global-af"
    eibgp.EntityData.SegmentPath = "eibgp"
    eibgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + eibgp.EntityData.SegmentPath
    eibgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eibgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eibgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eibgp.EntityData.Children = types.NewOrderedMap()
    eibgp.EntityData.Leafs = types.NewOrderedMap()
    eibgp.EntityData.Leafs.Append("paths-value", types.YLeaf{"PathsValue", eibgp.PathsValue})
    eibgp.EntityData.Leafs.Append("unequal-cost", types.YLeaf{"UnequalCost", eibgp.UnequalCost})
    eibgp.EntityData.Leafs.Append("selective", types.YLeaf{"Selective", eibgp.Selective})
    eibgp.EntityData.Leafs.Append("order-by-igp-metric", types.YLeaf{"OrderByIgpMetric", eibgp.OrderByIgpMetric})

    eibgp.EntityData.YListKeys = []string {}

    return &(eibgp.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt
// Accept received updates with the
// specified attributes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether all RTs are to be retained, default is FALSE. The type is bool.
    All interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetEntityData() *types.CommonEntityData {
    retainRt.EntityData.YFilter = retainRt.YFilter
    retainRt.EntityData.YangName = "retain-rt"
    retainRt.EntityData.BundleName = "cisco_ios_xr"
    retainRt.EntityData.ParentYangName = "global-af"
    retainRt.EntityData.SegmentPath = "retain-rt"
    retainRt.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + retainRt.EntityData.SegmentPath
    retainRt.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    retainRt.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    retainRt.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    retainRt.EntityData.Children = types.NewOrderedMap()
    retainRt.EntityData.Leafs = types.NewOrderedMap()
    retainRt.EntityData.Leafs.Append("all", types.YLeaf{"All", retainRt.All})
    retainRt.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", retainRt.RoutePolicyName})

    retainRt.EntityData.YListKeys = []string {}

    return &(retainRt.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp
// Use iBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Number of paths. The type is interface{} with range: 2..64. This attribute
    // is mandatory.
    PathsValue interface{}

    // Allow multipaths to have different IGP metrics. The type is bool. The
    // default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetEntityData() *types.CommonEntityData {
    ibgp.EntityData.YFilter = ibgp.YFilter
    ibgp.EntityData.YangName = "ibgp"
    ibgp.EntityData.BundleName = "cisco_ios_xr"
    ibgp.EntityData.ParentYangName = "global-af"
    ibgp.EntityData.SegmentPath = "ibgp"
    ibgp.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + ibgp.EntityData.SegmentPath
    ibgp.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ibgp.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ibgp.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ibgp.EntityData.Children = types.NewOrderedMap()
    ibgp.EntityData.Leafs = types.NewOrderedMap()
    ibgp.EntityData.Leafs.Append("paths-value", types.YLeaf{"PathsValue", ibgp.PathsValue})
    ibgp.EntityData.Leafs.Append("unequal-cost", types.YLeaf{"UnequalCost", ibgp.UnequalCost})
    ibgp.EntityData.Leafs.Append("selective", types.YLeaf{"Selective", ibgp.Selective})
    ibgp.EntityData.Leafs.Append("order-by-igp-metric", types.YLeaf{"OrderByIgpMetric", ibgp.OrderByIgpMetric})

    ibgp.EntityData.YListKeys = []string {}

    return &(ibgp.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay
// Delay timer to batch import processing.
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Delay, seconds part. The type is interface{} with range: 0..10. This
    // attribute is mandatory. Units are second.
    Seconds interface{}

    // Delay, milliseconds part. The type is interface{} with range: 0..999. This
    // attribute is mandatory. Units are millisecond.
    Milliseconds interface{}
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetEntityData() *types.CommonEntityData {
    importDelay.EntityData.YFilter = importDelay.YFilter
    importDelay.EntityData.YangName = "import-delay"
    importDelay.EntityData.BundleName = "cisco_ios_xr"
    importDelay.EntityData.ParentYangName = "global-af"
    importDelay.EntityData.SegmentPath = "import-delay"
    importDelay.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + importDelay.EntityData.SegmentPath
    importDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    importDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    importDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    importDelay.EntityData.Children = types.NewOrderedMap()
    importDelay.EntityData.Leafs = types.NewOrderedMap()
    importDelay.EntityData.Leafs.Append("seconds", types.YLeaf{"Seconds", importDelay.Seconds})
    importDelay.EntityData.Leafs.Append("milliseconds", types.YLeaf{"Milliseconds", importDelay.Milliseconds})

    importDelay.EntityData.YListKeys = []string {}

    return &(importDelay.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses
// Configure BGP aggregate entries
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Aggregate address configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress.
    AggregateAddress []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetEntityData() *types.CommonEntityData {
    aggregateAddresses.EntityData.YFilter = aggregateAddresses.YFilter
    aggregateAddresses.EntityData.YangName = "aggregate-addresses"
    aggregateAddresses.EntityData.BundleName = "cisco_ios_xr"
    aggregateAddresses.EntityData.ParentYangName = "global-af"
    aggregateAddresses.EntityData.SegmentPath = "aggregate-addresses"
    aggregateAddresses.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + aggregateAddresses.EntityData.SegmentPath
    aggregateAddresses.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aggregateAddresses.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aggregateAddresses.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aggregateAddresses.EntityData.Children = types.NewOrderedMap()
    aggregateAddresses.EntityData.Children.Append("aggregate-address", types.YChild{"AggregateAddress", nil})
    for i := range aggregateAddresses.AggregateAddress {
        aggregateAddresses.EntityData.Children.Append(types.GetSegmentPath(aggregateAddresses.AggregateAddress[i]), types.YChild{"AggregateAddress", aggregateAddresses.AggregateAddress[i]})
    }
    aggregateAddresses.EntityData.Leafs = types.NewOrderedMap()

    aggregateAddresses.EntityData.YListKeys = []string {}

    return &(aggregateAddresses.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress
// Aggregate address configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Aggregate in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    AggregateAddr interface{}

    // This attribute is a key. Aggregate in prefix/length format (prefix part).
    // The type is interface{} with range: 0..128.
    AggregatePrefix interface{}

    // TRUE to generate AS set path information, FALSE otherwise. The type is
    // bool.
    GenerateSetInfo interface{}

    // TRUE to generate AS confederation set path information, FALSE otherwise.
    // The type is bool.
    GenerateConfederationSetInfo interface{}

    // TRUE to filter more specific routes from updates, FALSEotherwise. The type
    // is bool.
    SummaryOnly interface{}

    // Route policy on which to condition advertisement, suppression, and
    // attributes. The type is string.
    RoutePolicyName interface{}
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetEntityData() *types.CommonEntityData {
    aggregateAddress.EntityData.YFilter = aggregateAddress.YFilter
    aggregateAddress.EntityData.YangName = "aggregate-address"
    aggregateAddress.EntityData.BundleName = "cisco_ios_xr"
    aggregateAddress.EntityData.ParentYangName = "aggregate-addresses"
    aggregateAddress.EntityData.SegmentPath = "aggregate-address" + types.AddKeyToken(aggregateAddress.AggregateAddr, "aggregate-addr") + types.AddKeyToken(aggregateAddress.AggregatePrefix, "aggregate-prefix")
    aggregateAddress.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/aggregate-addresses/" + aggregateAddress.EntityData.SegmentPath
    aggregateAddress.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    aggregateAddress.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    aggregateAddress.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    aggregateAddress.EntityData.Children = types.NewOrderedMap()
    aggregateAddress.EntityData.Leafs = types.NewOrderedMap()
    aggregateAddress.EntityData.Leafs.Append("aggregate-addr", types.YLeaf{"AggregateAddr", aggregateAddress.AggregateAddr})
    aggregateAddress.EntityData.Leafs.Append("aggregate-prefix", types.YLeaf{"AggregatePrefix", aggregateAddress.AggregatePrefix})
    aggregateAddress.EntityData.Leafs.Append("generate-set-info", types.YLeaf{"GenerateSetInfo", aggregateAddress.GenerateSetInfo})
    aggregateAddress.EntityData.Leafs.Append("generate-confederation-set-info", types.YLeaf{"GenerateConfederationSetInfo", aggregateAddress.GenerateConfederationSetInfo})
    aggregateAddress.EntityData.Leafs.Append("summary-only", types.YLeaf{"SummaryOnly", aggregateAddress.SummaryOnly})
    aggregateAddress.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", aggregateAddress.RoutePolicyName})

    aggregateAddress.EntityData.YListKeys = []string {"AggregateAddr", "AggregatePrefix"}

    return &(aggregateAddress.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups
// Table of multiple ORR groups
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Optimal Route Reffelctor group. Each such group is equivalent to an IGP
    // area. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup.
    OptimalRouteReflectorGroup []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup
}

func (optimalRouteReflectorGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups) GetEntityData() *types.CommonEntityData {
    optimalRouteReflectorGroups.EntityData.YFilter = optimalRouteReflectorGroups.YFilter
    optimalRouteReflectorGroups.EntityData.YangName = "optimal-route-reflector-groups"
    optimalRouteReflectorGroups.EntityData.BundleName = "cisco_ios_xr"
    optimalRouteReflectorGroups.EntityData.ParentYangName = "global-af"
    optimalRouteReflectorGroups.EntityData.SegmentPath = "optimal-route-reflector-groups"
    optimalRouteReflectorGroups.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + optimalRouteReflectorGroups.EntityData.SegmentPath
    optimalRouteReflectorGroups.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optimalRouteReflectorGroups.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optimalRouteReflectorGroups.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optimalRouteReflectorGroups.EntityData.Children = types.NewOrderedMap()
    optimalRouteReflectorGroups.EntityData.Children.Append("optimal-route-reflector-group", types.YChild{"OptimalRouteReflectorGroup", nil})
    for i := range optimalRouteReflectorGroups.OptimalRouteReflectorGroup {
        optimalRouteReflectorGroups.EntityData.Children.Append(types.GetSegmentPath(optimalRouteReflectorGroups.OptimalRouteReflectorGroup[i]), types.YChild{"OptimalRouteReflectorGroup", optimalRouteReflectorGroups.OptimalRouteReflectorGroup[i]})
    }
    optimalRouteReflectorGroups.EntityData.Leafs = types.NewOrderedMap()

    optimalRouteReflectorGroups.EntityData.YListKeys = []string {}

    return &(optimalRouteReflectorGroups.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup
// Optimal Route Reffelctor group. Each such group
// is equivalent to an IGP area
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Name of the ORR group. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    GroupName interface{}

    // Primary Root for the ORR group. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    PrimaryRootAddress interface{}

    // Secondary Root for the ORR group. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    SecondaryRootAddress interface{}

    // Tertiary Root for the ORR group. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    TertiaryRootAddress interface{}
}

func (optimalRouteReflectorGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OptimalRouteReflectorGroups_OptimalRouteReflectorGroup) GetEntityData() *types.CommonEntityData {
    optimalRouteReflectorGroup.EntityData.YFilter = optimalRouteReflectorGroup.YFilter
    optimalRouteReflectorGroup.EntityData.YangName = "optimal-route-reflector-group"
    optimalRouteReflectorGroup.EntityData.BundleName = "cisco_ios_xr"
    optimalRouteReflectorGroup.EntityData.ParentYangName = "optimal-route-reflector-groups"
    optimalRouteReflectorGroup.EntityData.SegmentPath = "optimal-route-reflector-group" + types.AddKeyToken(optimalRouteReflectorGroup.GroupName, "group-name")
    optimalRouteReflectorGroup.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/optimal-route-reflector-groups/" + optimalRouteReflectorGroup.EntityData.SegmentPath
    optimalRouteReflectorGroup.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    optimalRouteReflectorGroup.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    optimalRouteReflectorGroup.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    optimalRouteReflectorGroup.EntityData.Children = types.NewOrderedMap()
    optimalRouteReflectorGroup.EntityData.Leafs = types.NewOrderedMap()
    optimalRouteReflectorGroup.EntityData.Leafs.Append("group-name", types.YLeaf{"GroupName", optimalRouteReflectorGroup.GroupName})
    optimalRouteReflectorGroup.EntityData.Leafs.Append("primary-root-address", types.YLeaf{"PrimaryRootAddress", optimalRouteReflectorGroup.PrimaryRootAddress})
    optimalRouteReflectorGroup.EntityData.Leafs.Append("secondary-root-address", types.YLeaf{"SecondaryRootAddress", optimalRouteReflectorGroup.SecondaryRootAddress})
    optimalRouteReflectorGroup.EntityData.Leafs.Append("tertiary-root-address", types.YLeaf{"TertiaryRootAddress", optimalRouteReflectorGroup.TertiaryRootAddress})

    optimalRouteReflectorGroup.EntityData.YListKeys = []string {"GroupName"}

    return &(optimalRouteReflectorGroup.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening
// Enable route-flap dampening
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Half-life time for the penalty (minutes). The type is interface{} with
    // range: 1..45. Units are minute.
    HalfLife interface{}

    // Value to start reusing a route. The type is interface{} with range:
    // 1..20000. This attribute is mandatory.
    ReuseThreshold interface{}

    // Value to start suppressing a route. The type is interface{} with range:
    // 1..20000. This attribute is mandatory.
    SuppressThreshold interface{}

    // Maximum duration to suppress a stable route (seconds). The type is
    // interface{} with range: 1..255. This attribute is mandatory. Units are
    // second.
    SuppressTime interface{}

    // Route policy to specify criteria for dampening. This cannot be specified if
    // any other parameters are specified. The type is string.
    RoutePolicyName interface{}
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetEntityData() *types.CommonEntityData {
    dampening.EntityData.YFilter = dampening.YFilter
    dampening.EntityData.YangName = "dampening"
    dampening.EntityData.BundleName = "cisco_ios_xr"
    dampening.EntityData.ParentYangName = "global-af"
    dampening.EntityData.SegmentPath = "dampening"
    dampening.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + dampening.EntityData.SegmentPath
    dampening.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    dampening.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    dampening.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    dampening.EntityData.Children = types.NewOrderedMap()
    dampening.EntityData.Leafs = types.NewOrderedMap()
    dampening.EntityData.Leafs.Append("half-life", types.YLeaf{"HalfLife", dampening.HalfLife})
    dampening.EntityData.Leafs.Append("reuse-threshold", types.YLeaf{"ReuseThreshold", dampening.ReuseThreshold})
    dampening.EntityData.Leafs.Append("suppress-threshold", types.YLeaf{"SuppressThreshold", dampening.SuppressThreshold})
    dampening.EntityData.Leafs.Append("suppress-time", types.YLeaf{"SuppressTime", dampening.SuppressTime})
    dampening.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", dampening.RoutePolicyName})

    dampening.EntityData.YListKeys = []string {}

    return &(dampening.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes
// Redistribute RIP routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetEntityData() *types.CommonEntityData {
    ripRoutes.EntityData.YFilter = ripRoutes.YFilter
    ripRoutes.EntityData.YangName = "rip-routes"
    ripRoutes.EntityData.BundleName = "cisco_ios_xr"
    ripRoutes.EntityData.ParentYangName = "global-af"
    ripRoutes.EntityData.SegmentPath = "rip-routes"
    ripRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + ripRoutes.EntityData.SegmentPath
    ripRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ripRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ripRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ripRoutes.EntityData.Children = types.NewOrderedMap()
    ripRoutes.EntityData.Leafs = types.NewOrderedMap()
    ripRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", ripRoutes.DefaultMetric})
    ripRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", ripRoutes.RoutePolicyName})
    ripRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", ripRoutes.NotUsed})

    ripRoutes.EntityData.YListKeys = []string {}

    return &(ripRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes
// Redistribute lisp routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetEntityData() *types.CommonEntityData {
    lispRoutes.EntityData.YFilter = lispRoutes.YFilter
    lispRoutes.EntityData.YangName = "lisp-routes"
    lispRoutes.EntityData.BundleName = "cisco_ios_xr"
    lispRoutes.EntityData.ParentYangName = "global-af"
    lispRoutes.EntityData.SegmentPath = "lisp-routes"
    lispRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + lispRoutes.EntityData.SegmentPath
    lispRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    lispRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    lispRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    lispRoutes.EntityData.Children = types.NewOrderedMap()
    lispRoutes.EntityData.Leafs = types.NewOrderedMap()
    lispRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", lispRoutes.DefaultMetric})
    lispRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", lispRoutes.RoutePolicyName})

    lispRoutes.EntityData.YListKeys = []string {}

    return &(lispRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes
// Redistribute static routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetEntityData() *types.CommonEntityData {
    staticRoutes.EntityData.YFilter = staticRoutes.YFilter
    staticRoutes.EntityData.YangName = "static-routes"
    staticRoutes.EntityData.BundleName = "cisco_ios_xr"
    staticRoutes.EntityData.ParentYangName = "global-af"
    staticRoutes.EntityData.SegmentPath = "static-routes"
    staticRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + staticRoutes.EntityData.SegmentPath
    staticRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    staticRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    staticRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    staticRoutes.EntityData.Children = types.NewOrderedMap()
    staticRoutes.EntityData.Leafs = types.NewOrderedMap()
    staticRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", staticRoutes.DefaultMetric})
    staticRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", staticRoutes.RoutePolicyName})
    staticRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", staticRoutes.NotUsed})

    staticRoutes.EntityData.YListKeys = []string {}

    return &(staticRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance
// Define an administrative distance
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Distance for routes external to the AS. The type is interface{} with range:
    // 1..255. The default value is 20.
    ExternalRoutes interface{}

    // Distance for routes internal to the AS. The type is interface{} with range:
    // 1..255. The default value is 200.
    InternalRoutes interface{}

    // Distance for local routes. The type is interface{} with range: 1..255. The
    // default value is 200.
    LocalRoutes interface{}
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetEntityData() *types.CommonEntityData {
    distance.EntityData.YFilter = distance.YFilter
    distance.EntityData.YangName = "distance"
    distance.EntityData.BundleName = "cisco_ios_xr"
    distance.EntityData.ParentYangName = "global-af"
    distance.EntityData.SegmentPath = "distance"
    distance.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + distance.EntityData.SegmentPath
    distance.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    distance.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    distance.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    distance.EntityData.Children = types.NewOrderedMap()
    distance.EntityData.Leafs = types.NewOrderedMap()
    distance.EntityData.Leafs.Append("external-routes", types.YLeaf{"ExternalRoutes", distance.ExternalRoutes})
    distance.EntityData.Leafs.Append("internal-routes", types.YLeaf{"InternalRoutes", distance.InternalRoutes})
    distance.EntityData.Leafs.Append("local-routes", types.YLeaf{"LocalRoutes", distance.LocalRoutes})

    distance.EntityData.YListKeys = []string {}

    return &(distance.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes
// Redistribute information for Application routes.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute application routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute.
    ApplicationRoute []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetEntityData() *types.CommonEntityData {
    applicationRoutes.EntityData.YFilter = applicationRoutes.YFilter
    applicationRoutes.EntityData.YangName = "application-routes"
    applicationRoutes.EntityData.BundleName = "cisco_ios_xr"
    applicationRoutes.EntityData.ParentYangName = "global-af"
    applicationRoutes.EntityData.SegmentPath = "application-routes"
    applicationRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + applicationRoutes.EntityData.SegmentPath
    applicationRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationRoutes.EntityData.Children = types.NewOrderedMap()
    applicationRoutes.EntityData.Children.Append("application-route", types.YChild{"ApplicationRoute", nil})
    for i := range applicationRoutes.ApplicationRoute {
        applicationRoutes.EntityData.Children.Append(types.GetSegmentPath(applicationRoutes.ApplicationRoute[i]), types.YChild{"ApplicationRoute", applicationRoutes.ApplicationRoute[i]})
    }
    applicationRoutes.EntityData.Leafs = types.NewOrderedMap()

    applicationRoutes.EntityData.YListKeys = []string {}

    return &(applicationRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute
// Redistribute application routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. OnePK application name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetEntityData() *types.CommonEntityData {
    applicationRoute.EntityData.YFilter = applicationRoute.YFilter
    applicationRoute.EntityData.YangName = "application-route"
    applicationRoute.EntityData.BundleName = "cisco_ios_xr"
    applicationRoute.EntityData.ParentYangName = "application-routes"
    applicationRoute.EntityData.SegmentPath = "application-route" + types.AddKeyToken(applicationRoute.InstanceName, "instance-name")
    applicationRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/application-routes/" + applicationRoute.EntityData.SegmentPath
    applicationRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    applicationRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    applicationRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    applicationRoute.EntityData.Children = types.NewOrderedMap()
    applicationRoute.EntityData.Leafs = types.NewOrderedMap()
    applicationRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", applicationRoute.InstanceName})
    applicationRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", applicationRoute.DefaultMetric})
    applicationRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", applicationRoute.RoutePolicyName})
    applicationRoute.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", applicationRoute.NotUsed})

    applicationRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(applicationRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode
// BGP 6PE/MPLS-VPN label allocation mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Label allocation mode: per-ce  Set per CE label mode, per-vrf Set per VRF
    // label mode, per-prefix Set per Prefix label mode (for MPLS-VPN only). The
    // type is string.
    LabelAllocationMode interface{}

    // Label mode route policy name. The type is string.
    RoutePolicyName interface{}
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetEntityData() *types.CommonEntityData {
    labelMode.EntityData.YFilter = labelMode.YFilter
    labelMode.EntityData.YangName = "label-mode"
    labelMode.EntityData.BundleName = "cisco_ios_xr"
    labelMode.EntityData.ParentYangName = "global-af"
    labelMode.EntityData.SegmentPath = "label-mode"
    labelMode.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + labelMode.EntityData.SegmentPath
    labelMode.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    labelMode.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    labelMode.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    labelMode.EntityData.Children = types.NewOrderedMap()
    labelMode.EntityData.Leafs = types.NewOrderedMap()
    labelMode.EntityData.Leafs.Append("label-allocation-mode", types.YLeaf{"LabelAllocationMode", labelMode.LabelAllocationMode})
    labelMode.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", labelMode.RoutePolicyName})

    labelMode.EntityData.YListKeys = []string {}

    return &(labelMode.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes
// Redistribute information for EIGRP routes.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute EIGRP routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute.
    EigrpRoute []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetEntityData() *types.CommonEntityData {
    eigrpRoutes.EntityData.YFilter = eigrpRoutes.YFilter
    eigrpRoutes.EntityData.YangName = "eigrp-routes"
    eigrpRoutes.EntityData.BundleName = "cisco_ios_xr"
    eigrpRoutes.EntityData.ParentYangName = "global-af"
    eigrpRoutes.EntityData.SegmentPath = "eigrp-routes"
    eigrpRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + eigrpRoutes.EntityData.SegmentPath
    eigrpRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrpRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrpRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrpRoutes.EntityData.Children = types.NewOrderedMap()
    eigrpRoutes.EntityData.Children.Append("eigrp-route", types.YChild{"EigrpRoute", nil})
    for i := range eigrpRoutes.EigrpRoute {
        eigrpRoutes.EntityData.Children.Append(types.GetSegmentPath(eigrpRoutes.EigrpRoute[i]), types.YChild{"EigrpRoute", eigrpRoutes.EigrpRoute[i]})
    }
    eigrpRoutes.EntityData.Leafs = types.NewOrderedMap()

    eigrpRoutes.EntityData.YListKeys = []string {}

    return &(eigrpRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute
// Redistribute EIGRP routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. EIGRP router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes,
    // Logical combinations permitted. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetEntityData() *types.CommonEntityData {
    eigrpRoute.EntityData.YFilter = eigrpRoute.YFilter
    eigrpRoute.EntityData.YangName = "eigrp-route"
    eigrpRoute.EntityData.BundleName = "cisco_ios_xr"
    eigrpRoute.EntityData.ParentYangName = "eigrp-routes"
    eigrpRoute.EntityData.SegmentPath = "eigrp-route" + types.AddKeyToken(eigrpRoute.InstanceName, "instance-name")
    eigrpRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/eigrp-routes/" + eigrpRoute.EntityData.SegmentPath
    eigrpRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    eigrpRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    eigrpRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    eigrpRoute.EntityData.Children = types.NewOrderedMap()
    eigrpRoute.EntityData.Leafs = types.NewOrderedMap()
    eigrpRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", eigrpRoute.InstanceName})
    eigrpRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", eigrpRoute.DefaultMetric})
    eigrpRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", eigrpRoute.RoutePolicyName})
    eigrpRoute.EntityData.Leafs.Append("redist-type", types.YLeaf{"RedistType", eigrpRoute.RedistType})

    eigrpRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(eigrpRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks
// Specify a network to announce via BGP
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Sourced network configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork.
    SourcedNetwork []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetEntityData() *types.CommonEntityData {
    sourcedNetworks.EntityData.YFilter = sourcedNetworks.YFilter
    sourcedNetworks.EntityData.YangName = "sourced-networks"
    sourcedNetworks.EntityData.BundleName = "cisco_ios_xr"
    sourcedNetworks.EntityData.ParentYangName = "global-af"
    sourcedNetworks.EntityData.SegmentPath = "sourced-networks"
    sourcedNetworks.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + sourcedNetworks.EntityData.SegmentPath
    sourcedNetworks.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourcedNetworks.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourcedNetworks.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourcedNetworks.EntityData.Children = types.NewOrderedMap()
    sourcedNetworks.EntityData.Children.Append("sourced-network", types.YChild{"SourcedNetwork", nil})
    for i := range sourcedNetworks.SourcedNetwork {
        sourcedNetworks.EntityData.Children.Append(types.GetSegmentPath(sourcedNetworks.SourcedNetwork[i]), types.YChild{"SourcedNetwork", sourcedNetworks.SourcedNetwork[i]})
    }
    sourcedNetworks.EntityData.Leafs = types.NewOrderedMap()

    sourcedNetworks.EntityData.YListKeys = []string {}

    return &(sourcedNetworks.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork
// Sourced network configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Network in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NetworkAddr interface{}

    // This attribute is a key. Network in prefix/length format (prefix part). The
    // type is interface{} with range: 0..128.
    NetworkPrefix interface{}

    // Specify a BGP backdoor route, default is FALSE. The type is bool.
    Backdoor interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetEntityData() *types.CommonEntityData {
    sourcedNetwork.EntityData.YFilter = sourcedNetwork.YFilter
    sourcedNetwork.EntityData.YangName = "sourced-network"
    sourcedNetwork.EntityData.BundleName = "cisco_ios_xr"
    sourcedNetwork.EntityData.ParentYangName = "sourced-networks"
    sourcedNetwork.EntityData.SegmentPath = "sourced-network" + types.AddKeyToken(sourcedNetwork.NetworkAddr, "network-addr") + types.AddKeyToken(sourcedNetwork.NetworkPrefix, "network-prefix")
    sourcedNetwork.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/sourced-networks/" + sourcedNetwork.EntityData.SegmentPath
    sourcedNetwork.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sourcedNetwork.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sourcedNetwork.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sourcedNetwork.EntityData.Children = types.NewOrderedMap()
    sourcedNetwork.EntityData.Leafs = types.NewOrderedMap()
    sourcedNetwork.EntityData.Leafs.Append("network-addr", types.YLeaf{"NetworkAddr", sourcedNetwork.NetworkAddr})
    sourcedNetwork.EntityData.Leafs.Append("network-prefix", types.YLeaf{"NetworkPrefix", sourcedNetwork.NetworkPrefix})
    sourcedNetwork.EntityData.Leafs.Append("backdoor", types.YLeaf{"Backdoor", sourcedNetwork.Backdoor})
    sourcedNetwork.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", sourcedNetwork.RoutePolicyName})

    sourcedNetwork.EntityData.YListKeys = []string {"NetworkAddr", "NetworkPrefix"}

    return &(sourcedNetwork.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes
// Redistribute connected routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetEntityData() *types.CommonEntityData {
    connectedRoutes.EntityData.YFilter = connectedRoutes.YFilter
    connectedRoutes.EntityData.YangName = "connected-routes"
    connectedRoutes.EntityData.BundleName = "cisco_ios_xr"
    connectedRoutes.EntityData.ParentYangName = "global-af"
    connectedRoutes.EntityData.SegmentPath = "connected-routes"
    connectedRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + connectedRoutes.EntityData.SegmentPath
    connectedRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    connectedRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    connectedRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    connectedRoutes.EntityData.Children = types.NewOrderedMap()
    connectedRoutes.EntityData.Leafs = types.NewOrderedMap()
    connectedRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", connectedRoutes.DefaultMetric})
    connectedRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", connectedRoutes.RoutePolicyName})
    connectedRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", connectedRoutes.NotUsed})

    connectedRoutes.EntityData.YListKeys = []string {}

    return &(connectedRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel
// Label allocation policy
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Whether all nets should be labeled, default is FALSE. The type is bool.
    All interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Allocate label for unlabeled paths too. The type is bool.
    UnLabeledPath interface{}
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetEntityData() *types.CommonEntityData {
    allocateLabel.EntityData.YFilter = allocateLabel.YFilter
    allocateLabel.EntityData.YangName = "allocate-label"
    allocateLabel.EntityData.BundleName = "cisco_ios_xr"
    allocateLabel.EntityData.ParentYangName = "global-af"
    allocateLabel.EntityData.SegmentPath = "allocate-label"
    allocateLabel.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + allocateLabel.EntityData.SegmentPath
    allocateLabel.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    allocateLabel.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    allocateLabel.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    allocateLabel.EntityData.Children = types.NewOrderedMap()
    allocateLabel.EntityData.Leafs = types.NewOrderedMap()
    allocateLabel.EntityData.Leafs.Append("all", types.YLeaf{"All", allocateLabel.All})
    allocateLabel.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", allocateLabel.RoutePolicyName})
    allocateLabel.EntityData.Leafs.Append("un-labeled-path", types.YLeaf{"UnLabeledPath", allocateLabel.UnLabeledPath})

    allocateLabel.EntityData.YListKeys = []string {}

    return &(allocateLabel.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection
// Configure additional paths selection
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Enable/disable selection . The type is BgpAfAdditionalPathsCfg.
    Selection interface{}

    // Route policy for selection. The type is string.
    RoutePolicyName interface{}
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetEntityData() *types.CommonEntityData {
    additionalPathsSelection.EntityData.YFilter = additionalPathsSelection.YFilter
    additionalPathsSelection.EntityData.YangName = "additional-paths-selection"
    additionalPathsSelection.EntityData.BundleName = "cisco_ios_xr"
    additionalPathsSelection.EntityData.ParentYangName = "global-af"
    additionalPathsSelection.EntityData.SegmentPath = "additional-paths-selection"
    additionalPathsSelection.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + additionalPathsSelection.EntityData.SegmentPath
    additionalPathsSelection.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    additionalPathsSelection.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    additionalPathsSelection.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    additionalPathsSelection.EntityData.Children = types.NewOrderedMap()
    additionalPathsSelection.EntityData.Leafs = types.NewOrderedMap()
    additionalPathsSelection.EntityData.Leafs.Append("selection", types.YLeaf{"Selection", additionalPathsSelection.Selection})
    additionalPathsSelection.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", additionalPathsSelection.RoutePolicyName})

    additionalPathsSelection.EntityData.YListKeys = []string {}

    return &(additionalPathsSelection.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes
// Redistribute information for OSPF routes.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Redistribute OSPF routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute.
    OspfRoute []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetEntityData() *types.CommonEntityData {
    ospfRoutes.EntityData.YFilter = ospfRoutes.YFilter
    ospfRoutes.EntityData.YangName = "ospf-routes"
    ospfRoutes.EntityData.BundleName = "cisco_ios_xr"
    ospfRoutes.EntityData.ParentYangName = "global-af"
    ospfRoutes.EntityData.SegmentPath = "ospf-routes"
    ospfRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + ospfRoutes.EntityData.SegmentPath
    ospfRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfRoutes.EntityData.Children = types.NewOrderedMap()
    ospfRoutes.EntityData.Children.Append("ospf-route", types.YChild{"OspfRoute", nil})
    for i := range ospfRoutes.OspfRoute {
        ospfRoutes.EntityData.Children.Append(types.GetSegmentPath(ospfRoutes.OspfRoute[i]), types.YChild{"OspfRoute", ospfRoutes.OspfRoute[i]})
    }
    ospfRoutes.EntityData.Leafs = types.NewOrderedMap()

    ospfRoutes.EntityData.YListKeys = []string {}

    return &(ospfRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute
// Redistribute OSPF routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. OSPF router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes of type
    // 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1,
    // 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA
    // external routes.  Logical combinations permitted. The type is string with
    // pattern: [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetEntityData() *types.CommonEntityData {
    ospfRoute.EntityData.YFilter = ospfRoute.YFilter
    ospfRoute.EntityData.YangName = "ospf-route"
    ospfRoute.EntityData.BundleName = "cisco_ios_xr"
    ospfRoute.EntityData.ParentYangName = "ospf-routes"
    ospfRoute.EntityData.SegmentPath = "ospf-route" + types.AddKeyToken(ospfRoute.InstanceName, "instance-name")
    ospfRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/ospf-routes/" + ospfRoute.EntityData.SegmentPath
    ospfRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    ospfRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    ospfRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    ospfRoute.EntityData.Children = types.NewOrderedMap()
    ospfRoute.EntityData.Leafs = types.NewOrderedMap()
    ospfRoute.EntityData.Leafs.Append("instance-name", types.YLeaf{"InstanceName", ospfRoute.InstanceName})
    ospfRoute.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", ospfRoute.DefaultMetric})
    ospfRoute.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", ospfRoute.RoutePolicyName})
    ospfRoute.EntityData.Leafs.Append("redist-type", types.YLeaf{"RedistType", ospfRoute.RedistType})

    ospfRoute.EntityData.YListKeys = []string {"InstanceName"}

    return &(ospfRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes
// Redistribute mobile routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetEntityData() *types.CommonEntityData {
    mobileRoutes.EntityData.YFilter = mobileRoutes.YFilter
    mobileRoutes.EntityData.YangName = "mobile-routes"
    mobileRoutes.EntityData.BundleName = "cisco_ios_xr"
    mobileRoutes.EntityData.ParentYangName = "global-af"
    mobileRoutes.EntityData.SegmentPath = "mobile-routes"
    mobileRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + mobileRoutes.EntityData.SegmentPath
    mobileRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mobileRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mobileRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mobileRoutes.EntityData.Children = types.NewOrderedMap()
    mobileRoutes.EntityData.Leafs = types.NewOrderedMap()
    mobileRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", mobileRoutes.DefaultMetric})
    mobileRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", mobileRoutes.RoutePolicyName})
    mobileRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", mobileRoutes.NotUsed})

    mobileRoutes.EntityData.YListKeys = []string {}

    return &(mobileRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes
// Redistribute subscriber routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YPresence bool

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetEntityData() *types.CommonEntityData {
    subscriberRoutes.EntityData.YFilter = subscriberRoutes.YFilter
    subscriberRoutes.EntityData.YangName = "subscriber-routes"
    subscriberRoutes.EntityData.BundleName = "cisco_ios_xr"
    subscriberRoutes.EntityData.ParentYangName = "global-af"
    subscriberRoutes.EntityData.SegmentPath = "subscriber-routes"
    subscriberRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/global-afs/global-af/" + subscriberRoutes.EntityData.SegmentPath
    subscriberRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    subscriberRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    subscriberRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    subscriberRoutes.EntityData.Children = types.NewOrderedMap()
    subscriberRoutes.EntityData.Leafs = types.NewOrderedMap()
    subscriberRoutes.EntityData.Leafs.Append("default-metric", types.YLeaf{"DefaultMetric", subscriberRoutes.DefaultMetric})
    subscriberRoutes.EntityData.Leafs.Append("route-policy-name", types.YLeaf{"RoutePolicyName", subscriberRoutes.RoutePolicyName})
    subscriberRoutes.EntityData.Leafs.Append("not-used", types.YLeaf{"NotUsed", subscriberRoutes.NotUsed})

    subscriberRoutes.EntityData.YListKeys = []string {}

    return &(subscriberRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes
// RPKI static route configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // RPKI static route. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute.
    RpkiStaticRoute []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetEntityData() *types.CommonEntityData {
    rpkiStaticRoutes.EntityData.YFilter = rpkiStaticRoutes.YFilter
    rpkiStaticRoutes.EntityData.YangName = "rpki-static-routes"
    rpkiStaticRoutes.EntityData.BundleName = "cisco_ios_xr"
    rpkiStaticRoutes.EntityData.ParentYangName = "global"
    rpkiStaticRoutes.EntityData.SegmentPath = "rpki-static-routes"
    rpkiStaticRoutes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + rpkiStaticRoutes.EntityData.SegmentPath
    rpkiStaticRoutes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpkiStaticRoutes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpkiStaticRoutes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpkiStaticRoutes.EntityData.Children = types.NewOrderedMap()
    rpkiStaticRoutes.EntityData.Children.Append("rpki-static-route", types.YChild{"RpkiStaticRoute", nil})
    for i := range rpkiStaticRoutes.RpkiStaticRoute {
        rpkiStaticRoutes.EntityData.Children.Append(types.GetSegmentPath(rpkiStaticRoutes.RpkiStaticRoute[i]), types.YChild{"RpkiStaticRoute", rpkiStaticRoutes.RpkiStaticRoute[i]})
    }
    rpkiStaticRoutes.EntityData.Leafs = types.NewOrderedMap()

    rpkiStaticRoutes.EntityData.YListKeys = []string {}

    return &(rpkiStaticRoutes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute
// RPKI static route
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Address. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Address interface{}

    // This attribute is a key. Minimum Prefix Length. The type is interface{}
    // with range: 0..128.
    Minimum interface{}

    // This attribute is a key. Maximum Prefix Length. The type is interface{}
    // with range: 1..128.
    Maximum interface{}

    // This attribute is a key. AS Number. The type is interface{} with range:
    // 1..4294967295.
    As interface{}
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetEntityData() *types.CommonEntityData {
    rpkiStaticRoute.EntityData.YFilter = rpkiStaticRoute.YFilter
    rpkiStaticRoute.EntityData.YangName = "rpki-static-route"
    rpkiStaticRoute.EntityData.BundleName = "cisco_ios_xr"
    rpkiStaticRoute.EntityData.ParentYangName = "rpki-static-routes"
    rpkiStaticRoute.EntityData.SegmentPath = "rpki-static-route" + types.AddKeyToken(rpkiStaticRoute.Address, "address") + types.AddKeyToken(rpkiStaticRoute.Minimum, "minimum") + types.AddKeyToken(rpkiStaticRoute.Maximum, "maximum") + types.AddKeyToken(rpkiStaticRoute.As, "as")
    rpkiStaticRoute.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/rpki-static-routes/" + rpkiStaticRoute.EntityData.SegmentPath
    rpkiStaticRoute.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    rpkiStaticRoute.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    rpkiStaticRoute.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    rpkiStaticRoute.EntityData.Children = types.NewOrderedMap()
    rpkiStaticRoute.EntityData.Leafs = types.NewOrderedMap()
    rpkiStaticRoute.EntityData.Leafs.Append("address", types.YLeaf{"Address", rpkiStaticRoute.Address})
    rpkiStaticRoute.EntityData.Leafs.Append("minimum", types.YLeaf{"Minimum", rpkiStaticRoute.Minimum})
    rpkiStaticRoute.EntityData.Leafs.Append("maximum", types.YLeaf{"Maximum", rpkiStaticRoute.Maximum})
    rpkiStaticRoute.EntityData.Leafs.Append("as", types.YLeaf{"As", rpkiStaticRoute.As})

    rpkiStaticRoute.EntityData.YListKeys = []string {"Address", "Minimum", "Maximum", "As"}

    return &(rpkiStaticRoute.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces
// Configure list of MPLS activated interfaces
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Configure a MPLS activated interface. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface.
    MplsActivatedInterface []*Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetEntityData() *types.CommonEntityData {
    mplsActivatedInterfaces.EntityData.YFilter = mplsActivatedInterfaces.YFilter
    mplsActivatedInterfaces.EntityData.YangName = "mpls-activated-interfaces"
    mplsActivatedInterfaces.EntityData.BundleName = "cisco_ios_xr"
    mplsActivatedInterfaces.EntityData.ParentYangName = "global"
    mplsActivatedInterfaces.EntityData.SegmentPath = "mpls-activated-interfaces"
    mplsActivatedInterfaces.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + mplsActivatedInterfaces.EntityData.SegmentPath
    mplsActivatedInterfaces.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsActivatedInterfaces.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsActivatedInterfaces.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsActivatedInterfaces.EntityData.Children = types.NewOrderedMap()
    mplsActivatedInterfaces.EntityData.Children.Append("mpls-activated-interface", types.YChild{"MplsActivatedInterface", nil})
    for i := range mplsActivatedInterfaces.MplsActivatedInterface {
        mplsActivatedInterfaces.EntityData.Children.Append(types.GetSegmentPath(mplsActivatedInterfaces.MplsActivatedInterface[i]), types.YChild{"MplsActivatedInterface", mplsActivatedInterfaces.MplsActivatedInterface[i]})
    }
    mplsActivatedInterfaces.EntityData.Leafs = types.NewOrderedMap()

    mplsActivatedInterfaces.EntityData.YListKeys = []string {}

    return &(mplsActivatedInterfaces.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface
// Configure a MPLS activated interface
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    InterfaceName interface{}
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetEntityData() *types.CommonEntityData {
    mplsActivatedInterface.EntityData.YFilter = mplsActivatedInterface.YFilter
    mplsActivatedInterface.EntityData.YangName = "mpls-activated-interface"
    mplsActivatedInterface.EntityData.BundleName = "cisco_ios_xr"
    mplsActivatedInterface.EntityData.ParentYangName = "mpls-activated-interfaces"
    mplsActivatedInterface.EntityData.SegmentPath = "mpls-activated-interface" + types.AddKeyToken(mplsActivatedInterface.InterfaceName, "interface-name")
    mplsActivatedInterface.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/mpls-activated-interfaces/" + mplsActivatedInterface.EntityData.SegmentPath
    mplsActivatedInterface.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    mplsActivatedInterface.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    mplsActivatedInterface.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    mplsActivatedInterface.EntityData.Children = types.NewOrderedMap()
    mplsActivatedInterface.EntityData.Leafs = types.NewOrderedMap()
    mplsActivatedInterface.EntityData.Leafs.Append("interface-name", types.YLeaf{"InterfaceName", mplsActivatedInterface.InterfaceName})

    mplsActivatedInterface.EntityData.YListKeys = []string {"InterfaceName"}

    return &(mplsActivatedInterface.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers
// Adjust routing timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Keepalive interval (seconds). The type is interface{} with range: 0..65535.
    // Units are second. The default value is 60.
    Keepalive interface{}

    // Hold time (seconds).  Specify 0 to disable keepalives/hold time. The type
    // is interface{} with range: 0..65535. Units are second. The default value is
    // 180.
    HoldTime interface{}

    // Minimum acceptable hold time (seconds). Specify 0 to disable
    // keepalives/hold time. The type is interface{} with range: 0..65535. Units
    // are second. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetEntityData() *types.CommonEntityData {
    globalTimers.EntityData.YFilter = globalTimers.YFilter
    globalTimers.EntityData.YangName = "global-timers"
    globalTimers.EntityData.BundleName = "cisco_ios_xr"
    globalTimers.EntityData.ParentYangName = "global"
    globalTimers.EntityData.SegmentPath = "global-timers"
    globalTimers.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + globalTimers.EntityData.SegmentPath
    globalTimers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    globalTimers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    globalTimers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    globalTimers.EntityData.Children = types.NewOrderedMap()
    globalTimers.EntityData.Leafs = types.NewOrderedMap()
    globalTimers.EntityData.Leafs.Append("keepalive", types.YLeaf{"Keepalive", globalTimers.Keepalive})
    globalTimers.EntityData.Leafs.Append("hold-time", types.YLeaf{"HoldTime", globalTimers.HoldTime})
    globalTimers.EntityData.Leafs.Append("min-accept-hold-time", types.YLeaf{"MinAcceptHoldTime", globalTimers.MinAcceptHoldTime})

    globalTimers.EntityData.YListKeys = []string {}

    return &(globalTimers.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd
// BFD configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    DetectionMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetEntityData() *types.CommonEntityData {
    bfd.EntityData.YFilter = bfd.YFilter
    bfd.EntityData.YangName = "bfd"
    bfd.EntityData.BundleName = "cisco_ios_xr"
    bfd.EntityData.ParentYangName = "global"
    bfd.EntityData.SegmentPath = "bfd"
    bfd.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + bfd.EntityData.SegmentPath
    bfd.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bfd.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bfd.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bfd.EntityData.Children = types.NewOrderedMap()
    bfd.EntityData.Leafs = types.NewOrderedMap()
    bfd.EntityData.Leafs.Append("detection-multiplier", types.YLeaf{"DetectionMultiplier", bfd.DetectionMultiplier})
    bfd.EntityData.Leafs.Append("interval", types.YLeaf{"Interval", bfd.Interval})

    bfd.EntityData.YListKeys = []string {}

    return &(bfd.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes
// set socket parameters
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP Write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetEntityData() *types.CommonEntityData {
    sendSocketBufferSizes.EntityData.YFilter = sendSocketBufferSizes.YFilter
    sendSocketBufferSizes.EntityData.YangName = "send-socket-buffer-sizes"
    sendSocketBufferSizes.EntityData.BundleName = "cisco_ios_xr"
    sendSocketBufferSizes.EntityData.ParentYangName = "global"
    sendSocketBufferSizes.EntityData.SegmentPath = "send-socket-buffer-sizes"
    sendSocketBufferSizes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + sendSocketBufferSizes.EntityData.SegmentPath
    sendSocketBufferSizes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    sendSocketBufferSizes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    sendSocketBufferSizes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    sendSocketBufferSizes.EntityData.Children = types.NewOrderedMap()
    sendSocketBufferSizes.EntityData.Leafs = types.NewOrderedMap()
    sendSocketBufferSizes.EntityData.Leafs.Append("socket-send-size", types.YLeaf{"SocketSendSize", sendSocketBufferSizes.SocketSendSize})
    sendSocketBufferSizes.EntityData.Leafs.Append("bgp-send-size", types.YLeaf{"BgpSendSize", sendSocketBufferSizes.BgpSendSize})

    sendSocketBufferSizes.EntityData.YListKeys = []string {}

    return &(sendSocketBufferSizes.EntityData)
}

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes
// Set socket and BGP receive buffer sizes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP Read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetEntityData() *types.CommonEntityData {
    receiveSocketBufferSizes.EntityData.YFilter = receiveSocketBufferSizes.YFilter
    receiveSocketBufferSizes.EntityData.YangName = "receive-socket-buffer-sizes"
    receiveSocketBufferSizes.EntityData.BundleName = "cisco_ios_xr"
    receiveSocketBufferSizes.EntityData.ParentYangName = "global"
    receiveSocketBufferSizes.EntityData.SegmentPath = "receive-socket-buffer-sizes"
    receiveSocketBufferSizes.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bgp/instance/instance-as/four-byte-as/default-vrf/global/" + receiveSocketBufferSizes.EntityData.SegmentPath
    receiveSocketBufferSizes.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    receiveSocketBufferSizes.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    receiveSocketBufferSizes.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    receiveSocketBufferSizes.EntityData.Children = types.NewOrderedMap()
    receiveSocketBufferSizes.EntityData.Leafs = types.NewOrderedMap()
    receiveSocketBufferSizes.EntityData.Leafs.Append("socket-receive-size", types.YLeaf{"SocketReceiveSize", receiveSocketBufferSizes.SocketReceiveSize})
    receiveSocketBufferSizes.EntityData.Leafs.Append("bgp-receive-size", types.YLeaf{"BgpReceiveSize", receiveSocketBufferSizes.BgpReceiveSize})

    receiveSocketBufferSizes.EntityData.YListKeys = []string {}

    return &(receiveSocketBufferSizes.EntityData)
}

// BmpServerAll
// bmp server all
type BmpServerAll struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Range in MegaBytes for the maximum buffer size of BMP message queue. The
    // maximum buf-size is 20% and default buf-size is 15% of the platform virtual
    // memory max-limit (aka rlimit). Please run show bgp process
    // performance-statistics to see the individual values. Unit is in Megabytes.
    // The type is interface{} with range: 1..4294967295. Units are megabyte.
    MaximumBufferSize interface{}

    // Enable Route Monitoring capability for the BMP servers. BGP update messages
    // messages will be regenrated with a table walk .
    RouteMonitoring BmpServerAll_RouteMonitoring
}

func (bmpServerAll *BmpServerAll) GetEntityData() *types.CommonEntityData {
    bmpServerAll.EntityData.YFilter = bmpServerAll.YFilter
    bmpServerAll.EntityData.YangName = "bmp-server-all"
    bmpServerAll.EntityData.BundleName = "cisco_ios_xr"
    bmpServerAll.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-cfg"
    bmpServerAll.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all"
    bmpServerAll.EntityData.AbsolutePath = bmpServerAll.EntityData.SegmentPath
    bmpServerAll.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpServerAll.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpServerAll.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpServerAll.EntityData.Children = types.NewOrderedMap()
    bmpServerAll.EntityData.Children.Append("route-monitoring", types.YChild{"RouteMonitoring", &bmpServerAll.RouteMonitoring})
    bmpServerAll.EntityData.Leafs = types.NewOrderedMap()
    bmpServerAll.EntityData.Leafs.Append("maximum-buffer-size", types.YLeaf{"MaximumBufferSize", bmpServerAll.MaximumBufferSize})

    bmpServerAll.EntityData.YListKeys = []string {}

    return &(bmpServerAll.EntityData)
}

// BmpServerAll_RouteMonitoring
// Enable Route Monitoring capability for the BMP
// servers.
// BGP update messages messages will be
// regenrated with a table walk
// 
type BmpServerAll_RouteMonitoring struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Specify if the routes packed in update messages should be before or after
    // the application of route-policy. The type is BmpPolicySelect.
    Policy interface{}

    // Specify if the routes should be picked up at inbound or outbound direction.
    // The type is BmpRouteDirection.
    Direction interface{}
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetEntityData() *types.CommonEntityData {
    routeMonitoring.EntityData.YFilter = routeMonitoring.YFilter
    routeMonitoring.EntityData.YangName = "route-monitoring"
    routeMonitoring.EntityData.BundleName = "cisco_ios_xr"
    routeMonitoring.EntityData.ParentYangName = "bmp-server-all"
    routeMonitoring.EntityData.SegmentPath = "route-monitoring"
    routeMonitoring.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all/" + routeMonitoring.EntityData.SegmentPath
    routeMonitoring.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    routeMonitoring.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    routeMonitoring.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    routeMonitoring.EntityData.Children = types.NewOrderedMap()
    routeMonitoring.EntityData.Leafs = types.NewOrderedMap()
    routeMonitoring.EntityData.Leafs.Append("policy", types.YLeaf{"Policy", routeMonitoring.Policy})
    routeMonitoring.EntityData.Leafs.Append("direction", types.YLeaf{"Direction", routeMonitoring.Direction})

    routeMonitoring.EntityData.YListKeys = []string {}

    return &(routeMonitoring.EntityData)
}

// BmpServers
// bmp servers
type BmpServers struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // A particular BMP server. The type is slice of BmpServers_BmpServer.
    BmpServer []*BmpServers_BmpServer
}

func (bmpServers *BmpServers) GetEntityData() *types.CommonEntityData {
    bmpServers.EntityData.YFilter = bmpServers.YFilter
    bmpServers.EntityData.YangName = "bmp-servers"
    bmpServers.EntityData.BundleName = "cisco_ios_xr"
    bmpServers.EntityData.ParentYangName = "Cisco-IOS-XR-ipv4-bgp-cfg"
    bmpServers.EntityData.SegmentPath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers"
    bmpServers.EntityData.AbsolutePath = bmpServers.EntityData.SegmentPath
    bmpServers.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpServers.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpServers.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpServers.EntityData.Children = types.NewOrderedMap()
    bmpServers.EntityData.Children.Append("bmp-server", types.YChild{"BmpServer", nil})
    for i := range bmpServers.BmpServer {
        bmpServers.EntityData.Children.Append(types.GetSegmentPath(bmpServers.BmpServer[i]), types.YChild{"BmpServer", bmpServers.BmpServer[i]})
    }
    bmpServers.EntityData.Leafs = types.NewOrderedMap()

    bmpServers.EntityData.YListKeys = []string {}

    return &(bmpServers.EntityData)
}

// BmpServers_BmpServer
// A particular BMP server
type BmpServers_BmpServer struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter
    YListKey string

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}

    // BMP Server Creation. The type is interface{}.
    Create interface{}

    // Range in MegaBytes for the maximum buffer size of BMP message queue. The
    // maximum buf-size is 20% and default buf-size is 15% of the platform virtual
    // memory max-limit (aka rlimit) . Please run show bgp process
    // performance-statistics to see the individual values. Unit is in Megabytes.
    // The type is interface{} with range: 1..4294967295. Units are megabyte.
    MaximumBufferSize interface{}

    // Initial connect delay in seconds in sending updates. The type is
    // interface{} with range: 1..3600. Units are second.
    InitialDelay interface{}

    // Delay in connecting to BMP Server after a flap had been detected. The type
    // is interface{} with range: 60..3600. Units are second.
    FlappingDelay interface{}

    // Stats reporting period for BMP server. The type is interface{} with range:
    // 1..3600. Units are second.
    StatusReportInterval interface{}

    // String to describe the BMP server. The type is string.
    Description interface{}

    // configure TCP maximum segment size. Default=16384. The type is interface{}
    // with range: 68..10000. Units are byte.
    BmptcpMaximumSegmentSize interface{}

    // configure TCP keep alives to be exchanged between client and server.
    // Default=1000. The type is interface{} with range: 0..7200. Units are
    // second.
    BmptcpKeepAlive interface{}

    // VRF for BMP Server. The type is string.
    Vrf interface{}

    // Shutdown connection to BMP server. The type is interface{}.
    Shutdown interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9._/-]+.
    UpdateSourceInterface interface{}

    // Initial refresh to generate BGP updates.
    InitialRefreshDelay BmpServers_BmpServer_InitialRefreshDelay

    // Configure Host Name/Address and Port for BMP Server.
    HostPort BmpServers_BmpServer_HostPort

    // TOS (Type Of Service).
    Tos BmpServers_BmpServer_Tos
}

func (bmpServer *BmpServers_BmpServer) GetEntityData() *types.CommonEntityData {
    bmpServer.EntityData.YFilter = bmpServer.YFilter
    bmpServer.EntityData.YangName = "bmp-server"
    bmpServer.EntityData.BundleName = "cisco_ios_xr"
    bmpServer.EntityData.ParentYangName = "bmp-servers"
    bmpServer.EntityData.SegmentPath = "bmp-server" + types.AddKeyToken(bmpServer.ServerId, "server-id")
    bmpServer.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers/" + bmpServer.EntityData.SegmentPath
    bmpServer.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    bmpServer.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    bmpServer.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    bmpServer.EntityData.Children = types.NewOrderedMap()
    bmpServer.EntityData.Children.Append("initial-refresh-delay", types.YChild{"InitialRefreshDelay", &bmpServer.InitialRefreshDelay})
    bmpServer.EntityData.Children.Append("host-port", types.YChild{"HostPort", &bmpServer.HostPort})
    bmpServer.EntityData.Children.Append("tos", types.YChild{"Tos", &bmpServer.Tos})
    bmpServer.EntityData.Leafs = types.NewOrderedMap()
    bmpServer.EntityData.Leafs.Append("server-id", types.YLeaf{"ServerId", bmpServer.ServerId})
    bmpServer.EntityData.Leafs.Append("create", types.YLeaf{"Create", bmpServer.Create})
    bmpServer.EntityData.Leafs.Append("maximum-buffer-size", types.YLeaf{"MaximumBufferSize", bmpServer.MaximumBufferSize})
    bmpServer.EntityData.Leafs.Append("initial-delay", types.YLeaf{"InitialDelay", bmpServer.InitialDelay})
    bmpServer.EntityData.Leafs.Append("flapping-delay", types.YLeaf{"FlappingDelay", bmpServer.FlappingDelay})
    bmpServer.EntityData.Leafs.Append("status-report-interval", types.YLeaf{"StatusReportInterval", bmpServer.StatusReportInterval})
    bmpServer.EntityData.Leafs.Append("description", types.YLeaf{"Description", bmpServer.Description})
    bmpServer.EntityData.Leafs.Append("bmptcp-maximum-segment-size", types.YLeaf{"BmptcpMaximumSegmentSize", bmpServer.BmptcpMaximumSegmentSize})
    bmpServer.EntityData.Leafs.Append("bmptcp-keep-alive", types.YLeaf{"BmptcpKeepAlive", bmpServer.BmptcpKeepAlive})
    bmpServer.EntityData.Leafs.Append("vrf", types.YLeaf{"Vrf", bmpServer.Vrf})
    bmpServer.EntityData.Leafs.Append("shutdown", types.YLeaf{"Shutdown", bmpServer.Shutdown})
    bmpServer.EntityData.Leafs.Append("update-source-interface", types.YLeaf{"UpdateSourceInterface", bmpServer.UpdateSourceInterface})

    bmpServer.EntityData.YListKeys = []string {"ServerId"}

    return &(bmpServer.EntityData)
}

// BmpServers_BmpServer_InitialRefreshDelay
// Initial refresh to generate BGP updates
type BmpServers_BmpServer_InitialRefreshDelay struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Delay in seconds before sending Refresh request to Peers. The type is
    // interface{} with range: 1..3600. Units are second.
    Delay interface{}

    // Spread over which to send initial Refresh request to Peers. The type is
    // interface{} with range: 1..3600.
    Spread interface{}

    // Skip Route Refresh request to Peers. The type is interface{}.
    Skip interface{}
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetEntityData() *types.CommonEntityData {
    initialRefreshDelay.EntityData.YFilter = initialRefreshDelay.YFilter
    initialRefreshDelay.EntityData.YangName = "initial-refresh-delay"
    initialRefreshDelay.EntityData.BundleName = "cisco_ios_xr"
    initialRefreshDelay.EntityData.ParentYangName = "bmp-server"
    initialRefreshDelay.EntityData.SegmentPath = "initial-refresh-delay"
    initialRefreshDelay.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers/bmp-server/" + initialRefreshDelay.EntityData.SegmentPath
    initialRefreshDelay.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    initialRefreshDelay.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    initialRefreshDelay.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    initialRefreshDelay.EntityData.Children = types.NewOrderedMap()
    initialRefreshDelay.EntityData.Leafs = types.NewOrderedMap()
    initialRefreshDelay.EntityData.Leafs.Append("delay", types.YLeaf{"Delay", initialRefreshDelay.Delay})
    initialRefreshDelay.EntityData.Leafs.Append("spread", types.YLeaf{"Spread", initialRefreshDelay.Spread})
    initialRefreshDelay.EntityData.Leafs.Append("skip", types.YLeaf{"Skip", initialRefreshDelay.Skip})

    initialRefreshDelay.EntityData.YListKeys = []string {}

    return &(initialRefreshDelay.EntityData)
}

// BmpServers_BmpServer_HostPort
// Configure Host Name/Address and Port for BMP
// Server
type BmpServers_BmpServer_HostPort struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Name of the BMP server(accepts IPv4/IPv6 Address format too). The type is
    // string.
    Host interface{}

    // Port Number of listening BMP server. The type is interface{} with range:
    // 1..65535.
    Port interface{}
}

func (hostPort *BmpServers_BmpServer_HostPort) GetEntityData() *types.CommonEntityData {
    hostPort.EntityData.YFilter = hostPort.YFilter
    hostPort.EntityData.YangName = "host-port"
    hostPort.EntityData.BundleName = "cisco_ios_xr"
    hostPort.EntityData.ParentYangName = "bmp-server"
    hostPort.EntityData.SegmentPath = "host-port"
    hostPort.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers/bmp-server/" + hostPort.EntityData.SegmentPath
    hostPort.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    hostPort.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    hostPort.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    hostPort.EntityData.Children = types.NewOrderedMap()
    hostPort.EntityData.Leafs = types.NewOrderedMap()
    hostPort.EntityData.Leafs.Append("host", types.YLeaf{"Host", hostPort.Host})
    hostPort.EntityData.Leafs.Append("port", types.YLeaf{"Port", hostPort.Port})

    hostPort.EntityData.YListKeys = []string {}

    return &(hostPort.EntityData)
}

// BmpServers_BmpServer_Tos
// TOS (Type Of Service)
type BmpServers_BmpServer_Tos struct {
    EntityData types.CommonEntityData
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *BmpServers_BmpServer_Tos) GetEntityData() *types.CommonEntityData {
    tos.EntityData.YFilter = tos.YFilter
    tos.EntityData.YangName = "tos"
    tos.EntityData.BundleName = "cisco_ios_xr"
    tos.EntityData.ParentYangName = "bmp-server"
    tos.EntityData.SegmentPath = "tos"
    tos.EntityData.AbsolutePath = "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers/bmp-server/" + tos.EntityData.SegmentPath
    tos.EntityData.CapabilitiesTable = cisco_ios_xr.GetCapabilities()
    tos.EntityData.NamespaceTable = cisco_ios_xr.GetNamespaces()
    tos.EntityData.BundleYangModelsLocation = cisco_ios_xr.GetModelsPath()

    tos.EntityData.Children = types.NewOrderedMap()
    tos.EntityData.Leafs = types.NewOrderedMap()
    tos.EntityData.Leafs.Append("type", types.YLeaf{"Type", tos.Type})
    tos.EntityData.Leafs.Append("value", types.YLeaf{"Value", tos.Value})

    tos.EntityData.YListKeys = []string {}

    return &(tos.EntityData)
}

