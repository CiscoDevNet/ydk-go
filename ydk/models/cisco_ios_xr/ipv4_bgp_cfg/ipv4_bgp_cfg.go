// This module contains a collection of YANG definitions
// for Cisco IOS-XR ipv4-bgp package configuration.
// 
// This module contains definitions
// for the following management objects:
//   bgp: BGP configuration commands
//   bmp-server-all: bmp server all
//   bmp-servers: bmp servers
// 
// This YANG module augments the
//   Cisco-IOS-XR-infra-rsi-cfg,
//   Cisco-IOS-XR-snmp-agent-cfg
// modules with configuration data.
// 
// Copyright (c) 2013-2017 by Cisco Systems, Inc.
// All rights reserved.
package ipv4_bgp_cfg

import (
    "fmt"
    "github.com/CiscoDevNet/ydk-go/ydk"
    "github.com/CiscoDevNet/ydk-go/ydk/types"
    "github.com/CiscoDevNet/ydk-go/ydk/types/yfilter"
    "github.com/CiscoDevNet/ydk-go/ydk/models/cisco_ios_xr"
    "reflect"
)

func init() {
    ydk.YLogDebug(fmt.Sprintf("Registering top level entities for package ipv4_bgp_cfg"))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg bgp}", reflect.TypeOf(Bgp{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-cfg:bgp", reflect.TypeOf(Bgp{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg bmp-server-all}", reflect.TypeOf(BmpServerAll{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all", reflect.TypeOf(BmpServerAll{}))
    ydk.RegisterEntity("{http://cisco.com/ns/yang/Cisco-IOS-XR-ipv4-bgp-cfg bmp-servers}", reflect.TypeOf(BmpServers{}))
    ydk.RegisterEntity("Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers", reflect.TypeOf(BmpServers{}))
}

// BgpSiteOfOrigin represents Bgp site of origin
type BgpSiteOfOrigin string

const (
    // AS format SoO
    BgpSiteOfOrigin_as BgpSiteOfOrigin = "as"

    // IPv4 address format SoO
    BgpSiteOfOrigin_ipv4_address BgpSiteOfOrigin = "ipv4-address"

    // 4-byte AS format SoO
    BgpSiteOfOrigin_four_byte_as BgpSiteOfOrigin = "four-byte-as"
)

// BgpAdvRt represents Bgp adv rt
type BgpAdvRt string

const (
    // Regular RT type
    BgpAdvRt_bgp_regular_rt BgpAdvRt = "bgp-regular-rt"

    // Stitching RT type
    BgpAdvRt_bgp_stitching_rt BgpAdvRt = "bgp-stitching-rt"
)

// BgpAfEncapsulation represents Bgp af encapsulation
type BgpAfEncapsulation string

const (
    // VxLAN encapsulation type
    BgpAfEncapsulation_vx_lan BgpAfEncapsulation = "vx-lan"
)

// BgpMvpnSfsSelect represents Bgp mvpn sfs select
type BgpMvpnSfsSelect string

const (
    // Select all paths as single forwarder PE
    BgpMvpnSfsSelect_all_paths BgpMvpnSfsSelect = "all-paths"

    // Select PE with highest address as single
    // forwarder PE
    BgpMvpnSfsSelect_highest_ip_address BgpMvpnSfsSelect = "highest-ip-address"
)

// BgpAigpCfgPoi represents Bgp aigp cfg poi
type BgpAigpCfgPoi string

const (
    // AIGP Pre-bestpath POI
    BgpAigpCfgPoi_pre_best_path BgpAigpCfgPoi = "pre-best-path"

    // AIGP igp-cost POI
    BgpAigpCfgPoi_igp_cost BgpAigpCfgPoi = "igp-cost"
)

// BgpBfdEnableMode represents Bgp bfd enable mode
type BgpBfdEnableMode string

const (
    // Disable Mode - Prevent inheritance
    BgpBfdEnableMode_disable BgpBfdEnableMode = "disable"

    // Default Mode - Default BFD behavior
    BgpBfdEnableMode_default_ BgpBfdEnableMode = "default"

    // Strict Mode - Hold down adj until BFD session
    // up
    BgpBfdEnableMode_strict BgpBfdEnableMode = "strict"
)

// BgpRpkiTransport represents Bgp rpki transport
type BgpRpkiTransport string

const (
    // TCP Transport
    BgpRpkiTransport_tcp BgpRpkiTransport = "tcp"

    // SSH Transport
    BgpRpkiTransport_ssh BgpRpkiTransport = "ssh"
)

// BmpRouteDirection represents Bmp route direction
type BmpRouteDirection string

const (
    // Pickup routes at inbound direction from peer
    BmpRouteDirection_inbound BmpRouteDirection = "inbound"
)

// BgpSendMcastAttrCfg represents Bgp send mcast attr cfg
type BgpSendMcastAttrCfg string

const (
    // Enable SendMcastAttr
    BgpSendMcastAttrCfg_enable BgpSendMcastAttrCfg = "enable"

    // Disable SendMcastAttr
    BgpSendMcastAttrCfg_disable BgpSendMcastAttrCfg = "disable"
)

// BgpRnhInstallFormat represents Bgp rnh install format
type BgpRnhInstallFormat string

const (
    // Install RNH as opaque and extcomm
    BgpRnhInstallFormat_ext_comm BgpRnhInstallFormat = "ext-comm"

    // Install RNH as extcomm only
    BgpRnhInstallFormat_ext_comm_only BgpRnhInstallFormat = "ext-comm-only"
)

// BgpRouteDistinguisher represents Bgp route distinguisher
type BgpRouteDistinguisher string

const (
    // Automatically assigned
    BgpRouteDistinguisher_auto BgpRouteDistinguisher = "auto"

    // AS format RD
    BgpRouteDistinguisher_as BgpRouteDistinguisher = "as"

    // 4-byte AS format RD
    BgpRouteDistinguisher_four_byte_as BgpRouteDistinguisher = "four-byte-as"

    // IPv4 address format RD
    BgpRouteDistinguisher_ipv4_address BgpRouteDistinguisher = "ipv4-address"
)

// BgpOrf represents Bgp orf
type BgpOrf string

const (
    // No capability to send or receive
    BgpOrf_none BgpOrf = "none"

    // Receive ORF capability
    BgpOrf_receive BgpOrf = "receive"

    // Send ORF capability
    BgpOrf_send BgpOrf = "send"

    // Send and receive ORF capability
    BgpOrf_both BgpOrf = "both"
)

// BgpVrfRouteTarget represents Bgp vrf route target
type BgpVrfRouteTarget string

const (
    // AS format RT
    BgpVrfRouteTarget_as BgpVrfRouteTarget = "as"

    // IPv4 address format RT
    BgpVrfRouteTarget_ipv4_address BgpVrfRouteTarget = "ipv4-address"

    // 4-byte AS format RT
    BgpVrfRouteTarget_four_byte_as BgpVrfRouteTarget = "four-byte-as"
)

// BgpEbgpSendDmzEnableMode represents Bgp ebgp send dmz enable mode
type BgpEbgpSendDmzEnableMode string

const (
    // Disable Mode - Prevent inheritance
    BgpEbgpSendDmzEnableMode_disable BgpEbgpSendDmzEnableMode = "disable"

    // Default Mode - Send dmz link bandwidth value to
    // ebgp neighbor
    BgpEbgpSendDmzEnableMode_default_ BgpEbgpSendDmzEnableMode = "default"

    // Strict Mode - Send cumulative dmz link
    // bandwidth value to ebgp neighbor
    BgpEbgpSendDmzEnableMode_cumulative BgpEbgpSendDmzEnableMode = "cumulative"
)

// BgpClusterId represents Bgp cluster id
type BgpClusterId string

const (
    // Number
    BgpClusterId_number BgpClusterId = "number"

    // IPv4 Address
    BgpClusterId_ipv4_address BgpClusterId = "ipv4-address"
)

// BgpTcpMode represents Bgp tcp mode
type BgpTcpMode string

const (
    // Either active or passive mode
    BgpTcpMode_either BgpTcpMode = "either"

    // Active mode only
    BgpTcpMode_active_only BgpTcpMode = "active-only"

    // Passive mode only
    BgpTcpMode_passive_only BgpTcpMode = "passive-only"
)

// BgpAigpCfg represents Bgp aigp cfg
type BgpAigpCfg string

const (
    // Enable AIGP
    BgpAigpCfg_enable BgpAigpCfg = "enable"

    // Disable AIGP
    BgpAigpCfg_disable BgpAigpCfg = "disable"
)

// BmpPolicySelect represents Bmp policy select
type BmpPolicySelect string

const (
    // Pickup routes after policy application
    BmpPolicySelect_post_policy BmpPolicySelect = "post-policy"
)

// BgpFlowspecValidationCfg represents Bgp flowspec validation cfg
type BgpFlowspecValidationCfg string

const (
    // Enable Flowspec validation
    BgpFlowspecValidationCfg_enable BgpFlowspecValidationCfg = "enable"

    // Disable Flowspec validation
    BgpFlowspecValidationCfg_disable BgpFlowspecValidationCfg = "disable"

    // Disable Flowspec redirect nexthop validation
    BgpFlowspecValidationCfg_redirect_nexhop_disable BgpFlowspecValidationCfg = "redirect-nexhop-disable"
)

// BgpSignal represents Bgp signal
type BgpSignal string

const (
    // Signalling BGP disable
    BgpSignal_bgp_disable BgpSignal = "bgp-disable"

    // Signalling LDP disable
    BgpSignal_ldp_disable BgpSignal = "ldp-disable"
)

// BgpReorgOpt represents Bgp reorg opt
type BgpReorgOpt string

const (
    // Advertise translated routes
    BgpReorgOpt_bgp_cfg_adv BgpReorgOpt = "bgp-cfg-adv"

    // Advertise Reorig routes
    BgpReorgOpt_bgp_cfg_adv_reorg BgpReorgOpt = "bgp-cfg-adv-reorg"

    // Disable adv of routes
    BgpReorgOpt_bgp_cfg_adv_disable BgpReorgOpt = "bgp-cfg-adv-disable"

    // Advertise local routes
    BgpReorgOpt_bgp_cfg_adv_local BgpReorgOpt = "bgp-cfg-adv-local"

    // Disable adv of Def VRF Imported routes
    BgpReorgOpt_bgp_cfg_adv_def_vrf_imp_disable BgpReorgOpt = "bgp-cfg-adv-def-vrf-imp-disable"

    // Disable adv of VRF ReImported routes
    BgpReorgOpt_bgp_cfg_adv_vrf_re_imp_disable BgpReorgOpt = "bgp-cfg-adv-vrf-re-imp-disable"
)

// Bgp
// BGP configuration commands
type Bgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // BGP instance configuration commands. The type is slice of Bgp_Instance.
    Instance []Bgp_Instance
}

func (bgp *Bgp) GetFilter() yfilter.YFilter { return bgp.YFilter }

func (bgp *Bgp) SetFilter(yf yfilter.YFilter) { bgp.YFilter = yf }

func (bgp *Bgp) GetGoName(yname string) string {
    if yname == "instance" { return "Instance" }
    return ""
}

func (bgp *Bgp) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-cfg:bgp"
}

func (bgp *Bgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance" {
        for _, c := range bgp.Instance {
            if bgp.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance{}
        bgp.Instance = append(bgp.Instance, child)
        return &bgp.Instance[len(bgp.Instance)-1]
    }
    return nil
}

func (bgp *Bgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bgp.Instance {
        children[bgp.Instance[i].GetSegmentPath()] = &bgp.Instance[i]
    }
    return children
}

func (bgp *Bgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgp *Bgp) GetBundleName() string { return "cisco_ios_xr" }

func (bgp *Bgp) GetYangName() string { return "bgp" }

func (bgp *Bgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgp *Bgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgp *Bgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgp *Bgp) SetParent(parent types.Entity) { bgp.parent = parent }

func (bgp *Bgp) GetParent() types.Entity { return bgp.parent }

func (bgp *Bgp) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-cfg" }

// Bgp_Instance
// BGP instance configuration commands
type Bgp_Instance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Instance Name. For Default instance use - default.
    // The type is string with pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Autonomous system. The type is slice of Bgp_Instance_InstanceAs.
    InstanceAs []Bgp_Instance_InstanceAs
}

func (instance *Bgp_Instance) GetFilter() yfilter.YFilter { return instance.YFilter }

func (instance *Bgp_Instance) SetFilter(yf yfilter.YFilter) { instance.YFilter = yf }

func (instance *Bgp_Instance) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "instance-as" { return "InstanceAs" }
    return ""
}

func (instance *Bgp_Instance) GetSegmentPath() string {
    return "instance" + "[instance-name='" + fmt.Sprintf("%v", instance.InstanceName) + "']"
}

func (instance *Bgp_Instance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "instance-as" {
        for _, c := range instance.InstanceAs {
            if instance.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs{}
        instance.InstanceAs = append(instance.InstanceAs, child)
        return &instance.InstanceAs[len(instance.InstanceAs)-1]
    }
    return nil
}

func (instance *Bgp_Instance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instance.InstanceAs {
        children[instance.InstanceAs[i].GetSegmentPath()] = &instance.InstanceAs[i]
    }
    return children
}

func (instance *Bgp_Instance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = instance.InstanceName
    return leafs
}

func (instance *Bgp_Instance) GetBundleName() string { return "cisco_ios_xr" }

func (instance *Bgp_Instance) GetYangName() string { return "instance" }

func (instance *Bgp_Instance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instance *Bgp_Instance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instance *Bgp_Instance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instance *Bgp_Instance) SetParent(parent types.Entity) { instance.parent = parent }

func (instance *Bgp_Instance) GetParent() types.Entity { return instance.parent }

func (instance *Bgp_Instance) GetParentYangName() string { return "bgp" }

// Bgp_Instance_InstanceAs
// Autonomous system
type Bgp_Instance_InstanceAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Higher 16 bits of 4-byte Autonomous system number.
    // The type is interface{} with range: 0..4294967295.
    As interface{}

    // 4-byte Autonomous system. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs.
    FourByteAs []Bgp_Instance_InstanceAs_FourByteAs
}

func (instanceAs *Bgp_Instance_InstanceAs) GetFilter() yfilter.YFilter { return instanceAs.YFilter }

func (instanceAs *Bgp_Instance_InstanceAs) SetFilter(yf yfilter.YFilter) { instanceAs.YFilter = yf }

func (instanceAs *Bgp_Instance_InstanceAs) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "four-byte-as" { return "FourByteAs" }
    return ""
}

func (instanceAs *Bgp_Instance_InstanceAs) GetSegmentPath() string {
    return "instance-as" + "[as='" + fmt.Sprintf("%v", instanceAs.As) + "']"
}

func (instanceAs *Bgp_Instance_InstanceAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "four-byte-as" {
        for _, c := range instanceAs.FourByteAs {
            if instanceAs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs{}
        instanceAs.FourByteAs = append(instanceAs.FourByteAs, child)
        return &instanceAs.FourByteAs[len(instanceAs.FourByteAs)-1]
    }
    return nil
}

func (instanceAs *Bgp_Instance_InstanceAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range instanceAs.FourByteAs {
        children[instanceAs.FourByteAs[i].GetSegmentPath()] = &instanceAs.FourByteAs[i]
    }
    return children
}

func (instanceAs *Bgp_Instance_InstanceAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = instanceAs.As
    return leafs
}

func (instanceAs *Bgp_Instance_InstanceAs) GetBundleName() string { return "cisco_ios_xr" }

func (instanceAs *Bgp_Instance_InstanceAs) GetYangName() string { return "instance-as" }

func (instanceAs *Bgp_Instance_InstanceAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (instanceAs *Bgp_Instance_InstanceAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (instanceAs *Bgp_Instance_InstanceAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (instanceAs *Bgp_Instance_InstanceAs) SetParent(parent types.Entity) { instanceAs.parent = parent }

func (instanceAs *Bgp_Instance_InstanceAs) GetParent() types.Entity { return instanceAs.parent }

func (instanceAs *Bgp_Instance_InstanceAs) GetParentYangName() string { return "instance" }

// Bgp_Instance_InstanceAs_FourByteAs
// 4-byte Autonomous system
type Bgp_Instance_InstanceAs_FourByteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. 2-byte or 4-byte Autonomous system number. The
    // type is interface{} with range: 0..4294967295.
    As interface{}

    // Enable BGP. Deletion of this object causes deletion of all the objects
    // under FourByteAS associated with this object. The type is interface{}.
    BgpRunning interface{}

    // VRF config.
    Vrfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs

    // Global default config.
    DefaultVrf Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetFilter() yfilter.YFilter { return fourByteAs.YFilter }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) SetFilter(yf yfilter.YFilter) { fourByteAs.YFilter = yf }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "bgp-running" { return "BgpRunning" }
    if yname == "vrfs" { return "Vrfs" }
    if yname == "default-vrf" { return "DefaultVrf" }
    return ""
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetSegmentPath() string {
    return "four-byte-as" + "[as='" + fmt.Sprintf("%v", fourByteAs.As) + "']"
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrfs" {
        return &fourByteAs.Vrfs
    }
    if childYangName == "default-vrf" {
        return &fourByteAs.DefaultVrf
    }
    return nil
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrfs"] = &fourByteAs.Vrfs
    children["default-vrf"] = &fourByteAs.DefaultVrf
    return children
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = fourByteAs.As
    leafs["bgp-running"] = fourByteAs.BgpRunning
    return leafs
}

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetBundleName() string { return "cisco_ios_xr" }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetYangName() string { return "four-byte-as" }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) SetParent(parent types.Entity) { fourByteAs.parent = parent }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetParent() types.Entity { return fourByteAs.parent }

func (fourByteAs *Bgp_Instance_InstanceAs_FourByteAs) GetParentYangName() string { return "instance-as" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs
// VRF config
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // VRF config. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf.
    Vrf []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetFilter() yfilter.YFilter { return vrfs.YFilter }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) SetFilter(yf yfilter.YFilter) { vrfs.YFilter = yf }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetGoName(yname string) string {
    if yname == "vrf" { return "Vrf" }
    return ""
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetSegmentPath() string {
    return "vrfs"
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf" {
        for _, c := range vrfs.Vrf {
            if vrfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf{}
        vrfs.Vrf = append(vrfs.Vrf, child)
        return &vrfs.Vrf[len(vrfs.Vrf)-1]
    }
    return nil
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfs.Vrf {
        children[vrfs.Vrf[i].GetSegmentPath()] = &vrfs.Vrf[i]
    }
    return children
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetYangName() string { return "vrfs" }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) SetParent(parent types.Entity) { vrfs.parent = parent }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetParent() types.Entity { return vrfs.parent }

func (vrfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs) GetParentYangName() string { return "four-byte-as" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf
// VRF config
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. VRF name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    VrfName interface{}

    // VRF attribute config.
    VrfGlobal Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal

    // BGP VRF peer.
    VrfNeighbors Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetFilter() yfilter.YFilter { return vrf.YFilter }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) SetFilter(yf yfilter.YFilter) { vrf.YFilter = yf }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetGoName(yname string) string {
    if yname == "vrf-name" { return "VrfName" }
    if yname == "vrf-global" { return "VrfGlobal" }
    if yname == "vrf-neighbors" { return "VrfNeighbors" }
    return ""
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetSegmentPath() string {
    return "vrf" + "[vrf-name='" + fmt.Sprintf("%v", vrf.VrfName) + "']"
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-global" {
        return &vrf.VrfGlobal
    }
    if childYangName == "vrf-neighbors" {
        return &vrf.VrfNeighbors
    }
    return nil
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrf-global"] = &vrf.VrfGlobal
    children["vrf-neighbors"] = &vrf.VrfNeighbors
    return children
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["vrf-name"] = vrf.VrfName
    return leafs
}

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetBundleName() string { return "cisco_ios_xr" }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetYangName() string { return "vrf" }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) SetParent(parent types.Entity) { vrf.parent = parent }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetParent() types.Entity { return vrf.parent }

func (vrf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf) GetParentYangName() string { return "vrfs" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal
// VRF attribute config
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Create this VRF. Deletion of this object causes deletion of all the objects
    // under VRF associated with this object. The type is interface{}.
    Exists interface{}

    // Configure Router-id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    RouterId interface{}

    // Disable enforce the first AS for EBGP routes. The type is interface{}.
    DisableEnforceFirstAs interface{}

    // Change default route selection criteria to ignore cost community
    // comparison. The type is interface{}.
    BestPathCostCommunity interface{}

    // Change default route selection criteria to ignore AIGP unless both paths
    // whichare compared have AIGP attribute. The type is interface{}.
    BestPathAigpIgnore interface{}

    // Change default route selection criteria to ignore AS path length. The type
    // is interface{}.
    BestPathAsPathLength interface{}

    // Allow redistribution of iBGP into IGPs (dangerous). The type is
    // interface{}.
    IgpRedistInternal interface{}

    // Change default multi-route selection criteria to ignore everything onwards
    // as-path check. The type is interface{}.
    MultiPathAsPathIgnoreOnwards interface{}

    // Disable immediate reset session if a link to a directly connected external
    // peer goes down. The type is interface{}.
    DisableFastExternalFallover interface{}

    // Default redistributed metric. The type is interface{} with range:
    // 1..4294967295.
    DefaultMetric interface{}

    // Control distribution of default information. The type is interface{}.
    DefaultInfoOriginate interface{}

    // Change default route selection criteria and allow the comparing of MED
    // among confederation paths. The type is interface{}.
    BestPathConfederationPaths interface{}

    // Change default multi-route selection criteria to relax as-path checking -
    // only require same aspath length. The type is interface{}.
    BestPathAsMultipathRelax interface{}

    // Disable automatic soft peer reset on policy reconfiguration. The type is
    // interface{}.
    DisableAutoSoftReset interface{}

    // Disable inbound and outbound messagelogging for all neighbors under the
    // vrf. The type is interface{}.
    DisableMsgLog interface{}

    // Disable neighbor change logging. The type is interface{}.
    DisableNeighborLogging interface{}

    // Change default route selection criteria and allow comparing of MED from
    // different neighbors. The type is interface{}.
    BestPathMedAlways interface{}

    // Change default route selection criteria and compare router-id for identical
    // EBGP paths. The type is interface{}.
    BestPathRouterId interface{}

    // Treat missing MED as the least preferred one. The type is interface{}.
    BestPathMedMissing interface{}

    // Configure default local preference. The type is interface{} with range:
    // 0..4294967295. The default value is 100.
    LocalPreference interface{}

    // Route distinguisher.
    RouteDistinguisher Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher

    // Global VRF-specific configuration.
    VrfGlobalAfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs

    // Configure list of MPLS activated interfaces.
    MplsActivatedInterfaces Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces

    // Adjust routing timers.
    GlobalTimers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers

    // BFD configuration.
    Bfd Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd

    // set socket parameters.
    SendSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes

    // Set socket and BGP receive buffer sizes.
    ReceiveSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetFilter() yfilter.YFilter { return vrfGlobal.YFilter }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) SetFilter(yf yfilter.YFilter) { vrfGlobal.YFilter = yf }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetGoName(yname string) string {
    if yname == "exists" { return "Exists" }
    if yname == "router-id" { return "RouterId" }
    if yname == "disable-enforce-first-as" { return "DisableEnforceFirstAs" }
    if yname == "best-path-cost-community" { return "BestPathCostCommunity" }
    if yname == "best-path-aigp-ignore" { return "BestPathAigpIgnore" }
    if yname == "best-path-as-path-length" { return "BestPathAsPathLength" }
    if yname == "igp-redist-internal" { return "IgpRedistInternal" }
    if yname == "multi-path-as-path-ignore-onwards" { return "MultiPathAsPathIgnoreOnwards" }
    if yname == "disable-fast-external-fallover" { return "DisableFastExternalFallover" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "best-path-confederation-paths" { return "BestPathConfederationPaths" }
    if yname == "best-path-as-multipath-relax" { return "BestPathAsMultipathRelax" }
    if yname == "disable-auto-soft-reset" { return "DisableAutoSoftReset" }
    if yname == "disable-msg-log" { return "DisableMsgLog" }
    if yname == "disable-neighbor-logging" { return "DisableNeighborLogging" }
    if yname == "best-path-med-always" { return "BestPathMedAlways" }
    if yname == "best-path-router-id" { return "BestPathRouterId" }
    if yname == "best-path-med-missing" { return "BestPathMedMissing" }
    if yname == "local-preference" { return "LocalPreference" }
    if yname == "route-distinguisher" { return "RouteDistinguisher" }
    if yname == "vrf-global-afs" { return "VrfGlobalAfs" }
    if yname == "mpls-activated-interfaces" { return "MplsActivatedInterfaces" }
    if yname == "global-timers" { return "GlobalTimers" }
    if yname == "bfd" { return "Bfd" }
    if yname == "send-socket-buffer-sizes" { return "SendSocketBufferSizes" }
    if yname == "receive-socket-buffer-sizes" { return "ReceiveSocketBufferSizes" }
    return ""
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetSegmentPath() string {
    return "vrf-global"
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-distinguisher" {
        return &vrfGlobal.RouteDistinguisher
    }
    if childYangName == "vrf-global-afs" {
        return &vrfGlobal.VrfGlobalAfs
    }
    if childYangName == "mpls-activated-interfaces" {
        return &vrfGlobal.MplsActivatedInterfaces
    }
    if childYangName == "global-timers" {
        return &vrfGlobal.GlobalTimers
    }
    if childYangName == "bfd" {
        return &vrfGlobal.Bfd
    }
    if childYangName == "send-socket-buffer-sizes" {
        return &vrfGlobal.SendSocketBufferSizes
    }
    if childYangName == "receive-socket-buffer-sizes" {
        return &vrfGlobal.ReceiveSocketBufferSizes
    }
    return nil
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-distinguisher"] = &vrfGlobal.RouteDistinguisher
    children["vrf-global-afs"] = &vrfGlobal.VrfGlobalAfs
    children["mpls-activated-interfaces"] = &vrfGlobal.MplsActivatedInterfaces
    children["global-timers"] = &vrfGlobal.GlobalTimers
    children["bfd"] = &vrfGlobal.Bfd
    children["send-socket-buffer-sizes"] = &vrfGlobal.SendSocketBufferSizes
    children["receive-socket-buffer-sizes"] = &vrfGlobal.ReceiveSocketBufferSizes
    return children
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["exists"] = vrfGlobal.Exists
    leafs["router-id"] = vrfGlobal.RouterId
    leafs["disable-enforce-first-as"] = vrfGlobal.DisableEnforceFirstAs
    leafs["best-path-cost-community"] = vrfGlobal.BestPathCostCommunity
    leafs["best-path-aigp-ignore"] = vrfGlobal.BestPathAigpIgnore
    leafs["best-path-as-path-length"] = vrfGlobal.BestPathAsPathLength
    leafs["igp-redist-internal"] = vrfGlobal.IgpRedistInternal
    leafs["multi-path-as-path-ignore-onwards"] = vrfGlobal.MultiPathAsPathIgnoreOnwards
    leafs["disable-fast-external-fallover"] = vrfGlobal.DisableFastExternalFallover
    leafs["default-metric"] = vrfGlobal.DefaultMetric
    leafs["default-info-originate"] = vrfGlobal.DefaultInfoOriginate
    leafs["best-path-confederation-paths"] = vrfGlobal.BestPathConfederationPaths
    leafs["best-path-as-multipath-relax"] = vrfGlobal.BestPathAsMultipathRelax
    leafs["disable-auto-soft-reset"] = vrfGlobal.DisableAutoSoftReset
    leafs["disable-msg-log"] = vrfGlobal.DisableMsgLog
    leafs["disable-neighbor-logging"] = vrfGlobal.DisableNeighborLogging
    leafs["best-path-med-always"] = vrfGlobal.BestPathMedAlways
    leafs["best-path-router-id"] = vrfGlobal.BestPathRouterId
    leafs["best-path-med-missing"] = vrfGlobal.BestPathMedMissing
    leafs["local-preference"] = vrfGlobal.LocalPreference
    return leafs
}

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetBundleName() string { return "cisco_ios_xr" }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetYangName() string { return "vrf-global" }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) SetParent(parent types.Entity) { vrfGlobal.parent = parent }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetParent() types.Entity { return vrfGlobal.parent }

func (vrfGlobal *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal) GetParentYangName() string { return "vrf" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher
// Route distinguisher
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of RD. The type is BgpRouteDistinguisher.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // ASN Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetFilter() yfilter.YFilter { return routeDistinguisher.YFilter }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) SetFilter(yf yfilter.YFilter) { routeDistinguisher.YFilter = yf }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "address-index" { return "AddressIndex" }
    return ""
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetSegmentPath() string {
    return "route-distinguisher"
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = routeDistinguisher.Type
    leafs["as-xx"] = routeDistinguisher.AsXx
    leafs["as"] = routeDistinguisher.As
    leafs["as-index"] = routeDistinguisher.AsIndex
    leafs["address"] = routeDistinguisher.Address
    leafs["address-index"] = routeDistinguisher.AddressIndex
    return leafs
}

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetYangName() string { return "route-distinguisher" }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) SetParent(parent types.Entity) { routeDistinguisher.parent = parent }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetParent() types.Entity { return routeDistinguisher.parent }

func (routeDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_RouteDistinguisher) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs
// Global VRF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global VRF AF-specific configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf.
    VrfGlobalAf []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetFilter() yfilter.YFilter { return vrfGlobalAfs.YFilter }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) SetFilter(yf yfilter.YFilter) { vrfGlobalAfs.YFilter = yf }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetGoName(yname string) string {
    if yname == "vrf-global-af" { return "VrfGlobalAf" }
    return ""
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetSegmentPath() string {
    return "vrf-global-afs"
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-global-af" {
        for _, c := range vrfGlobalAfs.VrfGlobalAf {
            if vrfGlobalAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf{}
        vrfGlobalAfs.VrfGlobalAf = append(vrfGlobalAfs.VrfGlobalAf, child)
        return &vrfGlobalAfs.VrfGlobalAf[len(vrfGlobalAfs.VrfGlobalAf)-1]
    }
    return nil
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfGlobalAfs.VrfGlobalAf {
        children[vrfGlobalAfs.VrfGlobalAf[i].GetSegmentPath()] = &vrfGlobalAfs.VrfGlobalAf[i]
    }
    return children
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetYangName() string { return "vrf-global-afs" }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) SetParent(parent types.Entity) { vrfGlobalAfs.parent = parent }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetParent() types.Entity { return vrfGlobalAfs.parent }

func (vrfGlobalAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf
// Global VRF AF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Route-Target download configuration. The type is interface{}.
    RtDownload interface{}

    // TRUE to send default orig route to VPN neighborFALSE to not send default
    // originate route . The type is bool.
    AllowVpnDefaultOriginate interface{}

    // Update generation delay (in minutes) after a MED change. The type is
    // interface{} with range: 0..10. Units are minute. The default value is 10.
    DynamicMedInterval interface{}

    // Enable the address family. Deletion of this object causes deletion of all
    // the objects under GlobalAF/VRFGlobalAF associated with this object . The
    // type is interface{}.
    Enable interface{}

    // Configure policy for installation of routes to RIB. The type is string.
    TablePolicy interface{}

    // Attribute download configuration. The type is interface{}.
    AttributeDownload interface{}

    // TRUE to enable BE FALSE to disable BE inheritance from a parent. The type
    // is bool.
    BestExternal interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsReceive interface{}

    // Route policy for permanent networks. The type is string.
    PermanentNetwork interface{}

    // Minimum prefix-length for nexthop resolution. The type is interface{} with
    // range: 0..128. The default value is 0.
    NextHopResolutionPrefixLengthMinimum interface{}

    // TRUE to reset weight on import. FALSE to not reset and to prevent
    // inheritance from a parent. The type is bool.
    ResetWeightOnImport interface{}

    // Advertise additional paths Send capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsSend interface{}

    // Enable/disable advertisement of routes with local-label via Unicast SAFI.
    // The type is BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRouteSafiUnicast interface{}

    // Disable outbound AS Path loop check. The type is interface{}.
    DisableAsPathLoopCheck interface{}

    // MVPN configurations.
    Mvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn

    // Use eBGP multipaths.
    Ebgp Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp

    // Use eiBGP multipaths.
    Eibgp Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp

    // Use iBGP multipaths.
    Ibgp Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp

    // Configure BGP aggregate entries.
    AggregateAddresses Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses

    // Enable route-flap dampening.
    Dampening Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening

    // Redistribute RIP routes.
    RipRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes

    // Redistribute lisp routes.
    LispRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes

    // Redistribute static routes.
    StaticRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes

    // Define an administrative distance.
    Distance Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance

    // Redistribute information for Application routes.
    ApplicationRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes

    // BGP 6PE/MPLS-VPN label allocation mode.
    LabelMode Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode

    // Redistribute information for EIGRP routes.
    EigrpRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes

    // Specify a network to announce via BGP.
    SourcedNetworks Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks

    // Redistribute connected routes.
    ConnectedRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes

    // Label allocation policy.
    AllocateLabel Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel

    // Configure additional paths selection.
    AdditionalPathsSelection Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection

    // Redistribute information for OSPF routes.
    OspfRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes

    // Redistribute mobile routes.
    MobileRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes

    // Redistribute subscriber routes.
    SubscriberRoutes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetFilter() yfilter.YFilter { return vrfGlobalAf.YFilter }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) SetFilter(yf yfilter.YFilter) { vrfGlobalAf.YFilter = yf }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "rt-download" { return "RtDownload" }
    if yname == "allow-vpn-default-originate" { return "AllowVpnDefaultOriginate" }
    if yname == "dynamic-med-interval" { return "DynamicMedInterval" }
    if yname == "enable" { return "Enable" }
    if yname == "table-policy" { return "TablePolicy" }
    if yname == "attribute-download" { return "AttributeDownload" }
    if yname == "best-external" { return "BestExternal" }
    if yname == "additional-paths-receive" { return "AdditionalPathsReceive" }
    if yname == "permanent-network" { return "PermanentNetwork" }
    if yname == "next-hop-resolution-prefix-length-minimum" { return "NextHopResolutionPrefixLengthMinimum" }
    if yname == "reset-weight-on-import" { return "ResetWeightOnImport" }
    if yname == "additional-paths-send" { return "AdditionalPathsSend" }
    if yname == "advertise-local-labeled-route-safi-unicast" { return "AdvertiseLocalLabeledRouteSafiUnicast" }
    if yname == "disable-as-path-loop-check" { return "DisableAsPathLoopCheck" }
    if yname == "mvpn" { return "Mvpn" }
    if yname == "ebgp" { return "Ebgp" }
    if yname == "eibgp" { return "Eibgp" }
    if yname == "ibgp" { return "Ibgp" }
    if yname == "aggregate-addresses" { return "AggregateAddresses" }
    if yname == "dampening" { return "Dampening" }
    if yname == "rip-routes" { return "RipRoutes" }
    if yname == "lisp-routes" { return "LispRoutes" }
    if yname == "static-routes" { return "StaticRoutes" }
    if yname == "distance" { return "Distance" }
    if yname == "application-routes" { return "ApplicationRoutes" }
    if yname == "label-mode" { return "LabelMode" }
    if yname == "eigrp-routes" { return "EigrpRoutes" }
    if yname == "sourced-networks" { return "SourcedNetworks" }
    if yname == "connected-routes" { return "ConnectedRoutes" }
    if yname == "allocate-label" { return "AllocateLabel" }
    if yname == "additional-paths-selection" { return "AdditionalPathsSelection" }
    if yname == "ospf-routes" { return "OspfRoutes" }
    if yname == "mobile-routes" { return "MobileRoutes" }
    if yname == "subscriber-routes" { return "SubscriberRoutes" }
    return ""
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetSegmentPath() string {
    return "vrf-global-af" + "[af-name='" + fmt.Sprintf("%v", vrfGlobalAf.AfName) + "']"
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mvpn" {
        return &vrfGlobalAf.Mvpn
    }
    if childYangName == "ebgp" {
        return &vrfGlobalAf.Ebgp
    }
    if childYangName == "eibgp" {
        return &vrfGlobalAf.Eibgp
    }
    if childYangName == "ibgp" {
        return &vrfGlobalAf.Ibgp
    }
    if childYangName == "aggregate-addresses" {
        return &vrfGlobalAf.AggregateAddresses
    }
    if childYangName == "dampening" {
        return &vrfGlobalAf.Dampening
    }
    if childYangName == "rip-routes" {
        return &vrfGlobalAf.RipRoutes
    }
    if childYangName == "lisp-routes" {
        return &vrfGlobalAf.LispRoutes
    }
    if childYangName == "static-routes" {
        return &vrfGlobalAf.StaticRoutes
    }
    if childYangName == "distance" {
        return &vrfGlobalAf.Distance
    }
    if childYangName == "application-routes" {
        return &vrfGlobalAf.ApplicationRoutes
    }
    if childYangName == "label-mode" {
        return &vrfGlobalAf.LabelMode
    }
    if childYangName == "eigrp-routes" {
        return &vrfGlobalAf.EigrpRoutes
    }
    if childYangName == "sourced-networks" {
        return &vrfGlobalAf.SourcedNetworks
    }
    if childYangName == "connected-routes" {
        return &vrfGlobalAf.ConnectedRoutes
    }
    if childYangName == "allocate-label" {
        return &vrfGlobalAf.AllocateLabel
    }
    if childYangName == "additional-paths-selection" {
        return &vrfGlobalAf.AdditionalPathsSelection
    }
    if childYangName == "ospf-routes" {
        return &vrfGlobalAf.OspfRoutes
    }
    if childYangName == "mobile-routes" {
        return &vrfGlobalAf.MobileRoutes
    }
    if childYangName == "subscriber-routes" {
        return &vrfGlobalAf.SubscriberRoutes
    }
    return nil
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["mvpn"] = &vrfGlobalAf.Mvpn
    children["ebgp"] = &vrfGlobalAf.Ebgp
    children["eibgp"] = &vrfGlobalAf.Eibgp
    children["ibgp"] = &vrfGlobalAf.Ibgp
    children["aggregate-addresses"] = &vrfGlobalAf.AggregateAddresses
    children["dampening"] = &vrfGlobalAf.Dampening
    children["rip-routes"] = &vrfGlobalAf.RipRoutes
    children["lisp-routes"] = &vrfGlobalAf.LispRoutes
    children["static-routes"] = &vrfGlobalAf.StaticRoutes
    children["distance"] = &vrfGlobalAf.Distance
    children["application-routes"] = &vrfGlobalAf.ApplicationRoutes
    children["label-mode"] = &vrfGlobalAf.LabelMode
    children["eigrp-routes"] = &vrfGlobalAf.EigrpRoutes
    children["sourced-networks"] = &vrfGlobalAf.SourcedNetworks
    children["connected-routes"] = &vrfGlobalAf.ConnectedRoutes
    children["allocate-label"] = &vrfGlobalAf.AllocateLabel
    children["additional-paths-selection"] = &vrfGlobalAf.AdditionalPathsSelection
    children["ospf-routes"] = &vrfGlobalAf.OspfRoutes
    children["mobile-routes"] = &vrfGlobalAf.MobileRoutes
    children["subscriber-routes"] = &vrfGlobalAf.SubscriberRoutes
    return children
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = vrfGlobalAf.AfName
    leafs["rt-download"] = vrfGlobalAf.RtDownload
    leafs["allow-vpn-default-originate"] = vrfGlobalAf.AllowVpnDefaultOriginate
    leafs["dynamic-med-interval"] = vrfGlobalAf.DynamicMedInterval
    leafs["enable"] = vrfGlobalAf.Enable
    leafs["table-policy"] = vrfGlobalAf.TablePolicy
    leafs["attribute-download"] = vrfGlobalAf.AttributeDownload
    leafs["best-external"] = vrfGlobalAf.BestExternal
    leafs["additional-paths-receive"] = vrfGlobalAf.AdditionalPathsReceive
    leafs["permanent-network"] = vrfGlobalAf.PermanentNetwork
    leafs["next-hop-resolution-prefix-length-minimum"] = vrfGlobalAf.NextHopResolutionPrefixLengthMinimum
    leafs["reset-weight-on-import"] = vrfGlobalAf.ResetWeightOnImport
    leafs["additional-paths-send"] = vrfGlobalAf.AdditionalPathsSend
    leafs["advertise-local-labeled-route-safi-unicast"] = vrfGlobalAf.AdvertiseLocalLabeledRouteSafiUnicast
    leafs["disable-as-path-loop-check"] = vrfGlobalAf.DisableAsPathLoopCheck
    return leafs
}

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetBundleName() string { return "cisco_ios_xr" }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetYangName() string { return "vrf-global-af" }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) SetParent(parent types.Entity) { vrfGlobalAf.parent = parent }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetParent() types.Entity { return vrfGlobalAf.parent }

func (vrfGlobalAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf) GetParentYangName() string { return "vrf-global-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn
// MVPN configurations
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Select MVPN single forwarder selection. The type is BgpMvpnSfsSelect.
    SingleForwarderSelection interface{}
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetFilter() yfilter.YFilter { return mvpn.YFilter }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) SetFilter(yf yfilter.YFilter) { mvpn.YFilter = yf }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetGoName(yname string) string {
    if yname == "single-forwarder-selection" { return "SingleForwarderSelection" }
    return ""
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetSegmentPath() string {
    return "mvpn"
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["single-forwarder-selection"] = mvpn.SingleForwarderSelection
    return leafs
}

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetBundleName() string { return "cisco_ios_xr" }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetYangName() string { return "mvpn" }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) SetParent(parent types.Entity) { mvpn.parent = parent }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetParent() types.Entity { return mvpn.parent }

func (mvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Mvpn) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp
// Use eBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of paths. The type is interface{} with range: 2..32. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetFilter() yfilter.YFilter { return ebgp.YFilter }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) SetFilter(yf yfilter.YFilter) { ebgp.YFilter = yf }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetGoName(yname string) string {
    if yname == "paths-value" { return "PathsValue" }
    if yname == "unequal-cost" { return "UnequalCost" }
    if yname == "selective" { return "Selective" }
    if yname == "order-by-igp-metric" { return "OrderByIgpMetric" }
    return ""
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetSegmentPath() string {
    return "ebgp"
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["paths-value"] = ebgp.PathsValue
    leafs["unequal-cost"] = ebgp.UnequalCost
    leafs["selective"] = ebgp.Selective
    leafs["order-by-igp-metric"] = ebgp.OrderByIgpMetric
    return leafs
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetBundleName() string { return "cisco_ios_xr" }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetYangName() string { return "ebgp" }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) SetParent(parent types.Entity) { ebgp.parent = parent }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetParent() types.Entity { return ebgp.parent }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ebgp) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp
// Use eiBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of paths. The type is interface{} with range: 2..32. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetFilter() yfilter.YFilter { return eibgp.YFilter }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) SetFilter(yf yfilter.YFilter) { eibgp.YFilter = yf }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetGoName(yname string) string {
    if yname == "paths-value" { return "PathsValue" }
    if yname == "unequal-cost" { return "UnequalCost" }
    if yname == "selective" { return "Selective" }
    if yname == "order-by-igp-metric" { return "OrderByIgpMetric" }
    return ""
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetSegmentPath() string {
    return "eibgp"
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["paths-value"] = eibgp.PathsValue
    leafs["unequal-cost"] = eibgp.UnequalCost
    leafs["selective"] = eibgp.Selective
    leafs["order-by-igp-metric"] = eibgp.OrderByIgpMetric
    return leafs
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetBundleName() string { return "cisco_ios_xr" }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetYangName() string { return "eibgp" }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) SetParent(parent types.Entity) { eibgp.parent = parent }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetParent() types.Entity { return eibgp.parent }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Eibgp) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp
// Use iBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of paths. The type is interface{} with range: 2..32. This attribute
    // is mandatory.
    PathsValue interface{}

    // Allow multipaths to have different IGP metrics. The type is bool. The
    // default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetFilter() yfilter.YFilter { return ibgp.YFilter }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) SetFilter(yf yfilter.YFilter) { ibgp.YFilter = yf }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetGoName(yname string) string {
    if yname == "paths-value" { return "PathsValue" }
    if yname == "unequal-cost" { return "UnequalCost" }
    if yname == "selective" { return "Selective" }
    if yname == "order-by-igp-metric" { return "OrderByIgpMetric" }
    return ""
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetSegmentPath() string {
    return "ibgp"
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["paths-value"] = ibgp.PathsValue
    leafs["unequal-cost"] = ibgp.UnequalCost
    leafs["selective"] = ibgp.Selective
    leafs["order-by-igp-metric"] = ibgp.OrderByIgpMetric
    return leafs
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetBundleName() string { return "cisco_ios_xr" }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetYangName() string { return "ibgp" }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) SetParent(parent types.Entity) { ibgp.parent = parent }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetParent() types.Entity { return ibgp.parent }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Ibgp) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses
// Configure BGP aggregate entries
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Aggregate address configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress.
    AggregateAddress []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetFilter() yfilter.YFilter { return aggregateAddresses.YFilter }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) SetFilter(yf yfilter.YFilter) { aggregateAddresses.YFilter = yf }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetGoName(yname string) string {
    if yname == "aggregate-address" { return "AggregateAddress" }
    return ""
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetSegmentPath() string {
    return "aggregate-addresses"
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aggregate-address" {
        for _, c := range aggregateAddresses.AggregateAddress {
            if aggregateAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress{}
        aggregateAddresses.AggregateAddress = append(aggregateAddresses.AggregateAddress, child)
        return &aggregateAddresses.AggregateAddress[len(aggregateAddresses.AggregateAddress)-1]
    }
    return nil
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range aggregateAddresses.AggregateAddress {
        children[aggregateAddresses.AggregateAddress[i].GetSegmentPath()] = &aggregateAddresses.AggregateAddress[i]
    }
    return children
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetYangName() string { return "aggregate-addresses" }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) SetParent(parent types.Entity) { aggregateAddresses.parent = parent }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetParent() types.Entity { return aggregateAddresses.parent }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress
// Aggregate address configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Aggregate in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    AggregateAddr interface{}

    // This attribute is a key. Aggregate in prefix/length format (prefix part).
    // The type is interface{} with range: 0..128.
    AggregatePrefix interface{}

    // TRUE to generate AS set path information, FALSE otherwise. The type is
    // bool.
    GenerateSetInfo interface{}

    // TRUE to generate AS confederation set path information, FALSE otherwise.
    // The type is bool.
    GenerateConfederationSetInfo interface{}

    // TRUE to filter more specific routes from updates, FALSEotherwise. The type
    // is bool.
    SummaryOnly interface{}

    // Route policy on which to condition advertisement, suppression, and
    // attributes. The type is string.
    RoutePolicyName interface{}
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetFilter() yfilter.YFilter { return aggregateAddress.YFilter }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) SetFilter(yf yfilter.YFilter) { aggregateAddress.YFilter = yf }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetGoName(yname string) string {
    if yname == "aggregate-addr" { return "AggregateAddr" }
    if yname == "aggregate-prefix" { return "AggregatePrefix" }
    if yname == "generate-set-info" { return "GenerateSetInfo" }
    if yname == "generate-confederation-set-info" { return "GenerateConfederationSetInfo" }
    if yname == "summary-only" { return "SummaryOnly" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetSegmentPath() string {
    return "aggregate-address" + "[aggregate-addr='" + fmt.Sprintf("%v", aggregateAddress.AggregateAddr) + "']" + "[aggregate-prefix='" + fmt.Sprintf("%v", aggregateAddress.AggregatePrefix) + "']"
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["aggregate-addr"] = aggregateAddress.AggregateAddr
    leafs["aggregate-prefix"] = aggregateAddress.AggregatePrefix
    leafs["generate-set-info"] = aggregateAddress.GenerateSetInfo
    leafs["generate-confederation-set-info"] = aggregateAddress.GenerateConfederationSetInfo
    leafs["summary-only"] = aggregateAddress.SummaryOnly
    leafs["route-policy-name"] = aggregateAddress.RoutePolicyName
    return leafs
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetYangName() string { return "aggregate-address" }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) SetParent(parent types.Entity) { aggregateAddress.parent = parent }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetParent() types.Entity { return aggregateAddress.parent }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AggregateAddresses_AggregateAddress) GetParentYangName() string { return "aggregate-addresses" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening
// Enable route-flap dampening
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Half-life time for the penalty (minutes). The type is interface{} with
    // range: 1..45. Units are minute.
    HalfLife interface{}

    // Value to start reusing a route. The type is interface{} with range:
    // 1..20000.
    ReuseThreshold interface{}

    // Value to start suppressing a route. The type is interface{} with range:
    // 1..20000.
    SuppressThreshold interface{}

    // Maximum duration to suppress a stable route (seconds). The type is
    // interface{} with range: 1..255. Units are second.
    SuppressTime interface{}

    // Route policy to specify criteria for dampening. This cannot be specified if
    // any other parameters are specified. The type is string.
    RoutePolicyName interface{}
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetFilter() yfilter.YFilter { return dampening.YFilter }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) SetFilter(yf yfilter.YFilter) { dampening.YFilter = yf }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetGoName(yname string) string {
    if yname == "half-life" { return "HalfLife" }
    if yname == "reuse-threshold" { return "ReuseThreshold" }
    if yname == "suppress-threshold" { return "SuppressThreshold" }
    if yname == "suppress-time" { return "SuppressTime" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetSegmentPath() string {
    return "dampening"
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["half-life"] = dampening.HalfLife
    leafs["reuse-threshold"] = dampening.ReuseThreshold
    leafs["suppress-threshold"] = dampening.SuppressThreshold
    leafs["suppress-time"] = dampening.SuppressTime
    leafs["route-policy-name"] = dampening.RoutePolicyName
    return leafs
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetBundleName() string { return "cisco_ios_xr" }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetYangName() string { return "dampening" }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) SetParent(parent types.Entity) { dampening.parent = parent }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetParent() types.Entity { return dampening.parent }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Dampening) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes
// Redistribute RIP routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetFilter() yfilter.YFilter { return ripRoutes.YFilter }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) SetFilter(yf yfilter.YFilter) { ripRoutes.YFilter = yf }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetSegmentPath() string {
    return "rip-routes"
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = ripRoutes.DefaultMetric
    leafs["route-policy-name"] = ripRoutes.RoutePolicyName
    leafs["not-used"] = ripRoutes.NotUsed
    return leafs
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetYangName() string { return "rip-routes" }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) SetParent(parent types.Entity) { ripRoutes.parent = parent }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetParent() types.Entity { return ripRoutes.parent }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_RipRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes
// Redistribute lisp routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetFilter() yfilter.YFilter { return lispRoutes.YFilter }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) SetFilter(yf yfilter.YFilter) { lispRoutes.YFilter = yf }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetSegmentPath() string {
    return "lisp-routes"
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = lispRoutes.DefaultMetric
    leafs["route-policy-name"] = lispRoutes.RoutePolicyName
    return leafs
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetYangName() string { return "lisp-routes" }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) SetParent(parent types.Entity) { lispRoutes.parent = parent }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetParent() types.Entity { return lispRoutes.parent }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LispRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes
// Redistribute static routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetFilter() yfilter.YFilter { return staticRoutes.YFilter }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) SetFilter(yf yfilter.YFilter) { staticRoutes.YFilter = yf }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetSegmentPath() string {
    return "static-routes"
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = staticRoutes.DefaultMetric
    leafs["route-policy-name"] = staticRoutes.RoutePolicyName
    leafs["not-used"] = staticRoutes.NotUsed
    return leafs
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetYangName() string { return "static-routes" }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) SetParent(parent types.Entity) { staticRoutes.parent = parent }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetParent() types.Entity { return staticRoutes.parent }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_StaticRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance
// Define an administrative distance
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance for routes external to the AS. The type is interface{} with range:
    // 1..255. The default value is 20.
    ExternalRoutes interface{}

    // Distance for routes internal to the AS. The type is interface{} with range:
    // 1..255. The default value is 200.
    InternalRoutes interface{}

    // Distance for local routes. The type is interface{} with range: 1..255. The
    // default value is 200.
    LocalRoutes interface{}
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetGoName(yname string) string {
    if yname == "external-routes" { return "ExternalRoutes" }
    if yname == "internal-routes" { return "InternalRoutes" }
    if yname == "local-routes" { return "LocalRoutes" }
    return ""
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["external-routes"] = distance.ExternalRoutes
    leafs["internal-routes"] = distance.InternalRoutes
    leafs["local-routes"] = distance.LocalRoutes
    return leafs
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetYangName() string { return "distance" }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetParent() types.Entity { return distance.parent }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_Distance) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes
// Redistribute information for Application routes.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute application routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute.
    ApplicationRoute []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetFilter() yfilter.YFilter { return applicationRoutes.YFilter }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) SetFilter(yf yfilter.YFilter) { applicationRoutes.YFilter = yf }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetGoName(yname string) string {
    if yname == "application-route" { return "ApplicationRoute" }
    return ""
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetSegmentPath() string {
    return "application-routes"
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-route" {
        for _, c := range applicationRoutes.ApplicationRoute {
            if applicationRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute{}
        applicationRoutes.ApplicationRoute = append(applicationRoutes.ApplicationRoute, child)
        return &applicationRoutes.ApplicationRoute[len(applicationRoutes.ApplicationRoute)-1]
    }
    return nil
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range applicationRoutes.ApplicationRoute {
        children[applicationRoutes.ApplicationRoute[i].GetSegmentPath()] = &applicationRoutes.ApplicationRoute[i]
    }
    return children
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetYangName() string { return "application-routes" }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) SetParent(parent types.Entity) { applicationRoutes.parent = parent }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetParent() types.Entity { return applicationRoutes.parent }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute
// Redistribute application routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OnePK application name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetFilter() yfilter.YFilter { return applicationRoute.YFilter }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) SetFilter(yf yfilter.YFilter) { applicationRoute.YFilter = yf }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetSegmentPath() string {
    return "application-route" + "[instance-name='" + fmt.Sprintf("%v", applicationRoute.InstanceName) + "']"
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = applicationRoute.InstanceName
    leafs["default-metric"] = applicationRoute.DefaultMetric
    leafs["route-policy-name"] = applicationRoute.RoutePolicyName
    leafs["not-used"] = applicationRoute.NotUsed
    return leafs
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetBundleName() string { return "cisco_ios_xr" }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetYangName() string { return "application-route" }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) SetParent(parent types.Entity) { applicationRoute.parent = parent }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetParent() types.Entity { return applicationRoute.parent }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ApplicationRoutes_ApplicationRoute) GetParentYangName() string { return "application-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode
// BGP 6PE/MPLS-VPN label allocation mode
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label allocation mode: per-ce  Set per CE label mode, per-vrf Set per VRF
    // label mode, per-prefix Set per Prefix label mode (for MPLS-VPN only). The
    // type is string.
    LabelAllocationMode interface{}

    // Label mode route policy name. The type is string.
    RoutePolicyName interface{}
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetFilter() yfilter.YFilter { return labelMode.YFilter }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) SetFilter(yf yfilter.YFilter) { labelMode.YFilter = yf }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetGoName(yname string) string {
    if yname == "label-allocation-mode" { return "LabelAllocationMode" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetSegmentPath() string {
    return "label-mode"
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-allocation-mode"] = labelMode.LabelAllocationMode
    leafs["route-policy-name"] = labelMode.RoutePolicyName
    return leafs
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetBundleName() string { return "cisco_ios_xr" }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetYangName() string { return "label-mode" }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) SetParent(parent types.Entity) { labelMode.parent = parent }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetParent() types.Entity { return labelMode.parent }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_LabelMode) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes
// Redistribute information for EIGRP routes.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute EIGRP routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute.
    EigrpRoute []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetFilter() yfilter.YFilter { return eigrpRoutes.YFilter }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) SetFilter(yf yfilter.YFilter) { eigrpRoutes.YFilter = yf }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetGoName(yname string) string {
    if yname == "eigrp-route" { return "EigrpRoute" }
    return ""
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetSegmentPath() string {
    return "eigrp-routes"
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "eigrp-route" {
        for _, c := range eigrpRoutes.EigrpRoute {
            if eigrpRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute{}
        eigrpRoutes.EigrpRoute = append(eigrpRoutes.EigrpRoute, child)
        return &eigrpRoutes.EigrpRoute[len(eigrpRoutes.EigrpRoute)-1]
    }
    return nil
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eigrpRoutes.EigrpRoute {
        children[eigrpRoutes.EigrpRoute[i].GetSegmentPath()] = &eigrpRoutes.EigrpRoute[i]
    }
    return children
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetYangName() string { return "eigrp-routes" }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) SetParent(parent types.Entity) { eigrpRoutes.parent = parent }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetParent() types.Entity { return eigrpRoutes.parent }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute
// Redistribute EIGRP routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. EIGRP router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes,
    // Logical combinations permitted. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetFilter() yfilter.YFilter { return eigrpRoute.YFilter }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) SetFilter(yf yfilter.YFilter) { eigrpRoute.YFilter = yf }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "redist-type" { return "RedistType" }
    return ""
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetSegmentPath() string {
    return "eigrp-route" + "[instance-name='" + fmt.Sprintf("%v", eigrpRoute.InstanceName) + "']"
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = eigrpRoute.InstanceName
    leafs["default-metric"] = eigrpRoute.DefaultMetric
    leafs["route-policy-name"] = eigrpRoute.RoutePolicyName
    leafs["redist-type"] = eigrpRoute.RedistType
    return leafs
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetBundleName() string { return "cisco_ios_xr" }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetYangName() string { return "eigrp-route" }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) SetParent(parent types.Entity) { eigrpRoute.parent = parent }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetParent() types.Entity { return eigrpRoute.parent }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_EigrpRoutes_EigrpRoute) GetParentYangName() string { return "eigrp-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks
// Specify a network to announce via BGP
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sourced network configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork.
    SourcedNetwork []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetFilter() yfilter.YFilter { return sourcedNetworks.YFilter }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) SetFilter(yf yfilter.YFilter) { sourcedNetworks.YFilter = yf }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetGoName(yname string) string {
    if yname == "sourced-network" { return "SourcedNetwork" }
    return ""
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetSegmentPath() string {
    return "sourced-networks"
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sourced-network" {
        for _, c := range sourcedNetworks.SourcedNetwork {
            if sourcedNetworks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork{}
        sourcedNetworks.SourcedNetwork = append(sourcedNetworks.SourcedNetwork, child)
        return &sourcedNetworks.SourcedNetwork[len(sourcedNetworks.SourcedNetwork)-1]
    }
    return nil
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sourcedNetworks.SourcedNetwork {
        children[sourcedNetworks.SourcedNetwork[i].GetSegmentPath()] = &sourcedNetworks.SourcedNetwork[i]
    }
    return children
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetBundleName() string { return "cisco_ios_xr" }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetYangName() string { return "sourced-networks" }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) SetParent(parent types.Entity) { sourcedNetworks.parent = parent }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetParent() types.Entity { return sourcedNetworks.parent }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork
// Sourced network configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NetworkAddr interface{}

    // This attribute is a key. Network in prefix/length format (prefix part). The
    // type is interface{} with range: 0..128.
    NetworkPrefix interface{}

    // Specify a BGP backdoor route, default is FALSE. The type is bool.
    Backdoor interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetFilter() yfilter.YFilter { return sourcedNetwork.YFilter }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) SetFilter(yf yfilter.YFilter) { sourcedNetwork.YFilter = yf }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetGoName(yname string) string {
    if yname == "network-addr" { return "NetworkAddr" }
    if yname == "network-prefix" { return "NetworkPrefix" }
    if yname == "backdoor" { return "Backdoor" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetSegmentPath() string {
    return "sourced-network" + "[network-addr='" + fmt.Sprintf("%v", sourcedNetwork.NetworkAddr) + "']" + "[network-prefix='" + fmt.Sprintf("%v", sourcedNetwork.NetworkPrefix) + "']"
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["network-addr"] = sourcedNetwork.NetworkAddr
    leafs["network-prefix"] = sourcedNetwork.NetworkPrefix
    leafs["backdoor"] = sourcedNetwork.Backdoor
    leafs["route-policy-name"] = sourcedNetwork.RoutePolicyName
    return leafs
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetYangName() string { return "sourced-network" }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) SetParent(parent types.Entity) { sourcedNetwork.parent = parent }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetParent() types.Entity { return sourcedNetwork.parent }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SourcedNetworks_SourcedNetwork) GetParentYangName() string { return "sourced-networks" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes
// Redistribute connected routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetFilter() yfilter.YFilter { return connectedRoutes.YFilter }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) SetFilter(yf yfilter.YFilter) { connectedRoutes.YFilter = yf }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetSegmentPath() string {
    return "connected-routes"
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = connectedRoutes.DefaultMetric
    leafs["route-policy-name"] = connectedRoutes.RoutePolicyName
    leafs["not-used"] = connectedRoutes.NotUsed
    return leafs
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetYangName() string { return "connected-routes" }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) SetParent(parent types.Entity) { connectedRoutes.parent = parent }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetParent() types.Entity { return connectedRoutes.parent }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_ConnectedRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel
// Label allocation policy
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether all nets should be labeled, default is FALSE. The type is bool.
    All interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetFilter() yfilter.YFilter { return allocateLabel.YFilter }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) SetFilter(yf yfilter.YFilter) { allocateLabel.YFilter = yf }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetSegmentPath() string {
    return "allocate-label"
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all"] = allocateLabel.All
    leafs["route-policy-name"] = allocateLabel.RoutePolicyName
    return leafs
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetBundleName() string { return "cisco_ios_xr" }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetYangName() string { return "allocate-label" }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) SetParent(parent types.Entity) { allocateLabel.parent = parent }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetParent() types.Entity { return allocateLabel.parent }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AllocateLabel) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection
// Configure additional paths selection
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/disable selection . The type is BgpAfAdditionalPathsCfg.
    Selection interface{}

    // Route policy for selection. The type is string.
    RoutePolicyName interface{}
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetFilter() yfilter.YFilter { return additionalPathsSelection.YFilter }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) SetFilter(yf yfilter.YFilter) { additionalPathsSelection.YFilter = yf }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetGoName(yname string) string {
    if yname == "selection" { return "Selection" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetSegmentPath() string {
    return "additional-paths-selection"
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["selection"] = additionalPathsSelection.Selection
    leafs["route-policy-name"] = additionalPathsSelection.RoutePolicyName
    return leafs
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetBundleName() string { return "cisco_ios_xr" }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetYangName() string { return "additional-paths-selection" }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) SetParent(parent types.Entity) { additionalPathsSelection.parent = parent }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetParent() types.Entity { return additionalPathsSelection.parent }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_AdditionalPathsSelection) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes
// Redistribute information for OSPF routes.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute OSPF routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute.
    OspfRoute []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetFilter() yfilter.YFilter { return ospfRoutes.YFilter }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) SetFilter(yf yfilter.YFilter) { ospfRoutes.YFilter = yf }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetGoName(yname string) string {
    if yname == "ospf-route" { return "OspfRoute" }
    return ""
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetSegmentPath() string {
    return "ospf-routes"
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospf-route" {
        for _, c := range ospfRoutes.OspfRoute {
            if ospfRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute{}
        ospfRoutes.OspfRoute = append(ospfRoutes.OspfRoute, child)
        return &ospfRoutes.OspfRoute[len(ospfRoutes.OspfRoute)-1]
    }
    return nil
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ospfRoutes.OspfRoute {
        children[ospfRoutes.OspfRoute[i].GetSegmentPath()] = &ospfRoutes.OspfRoute[i]
    }
    return children
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetYangName() string { return "ospf-routes" }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) SetParent(parent types.Entity) { ospfRoutes.parent = parent }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetParent() types.Entity { return ospfRoutes.parent }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute
// Redistribute OSPF routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes of type
    // 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1,
    // 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA
    // external routes.  Logical combinations permitted. The type is string with
    // pattern: [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetFilter() yfilter.YFilter { return ospfRoute.YFilter }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) SetFilter(yf yfilter.YFilter) { ospfRoute.YFilter = yf }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "redist-type" { return "RedistType" }
    return ""
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetSegmentPath() string {
    return "ospf-route" + "[instance-name='" + fmt.Sprintf("%v", ospfRoute.InstanceName) + "']"
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = ospfRoute.InstanceName
    leafs["default-metric"] = ospfRoute.DefaultMetric
    leafs["route-policy-name"] = ospfRoute.RoutePolicyName
    leafs["redist-type"] = ospfRoute.RedistType
    return leafs
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetBundleName() string { return "cisco_ios_xr" }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetYangName() string { return "ospf-route" }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) SetParent(parent types.Entity) { ospfRoute.parent = parent }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetParent() types.Entity { return ospfRoute.parent }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_OspfRoutes_OspfRoute) GetParentYangName() string { return "ospf-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes
// Redistribute mobile routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetFilter() yfilter.YFilter { return mobileRoutes.YFilter }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) SetFilter(yf yfilter.YFilter) { mobileRoutes.YFilter = yf }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetSegmentPath() string {
    return "mobile-routes"
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = mobileRoutes.DefaultMetric
    leafs["route-policy-name"] = mobileRoutes.RoutePolicyName
    leafs["not-used"] = mobileRoutes.NotUsed
    return leafs
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetYangName() string { return "mobile-routes" }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) SetParent(parent types.Entity) { mobileRoutes.parent = parent }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetParent() types.Entity { return mobileRoutes.parent }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_MobileRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes
// Redistribute subscriber routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetFilter() yfilter.YFilter { return subscriberRoutes.YFilter }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) SetFilter(yf yfilter.YFilter) { subscriberRoutes.YFilter = yf }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetSegmentPath() string {
    return "subscriber-routes"
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = subscriberRoutes.DefaultMetric
    leafs["route-policy-name"] = subscriberRoutes.RoutePolicyName
    leafs["not-used"] = subscriberRoutes.NotUsed
    return leafs
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetYangName() string { return "subscriber-routes" }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) SetParent(parent types.Entity) { subscriberRoutes.parent = parent }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetParent() types.Entity { return subscriberRoutes.parent }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_VrfGlobalAfs_VrfGlobalAf_SubscriberRoutes) GetParentYangName() string { return "vrf-global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces
// Configure list of MPLS activated interfaces
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a MPLS activated interface. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface.
    MplsActivatedInterface []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetFilter() yfilter.YFilter { return mplsActivatedInterfaces.YFilter }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) SetFilter(yf yfilter.YFilter) { mplsActivatedInterfaces.YFilter = yf }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetGoName(yname string) string {
    if yname == "mpls-activated-interface" { return "MplsActivatedInterface" }
    return ""
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetSegmentPath() string {
    return "mpls-activated-interfaces"
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mpls-activated-interface" {
        for _, c := range mplsActivatedInterfaces.MplsActivatedInterface {
            if mplsActivatedInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface{}
        mplsActivatedInterfaces.MplsActivatedInterface = append(mplsActivatedInterfaces.MplsActivatedInterface, child)
        return &mplsActivatedInterfaces.MplsActivatedInterface[len(mplsActivatedInterfaces.MplsActivatedInterface)-1]
    }
    return nil
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mplsActivatedInterfaces.MplsActivatedInterface {
        children[mplsActivatedInterfaces.MplsActivatedInterface[i].GetSegmentPath()] = &mplsActivatedInterfaces.MplsActivatedInterface[i]
    }
    return children
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetYangName() string { return "mpls-activated-interfaces" }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) SetParent(parent types.Entity) { mplsActivatedInterfaces.parent = parent }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetParent() types.Entity { return mplsActivatedInterfaces.parent }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface
// Configure a MPLS activated interface
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetFilter() yfilter.YFilter { return mplsActivatedInterface.YFilter }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) SetFilter(yf yfilter.YFilter) { mplsActivatedInterface.YFilter = yf }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetSegmentPath() string {
    return "mpls-activated-interface" + "[interface-name='" + fmt.Sprintf("%v", mplsActivatedInterface.InterfaceName) + "']"
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = mplsActivatedInterface.InterfaceName
    return leafs
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetBundleName() string { return "cisco_ios_xr" }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetYangName() string { return "mpls-activated-interface" }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) SetParent(parent types.Entity) { mplsActivatedInterface.parent = parent }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetParent() types.Entity { return mplsActivatedInterface.parent }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_MplsActivatedInterfaces_MplsActivatedInterface) GetParentYangName() string { return "mpls-activated-interfaces" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers
// Adjust routing timers.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval (seconds). The type is interface{} with range: 0..65535.
    // Units are second. The default value is 60.
    Keepalive interface{}

    // Hold time (seconds).  Specify 0 to disable keepalives/hold time. The type
    // is interface{} with range: 0..65535. Units are second. The default value is
    // 180.
    HoldTime interface{}

    // Minimum acceptable hold time (seconds). Specify 0 to disable
    // keepalives/hold time. The type is interface{} with range: 0..65535. Units
    // are second. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetFilter() yfilter.YFilter { return globalTimers.YFilter }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) SetFilter(yf yfilter.YFilter) { globalTimers.YFilter = yf }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetGoName(yname string) string {
    if yname == "keepalive" { return "Keepalive" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetSegmentPath() string {
    return "global-timers"
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive"] = globalTimers.Keepalive
    leafs["hold-time"] = globalTimers.HoldTime
    leafs["min-accept-hold-time"] = globalTimers.MinAcceptHoldTime
    return leafs
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetBundleName() string { return "cisco_ios_xr" }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetYangName() string { return "global-timers" }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) SetParent(parent types.Entity) { globalTimers.parent = parent }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetParent() types.Entity { return globalTimers.parent }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_GlobalTimers) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd
// BFD configuration
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    DetectionMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "interval" { return "Interval" }
    return ""
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["interval"] = bfd.Interval
    return leafs
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetYangName() string { return "bfd" }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_Bfd) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes
// set socket parameters
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP Write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetFilter() yfilter.YFilter { return sendSocketBufferSizes.YFilter }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) SetFilter(yf yfilter.YFilter) { sendSocketBufferSizes.YFilter = yf }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetSegmentPath() string {
    return "send-socket-buffer-sizes"
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendSocketBufferSizes.SocketSendSize
    leafs["bgp-send-size"] = sendSocketBufferSizes.BgpSendSize
    return leafs
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetBundleName() string { return "cisco_ios_xr" }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetYangName() string { return "send-socket-buffer-sizes" }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) SetParent(parent types.Entity) { sendSocketBufferSizes.parent = parent }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetParent() types.Entity { return sendSocketBufferSizes.parent }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_SendSocketBufferSizes) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes
// Set socket and BGP receive buffer sizes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP Read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetFilter() yfilter.YFilter { return receiveSocketBufferSizes.YFilter }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) SetFilter(yf yfilter.YFilter) { receiveSocketBufferSizes.YFilter = yf }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetSegmentPath() string {
    return "receive-socket-buffer-sizes"
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveSocketBufferSizes.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveSocketBufferSizes.BgpReceiveSize
    return leafs
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetBundleName() string { return "cisco_ios_xr" }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetYangName() string { return "receive-socket-buffer-sizes" }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) SetParent(parent types.Entity) { receiveSocketBufferSizes.parent = parent }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetParent() types.Entity { return receiveSocketBufferSizes.parent }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfGlobal_ReceiveSocketBufferSizes) GetParentYangName() string { return "vrf-global" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors
// BGP VRF peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A particular VRF peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor.
    VrfNeighbor []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor

    // A particular VRF peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength.
    VrfNeighborPrefixLength []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetFilter() yfilter.YFilter { return vrfNeighbors.YFilter }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) SetFilter(yf yfilter.YFilter) { vrfNeighbors.YFilter = yf }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetGoName(yname string) string {
    if yname == "vrf-neighbor" { return "VrfNeighbor" }
    if yname == "vrf-neighbor-prefix-length" { return "VrfNeighborPrefixLength" }
    return ""
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetSegmentPath() string {
    return "vrf-neighbors"
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-neighbor" {
        for _, c := range vrfNeighbors.VrfNeighbor {
            if vrfNeighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor{}
        vrfNeighbors.VrfNeighbor = append(vrfNeighbors.VrfNeighbor, child)
        return &vrfNeighbors.VrfNeighbor[len(vrfNeighbors.VrfNeighbor)-1]
    }
    if childYangName == "vrf-neighbor-prefix-length" {
        for _, c := range vrfNeighbors.VrfNeighborPrefixLength {
            if vrfNeighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength{}
        vrfNeighbors.VrfNeighborPrefixLength = append(vrfNeighbors.VrfNeighborPrefixLength, child)
        return &vrfNeighbors.VrfNeighborPrefixLength[len(vrfNeighbors.VrfNeighborPrefixLength)-1]
    }
    return nil
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfNeighbors.VrfNeighbor {
        children[vrfNeighbors.VrfNeighbor[i].GetSegmentPath()] = &vrfNeighbors.VrfNeighbor[i]
    }
    for i := range vrfNeighbors.VrfNeighborPrefixLength {
        children[vrfNeighbors.VrfNeighborPrefixLength[i].GetSegmentPath()] = &vrfNeighbors.VrfNeighborPrefixLength[i]
    }
    return children
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetYangName() string { return "vrf-neighbors" }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) SetParent(parent types.Entity) { vrfNeighbors.parent = parent }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetParent() types.Entity { return vrfNeighbors.parent }

func (vrfNeighbors *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors) GetParentYangName() string { return "vrf" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor
// A particular VRF peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart support for neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is bool.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability.  FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // Address family type of a VRF neighbor.
    VrfNeighborAfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetFilter() yfilter.YFilter { return vrfNeighbor.YFilter }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) SetFilter(yf yfilter.YFilter) { vrfNeighbor.YFilter = yf }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "internal-vpn-client-ibgp-ce" { return "InternalVpnClientIbgpCe" }
    if yname == "session-group-add-member" { return "SessionGroupAddMember" }
    if yname == "egress-peer-engineering" { return "EgressPeerEngineering" }
    if yname == "neighbor-graceful-restart-stalepath-time" { return "NeighborGracefulRestartStalepathTime" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "description" { return "Description" }
    if yname == "neighbor-group-add-member" { return "NeighborGroupAddMember" }
    if yname == "ebgp-recv-dmz" { return "EbgpRecvDmz" }
    if yname == "neighbor-graceful-restart" { return "NeighborGracefulRestart" }
    if yname == "enforce-first-as" { return "EnforceFirstAs" }
    if yname == "idle-watch-time" { return "IdleWatchTime" }
    if yname == "session-open-mode" { return "SessionOpenMode" }
    if yname == "ebgp-send-dmz-enable-modes" { return "EbgpSendDmzEnableModes" }
    if yname == "suppress-all-capabilities" { return "SuppressAllCapabilities" }
    if yname == "max-peers" { return "MaxPeers" }
    if yname == "additional-paths-send-capability" { return "AdditionalPathsSendCapability" }
    if yname == "propagate-dmz-link-bandwidth" { return "PropagateDmzLinkBandwidth" }
    if yname == "bfd-enable-modes" { return "BfdEnableModes" }
    if yname == "ttl-security" { return "TtlSecurity" }
    if yname == "neighbor-graceful-restart-time" { return "NeighborGracefulRestartTime" }
    if yname == "bfd-multiplier" { return "BfdMultiplier" }
    if yname == "bfd-minimum-interval" { return "BfdMinimumInterval" }
    if yname == "remote-as-list" { return "RemoteAsList" }
    if yname == "additional-paths-receive-capability" { return "AdditionalPathsReceiveCapability" }
    if yname == "ignore-connected-check-ebgp" { return "IgnoreConnectedCheckEbgp" }
    if yname == "suppress-four-byte-as-capability" { return "SuppressFourByteAsCapability" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "vrf-neighbor-afs" { return "VrfNeighborAfs" }
    if yname == "local-address" { return "LocalAddress" }
    if yname == "bmp-activates" { return "BmpActivates" }
    if yname == "ebgp-multihop" { return "EbgpMultihop" }
    if yname == "remote-as" { return "RemoteAs" }
    if yname == "local-as" { return "LocalAs" }
    if yname == "password" { return "Password" }
    if yname == "advertisement-interval" { return "AdvertisementInterval" }
    if yname == "neighbor-cluster-id" { return "NeighborClusterId" }
    if yname == "tcpmss" { return "Tcpmss" }
    if yname == "tos" { return "Tos" }
    if yname == "update-in-filtering" { return "UpdateInFiltering" }
    if yname == "msg-log-out" { return "MsgLogOut" }
    if yname == "receive-buffer-size" { return "ReceiveBufferSize" }
    if yname == "msg-log-in" { return "MsgLogIn" }
    if yname == "send-buffer-size" { return "SendBufferSize" }
    if yname == "timers" { return "Timers" }
    if yname == "keychain" { return "Keychain" }
    if yname == "graceful-maintenance" { return "GracefulMaintenance" }
    return ""
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetSegmentPath() string {
    return "vrf-neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", vrfNeighbor.NeighborAddress) + "']"
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-neighbor-afs" {
        return &vrfNeighbor.VrfNeighborAfs
    }
    if childYangName == "local-address" {
        return &vrfNeighbor.LocalAddress
    }
    if childYangName == "bmp-activates" {
        return &vrfNeighbor.BmpActivates
    }
    if childYangName == "ebgp-multihop" {
        return &vrfNeighbor.EbgpMultihop
    }
    if childYangName == "remote-as" {
        return &vrfNeighbor.RemoteAs
    }
    if childYangName == "local-as" {
        return &vrfNeighbor.LocalAs
    }
    if childYangName == "password" {
        return &vrfNeighbor.Password
    }
    if childYangName == "advertisement-interval" {
        return &vrfNeighbor.AdvertisementInterval
    }
    if childYangName == "neighbor-cluster-id" {
        return &vrfNeighbor.NeighborClusterId
    }
    if childYangName == "tcpmss" {
        return &vrfNeighbor.Tcpmss
    }
    if childYangName == "tos" {
        return &vrfNeighbor.Tos
    }
    if childYangName == "update-in-filtering" {
        return &vrfNeighbor.UpdateInFiltering
    }
    if childYangName == "msg-log-out" {
        return &vrfNeighbor.MsgLogOut
    }
    if childYangName == "receive-buffer-size" {
        return &vrfNeighbor.ReceiveBufferSize
    }
    if childYangName == "msg-log-in" {
        return &vrfNeighbor.MsgLogIn
    }
    if childYangName == "send-buffer-size" {
        return &vrfNeighbor.SendBufferSize
    }
    if childYangName == "timers" {
        return &vrfNeighbor.Timers
    }
    if childYangName == "keychain" {
        return &vrfNeighbor.Keychain
    }
    if childYangName == "graceful-maintenance" {
        return &vrfNeighbor.GracefulMaintenance
    }
    return nil
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrf-neighbor-afs"] = &vrfNeighbor.VrfNeighborAfs
    children["local-address"] = &vrfNeighbor.LocalAddress
    children["bmp-activates"] = &vrfNeighbor.BmpActivates
    children["ebgp-multihop"] = &vrfNeighbor.EbgpMultihop
    children["remote-as"] = &vrfNeighbor.RemoteAs
    children["local-as"] = &vrfNeighbor.LocalAs
    children["password"] = &vrfNeighbor.Password
    children["advertisement-interval"] = &vrfNeighbor.AdvertisementInterval
    children["neighbor-cluster-id"] = &vrfNeighbor.NeighborClusterId
    children["tcpmss"] = &vrfNeighbor.Tcpmss
    children["tos"] = &vrfNeighbor.Tos
    children["update-in-filtering"] = &vrfNeighbor.UpdateInFiltering
    children["msg-log-out"] = &vrfNeighbor.MsgLogOut
    children["receive-buffer-size"] = &vrfNeighbor.ReceiveBufferSize
    children["msg-log-in"] = &vrfNeighbor.MsgLogIn
    children["send-buffer-size"] = &vrfNeighbor.SendBufferSize
    children["timers"] = &vrfNeighbor.Timers
    children["keychain"] = &vrfNeighbor.Keychain
    children["graceful-maintenance"] = &vrfNeighbor.GracefulMaintenance
    return children
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = vrfNeighbor.NeighborAddress
    leafs["internal-vpn-client-ibgp-ce"] = vrfNeighbor.InternalVpnClientIbgpCe
    leafs["session-group-add-member"] = vrfNeighbor.SessionGroupAddMember
    leafs["egress-peer-engineering"] = vrfNeighbor.EgressPeerEngineering
    leafs["neighbor-graceful-restart-stalepath-time"] = vrfNeighbor.NeighborGracefulRestartStalepathTime
    leafs["shutdown"] = vrfNeighbor.Shutdown
    leafs["description"] = vrfNeighbor.Description
    leafs["neighbor-group-add-member"] = vrfNeighbor.NeighborGroupAddMember
    leafs["ebgp-recv-dmz"] = vrfNeighbor.EbgpRecvDmz
    leafs["neighbor-graceful-restart"] = vrfNeighbor.NeighborGracefulRestart
    leafs["enforce-first-as"] = vrfNeighbor.EnforceFirstAs
    leafs["idle-watch-time"] = vrfNeighbor.IdleWatchTime
    leafs["session-open-mode"] = vrfNeighbor.SessionOpenMode
    leafs["ebgp-send-dmz-enable-modes"] = vrfNeighbor.EbgpSendDmzEnableModes
    leafs["suppress-all-capabilities"] = vrfNeighbor.SuppressAllCapabilities
    leafs["max-peers"] = vrfNeighbor.MaxPeers
    leafs["additional-paths-send-capability"] = vrfNeighbor.AdditionalPathsSendCapability
    leafs["propagate-dmz-link-bandwidth"] = vrfNeighbor.PropagateDmzLinkBandwidth
    leafs["bfd-enable-modes"] = vrfNeighbor.BfdEnableModes
    leafs["ttl-security"] = vrfNeighbor.TtlSecurity
    leafs["neighbor-graceful-restart-time"] = vrfNeighbor.NeighborGracefulRestartTime
    leafs["bfd-multiplier"] = vrfNeighbor.BfdMultiplier
    leafs["bfd-minimum-interval"] = vrfNeighbor.BfdMinimumInterval
    leafs["remote-as-list"] = vrfNeighbor.RemoteAsList
    leafs["additional-paths-receive-capability"] = vrfNeighbor.AdditionalPathsReceiveCapability
    leafs["ignore-connected-check-ebgp"] = vrfNeighbor.IgnoreConnectedCheckEbgp
    leafs["suppress-four-byte-as-capability"] = vrfNeighbor.SuppressFourByteAsCapability
    leafs["update-source-interface"] = vrfNeighbor.UpdateSourceInterface
    return leafs
}

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetYangName() string { return "vrf-neighbor" }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) SetParent(parent types.Entity) { vrfNeighbor.parent = parent }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetParent() types.Entity { return vrfNeighbor.parent }

func (vrfNeighbor *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor) GetParentYangName() string { return "vrf-neighbors" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family type of a VRF neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf.
    VrfNeighborAf []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetFilter() yfilter.YFilter { return vrfNeighborAfs.YFilter }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) SetFilter(yf yfilter.YFilter) { vrfNeighborAfs.YFilter = yf }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetGoName(yname string) string {
    if yname == "vrf-neighbor-af" { return "VrfNeighborAf" }
    return ""
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetSegmentPath() string {
    return "vrf-neighbor-afs"
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-neighbor-af" {
        for _, c := range vrfNeighborAfs.VrfNeighborAf {
            if vrfNeighborAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf{}
        vrfNeighborAfs.VrfNeighborAf = append(vrfNeighborAfs.VrfNeighborAf, child)
        return &vrfNeighborAfs.VrfNeighborAf[len(vrfNeighborAfs.VrfNeighborAf)-1]
    }
    return nil
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfNeighborAfs.VrfNeighborAf {
        children[vrfNeighborAfs.VrfNeighborAf[i].GetSegmentPath()] = &vrfNeighborAfs.VrfNeighborAf[i]
    }
    return children
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetYangName() string { return "vrf-neighbor-afs" }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) SetParent(parent types.Entity) { vrfNeighborAfs.parent = parent }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetParent() types.Entity { return vrfNeighborAfs.parent }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group.  FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT.  FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client.  FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetFilter() yfilter.YFilter { return vrfNeighborAf.YFilter }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) SetFilter(yf yfilter.YFilter) { vrfNeighborAf.YFilter = yf }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "neighbor-af-long-lived-graceful-restart-capable" { return "NeighborAfLongLivedGracefulRestartCapable" }
    if yname == "send-ext-community-ebgp" { return "SendExtCommunityEbgp" }
    if yname == "accept-route-legacy-rt" { return "AcceptRouteLegacyRt" }
    if yname == "send-community-ebgp" { return "SendCommunityEbgp" }
    if yname == "next-hop-unchanged" { return "NextHopUnchanged" }
    if yname == "advertise-local-labeled-route" { return "AdvertiseLocalLabeledRoute" }
    if yname == "flowspec-validation" { return "FlowspecValidation" }
    if yname == "encapsulation-type" { return "EncapsulationType" }
    if yname == "enforce-multiple-labels" { return "EnforceMultipleLabels" }
    if yname == "as-override" { return "AsOverride" }
    if yname == "multipath" { return "Multipath" }
    if yname == "send-community-ebgp-graceful-shutdown" { return "SendCommunityEbgpGracefulShutdown" }
    if yname == "activate" { return "Activate" }
    if yname == "prefix-orf-policy" { return "PrefixOrfPolicy" }
    if yname == "aigp" { return "Aigp" }
    if yname == "aigp-send-med" { return "AigpSendMed" }
    if yname == "allow-as-in" { return "AllowAsIn" }
    if yname == "advertise-orf" { return "AdvertiseOrf" }
    if yname == "route-reflector-client" { return "RouteReflectorClient" }
    if yname == "next-hop-self" { return "NextHopSelf" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-weight" { return "DefaultWeight" }
    if yname == "af-group" { return "AfGroup" }
    if yname == "next-hop-unchanged-multipath" { return "NextHopUnchangedMultipath" }
    if yname == "accept-own" { return "AcceptOwn" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "advertise-permanent-network" { return "AdvertisePermanentNetwork" }
    if yname == "aigp-cost-community" { return "AigpCostCommunity" }
    if yname == "advertise-def-imp-disable-v6" { return "AdvertiseDefImpDisableV6" }
    if yname == "advertise-disable" { return "AdvertiseDisable" }
    if yname == "maximum-prefixes" { return "MaximumPrefixes" }
    if yname == "remove-private-as-entire-as-path-inbound" { return "RemovePrivateAsEntireAsPathInbound" }
    if yname == "advertise-def-imp-disable-v4" { return "AdvertiseDefImpDisableV4" }
    if yname == "advertise-l2vpn-evpn" { return "AdvertiseL2VpnEvpn" }
    if yname == "advertise-local-l2vpn-evpn" { return "AdvertiseLocalL2VpnEvpn" }
    if yname == "neighbor-af-long-lived-graceful-restart-stale-time" { return "NeighborAfLongLivedGracefulRestartStaleTime" }
    if yname == "site-of-origin" { return "SiteOfOrigin" }
    if yname == "advertise-v6" { return "AdvertiseV6" }
    if yname == "advertise-local-v6" { return "AdvertiseLocalV6" }
    if yname == "import" { return "Import" }
    if yname == "default-originate" { return "DefaultOriginate" }
    if yname == "soft-reconfiguration" { return "SoftReconfiguration" }
    if yname == "advertise-vrf-imp-disable-v6" { return "AdvertiseVrfImpDisableV6" }
    if yname == "advertise-v4" { return "AdvertiseV4" }
    if yname == "advertise-local-v4" { return "AdvertiseLocalV4" }
    if yname == "remove-private-as-entire-as-path" { return "RemovePrivateAsEntireAsPath" }
    if yname == "advertise-vrf-imp-disable-v4" { return "AdvertiseVrfImpDisableV4" }
    return ""
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetSegmentPath() string {
    return "vrf-neighbor-af" + "[af-name='" + fmt.Sprintf("%v", vrfNeighborAf.AfName) + "']"
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aigp-cost-community" {
        return &vrfNeighborAf.AigpCostCommunity
    }
    if childYangName == "advertise-def-imp-disable-v6" {
        return &vrfNeighborAf.AdvertiseDefImpDisableV6
    }
    if childYangName == "advertise-disable" {
        return &vrfNeighborAf.AdvertiseDisable
    }
    if childYangName == "maximum-prefixes" {
        return &vrfNeighborAf.MaximumPrefixes
    }
    if childYangName == "remove-private-as-entire-as-path-inbound" {
        return &vrfNeighborAf.RemovePrivateAsEntireAsPathInbound
    }
    if childYangName == "advertise-def-imp-disable-v4" {
        return &vrfNeighborAf.AdvertiseDefImpDisableV4
    }
    if childYangName == "advertise-l2vpn-evpn" {
        return &vrfNeighborAf.AdvertiseL2VpnEvpn
    }
    if childYangName == "advertise-local-l2vpn-evpn" {
        return &vrfNeighborAf.AdvertiseLocalL2VpnEvpn
    }
    if childYangName == "neighbor-af-long-lived-graceful-restart-stale-time" {
        return &vrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    }
    if childYangName == "site-of-origin" {
        return &vrfNeighborAf.SiteOfOrigin
    }
    if childYangName == "advertise-v6" {
        return &vrfNeighborAf.AdvertiseV6
    }
    if childYangName == "advertise-local-v6" {
        return &vrfNeighborAf.AdvertiseLocalV6
    }
    if childYangName == "import" {
        return &vrfNeighborAf.Import
    }
    if childYangName == "default-originate" {
        return &vrfNeighborAf.DefaultOriginate
    }
    if childYangName == "soft-reconfiguration" {
        return &vrfNeighborAf.SoftReconfiguration
    }
    if childYangName == "advertise-vrf-imp-disable-v6" {
        return &vrfNeighborAf.AdvertiseVrfImpDisableV6
    }
    if childYangName == "advertise-v4" {
        return &vrfNeighborAf.AdvertiseV4
    }
    if childYangName == "advertise-local-v4" {
        return &vrfNeighborAf.AdvertiseLocalV4
    }
    if childYangName == "remove-private-as-entire-as-path" {
        return &vrfNeighborAf.RemovePrivateAsEntireAsPath
    }
    if childYangName == "advertise-vrf-imp-disable-v4" {
        return &vrfNeighborAf.AdvertiseVrfImpDisableV4
    }
    return nil
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aigp-cost-community"] = &vrfNeighborAf.AigpCostCommunity
    children["advertise-def-imp-disable-v6"] = &vrfNeighborAf.AdvertiseDefImpDisableV6
    children["advertise-disable"] = &vrfNeighborAf.AdvertiseDisable
    children["maximum-prefixes"] = &vrfNeighborAf.MaximumPrefixes
    children["remove-private-as-entire-as-path-inbound"] = &vrfNeighborAf.RemovePrivateAsEntireAsPathInbound
    children["advertise-def-imp-disable-v4"] = &vrfNeighborAf.AdvertiseDefImpDisableV4
    children["advertise-l2vpn-evpn"] = &vrfNeighborAf.AdvertiseL2VpnEvpn
    children["advertise-local-l2vpn-evpn"] = &vrfNeighborAf.AdvertiseLocalL2VpnEvpn
    children["neighbor-af-long-lived-graceful-restart-stale-time"] = &vrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    children["site-of-origin"] = &vrfNeighborAf.SiteOfOrigin
    children["advertise-v6"] = &vrfNeighborAf.AdvertiseV6
    children["advertise-local-v6"] = &vrfNeighborAf.AdvertiseLocalV6
    children["import"] = &vrfNeighborAf.Import
    children["default-originate"] = &vrfNeighborAf.DefaultOriginate
    children["soft-reconfiguration"] = &vrfNeighborAf.SoftReconfiguration
    children["advertise-vrf-imp-disable-v6"] = &vrfNeighborAf.AdvertiseVrfImpDisableV6
    children["advertise-v4"] = &vrfNeighborAf.AdvertiseV4
    children["advertise-local-v4"] = &vrfNeighborAf.AdvertiseLocalV4
    children["remove-private-as-entire-as-path"] = &vrfNeighborAf.RemovePrivateAsEntireAsPath
    children["advertise-vrf-imp-disable-v4"] = &vrfNeighborAf.AdvertiseVrfImpDisableV4
    return children
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = vrfNeighborAf.AfName
    leafs["neighbor-af-long-lived-graceful-restart-capable"] = vrfNeighborAf.NeighborAfLongLivedGracefulRestartCapable
    leafs["send-ext-community-ebgp"] = vrfNeighborAf.SendExtCommunityEbgp
    leafs["accept-route-legacy-rt"] = vrfNeighborAf.AcceptRouteLegacyRt
    leafs["send-community-ebgp"] = vrfNeighborAf.SendCommunityEbgp
    leafs["next-hop-unchanged"] = vrfNeighborAf.NextHopUnchanged
    leafs["advertise-local-labeled-route"] = vrfNeighborAf.AdvertiseLocalLabeledRoute
    leafs["flowspec-validation"] = vrfNeighborAf.FlowspecValidation
    leafs["encapsulation-type"] = vrfNeighborAf.EncapsulationType
    leafs["enforce-multiple-labels"] = vrfNeighborAf.EnforceMultipleLabels
    leafs["as-override"] = vrfNeighborAf.AsOverride
    leafs["multipath"] = vrfNeighborAf.Multipath
    leafs["send-community-ebgp-graceful-shutdown"] = vrfNeighborAf.SendCommunityEbgpGracefulShutdown
    leafs["activate"] = vrfNeighborAf.Activate
    leafs["prefix-orf-policy"] = vrfNeighborAf.PrefixOrfPolicy
    leafs["aigp"] = vrfNeighborAf.Aigp
    leafs["aigp-send-med"] = vrfNeighborAf.AigpSendMed
    leafs["allow-as-in"] = vrfNeighborAf.AllowAsIn
    leafs["advertise-orf"] = vrfNeighborAf.AdvertiseOrf
    leafs["route-reflector-client"] = vrfNeighborAf.RouteReflectorClient
    leafs["next-hop-self"] = vrfNeighborAf.NextHopSelf
    leafs["route-policy-in"] = vrfNeighborAf.RoutePolicyIn
    leafs["default-weight"] = vrfNeighborAf.DefaultWeight
    leafs["af-group"] = vrfNeighborAf.AfGroup
    leafs["next-hop-unchanged-multipath"] = vrfNeighborAf.NextHopUnchangedMultipath
    leafs["accept-own"] = vrfNeighborAf.AcceptOwn
    leafs["route-policy-out"] = vrfNeighborAf.RoutePolicyOut
    leafs["advertise-permanent-network"] = vrfNeighborAf.AdvertisePermanentNetwork
    return leafs
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetYangName() string { return "vrf-neighbor-af" }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) SetParent(parent types.Entity) { vrfNeighborAf.parent = parent }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetParent() types.Entity { return vrfNeighborAf.parent }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf) GetParentYangName() string { return "vrf-neighbor-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    // This attribute is mandatory.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi. This attribute is mandatory.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetFilter() yfilter.YFilter { return aigpCostCommunity.YFilter }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) SetFilter(yf yfilter.YFilter) { aigpCostCommunity.YFilter = yf }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "cost-community-id" { return "CostCommunityId" }
    if yname == "transitive" { return "Transitive" }
    if yname == "cost-community-poi-type" { return "CostCommunityPoiType" }
    return ""
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetSegmentPath() string {
    return "aigp-cost-community"
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = aigpCostCommunity.Enable
    leafs["cost-community-id"] = aigpCostCommunity.CostCommunityId
    leafs["transitive"] = aigpCostCommunity.Transitive
    leafs["cost-community-poi-type"] = aigpCostCommunity.CostCommunityPoiType
    return leafs
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetYangName() string { return "aigp-cost-community" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) SetParent(parent types.Entity) { aigpCostCommunity.parent = parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetParent() types.Entity { return aigpCostCommunity.parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV6.YFilter }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV6.YFilter = yf }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetSegmentPath() string {
    return "advertise-def-imp-disable-v6"
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV6.AfName
    leafs["adv-option"] = advertiseDefImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV6.RtType
    return leafs
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetYangName() string { return "advertise-def-imp-disable-v6" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) SetParent(parent types.Entity) { advertiseDefImpDisableV6.parent = parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetParent() types.Entity { return advertiseDefImpDisableV6.parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetFilter() yfilter.YFilter { return advertiseDisable.YFilter }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) SetFilter(yf yfilter.YFilter) { advertiseDisable.YFilter = yf }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetSegmentPath() string {
    return "advertise-disable"
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDisable.AfName
    leafs["reorg-option"] = advertiseDisable.ReorgOption
    leafs["rt-type"] = advertiseDisable.RtType
    return leafs
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetYangName() string { return "advertise-disable" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) SetParent(parent types.Entity) { advertiseDisable.parent = parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetParent() types.Entity { return advertiseDisable.parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetFilter() yfilter.YFilter { return maximumPrefixes.YFilter }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) SetFilter(yf yfilter.YFilter) { maximumPrefixes.YFilter = yf }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetGoName(yname string) string {
    if yname == "prefix-limit" { return "PrefixLimit" }
    if yname == "warning-percentage" { return "WarningPercentage" }
    if yname == "warning-only" { return "WarningOnly" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "discard-extra-paths" { return "DiscardExtraPaths" }
    return ""
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetSegmentPath() string {
    return "maximum-prefixes"
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-limit"] = maximumPrefixes.PrefixLimit
    leafs["warning-percentage"] = maximumPrefixes.WarningPercentage
    leafs["warning-only"] = maximumPrefixes.WarningOnly
    leafs["restart-time"] = maximumPrefixes.RestartTime
    leafs["discard-extra-paths"] = maximumPrefixes.DiscardExtraPaths
    return leafs
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetYangName() string { return "maximum-prefixes" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) SetParent(parent types.Entity) { maximumPrefixes.parent = parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetParent() types.Entity { return maximumPrefixes.parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPathInbound.YFilter }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPathInbound.YFilter = yf }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetSegmentPath() string {
    return "remove-private-as-entire-as-path-inbound"
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPathInbound.Enable
    leafs["entire"] = removePrivateAsEntireAsPathInbound.Entire
    return leafs
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetYangName() string { return "remove-private-as-entire-as-path-inbound" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) SetParent(parent types.Entity) { removePrivateAsEntireAsPathInbound.parent = parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetParent() types.Entity { return removePrivateAsEntireAsPathInbound.parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV4.YFilter }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV4.YFilter = yf }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetSegmentPath() string {
    return "advertise-def-imp-disable-v4"
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV4.AfName
    leafs["adv-option"] = advertiseDefImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV4.RtType
    return leafs
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetYangName() string { return "advertise-def-imp-disable-v4" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) SetParent(parent types.Entity) { advertiseDefImpDisableV4.parent = parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetParent() types.Entity { return advertiseDefImpDisableV4.parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseL2VpnEvpn.YFilter }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseL2VpnEvpn.YFilter = yf }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetSegmentPath() string {
    return "advertise-l2vpn-evpn"
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseL2VpnEvpn.RtType
    return leafs
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetYangName() string { return "advertise-l2vpn-evpn" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) SetParent(parent types.Entity) { advertiseL2VpnEvpn.parent = parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetParent() types.Entity { return advertiseL2VpnEvpn.parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseLocalL2VpnEvpn.YFilter }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseLocalL2VpnEvpn.YFilter = yf }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetSegmentPath() string {
    return "advertise-local-l2vpn-evpn"
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseLocalL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseLocalL2VpnEvpn.RtType
    return leafs
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetYangName() string { return "advertise-local-l2vpn-evpn" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) SetParent(parent types.Entity) { advertiseLocalL2VpnEvpn.parent = parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetParent() types.Entity { return advertiseLocalL2VpnEvpn.parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetFilter() yfilter.YFilter { return neighborAfLongLivedGracefulRestartStaleTime.YFilter }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetFilter(yf yfilter.YFilter) { neighborAfLongLivedGracefulRestartStaleTime.YFilter = yf }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetGoName(yname string) string {
    if yname == "stale-time-send" { return "StaleTimeSend" }
    if yname == "stale-time-accept" { return "StaleTimeAccept" }
    return ""
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetSegmentPath() string {
    return "neighbor-af-long-lived-graceful-restart-stale-time"
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stale-time-send"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend
    leafs["stale-time-accept"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept
    return leafs
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetYangName() string { return "neighbor-af-long-lived-graceful-restart-stale-time" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetParent(parent types.Entity) { neighborAfLongLivedGracefulRestartStaleTime.parent = parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParent() types.Entity { return neighborAfLongLivedGracefulRestartStaleTime.parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetFilter() yfilter.YFilter { return siteOfOrigin.YFilter }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) SetFilter(yf yfilter.YFilter) { siteOfOrigin.YFilter = yf }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "address-index" { return "AddressIndex" }
    return ""
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetSegmentPath() string {
    return "site-of-origin"
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = siteOfOrigin.Type
    leafs["as-xx"] = siteOfOrigin.AsXx
    leafs["as"] = siteOfOrigin.As
    leafs["as-index"] = siteOfOrigin.AsIndex
    leafs["address"] = siteOfOrigin.Address
    leafs["address-index"] = siteOfOrigin.AddressIndex
    return leafs
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetYangName() string { return "site-of-origin" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) SetParent(parent types.Entity) { siteOfOrigin.parent = parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetParent() types.Entity { return siteOfOrigin.parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetFilter() yfilter.YFilter { return advertiseV6.YFilter }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) SetFilter(yf yfilter.YFilter) { advertiseV6.YFilter = yf }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetSegmentPath() string {
    return "advertise-v6"
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV6.AfName
    leafs["reorg-option"] = advertiseV6.ReorgOption
    leafs["rt-type"] = advertiseV6.RtType
    return leafs
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetYangName() string { return "advertise-v6" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) SetParent(parent types.Entity) { advertiseV6.parent = parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetParent() types.Entity { return advertiseV6.parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetFilter() yfilter.YFilter { return advertiseLocalV6.YFilter }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) SetFilter(yf yfilter.YFilter) { advertiseLocalV6.YFilter = yf }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetSegmentPath() string {
    return "advertise-local-v6"
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV6.AfName
    leafs["reorg-option"] = advertiseLocalV6.ReorgOption
    leafs["rt-type"] = advertiseLocalV6.RtType
    return leafs
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetYangName() string { return "advertise-local-v6" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) SetParent(parent types.Entity) { advertiseLocalV6.parent = parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetParent() types.Entity { return advertiseLocalV6.parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetGoName(yname string) string {
    if yname == "import-stitching" { return "ImportStitching" }
    if yname == "import-reoriginate" { return "ImportReoriginate" }
    if yname == "import-reoriginate-stitching" { return "ImportReoriginateStitching" }
    return ""
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetSegmentPath() string {
    return "import"
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["import-stitching"] = self.ImportStitching
    leafs["import-reoriginate"] = self.ImportReoriginate
    leafs["import-reoriginate-stitching"] = self.ImportReoriginateStitching
    return leafs
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetBundleName() string { return "cisco_ios_xr" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetYangName() string { return "import" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) SetParent(parent types.Entity) { self.parent = parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetParent() types.Entity { return self.parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_Import) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetFilter() yfilter.YFilter { return defaultOriginate.YFilter }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) SetFilter(yf yfilter.YFilter) { defaultOriginate.YFilter = yf }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetSegmentPath() string {
    return "default-originate"
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = defaultOriginate.Enable
    leafs["route-policy-name"] = defaultOriginate.RoutePolicyName
    return leafs
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetBundleName() string { return "cisco_ios_xr" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetYangName() string { return "default-originate" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) SetParent(parent types.Entity) { defaultOriginate.parent = parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetParent() types.Entity { return defaultOriginate.parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetFilter() yfilter.YFilter { return softReconfiguration.YFilter }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) SetFilter(yf yfilter.YFilter) { softReconfiguration.YFilter = yf }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetGoName(yname string) string {
    if yname == "inbound-soft" { return "InboundSoft" }
    if yname == "soft-always" { return "SoftAlways" }
    return ""
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetSegmentPath() string {
    return "soft-reconfiguration"
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inbound-soft"] = softReconfiguration.InboundSoft
    leafs["soft-always"] = softReconfiguration.SoftAlways
    return leafs
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetYangName() string { return "soft-reconfiguration" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) SetParent(parent types.Entity) { softReconfiguration.parent = parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetParent() types.Entity { return softReconfiguration.parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV6.YFilter }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV6.YFilter = yf }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v6"
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV6.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV6.RtType
    return leafs
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetYangName() string { return "advertise-vrf-imp-disable-v6" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) SetParent(parent types.Entity) { advertiseVrfImpDisableV6.parent = parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetParent() types.Entity { return advertiseVrfImpDisableV6.parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetFilter() yfilter.YFilter { return advertiseV4.YFilter }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) SetFilter(yf yfilter.YFilter) { advertiseV4.YFilter = yf }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetSegmentPath() string {
    return "advertise-v4"
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV4.AfName
    leafs["reorg-option"] = advertiseV4.ReorgOption
    leafs["rt-type"] = advertiseV4.RtType
    return leafs
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetYangName() string { return "advertise-v4" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) SetParent(parent types.Entity) { advertiseV4.parent = parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetParent() types.Entity { return advertiseV4.parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetFilter() yfilter.YFilter { return advertiseLocalV4.YFilter }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) SetFilter(yf yfilter.YFilter) { advertiseLocalV4.YFilter = yf }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetSegmentPath() string {
    return "advertise-local-v4"
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV4.AfName
    leafs["reorg-option"] = advertiseLocalV4.ReorgOption
    leafs["rt-type"] = advertiseLocalV4.RtType
    return leafs
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetYangName() string { return "advertise-local-v4" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) SetParent(parent types.Entity) { advertiseLocalV4.parent = parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetParent() types.Entity { return advertiseLocalV4.parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPath.YFilter }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPath.YFilter = yf }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetSegmentPath() string {
    return "remove-private-as-entire-as-path"
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPath.Enable
    leafs["entire"] = removePrivateAsEntireAsPath.Entire
    return leafs
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetYangName() string { return "remove-private-as-entire-as-path" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) SetParent(parent types.Entity) { removePrivateAsEntireAsPath.parent = parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetParent() types.Entity { return removePrivateAsEntireAsPath.parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV4.YFilter }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV4.YFilter = yf }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v4"
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV4.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV4.RtType
    return leafs
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetYangName() string { return "advertise-vrf-imp-disable-v4" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) SetParent(parent types.Entity) { advertiseVrfImpDisableV4.parent = parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetParent() types.Entity { return advertiseVrfImpDisableV4.parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetFilter() yfilter.YFilter { return localAddress.YFilter }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) SetFilter(yf yfilter.YFilter) { localAddress.YFilter = yf }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetGoName(yname string) string {
    if yname == "local-address-disable" { return "LocalAddressDisable" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    return ""
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetSegmentPath() string {
    return "local-address"
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-address-disable"] = localAddress.LocalAddressDisable
    leafs["local-ip-address"] = localAddress.LocalIpAddress
    return leafs
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetYangName() string { return "local-address" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) SetParent(parent types.Entity) { localAddress.parent = parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetParent() types.Entity { return localAddress.parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAddress) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate.
    BmpActivate []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetFilter() yfilter.YFilter { return bmpActivates.YFilter }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) SetFilter(yf yfilter.YFilter) { bmpActivates.YFilter = yf }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetGoName(yname string) string {
    if yname == "bmp-activate" { return "BmpActivate" }
    return ""
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetSegmentPath() string {
    return "bmp-activates"
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-activate" {
        for _, c := range bmpActivates.BmpActivate {
            if bmpActivates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate{}
        bmpActivates.BmpActivate = append(bmpActivates.BmpActivate, child)
        return &bmpActivates.BmpActivate[len(bmpActivates.BmpActivate)-1]
    }
    return nil
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpActivates.BmpActivate {
        children[bmpActivates.BmpActivate[i].GetSegmentPath()] = &bmpActivates.BmpActivate[i]
    }
    return children
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetYangName() string { return "bmp-activates" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) SetParent(parent types.Entity) { bmpActivates.parent = parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetParent() types.Entity { return bmpActivates.parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetFilter() yfilter.YFilter { return bmpActivate.YFilter }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) SetFilter(yf yfilter.YFilter) { bmpActivate.YFilter = yf }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    return ""
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetSegmentPath() string {
    return "bmp-activate" + "[server-id='" + fmt.Sprintf("%v", bmpActivate.ServerId) + "']"
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpActivate.ServerId
    return leafs
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetYangName() string { return "bmp-activate" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) SetParent(parent types.Entity) { bmpActivate.parent = parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetParent() types.Entity { return bmpActivate.parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_BmpActivates_BmpActivate) GetParentYangName() string { return "bmp-activates" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetFilter() yfilter.YFilter { return ebgpMultihop.YFilter }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) SetFilter(yf yfilter.YFilter) { ebgpMultihop.YFilter = yf }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetGoName(yname string) string {
    if yname == "max-hop-count" { return "MaxHopCount" }
    if yname == "mpls-deactivation" { return "MplsDeactivation" }
    return ""
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetSegmentPath() string {
    return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-hop-count"] = ebgpMultihop.MaxHopCount
    leafs["mpls-deactivation"] = ebgpMultihop.MplsDeactivation
    return leafs
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetBundleName() string { return "cisco_ios_xr" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetYangName() string { return "ebgp-multihop" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) SetParent(parent types.Entity) { ebgpMultihop.parent = parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetParent() types.Entity { return ebgpMultihop.parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_EbgpMultihop) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetFilter() yfilter.YFilter { return remoteAs.YFilter }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) SetFilter(yf yfilter.YFilter) { remoteAs.YFilter = yf }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetSegmentPath() string {
    return "remote-as"
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = remoteAs.AsXx
    leafs["as-yy"] = remoteAs.AsYy
    return leafs
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetBundleName() string { return "cisco_ios_xr" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetYangName() string { return "remote-as" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) SetParent(parent types.Entity) { remoteAs.parent = parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetParent() types.Entity { return remoteAs.parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_RemoteAs) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetFilter() yfilter.YFilter { return localAs.YFilter }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) SetFilter(yf yfilter.YFilter) { localAs.YFilter = yf }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "no-prepend" { return "NoPrepend" }
    if yname == "disable" { return "Disable" }
    if yname == "replace-as" { return "ReplaceAs" }
    if yname == "dual-as" { return "DualAs" }
    return ""
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetSegmentPath() string {
    return "local-as"
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = localAs.AsXx
    leafs["as-yy"] = localAs.AsYy
    leafs["no-prepend"] = localAs.NoPrepend
    leafs["disable"] = localAs.Disable
    leafs["replace-as"] = localAs.ReplaceAs
    leafs["dual-as"] = localAs.DualAs
    return leafs
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetBundleName() string { return "cisco_ios_xr" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetYangName() string { return "local-as" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) SetParent(parent types.Entity) { localAs.parent = parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetParent() types.Entity { return localAs.parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_LocalAs) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetFilter() yfilter.YFilter { return password.YFilter }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) SetFilter(yf yfilter.YFilter) { password.YFilter = yf }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetGoName(yname string) string {
    if yname == "password-disable" { return "PasswordDisable" }
    if yname == "password" { return "Password" }
    return ""
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetSegmentPath() string {
    return "password"
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password-disable"] = password.PasswordDisable
    leafs["password"] = password.Password
    return leafs
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetBundleName() string { return "cisco_ios_xr" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetYangName() string { return "password" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) SetParent(parent types.Entity) { password.parent = parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetParent() types.Entity { return password.parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Password) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetFilter() yfilter.YFilter { return advertisementInterval.YFilter }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) SetFilter(yf yfilter.YFilter) { advertisementInterval.YFilter = yf }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetGoName(yname string) string {
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "minimum-interval-msecs" { return "MinimumIntervalMsecs" }
    return ""
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetSegmentPath() string {
    return "advertisement-interval"
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-interval"] = advertisementInterval.MinimumInterval
    leafs["minimum-interval-msecs"] = advertisementInterval.MinimumIntervalMsecs
    return leafs
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetBundleName() string { return "cisco_ios_xr" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetYangName() string { return "advertisement-interval" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) SetParent(parent types.Entity) { advertisementInterval.parent = parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetParent() types.Entity { return advertisementInterval.parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_AdvertisementInterval) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetFilter() yfilter.YFilter { return neighborClusterId.YFilter }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) SetFilter(yf yfilter.YFilter) { neighborClusterId.YFilter = yf }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetSegmentPath() string {
    return "neighbor-cluster-id"
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = neighborClusterId.ClusterIdNumber
    leafs["cluster-id-address"] = neighborClusterId.ClusterIdAddress
    return leafs
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetYangName() string { return "neighbor-cluster-id" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) SetParent(parent types.Entity) { neighborClusterId.parent = parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetParent() types.Entity { return neighborClusterId.parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_NeighborClusterId) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetFilter() yfilter.YFilter { return tcpmss.YFilter }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) SetFilter(yf yfilter.YFilter) { tcpmss.YFilter = yf }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetGoName(yname string) string {
    if yname == "tcpmss-disable" { return "TcpmssDisable" }
    if yname == "mss" { return "Mss" }
    return ""
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetSegmentPath() string {
    return "tcpmss"
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcpmss-disable"] = tcpmss.TcpmssDisable
    leafs["mss"] = tcpmss.Mss
    return leafs
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetBundleName() string { return "cisco_ios_xr" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetYangName() string { return "tcpmss" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) SetParent(parent types.Entity) { tcpmss.parent = parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetParent() types.Entity { return tcpmss.parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tcpmss) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetYangName() string { return "tos" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetParent() types.Entity { return tos.parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Tos) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetFilter() yfilter.YFilter { return updateInFiltering.YFilter }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) SetFilter(yf yfilter.YFilter) { updateInFiltering.YFilter = yf }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "update-in-filtering-attribute-filter-group" { return "UpdateInFilteringAttributeFilterGroup" }
    if yname == "update-in-filtering-syslog-disable" { return "UpdateInFilteringSyslogDisable" }
    if yname == "update-in-filtering-message-buffers" { return "UpdateInFilteringMessageBuffers" }
    return ""
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetSegmentPath() string {
    return "update-in-filtering"
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update-in-filtering-message-buffers" {
        return &updateInFiltering.UpdateInFilteringMessageBuffers
    }
    return nil
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["update-in-filtering-message-buffers"] = &updateInFiltering.UpdateInFilteringMessageBuffers
    return children
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = updateInFiltering.Enable
    leafs["update-in-filtering-attribute-filter-group"] = updateInFiltering.UpdateInFilteringAttributeFilterGroup
    leafs["update-in-filtering-syslog-disable"] = updateInFiltering.UpdateInFilteringSyslogDisable
    return leafs
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetYangName() string { return "update-in-filtering" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) SetParent(parent types.Entity) { updateInFiltering.parent = parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetParent() types.Entity { return updateInFiltering.parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetFilter() yfilter.YFilter { return updateInFilteringMessageBuffers.YFilter }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetFilter(yf yfilter.YFilter) { updateInFilteringMessageBuffers.YFilter = yf }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetGoName(yname string) string {
    if yname == "number-of-buffers" { return "NumberOfBuffers" }
    if yname == "non-circular-buffer" { return "NonCircularBuffer" }
    return ""
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetSegmentPath() string {
    return "update-in-filtering-message-buffers"
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-buffers"] = updateInFilteringMessageBuffers.NumberOfBuffers
    leafs["non-circular-buffer"] = updateInFilteringMessageBuffers.NonCircularBuffer
    return leafs
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetYangName() string { return "update-in-filtering-message-buffers" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetParent(parent types.Entity) { updateInFilteringMessageBuffers.parent = parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParent() types.Entity { return updateInFilteringMessageBuffers.parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParentYangName() string { return "update-in-filtering" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetFilter() yfilter.YFilter { return msgLogOut.YFilter }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) SetFilter(yf yfilter.YFilter) { msgLogOut.YFilter = yf }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetSegmentPath() string {
    return "msg-log-out"
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogOut.MsgBufCount
    leafs["msg-log-disable"] = msgLogOut.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogOut.MsgLogInheritDisable
    return leafs
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetYangName() string { return "msg-log-out" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) SetParent(parent types.Entity) { msgLogOut.parent = parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetParent() types.Entity { return msgLogOut.parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogOut) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetFilter() yfilter.YFilter { return receiveBufferSize.YFilter }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) SetFilter(yf yfilter.YFilter) { receiveBufferSize.YFilter = yf }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetSegmentPath() string {
    return "receive-buffer-size"
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveBufferSize.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveBufferSize.BgpReceiveSize
    return leafs
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetYangName() string { return "receive-buffer-size" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) SetParent(parent types.Entity) { receiveBufferSize.parent = parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetParent() types.Entity { return receiveBufferSize.parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_ReceiveBufferSize) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetFilter() yfilter.YFilter { return msgLogIn.YFilter }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) SetFilter(yf yfilter.YFilter) { msgLogIn.YFilter = yf }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetSegmentPath() string {
    return "msg-log-in"
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogIn.MsgBufCount
    leafs["msg-log-disable"] = msgLogIn.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogIn.MsgLogInheritDisable
    return leafs
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetYangName() string { return "msg-log-in" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) SetParent(parent types.Entity) { msgLogIn.parent = parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetParent() types.Entity { return msgLogIn.parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_MsgLogIn) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetFilter() yfilter.YFilter { return sendBufferSize.YFilter }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) SetFilter(yf yfilter.YFilter) { sendBufferSize.YFilter = yf }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetSegmentPath() string {
    return "send-buffer-size"
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendBufferSize.SocketSendSize
    leafs["bgp-send-size"] = sendBufferSize.BgpSendSize
    return leafs
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetYangName() string { return "send-buffer-size" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) SetParent(parent types.Entity) { sendBufferSize.parent = parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetParent() types.Entity { return sendBufferSize.parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_SendBufferSize) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetGoName(yname string) string {
    if yname == "keepalive-interval" { return "KeepaliveInterval" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive-interval"] = timers.KeepaliveInterval
    leafs["hold-time"] = timers.HoldTime
    leafs["min-accept-hold-time"] = timers.MinAcceptHoldTime
    return leafs
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetYangName() string { return "timers" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Timers) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetFilter() yfilter.YFilter { return keychain.YFilter }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) SetFilter(yf yfilter.YFilter) { keychain.YFilter = yf }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetGoName(yname string) string {
    if yname == "keychain-disable" { return "KeychainDisable" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetSegmentPath() string {
    return "keychain"
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keychain-disable"] = keychain.KeychainDisable
    leafs["keychain-name"] = keychain.KeychainName
    return leafs
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetBundleName() string { return "cisco_ios_xr" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetYangName() string { return "keychain" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) SetParent(parent types.Entity) { keychain.parent = parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetParent() types.Entity { return keychain.parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_Keychain) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetFilter() yfilter.YFilter { return gracefulMaintenance.YFilter }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) SetFilter(yf yfilter.YFilter) { gracefulMaintenance.YFilter = yf }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "graceful-maintenance-activate" { return "GracefulMaintenanceActivate" }
    if yname == "graceful-maintenance-local-preference" { return "GracefulMaintenanceLocalPreference" }
    if yname == "graceful-maintenance-as-prepends" { return "GracefulMaintenanceAsPrepends" }
    return ""
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetSegmentPath() string {
    return "graceful-maintenance"
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "graceful-maintenance-local-preference" {
        return &gracefulMaintenance.GracefulMaintenanceLocalPreference
    }
    if childYangName == "graceful-maintenance-as-prepends" {
        return &gracefulMaintenance.GracefulMaintenanceAsPrepends
    }
    return nil
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["graceful-maintenance-local-preference"] = &gracefulMaintenance.GracefulMaintenanceLocalPreference
    children["graceful-maintenance-as-prepends"] = &gracefulMaintenance.GracefulMaintenanceAsPrepends
    return children
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = gracefulMaintenance.Enable
    leafs["graceful-maintenance-activate"] = gracefulMaintenance.GracefulMaintenanceActivate
    return leafs
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetYangName() string { return "graceful-maintenance" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) SetParent(parent types.Entity) { gracefulMaintenance.parent = parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetParent() types.Entity { return gracefulMaintenance.parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance) GetParentYangName() string { return "vrf-neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetFilter() yfilter.YFilter { return gracefulMaintenanceLocalPreference.YFilter }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceLocalPreference.YFilter = yf }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetGoName(yname string) string {
    if yname == "gshut-loc-pref-disable" { return "GshutLocPrefDisable" }
    if yname == "local-preference" { return "LocalPreference" }
    return ""
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetSegmentPath() string {
    return "graceful-maintenance-local-preference"
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-loc-pref-disable"] = gracefulMaintenanceLocalPreference.GshutLocPrefDisable
    leafs["local-preference"] = gracefulMaintenanceLocalPreference.LocalPreference
    return leafs
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetYangName() string { return "graceful-maintenance-local-preference" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetParent(parent types.Entity) { gracefulMaintenanceLocalPreference.parent = parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParent() types.Entity { return gracefulMaintenanceLocalPreference.parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetFilter() yfilter.YFilter { return gracefulMaintenanceAsPrepends.YFilter }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceAsPrepends.YFilter = yf }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetGoName(yname string) string {
    if yname == "gshut-prepends-disable" { return "GshutPrependsDisable" }
    if yname == "as-prepends" { return "AsPrepends" }
    return ""
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetSegmentPath() string {
    return "graceful-maintenance-as-prepends"
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-prepends-disable"] = gracefulMaintenanceAsPrepends.GshutPrependsDisable
    leafs["as-prepends"] = gracefulMaintenanceAsPrepends.AsPrepends
    return leafs
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetYangName() string { return "graceful-maintenance-as-prepends" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetParent(parent types.Entity) { gracefulMaintenanceAsPrepends.parent = parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParent() types.Entity { return gracefulMaintenanceAsPrepends.parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength
// A particular VRF peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Prefix length. The type is interface{} with range:
    // 0..127.
    PrefixLength interface{}

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart support for neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is bool.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability.  FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // Address family type of a VRF neighbor.
    VrfNeighborAfs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetFilter() yfilter.YFilter { return vrfNeighborPrefixLength.YFilter }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) SetFilter(yf yfilter.YFilter) { vrfNeighborPrefixLength.YFilter = yf }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetGoName(yname string) string {
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "internal-vpn-client-ibgp-ce" { return "InternalVpnClientIbgpCe" }
    if yname == "session-group-add-member" { return "SessionGroupAddMember" }
    if yname == "egress-peer-engineering" { return "EgressPeerEngineering" }
    if yname == "neighbor-graceful-restart-stalepath-time" { return "NeighborGracefulRestartStalepathTime" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "description" { return "Description" }
    if yname == "neighbor-group-add-member" { return "NeighborGroupAddMember" }
    if yname == "ebgp-recv-dmz" { return "EbgpRecvDmz" }
    if yname == "neighbor-graceful-restart" { return "NeighborGracefulRestart" }
    if yname == "enforce-first-as" { return "EnforceFirstAs" }
    if yname == "idle-watch-time" { return "IdleWatchTime" }
    if yname == "session-open-mode" { return "SessionOpenMode" }
    if yname == "ebgp-send-dmz-enable-modes" { return "EbgpSendDmzEnableModes" }
    if yname == "suppress-all-capabilities" { return "SuppressAllCapabilities" }
    if yname == "max-peers" { return "MaxPeers" }
    if yname == "additional-paths-send-capability" { return "AdditionalPathsSendCapability" }
    if yname == "propagate-dmz-link-bandwidth" { return "PropagateDmzLinkBandwidth" }
    if yname == "bfd-enable-modes" { return "BfdEnableModes" }
    if yname == "ttl-security" { return "TtlSecurity" }
    if yname == "neighbor-graceful-restart-time" { return "NeighborGracefulRestartTime" }
    if yname == "bfd-multiplier" { return "BfdMultiplier" }
    if yname == "bfd-minimum-interval" { return "BfdMinimumInterval" }
    if yname == "remote-as-list" { return "RemoteAsList" }
    if yname == "additional-paths-receive-capability" { return "AdditionalPathsReceiveCapability" }
    if yname == "ignore-connected-check-ebgp" { return "IgnoreConnectedCheckEbgp" }
    if yname == "suppress-four-byte-as-capability" { return "SuppressFourByteAsCapability" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "vrf-neighbor-afs" { return "VrfNeighborAfs" }
    if yname == "local-address" { return "LocalAddress" }
    if yname == "bmp-activates" { return "BmpActivates" }
    if yname == "ebgp-multihop" { return "EbgpMultihop" }
    if yname == "remote-as" { return "RemoteAs" }
    if yname == "local-as" { return "LocalAs" }
    if yname == "password" { return "Password" }
    if yname == "advertisement-interval" { return "AdvertisementInterval" }
    if yname == "neighbor-cluster-id" { return "NeighborClusterId" }
    if yname == "tcpmss" { return "Tcpmss" }
    if yname == "tos" { return "Tos" }
    if yname == "update-in-filtering" { return "UpdateInFiltering" }
    if yname == "msg-log-out" { return "MsgLogOut" }
    if yname == "receive-buffer-size" { return "ReceiveBufferSize" }
    if yname == "msg-log-in" { return "MsgLogIn" }
    if yname == "send-buffer-size" { return "SendBufferSize" }
    if yname == "timers" { return "Timers" }
    if yname == "keychain" { return "Keychain" }
    if yname == "graceful-maintenance" { return "GracefulMaintenance" }
    return ""
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetSegmentPath() string {
    return "vrf-neighbor-prefix-length" + "[prefix-length='" + fmt.Sprintf("%v", vrfNeighborPrefixLength.PrefixLength) + "']" + "[neighbor-address='" + fmt.Sprintf("%v", vrfNeighborPrefixLength.NeighborAddress) + "']"
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-neighbor-afs" {
        return &vrfNeighborPrefixLength.VrfNeighborAfs
    }
    if childYangName == "local-address" {
        return &vrfNeighborPrefixLength.LocalAddress
    }
    if childYangName == "bmp-activates" {
        return &vrfNeighborPrefixLength.BmpActivates
    }
    if childYangName == "ebgp-multihop" {
        return &vrfNeighborPrefixLength.EbgpMultihop
    }
    if childYangName == "remote-as" {
        return &vrfNeighborPrefixLength.RemoteAs
    }
    if childYangName == "local-as" {
        return &vrfNeighborPrefixLength.LocalAs
    }
    if childYangName == "password" {
        return &vrfNeighborPrefixLength.Password
    }
    if childYangName == "advertisement-interval" {
        return &vrfNeighborPrefixLength.AdvertisementInterval
    }
    if childYangName == "neighbor-cluster-id" {
        return &vrfNeighborPrefixLength.NeighborClusterId
    }
    if childYangName == "tcpmss" {
        return &vrfNeighborPrefixLength.Tcpmss
    }
    if childYangName == "tos" {
        return &vrfNeighborPrefixLength.Tos
    }
    if childYangName == "update-in-filtering" {
        return &vrfNeighborPrefixLength.UpdateInFiltering
    }
    if childYangName == "msg-log-out" {
        return &vrfNeighborPrefixLength.MsgLogOut
    }
    if childYangName == "receive-buffer-size" {
        return &vrfNeighborPrefixLength.ReceiveBufferSize
    }
    if childYangName == "msg-log-in" {
        return &vrfNeighborPrefixLength.MsgLogIn
    }
    if childYangName == "send-buffer-size" {
        return &vrfNeighborPrefixLength.SendBufferSize
    }
    if childYangName == "timers" {
        return &vrfNeighborPrefixLength.Timers
    }
    if childYangName == "keychain" {
        return &vrfNeighborPrefixLength.Keychain
    }
    if childYangName == "graceful-maintenance" {
        return &vrfNeighborPrefixLength.GracefulMaintenance
    }
    return nil
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["vrf-neighbor-afs"] = &vrfNeighborPrefixLength.VrfNeighborAfs
    children["local-address"] = &vrfNeighborPrefixLength.LocalAddress
    children["bmp-activates"] = &vrfNeighborPrefixLength.BmpActivates
    children["ebgp-multihop"] = &vrfNeighborPrefixLength.EbgpMultihop
    children["remote-as"] = &vrfNeighborPrefixLength.RemoteAs
    children["local-as"] = &vrfNeighborPrefixLength.LocalAs
    children["password"] = &vrfNeighborPrefixLength.Password
    children["advertisement-interval"] = &vrfNeighborPrefixLength.AdvertisementInterval
    children["neighbor-cluster-id"] = &vrfNeighborPrefixLength.NeighborClusterId
    children["tcpmss"] = &vrfNeighborPrefixLength.Tcpmss
    children["tos"] = &vrfNeighborPrefixLength.Tos
    children["update-in-filtering"] = &vrfNeighborPrefixLength.UpdateInFiltering
    children["msg-log-out"] = &vrfNeighborPrefixLength.MsgLogOut
    children["receive-buffer-size"] = &vrfNeighborPrefixLength.ReceiveBufferSize
    children["msg-log-in"] = &vrfNeighborPrefixLength.MsgLogIn
    children["send-buffer-size"] = &vrfNeighborPrefixLength.SendBufferSize
    children["timers"] = &vrfNeighborPrefixLength.Timers
    children["keychain"] = &vrfNeighborPrefixLength.Keychain
    children["graceful-maintenance"] = &vrfNeighborPrefixLength.GracefulMaintenance
    return children
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-length"] = vrfNeighborPrefixLength.PrefixLength
    leafs["neighbor-address"] = vrfNeighborPrefixLength.NeighborAddress
    leafs["internal-vpn-client-ibgp-ce"] = vrfNeighborPrefixLength.InternalVpnClientIbgpCe
    leafs["session-group-add-member"] = vrfNeighborPrefixLength.SessionGroupAddMember
    leafs["egress-peer-engineering"] = vrfNeighborPrefixLength.EgressPeerEngineering
    leafs["neighbor-graceful-restart-stalepath-time"] = vrfNeighborPrefixLength.NeighborGracefulRestartStalepathTime
    leafs["shutdown"] = vrfNeighborPrefixLength.Shutdown
    leafs["description"] = vrfNeighborPrefixLength.Description
    leafs["neighbor-group-add-member"] = vrfNeighborPrefixLength.NeighborGroupAddMember
    leafs["ebgp-recv-dmz"] = vrfNeighborPrefixLength.EbgpRecvDmz
    leafs["neighbor-graceful-restart"] = vrfNeighborPrefixLength.NeighborGracefulRestart
    leafs["enforce-first-as"] = vrfNeighborPrefixLength.EnforceFirstAs
    leafs["idle-watch-time"] = vrfNeighborPrefixLength.IdleWatchTime
    leafs["session-open-mode"] = vrfNeighborPrefixLength.SessionOpenMode
    leafs["ebgp-send-dmz-enable-modes"] = vrfNeighborPrefixLength.EbgpSendDmzEnableModes
    leafs["suppress-all-capabilities"] = vrfNeighborPrefixLength.SuppressAllCapabilities
    leafs["max-peers"] = vrfNeighborPrefixLength.MaxPeers
    leafs["additional-paths-send-capability"] = vrfNeighborPrefixLength.AdditionalPathsSendCapability
    leafs["propagate-dmz-link-bandwidth"] = vrfNeighborPrefixLength.PropagateDmzLinkBandwidth
    leafs["bfd-enable-modes"] = vrfNeighborPrefixLength.BfdEnableModes
    leafs["ttl-security"] = vrfNeighborPrefixLength.TtlSecurity
    leafs["neighbor-graceful-restart-time"] = vrfNeighborPrefixLength.NeighborGracefulRestartTime
    leafs["bfd-multiplier"] = vrfNeighborPrefixLength.BfdMultiplier
    leafs["bfd-minimum-interval"] = vrfNeighborPrefixLength.BfdMinimumInterval
    leafs["remote-as-list"] = vrfNeighborPrefixLength.RemoteAsList
    leafs["additional-paths-receive-capability"] = vrfNeighborPrefixLength.AdditionalPathsReceiveCapability
    leafs["ignore-connected-check-ebgp"] = vrfNeighborPrefixLength.IgnoreConnectedCheckEbgp
    leafs["suppress-four-byte-as-capability"] = vrfNeighborPrefixLength.SuppressFourByteAsCapability
    leafs["update-source-interface"] = vrfNeighborPrefixLength.UpdateSourceInterface
    return leafs
}

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetYangName() string { return "vrf-neighbor-prefix-length" }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) SetParent(parent types.Entity) { vrfNeighborPrefixLength.parent = parent }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetParent() types.Entity { return vrfNeighborPrefixLength.parent }

func (vrfNeighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength) GetParentYangName() string { return "vrf-neighbors" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family type of a VRF neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf.
    VrfNeighborAf []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetFilter() yfilter.YFilter { return vrfNeighborAfs.YFilter }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) SetFilter(yf yfilter.YFilter) { vrfNeighborAfs.YFilter = yf }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetGoName(yname string) string {
    if yname == "vrf-neighbor-af" { return "VrfNeighborAf" }
    return ""
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetSegmentPath() string {
    return "vrf-neighbor-afs"
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "vrf-neighbor-af" {
        for _, c := range vrfNeighborAfs.VrfNeighborAf {
            if vrfNeighborAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf{}
        vrfNeighborAfs.VrfNeighborAf = append(vrfNeighborAfs.VrfNeighborAf, child)
        return &vrfNeighborAfs.VrfNeighborAf[len(vrfNeighborAfs.VrfNeighborAf)-1]
    }
    return nil
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range vrfNeighborAfs.VrfNeighborAf {
        children[vrfNeighborAfs.VrfNeighborAf[i].GetSegmentPath()] = &vrfNeighborAfs.VrfNeighborAf[i]
    }
    return children
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetYangName() string { return "vrf-neighbor-afs" }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) SetParent(parent types.Entity) { vrfNeighborAfs.parent = parent }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetParent() types.Entity { return vrfNeighborAfs.parent }

func (vrfNeighborAfs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf
// Address family type of a VRF neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group.  FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT.  FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client.  FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetFilter() yfilter.YFilter { return vrfNeighborAf.YFilter }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) SetFilter(yf yfilter.YFilter) { vrfNeighborAf.YFilter = yf }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "neighbor-af-long-lived-graceful-restart-capable" { return "NeighborAfLongLivedGracefulRestartCapable" }
    if yname == "send-ext-community-ebgp" { return "SendExtCommunityEbgp" }
    if yname == "accept-route-legacy-rt" { return "AcceptRouteLegacyRt" }
    if yname == "send-community-ebgp" { return "SendCommunityEbgp" }
    if yname == "next-hop-unchanged" { return "NextHopUnchanged" }
    if yname == "advertise-local-labeled-route" { return "AdvertiseLocalLabeledRoute" }
    if yname == "flowspec-validation" { return "FlowspecValidation" }
    if yname == "encapsulation-type" { return "EncapsulationType" }
    if yname == "enforce-multiple-labels" { return "EnforceMultipleLabels" }
    if yname == "as-override" { return "AsOverride" }
    if yname == "multipath" { return "Multipath" }
    if yname == "send-community-ebgp-graceful-shutdown" { return "SendCommunityEbgpGracefulShutdown" }
    if yname == "activate" { return "Activate" }
    if yname == "prefix-orf-policy" { return "PrefixOrfPolicy" }
    if yname == "aigp" { return "Aigp" }
    if yname == "aigp-send-med" { return "AigpSendMed" }
    if yname == "allow-as-in" { return "AllowAsIn" }
    if yname == "advertise-orf" { return "AdvertiseOrf" }
    if yname == "route-reflector-client" { return "RouteReflectorClient" }
    if yname == "next-hop-self" { return "NextHopSelf" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-weight" { return "DefaultWeight" }
    if yname == "af-group" { return "AfGroup" }
    if yname == "next-hop-unchanged-multipath" { return "NextHopUnchangedMultipath" }
    if yname == "accept-own" { return "AcceptOwn" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "advertise-permanent-network" { return "AdvertisePermanentNetwork" }
    if yname == "aigp-cost-community" { return "AigpCostCommunity" }
    if yname == "advertise-def-imp-disable-v6" { return "AdvertiseDefImpDisableV6" }
    if yname == "advertise-disable" { return "AdvertiseDisable" }
    if yname == "maximum-prefixes" { return "MaximumPrefixes" }
    if yname == "remove-private-as-entire-as-path-inbound" { return "RemovePrivateAsEntireAsPathInbound" }
    if yname == "advertise-def-imp-disable-v4" { return "AdvertiseDefImpDisableV4" }
    if yname == "advertise-l2vpn-evpn" { return "AdvertiseL2VpnEvpn" }
    if yname == "advertise-local-l2vpn-evpn" { return "AdvertiseLocalL2VpnEvpn" }
    if yname == "neighbor-af-long-lived-graceful-restart-stale-time" { return "NeighborAfLongLivedGracefulRestartStaleTime" }
    if yname == "site-of-origin" { return "SiteOfOrigin" }
    if yname == "advertise-v6" { return "AdvertiseV6" }
    if yname == "advertise-local-v6" { return "AdvertiseLocalV6" }
    if yname == "import" { return "Import" }
    if yname == "default-originate" { return "DefaultOriginate" }
    if yname == "soft-reconfiguration" { return "SoftReconfiguration" }
    if yname == "advertise-vrf-imp-disable-v6" { return "AdvertiseVrfImpDisableV6" }
    if yname == "advertise-v4" { return "AdvertiseV4" }
    if yname == "advertise-local-v4" { return "AdvertiseLocalV4" }
    if yname == "remove-private-as-entire-as-path" { return "RemovePrivateAsEntireAsPath" }
    if yname == "advertise-vrf-imp-disable-v4" { return "AdvertiseVrfImpDisableV4" }
    return ""
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetSegmentPath() string {
    return "vrf-neighbor-af" + "[af-name='" + fmt.Sprintf("%v", vrfNeighborAf.AfName) + "']"
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aigp-cost-community" {
        return &vrfNeighborAf.AigpCostCommunity
    }
    if childYangName == "advertise-def-imp-disable-v6" {
        return &vrfNeighborAf.AdvertiseDefImpDisableV6
    }
    if childYangName == "advertise-disable" {
        return &vrfNeighborAf.AdvertiseDisable
    }
    if childYangName == "maximum-prefixes" {
        return &vrfNeighborAf.MaximumPrefixes
    }
    if childYangName == "remove-private-as-entire-as-path-inbound" {
        return &vrfNeighborAf.RemovePrivateAsEntireAsPathInbound
    }
    if childYangName == "advertise-def-imp-disable-v4" {
        return &vrfNeighborAf.AdvertiseDefImpDisableV4
    }
    if childYangName == "advertise-l2vpn-evpn" {
        return &vrfNeighborAf.AdvertiseL2VpnEvpn
    }
    if childYangName == "advertise-local-l2vpn-evpn" {
        return &vrfNeighborAf.AdvertiseLocalL2VpnEvpn
    }
    if childYangName == "neighbor-af-long-lived-graceful-restart-stale-time" {
        return &vrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    }
    if childYangName == "site-of-origin" {
        return &vrfNeighborAf.SiteOfOrigin
    }
    if childYangName == "advertise-v6" {
        return &vrfNeighborAf.AdvertiseV6
    }
    if childYangName == "advertise-local-v6" {
        return &vrfNeighborAf.AdvertiseLocalV6
    }
    if childYangName == "import" {
        return &vrfNeighborAf.Import
    }
    if childYangName == "default-originate" {
        return &vrfNeighborAf.DefaultOriginate
    }
    if childYangName == "soft-reconfiguration" {
        return &vrfNeighborAf.SoftReconfiguration
    }
    if childYangName == "advertise-vrf-imp-disable-v6" {
        return &vrfNeighborAf.AdvertiseVrfImpDisableV6
    }
    if childYangName == "advertise-v4" {
        return &vrfNeighborAf.AdvertiseV4
    }
    if childYangName == "advertise-local-v4" {
        return &vrfNeighborAf.AdvertiseLocalV4
    }
    if childYangName == "remove-private-as-entire-as-path" {
        return &vrfNeighborAf.RemovePrivateAsEntireAsPath
    }
    if childYangName == "advertise-vrf-imp-disable-v4" {
        return &vrfNeighborAf.AdvertiseVrfImpDisableV4
    }
    return nil
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aigp-cost-community"] = &vrfNeighborAf.AigpCostCommunity
    children["advertise-def-imp-disable-v6"] = &vrfNeighborAf.AdvertiseDefImpDisableV6
    children["advertise-disable"] = &vrfNeighborAf.AdvertiseDisable
    children["maximum-prefixes"] = &vrfNeighborAf.MaximumPrefixes
    children["remove-private-as-entire-as-path-inbound"] = &vrfNeighborAf.RemovePrivateAsEntireAsPathInbound
    children["advertise-def-imp-disable-v4"] = &vrfNeighborAf.AdvertiseDefImpDisableV4
    children["advertise-l2vpn-evpn"] = &vrfNeighborAf.AdvertiseL2VpnEvpn
    children["advertise-local-l2vpn-evpn"] = &vrfNeighborAf.AdvertiseLocalL2VpnEvpn
    children["neighbor-af-long-lived-graceful-restart-stale-time"] = &vrfNeighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    children["site-of-origin"] = &vrfNeighborAf.SiteOfOrigin
    children["advertise-v6"] = &vrfNeighborAf.AdvertiseV6
    children["advertise-local-v6"] = &vrfNeighborAf.AdvertiseLocalV6
    children["import"] = &vrfNeighborAf.Import
    children["default-originate"] = &vrfNeighborAf.DefaultOriginate
    children["soft-reconfiguration"] = &vrfNeighborAf.SoftReconfiguration
    children["advertise-vrf-imp-disable-v6"] = &vrfNeighborAf.AdvertiseVrfImpDisableV6
    children["advertise-v4"] = &vrfNeighborAf.AdvertiseV4
    children["advertise-local-v4"] = &vrfNeighborAf.AdvertiseLocalV4
    children["remove-private-as-entire-as-path"] = &vrfNeighborAf.RemovePrivateAsEntireAsPath
    children["advertise-vrf-imp-disable-v4"] = &vrfNeighborAf.AdvertiseVrfImpDisableV4
    return children
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = vrfNeighborAf.AfName
    leafs["neighbor-af-long-lived-graceful-restart-capable"] = vrfNeighborAf.NeighborAfLongLivedGracefulRestartCapable
    leafs["send-ext-community-ebgp"] = vrfNeighborAf.SendExtCommunityEbgp
    leafs["accept-route-legacy-rt"] = vrfNeighborAf.AcceptRouteLegacyRt
    leafs["send-community-ebgp"] = vrfNeighborAf.SendCommunityEbgp
    leafs["next-hop-unchanged"] = vrfNeighborAf.NextHopUnchanged
    leafs["advertise-local-labeled-route"] = vrfNeighborAf.AdvertiseLocalLabeledRoute
    leafs["flowspec-validation"] = vrfNeighborAf.FlowspecValidation
    leafs["encapsulation-type"] = vrfNeighborAf.EncapsulationType
    leafs["enforce-multiple-labels"] = vrfNeighborAf.EnforceMultipleLabels
    leafs["as-override"] = vrfNeighborAf.AsOverride
    leafs["multipath"] = vrfNeighborAf.Multipath
    leafs["send-community-ebgp-graceful-shutdown"] = vrfNeighborAf.SendCommunityEbgpGracefulShutdown
    leafs["activate"] = vrfNeighborAf.Activate
    leafs["prefix-orf-policy"] = vrfNeighborAf.PrefixOrfPolicy
    leafs["aigp"] = vrfNeighborAf.Aigp
    leafs["aigp-send-med"] = vrfNeighborAf.AigpSendMed
    leafs["allow-as-in"] = vrfNeighborAf.AllowAsIn
    leafs["advertise-orf"] = vrfNeighborAf.AdvertiseOrf
    leafs["route-reflector-client"] = vrfNeighborAf.RouteReflectorClient
    leafs["next-hop-self"] = vrfNeighborAf.NextHopSelf
    leafs["route-policy-in"] = vrfNeighborAf.RoutePolicyIn
    leafs["default-weight"] = vrfNeighborAf.DefaultWeight
    leafs["af-group"] = vrfNeighborAf.AfGroup
    leafs["next-hop-unchanged-multipath"] = vrfNeighborAf.NextHopUnchangedMultipath
    leafs["accept-own"] = vrfNeighborAf.AcceptOwn
    leafs["route-policy-out"] = vrfNeighborAf.RoutePolicyOut
    leafs["advertise-permanent-network"] = vrfNeighborAf.AdvertisePermanentNetwork
    return leafs
}

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetBundleName() string { return "cisco_ios_xr" }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetYangName() string { return "vrf-neighbor-af" }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) SetParent(parent types.Entity) { vrfNeighborAf.parent = parent }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetParent() types.Entity { return vrfNeighborAf.parent }

func (vrfNeighborAf *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf) GetParentYangName() string { return "vrf-neighbor-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    // This attribute is mandatory.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi. This attribute is mandatory.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetFilter() yfilter.YFilter { return aigpCostCommunity.YFilter }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) SetFilter(yf yfilter.YFilter) { aigpCostCommunity.YFilter = yf }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "cost-community-id" { return "CostCommunityId" }
    if yname == "transitive" { return "Transitive" }
    if yname == "cost-community-poi-type" { return "CostCommunityPoiType" }
    return ""
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetSegmentPath() string {
    return "aigp-cost-community"
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = aigpCostCommunity.Enable
    leafs["cost-community-id"] = aigpCostCommunity.CostCommunityId
    leafs["transitive"] = aigpCostCommunity.Transitive
    leafs["cost-community-poi-type"] = aigpCostCommunity.CostCommunityPoiType
    return leafs
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetYangName() string { return "aigp-cost-community" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) SetParent(parent types.Entity) { aigpCostCommunity.parent = parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetParent() types.Entity { return aigpCostCommunity.parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AigpCostCommunity) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV6.YFilter }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV6.YFilter = yf }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetSegmentPath() string {
    return "advertise-def-imp-disable-v6"
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV6.AfName
    leafs["adv-option"] = advertiseDefImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV6.RtType
    return leafs
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetYangName() string { return "advertise-def-imp-disable-v6" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) SetParent(parent types.Entity) { advertiseDefImpDisableV6.parent = parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetParent() types.Entity { return advertiseDefImpDisableV6.parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetFilter() yfilter.YFilter { return advertiseDisable.YFilter }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) SetFilter(yf yfilter.YFilter) { advertiseDisable.YFilter = yf }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetSegmentPath() string {
    return "advertise-disable"
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDisable.AfName
    leafs["reorg-option"] = advertiseDisable.ReorgOption
    leafs["rt-type"] = advertiseDisable.RtType
    return leafs
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetYangName() string { return "advertise-disable" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) SetParent(parent types.Entity) { advertiseDisable.parent = parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetParent() types.Entity { return advertiseDisable.parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDisable) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetFilter() yfilter.YFilter { return maximumPrefixes.YFilter }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) SetFilter(yf yfilter.YFilter) { maximumPrefixes.YFilter = yf }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetGoName(yname string) string {
    if yname == "prefix-limit" { return "PrefixLimit" }
    if yname == "warning-percentage" { return "WarningPercentage" }
    if yname == "warning-only" { return "WarningOnly" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "discard-extra-paths" { return "DiscardExtraPaths" }
    return ""
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetSegmentPath() string {
    return "maximum-prefixes"
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-limit"] = maximumPrefixes.PrefixLimit
    leafs["warning-percentage"] = maximumPrefixes.WarningPercentage
    leafs["warning-only"] = maximumPrefixes.WarningOnly
    leafs["restart-time"] = maximumPrefixes.RestartTime
    leafs["discard-extra-paths"] = maximumPrefixes.DiscardExtraPaths
    return leafs
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetYangName() string { return "maximum-prefixes" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) SetParent(parent types.Entity) { maximumPrefixes.parent = parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetParent() types.Entity { return maximumPrefixes.parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_MaximumPrefixes) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPathInbound.YFilter }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPathInbound.YFilter = yf }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetSegmentPath() string {
    return "remove-private-as-entire-as-path-inbound"
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPathInbound.Enable
    leafs["entire"] = removePrivateAsEntireAsPathInbound.Entire
    return leafs
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetYangName() string { return "remove-private-as-entire-as-path-inbound" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) SetParent(parent types.Entity) { removePrivateAsEntireAsPathInbound.parent = parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetParent() types.Entity { return removePrivateAsEntireAsPathInbound.parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPathInbound) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV4.YFilter }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV4.YFilter = yf }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetSegmentPath() string {
    return "advertise-def-imp-disable-v4"
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV4.AfName
    leafs["adv-option"] = advertiseDefImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV4.RtType
    return leafs
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetYangName() string { return "advertise-def-imp-disable-v4" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) SetParent(parent types.Entity) { advertiseDefImpDisableV4.parent = parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetParent() types.Entity { return advertiseDefImpDisableV4.parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseDefImpDisableV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseL2VpnEvpn.YFilter }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseL2VpnEvpn.YFilter = yf }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetSegmentPath() string {
    return "advertise-l2vpn-evpn"
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseL2VpnEvpn.RtType
    return leafs
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetYangName() string { return "advertise-l2vpn-evpn" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) SetParent(parent types.Entity) { advertiseL2VpnEvpn.parent = parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetParent() types.Entity { return advertiseL2VpnEvpn.parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseL2VpnEvpn) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseLocalL2VpnEvpn.YFilter }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseLocalL2VpnEvpn.YFilter = yf }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetSegmentPath() string {
    return "advertise-local-l2vpn-evpn"
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseLocalL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseLocalL2VpnEvpn.RtType
    return leafs
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetYangName() string { return "advertise-local-l2vpn-evpn" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) SetParent(parent types.Entity) { advertiseLocalL2VpnEvpn.parent = parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetParent() types.Entity { return advertiseLocalL2VpnEvpn.parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalL2VpnEvpn) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetFilter() yfilter.YFilter { return neighborAfLongLivedGracefulRestartStaleTime.YFilter }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetFilter(yf yfilter.YFilter) { neighborAfLongLivedGracefulRestartStaleTime.YFilter = yf }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetGoName(yname string) string {
    if yname == "stale-time-send" { return "StaleTimeSend" }
    if yname == "stale-time-accept" { return "StaleTimeAccept" }
    return ""
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetSegmentPath() string {
    return "neighbor-af-long-lived-graceful-restart-stale-time"
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stale-time-send"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend
    leafs["stale-time-accept"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept
    return leafs
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetYangName() string { return "neighbor-af-long-lived-graceful-restart-stale-time" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetParent(parent types.Entity) { neighborAfLongLivedGracefulRestartStaleTime.parent = parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParent() types.Entity { return neighborAfLongLivedGracefulRestartStaleTime.parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetFilter() yfilter.YFilter { return siteOfOrigin.YFilter }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) SetFilter(yf yfilter.YFilter) { siteOfOrigin.YFilter = yf }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "address-index" { return "AddressIndex" }
    return ""
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetSegmentPath() string {
    return "site-of-origin"
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = siteOfOrigin.Type
    leafs["as-xx"] = siteOfOrigin.AsXx
    leafs["as"] = siteOfOrigin.As
    leafs["as-index"] = siteOfOrigin.AsIndex
    leafs["address"] = siteOfOrigin.Address
    leafs["address-index"] = siteOfOrigin.AddressIndex
    return leafs
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetYangName() string { return "site-of-origin" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) SetParent(parent types.Entity) { siteOfOrigin.parent = parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetParent() types.Entity { return siteOfOrigin.parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SiteOfOrigin) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetFilter() yfilter.YFilter { return advertiseV6.YFilter }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) SetFilter(yf yfilter.YFilter) { advertiseV6.YFilter = yf }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetSegmentPath() string {
    return "advertise-v6"
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV6.AfName
    leafs["reorg-option"] = advertiseV6.ReorgOption
    leafs["rt-type"] = advertiseV6.RtType
    return leafs
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetYangName() string { return "advertise-v6" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) SetParent(parent types.Entity) { advertiseV6.parent = parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetParent() types.Entity { return advertiseV6.parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetFilter() yfilter.YFilter { return advertiseLocalV6.YFilter }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) SetFilter(yf yfilter.YFilter) { advertiseLocalV6.YFilter = yf }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetSegmentPath() string {
    return "advertise-local-v6"
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV6.AfName
    leafs["reorg-option"] = advertiseLocalV6.ReorgOption
    leafs["rt-type"] = advertiseLocalV6.RtType
    return leafs
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetYangName() string { return "advertise-local-v6" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) SetParent(parent types.Entity) { advertiseLocalV6.parent = parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetParent() types.Entity { return advertiseLocalV6.parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetGoName(yname string) string {
    if yname == "import-stitching" { return "ImportStitching" }
    if yname == "import-reoriginate" { return "ImportReoriginate" }
    if yname == "import-reoriginate-stitching" { return "ImportReoriginateStitching" }
    return ""
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetSegmentPath() string {
    return "import"
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["import-stitching"] = self.ImportStitching
    leafs["import-reoriginate"] = self.ImportReoriginate
    leafs["import-reoriginate-stitching"] = self.ImportReoriginateStitching
    return leafs
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetBundleName() string { return "cisco_ios_xr" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetYangName() string { return "import" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) SetParent(parent types.Entity) { self.parent = parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetParent() types.Entity { return self.parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_Import) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetFilter() yfilter.YFilter { return defaultOriginate.YFilter }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) SetFilter(yf yfilter.YFilter) { defaultOriginate.YFilter = yf }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetSegmentPath() string {
    return "default-originate"
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = defaultOriginate.Enable
    leafs["route-policy-name"] = defaultOriginate.RoutePolicyName
    return leafs
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetBundleName() string { return "cisco_ios_xr" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetYangName() string { return "default-originate" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) SetParent(parent types.Entity) { defaultOriginate.parent = parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetParent() types.Entity { return defaultOriginate.parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_DefaultOriginate) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetFilter() yfilter.YFilter { return softReconfiguration.YFilter }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) SetFilter(yf yfilter.YFilter) { softReconfiguration.YFilter = yf }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetGoName(yname string) string {
    if yname == "inbound-soft" { return "InboundSoft" }
    if yname == "soft-always" { return "SoftAlways" }
    return ""
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetSegmentPath() string {
    return "soft-reconfiguration"
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inbound-soft"] = softReconfiguration.InboundSoft
    leafs["soft-always"] = softReconfiguration.SoftAlways
    return leafs
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetYangName() string { return "soft-reconfiguration" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) SetParent(parent types.Entity) { softReconfiguration.parent = parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetParent() types.Entity { return softReconfiguration.parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_SoftReconfiguration) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV6.YFilter }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV6.YFilter = yf }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v6"
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV6.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV6.RtType
    return leafs
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetYangName() string { return "advertise-vrf-imp-disable-v6" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) SetParent(parent types.Entity) { advertiseVrfImpDisableV6.parent = parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetParent() types.Entity { return advertiseVrfImpDisableV6.parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV6) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetFilter() yfilter.YFilter { return advertiseV4.YFilter }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) SetFilter(yf yfilter.YFilter) { advertiseV4.YFilter = yf }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetSegmentPath() string {
    return "advertise-v4"
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV4.AfName
    leafs["reorg-option"] = advertiseV4.ReorgOption
    leafs["rt-type"] = advertiseV4.RtType
    return leafs
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetYangName() string { return "advertise-v4" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) SetParent(parent types.Entity) { advertiseV4.parent = parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetParent() types.Entity { return advertiseV4.parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetFilter() yfilter.YFilter { return advertiseLocalV4.YFilter }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) SetFilter(yf yfilter.YFilter) { advertiseLocalV4.YFilter = yf }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetSegmentPath() string {
    return "advertise-local-v4"
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV4.AfName
    leafs["reorg-option"] = advertiseLocalV4.ReorgOption
    leafs["rt-type"] = advertiseLocalV4.RtType
    return leafs
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetYangName() string { return "advertise-local-v4" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) SetParent(parent types.Entity) { advertiseLocalV4.parent = parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetParent() types.Entity { return advertiseLocalV4.parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseLocalV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPath.YFilter }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPath.YFilter = yf }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetSegmentPath() string {
    return "remove-private-as-entire-as-path"
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPath.Enable
    leafs["entire"] = removePrivateAsEntireAsPath.Entire
    return leafs
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetYangName() string { return "remove-private-as-entire-as-path" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) SetParent(parent types.Entity) { removePrivateAsEntireAsPath.parent = parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetParent() types.Entity { return removePrivateAsEntireAsPath.parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_RemovePrivateAsEntireAsPath) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV4.YFilter }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV4.YFilter = yf }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v4"
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV4.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV4.RtType
    return leafs
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetYangName() string { return "advertise-vrf-imp-disable-v4" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) SetParent(parent types.Entity) { advertiseVrfImpDisableV4.parent = parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetParent() types.Entity { return advertiseVrfImpDisableV4.parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_VrfNeighborAfs_VrfNeighborAf_AdvertiseVrfImpDisableV4) GetParentYangName() string { return "vrf-neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetFilter() yfilter.YFilter { return localAddress.YFilter }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) SetFilter(yf yfilter.YFilter) { localAddress.YFilter = yf }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetGoName(yname string) string {
    if yname == "local-address-disable" { return "LocalAddressDisable" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    return ""
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetSegmentPath() string {
    return "local-address"
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-address-disable"] = localAddress.LocalAddressDisable
    leafs["local-ip-address"] = localAddress.LocalIpAddress
    return leafs
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetYangName() string { return "local-address" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) SetParent(parent types.Entity) { localAddress.parent = parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetParent() types.Entity { return localAddress.parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAddress) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate.
    BmpActivate []Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetFilter() yfilter.YFilter { return bmpActivates.YFilter }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) SetFilter(yf yfilter.YFilter) { bmpActivates.YFilter = yf }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetGoName(yname string) string {
    if yname == "bmp-activate" { return "BmpActivate" }
    return ""
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetSegmentPath() string {
    return "bmp-activates"
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-activate" {
        for _, c := range bmpActivates.BmpActivate {
            if bmpActivates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate{}
        bmpActivates.BmpActivate = append(bmpActivates.BmpActivate, child)
        return &bmpActivates.BmpActivate[len(bmpActivates.BmpActivate)-1]
    }
    return nil
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpActivates.BmpActivate {
        children[bmpActivates.BmpActivate[i].GetSegmentPath()] = &bmpActivates.BmpActivate[i]
    }
    return children
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetYangName() string { return "bmp-activates" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) SetParent(parent types.Entity) { bmpActivates.parent = parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetParent() types.Entity { return bmpActivates.parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetFilter() yfilter.YFilter { return bmpActivate.YFilter }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) SetFilter(yf yfilter.YFilter) { bmpActivate.YFilter = yf }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    return ""
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetSegmentPath() string {
    return "bmp-activate" + "[server-id='" + fmt.Sprintf("%v", bmpActivate.ServerId) + "']"
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpActivate.ServerId
    return leafs
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetYangName() string { return "bmp-activate" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) SetParent(parent types.Entity) { bmpActivate.parent = parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetParent() types.Entity { return bmpActivate.parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_BmpActivates_BmpActivate) GetParentYangName() string { return "bmp-activates" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetFilter() yfilter.YFilter { return ebgpMultihop.YFilter }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) SetFilter(yf yfilter.YFilter) { ebgpMultihop.YFilter = yf }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetGoName(yname string) string {
    if yname == "max-hop-count" { return "MaxHopCount" }
    if yname == "mpls-deactivation" { return "MplsDeactivation" }
    return ""
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetSegmentPath() string {
    return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-hop-count"] = ebgpMultihop.MaxHopCount
    leafs["mpls-deactivation"] = ebgpMultihop.MplsDeactivation
    return leafs
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetBundleName() string { return "cisco_ios_xr" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetYangName() string { return "ebgp-multihop" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) SetParent(parent types.Entity) { ebgpMultihop.parent = parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetParent() types.Entity { return ebgpMultihop.parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_EbgpMultihop) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetFilter() yfilter.YFilter { return remoteAs.YFilter }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) SetFilter(yf yfilter.YFilter) { remoteAs.YFilter = yf }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetSegmentPath() string {
    return "remote-as"
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = remoteAs.AsXx
    leafs["as-yy"] = remoteAs.AsYy
    return leafs
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetBundleName() string { return "cisco_ios_xr" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetYangName() string { return "remote-as" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) SetParent(parent types.Entity) { remoteAs.parent = parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetParent() types.Entity { return remoteAs.parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_RemoteAs) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetFilter() yfilter.YFilter { return localAs.YFilter }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) SetFilter(yf yfilter.YFilter) { localAs.YFilter = yf }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "no-prepend" { return "NoPrepend" }
    if yname == "disable" { return "Disable" }
    if yname == "replace-as" { return "ReplaceAs" }
    if yname == "dual-as" { return "DualAs" }
    return ""
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetSegmentPath() string {
    return "local-as"
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = localAs.AsXx
    leafs["as-yy"] = localAs.AsYy
    leafs["no-prepend"] = localAs.NoPrepend
    leafs["disable"] = localAs.Disable
    leafs["replace-as"] = localAs.ReplaceAs
    leafs["dual-as"] = localAs.DualAs
    return leafs
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetBundleName() string { return "cisco_ios_xr" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetYangName() string { return "local-as" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) SetParent(parent types.Entity) { localAs.parent = parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetParent() types.Entity { return localAs.parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_LocalAs) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetFilter() yfilter.YFilter { return password.YFilter }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) SetFilter(yf yfilter.YFilter) { password.YFilter = yf }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetGoName(yname string) string {
    if yname == "password-disable" { return "PasswordDisable" }
    if yname == "password" { return "Password" }
    return ""
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetSegmentPath() string {
    return "password"
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password-disable"] = password.PasswordDisable
    leafs["password"] = password.Password
    return leafs
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetBundleName() string { return "cisco_ios_xr" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetYangName() string { return "password" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) SetParent(parent types.Entity) { password.parent = parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetParent() types.Entity { return password.parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Password) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetFilter() yfilter.YFilter { return advertisementInterval.YFilter }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) SetFilter(yf yfilter.YFilter) { advertisementInterval.YFilter = yf }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetGoName(yname string) string {
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "minimum-interval-msecs" { return "MinimumIntervalMsecs" }
    return ""
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetSegmentPath() string {
    return "advertisement-interval"
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-interval"] = advertisementInterval.MinimumInterval
    leafs["minimum-interval-msecs"] = advertisementInterval.MinimumIntervalMsecs
    return leafs
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetBundleName() string { return "cisco_ios_xr" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetYangName() string { return "advertisement-interval" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) SetParent(parent types.Entity) { advertisementInterval.parent = parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetParent() types.Entity { return advertisementInterval.parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_AdvertisementInterval) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetFilter() yfilter.YFilter { return neighborClusterId.YFilter }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) SetFilter(yf yfilter.YFilter) { neighborClusterId.YFilter = yf }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetSegmentPath() string {
    return "neighbor-cluster-id"
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = neighborClusterId.ClusterIdNumber
    leafs["cluster-id-address"] = neighborClusterId.ClusterIdAddress
    return leafs
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetYangName() string { return "neighbor-cluster-id" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) SetParent(parent types.Entity) { neighborClusterId.parent = parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetParent() types.Entity { return neighborClusterId.parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_NeighborClusterId) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetFilter() yfilter.YFilter { return tcpmss.YFilter }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) SetFilter(yf yfilter.YFilter) { tcpmss.YFilter = yf }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetGoName(yname string) string {
    if yname == "tcpmss-disable" { return "TcpmssDisable" }
    if yname == "mss" { return "Mss" }
    return ""
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetSegmentPath() string {
    return "tcpmss"
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcpmss-disable"] = tcpmss.TcpmssDisable
    leafs["mss"] = tcpmss.Mss
    return leafs
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetBundleName() string { return "cisco_ios_xr" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetYangName() string { return "tcpmss" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) SetParent(parent types.Entity) { tcpmss.parent = parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetParent() types.Entity { return tcpmss.parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tcpmss) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetYangName() string { return "tos" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetParent() types.Entity { return tos.parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Tos) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetFilter() yfilter.YFilter { return updateInFiltering.YFilter }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) SetFilter(yf yfilter.YFilter) { updateInFiltering.YFilter = yf }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "update-in-filtering-attribute-filter-group" { return "UpdateInFilteringAttributeFilterGroup" }
    if yname == "update-in-filtering-syslog-disable" { return "UpdateInFilteringSyslogDisable" }
    if yname == "update-in-filtering-message-buffers" { return "UpdateInFilteringMessageBuffers" }
    return ""
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetSegmentPath() string {
    return "update-in-filtering"
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update-in-filtering-message-buffers" {
        return &updateInFiltering.UpdateInFilteringMessageBuffers
    }
    return nil
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["update-in-filtering-message-buffers"] = &updateInFiltering.UpdateInFilteringMessageBuffers
    return children
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = updateInFiltering.Enable
    leafs["update-in-filtering-attribute-filter-group"] = updateInFiltering.UpdateInFilteringAttributeFilterGroup
    leafs["update-in-filtering-syslog-disable"] = updateInFiltering.UpdateInFilteringSyslogDisable
    return leafs
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetYangName() string { return "update-in-filtering" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) SetParent(parent types.Entity) { updateInFiltering.parent = parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetParent() types.Entity { return updateInFiltering.parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetFilter() yfilter.YFilter { return updateInFilteringMessageBuffers.YFilter }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetFilter(yf yfilter.YFilter) { updateInFilteringMessageBuffers.YFilter = yf }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetGoName(yname string) string {
    if yname == "number-of-buffers" { return "NumberOfBuffers" }
    if yname == "non-circular-buffer" { return "NonCircularBuffer" }
    return ""
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetSegmentPath() string {
    return "update-in-filtering-message-buffers"
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-buffers"] = updateInFilteringMessageBuffers.NumberOfBuffers
    leafs["non-circular-buffer"] = updateInFilteringMessageBuffers.NonCircularBuffer
    return leafs
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetYangName() string { return "update-in-filtering-message-buffers" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetParent(parent types.Entity) { updateInFilteringMessageBuffers.parent = parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParent() types.Entity { return updateInFilteringMessageBuffers.parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParentYangName() string { return "update-in-filtering" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetFilter() yfilter.YFilter { return msgLogOut.YFilter }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) SetFilter(yf yfilter.YFilter) { msgLogOut.YFilter = yf }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetSegmentPath() string {
    return "msg-log-out"
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogOut.MsgBufCount
    leafs["msg-log-disable"] = msgLogOut.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogOut.MsgLogInheritDisable
    return leafs
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetYangName() string { return "msg-log-out" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) SetParent(parent types.Entity) { msgLogOut.parent = parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetParent() types.Entity { return msgLogOut.parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogOut) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetFilter() yfilter.YFilter { return receiveBufferSize.YFilter }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) SetFilter(yf yfilter.YFilter) { receiveBufferSize.YFilter = yf }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetSegmentPath() string {
    return "receive-buffer-size"
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveBufferSize.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveBufferSize.BgpReceiveSize
    return leafs
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetYangName() string { return "receive-buffer-size" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) SetParent(parent types.Entity) { receiveBufferSize.parent = parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetParent() types.Entity { return receiveBufferSize.parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_ReceiveBufferSize) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetFilter() yfilter.YFilter { return msgLogIn.YFilter }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) SetFilter(yf yfilter.YFilter) { msgLogIn.YFilter = yf }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetSegmentPath() string {
    return "msg-log-in"
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogIn.MsgBufCount
    leafs["msg-log-disable"] = msgLogIn.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogIn.MsgLogInheritDisable
    return leafs
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetYangName() string { return "msg-log-in" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) SetParent(parent types.Entity) { msgLogIn.parent = parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetParent() types.Entity { return msgLogIn.parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_MsgLogIn) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetFilter() yfilter.YFilter { return sendBufferSize.YFilter }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) SetFilter(yf yfilter.YFilter) { sendBufferSize.YFilter = yf }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetSegmentPath() string {
    return "send-buffer-size"
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendBufferSize.SocketSendSize
    leafs["bgp-send-size"] = sendBufferSize.BgpSendSize
    return leafs
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetYangName() string { return "send-buffer-size" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) SetParent(parent types.Entity) { sendBufferSize.parent = parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetParent() types.Entity { return sendBufferSize.parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_SendBufferSize) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetGoName(yname string) string {
    if yname == "keepalive-interval" { return "KeepaliveInterval" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive-interval"] = timers.KeepaliveInterval
    leafs["hold-time"] = timers.HoldTime
    leafs["min-accept-hold-time"] = timers.MinAcceptHoldTime
    return leafs
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetYangName() string { return "timers" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Timers) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetFilter() yfilter.YFilter { return keychain.YFilter }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) SetFilter(yf yfilter.YFilter) { keychain.YFilter = yf }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetGoName(yname string) string {
    if yname == "keychain-disable" { return "KeychainDisable" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetSegmentPath() string {
    return "keychain"
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keychain-disable"] = keychain.KeychainDisable
    leafs["keychain-name"] = keychain.KeychainName
    return leafs
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetBundleName() string { return "cisco_ios_xr" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetYangName() string { return "keychain" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) SetParent(parent types.Entity) { keychain.parent = parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetParent() types.Entity { return keychain.parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_Keychain) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetFilter() yfilter.YFilter { return gracefulMaintenance.YFilter }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) SetFilter(yf yfilter.YFilter) { gracefulMaintenance.YFilter = yf }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "graceful-maintenance-activate" { return "GracefulMaintenanceActivate" }
    if yname == "graceful-maintenance-local-preference" { return "GracefulMaintenanceLocalPreference" }
    if yname == "graceful-maintenance-as-prepends" { return "GracefulMaintenanceAsPrepends" }
    return ""
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetSegmentPath() string {
    return "graceful-maintenance"
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "graceful-maintenance-local-preference" {
        return &gracefulMaintenance.GracefulMaintenanceLocalPreference
    }
    if childYangName == "graceful-maintenance-as-prepends" {
        return &gracefulMaintenance.GracefulMaintenanceAsPrepends
    }
    return nil
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["graceful-maintenance-local-preference"] = &gracefulMaintenance.GracefulMaintenanceLocalPreference
    children["graceful-maintenance-as-prepends"] = &gracefulMaintenance.GracefulMaintenanceAsPrepends
    return children
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = gracefulMaintenance.Enable
    leafs["graceful-maintenance-activate"] = gracefulMaintenance.GracefulMaintenanceActivate
    return leafs
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetYangName() string { return "graceful-maintenance" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) SetParent(parent types.Entity) { gracefulMaintenance.parent = parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetParent() types.Entity { return gracefulMaintenance.parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance) GetParentYangName() string { return "vrf-neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetFilter() yfilter.YFilter { return gracefulMaintenanceLocalPreference.YFilter }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceLocalPreference.YFilter = yf }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetGoName(yname string) string {
    if yname == "gshut-loc-pref-disable" { return "GshutLocPrefDisable" }
    if yname == "local-preference" { return "LocalPreference" }
    return ""
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetSegmentPath() string {
    return "graceful-maintenance-local-preference"
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-loc-pref-disable"] = gracefulMaintenanceLocalPreference.GshutLocPrefDisable
    leafs["local-preference"] = gracefulMaintenanceLocalPreference.LocalPreference
    return leafs
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetYangName() string { return "graceful-maintenance-local-preference" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetParent(parent types.Entity) { gracefulMaintenanceLocalPreference.parent = parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParent() types.Entity { return gracefulMaintenanceLocalPreference.parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetFilter() yfilter.YFilter { return gracefulMaintenanceAsPrepends.YFilter }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceAsPrepends.YFilter = yf }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetGoName(yname string) string {
    if yname == "gshut-prepends-disable" { return "GshutPrependsDisable" }
    if yname == "as-prepends" { return "AsPrepends" }
    return ""
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetSegmentPath() string {
    return "graceful-maintenance-as-prepends"
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-prepends-disable"] = gracefulMaintenanceAsPrepends.GshutPrependsDisable
    leafs["as-prepends"] = gracefulMaintenanceAsPrepends.AsPrepends
    return leafs
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetYangName() string { return "graceful-maintenance-as-prepends" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetParent(parent types.Entity) { gracefulMaintenanceAsPrepends.parent = parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParent() types.Entity { return gracefulMaintenanceAsPrepends.parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_Vrfs_Vrf_VrfNeighbors_VrfNeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf
// Global default config
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor, neighbor-group, af-group and session-group configuration.
    BgpEntity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity

    // Global default config.
    Global Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetFilter() yfilter.YFilter { return defaultVrf.YFilter }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) SetFilter(yf yfilter.YFilter) { defaultVrf.YFilter = yf }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetGoName(yname string) string {
    if yname == "bgp-entity" { return "BgpEntity" }
    if yname == "global" { return "Global" }
    return ""
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetSegmentPath() string {
    return "default-vrf"
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bgp-entity" {
        return &defaultVrf.BgpEntity
    }
    if childYangName == "global" {
        return &defaultVrf.Global
    }
    return nil
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["bgp-entity"] = &defaultVrf.BgpEntity
    children["global"] = &defaultVrf.Global
    return children
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetBundleName() string { return "cisco_ios_xr" }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetYangName() string { return "default-vrf" }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) SetParent(parent types.Entity) { defaultVrf.parent = parent }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetParent() types.Entity { return defaultVrf.parent }

func (defaultVrf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf) GetParentYangName() string { return "four-byte-as" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity
// Neighbor, neighbor-group, af-group and
// session-group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Neighbor configuration.
    Neighbors Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors

    // Neighbor-group configuration.
    NeighborGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups

    // AF-group configuration.
    AfGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups

    // Session group configuration.
    SessionGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetFilter() yfilter.YFilter { return bgpEntity.YFilter }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) SetFilter(yf yfilter.YFilter) { bgpEntity.YFilter = yf }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetGoName(yname string) string {
    if yname == "neighbors" { return "Neighbors" }
    if yname == "neighbor-groups" { return "NeighborGroups" }
    if yname == "af-groups" { return "AfGroups" }
    if yname == "session-groups" { return "SessionGroups" }
    return ""
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetSegmentPath() string {
    return "bgp-entity"
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbors" {
        return &bgpEntity.Neighbors
    }
    if childYangName == "neighbor-groups" {
        return &bgpEntity.NeighborGroups
    }
    if childYangName == "af-groups" {
        return &bgpEntity.AfGroups
    }
    if childYangName == "session-groups" {
        return &bgpEntity.SessionGroups
    }
    return nil
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbors"] = &bgpEntity.Neighbors
    children["neighbor-groups"] = &bgpEntity.NeighborGroups
    children["af-groups"] = &bgpEntity.AfGroups
    children["session-groups"] = &bgpEntity.SessionGroups
    return children
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetBundleName() string { return "cisco_ios_xr" }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetYangName() string { return "bgp-entity" }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) SetParent(parent types.Entity) { bgpEntity.parent = parent }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetParent() types.Entity { return bgpEntity.parent }

func (bgpEntity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity) GetParentYangName() string { return "default-vrf" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors
// Neighbor configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A particular BGP peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor.
    Neighbor []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor

    // A particular BGP peer. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength.
    NeighborPrefixLength []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetFilter() yfilter.YFilter { return neighbors.YFilter }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) SetFilter(yf yfilter.YFilter) { neighbors.YFilter = yf }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetGoName(yname string) string {
    if yname == "neighbor" { return "Neighbor" }
    if yname == "neighbor-prefix-length" { return "NeighborPrefixLength" }
    return ""
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetSegmentPath() string {
    return "neighbors"
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor" {
        for _, c := range neighbors.Neighbor {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor{}
        neighbors.Neighbor = append(neighbors.Neighbor, child)
        return &neighbors.Neighbor[len(neighbors.Neighbor)-1]
    }
    if childYangName == "neighbor-prefix-length" {
        for _, c := range neighbors.NeighborPrefixLength {
            if neighbors.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength{}
        neighbors.NeighborPrefixLength = append(neighbors.NeighborPrefixLength, child)
        return &neighbors.NeighborPrefixLength[len(neighbors.NeighborPrefixLength)-1]
    }
    return nil
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighbors.Neighbor {
        children[neighbors.Neighbor[i].GetSegmentPath()] = &neighbors.Neighbor[i]
    }
    for i := range neighbors.NeighborPrefixLength {
        children[neighbors.NeighborPrefixLength[i].GetSegmentPath()] = &neighbors.NeighborPrefixLength[i]
    }
    return children
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetBundleName() string { return "cisco_ios_xr" }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetYangName() string { return "neighbors" }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) SetParent(parent types.Entity) { neighbors.parent = parent }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetParent() types.Entity { return neighbors.parent }

func (neighbors *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors) GetParentYangName() string { return "bgp-entity" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor
// A particular BGP peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart support for neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is bool.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability.  FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // BGP neighbor AF configuration table.
    NeighborAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetFilter() yfilter.YFilter { return neighbor.YFilter }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) SetFilter(yf yfilter.YFilter) { neighbor.YFilter = yf }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetGoName(yname string) string {
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "internal-vpn-client-ibgp-ce" { return "InternalVpnClientIbgpCe" }
    if yname == "session-group-add-member" { return "SessionGroupAddMember" }
    if yname == "egress-peer-engineering" { return "EgressPeerEngineering" }
    if yname == "neighbor-graceful-restart-stalepath-time" { return "NeighborGracefulRestartStalepathTime" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "description" { return "Description" }
    if yname == "neighbor-group-add-member" { return "NeighborGroupAddMember" }
    if yname == "ebgp-recv-dmz" { return "EbgpRecvDmz" }
    if yname == "neighbor-graceful-restart" { return "NeighborGracefulRestart" }
    if yname == "enforce-first-as" { return "EnforceFirstAs" }
    if yname == "idle-watch-time" { return "IdleWatchTime" }
    if yname == "session-open-mode" { return "SessionOpenMode" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "ebgp-send-dmz-enable-modes" { return "EbgpSendDmzEnableModes" }
    if yname == "suppress-all-capabilities" { return "SuppressAllCapabilities" }
    if yname == "max-peers" { return "MaxPeers" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "additional-paths-send-capability" { return "AdditionalPathsSendCapability" }
    if yname == "propagate-dmz-link-bandwidth" { return "PropagateDmzLinkBandwidth" }
    if yname == "bfd-enable-modes" { return "BfdEnableModes" }
    if yname == "ttl-security" { return "TtlSecurity" }
    if yname == "neighbor-graceful-restart-time" { return "NeighborGracefulRestartTime" }
    if yname == "bfd-multiplier" { return "BfdMultiplier" }
    if yname == "bfd-minimum-interval" { return "BfdMinimumInterval" }
    if yname == "remote-as-list" { return "RemoteAsList" }
    if yname == "additional-paths-receive-capability" { return "AdditionalPathsReceiveCapability" }
    if yname == "ignore-connected-check-ebgp" { return "IgnoreConnectedCheckEbgp" }
    if yname == "suppress-four-byte-as-capability" { return "SuppressFourByteAsCapability" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "neighbor-afs" { return "NeighborAfs" }
    if yname == "local-address" { return "LocalAddress" }
    if yname == "bmp-activates" { return "BmpActivates" }
    if yname == "ebgp-multihop" { return "EbgpMultihop" }
    if yname == "remote-as" { return "RemoteAs" }
    if yname == "local-as" { return "LocalAs" }
    if yname == "password" { return "Password" }
    if yname == "advertisement-interval" { return "AdvertisementInterval" }
    if yname == "neighbor-cluster-id" { return "NeighborClusterId" }
    if yname == "tcpmss" { return "Tcpmss" }
    if yname == "tos" { return "Tos" }
    if yname == "update-in-filtering" { return "UpdateInFiltering" }
    if yname == "msg-log-out" { return "MsgLogOut" }
    if yname == "receive-buffer-size" { return "ReceiveBufferSize" }
    if yname == "msg-log-in" { return "MsgLogIn" }
    if yname == "send-buffer-size" { return "SendBufferSize" }
    if yname == "timers" { return "Timers" }
    if yname == "keychain" { return "Keychain" }
    if yname == "graceful-maintenance" { return "GracefulMaintenance" }
    return ""
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetSegmentPath() string {
    return "neighbor" + "[neighbor-address='" + fmt.Sprintf("%v", neighbor.NeighborAddress) + "']"
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-afs" {
        return &neighbor.NeighborAfs
    }
    if childYangName == "local-address" {
        return &neighbor.LocalAddress
    }
    if childYangName == "bmp-activates" {
        return &neighbor.BmpActivates
    }
    if childYangName == "ebgp-multihop" {
        return &neighbor.EbgpMultihop
    }
    if childYangName == "remote-as" {
        return &neighbor.RemoteAs
    }
    if childYangName == "local-as" {
        return &neighbor.LocalAs
    }
    if childYangName == "password" {
        return &neighbor.Password
    }
    if childYangName == "advertisement-interval" {
        return &neighbor.AdvertisementInterval
    }
    if childYangName == "neighbor-cluster-id" {
        return &neighbor.NeighborClusterId
    }
    if childYangName == "tcpmss" {
        return &neighbor.Tcpmss
    }
    if childYangName == "tos" {
        return &neighbor.Tos
    }
    if childYangName == "update-in-filtering" {
        return &neighbor.UpdateInFiltering
    }
    if childYangName == "msg-log-out" {
        return &neighbor.MsgLogOut
    }
    if childYangName == "receive-buffer-size" {
        return &neighbor.ReceiveBufferSize
    }
    if childYangName == "msg-log-in" {
        return &neighbor.MsgLogIn
    }
    if childYangName == "send-buffer-size" {
        return &neighbor.SendBufferSize
    }
    if childYangName == "timers" {
        return &neighbor.Timers
    }
    if childYangName == "keychain" {
        return &neighbor.Keychain
    }
    if childYangName == "graceful-maintenance" {
        return &neighbor.GracefulMaintenance
    }
    return nil
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-afs"] = &neighbor.NeighborAfs
    children["local-address"] = &neighbor.LocalAddress
    children["bmp-activates"] = &neighbor.BmpActivates
    children["ebgp-multihop"] = &neighbor.EbgpMultihop
    children["remote-as"] = &neighbor.RemoteAs
    children["local-as"] = &neighbor.LocalAs
    children["password"] = &neighbor.Password
    children["advertisement-interval"] = &neighbor.AdvertisementInterval
    children["neighbor-cluster-id"] = &neighbor.NeighborClusterId
    children["tcpmss"] = &neighbor.Tcpmss
    children["tos"] = &neighbor.Tos
    children["update-in-filtering"] = &neighbor.UpdateInFiltering
    children["msg-log-out"] = &neighbor.MsgLogOut
    children["receive-buffer-size"] = &neighbor.ReceiveBufferSize
    children["msg-log-in"] = &neighbor.MsgLogIn
    children["send-buffer-size"] = &neighbor.SendBufferSize
    children["timers"] = &neighbor.Timers
    children["keychain"] = &neighbor.Keychain
    children["graceful-maintenance"] = &neighbor.GracefulMaintenance
    return children
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-address"] = neighbor.NeighborAddress
    leafs["internal-vpn-client-ibgp-ce"] = neighbor.InternalVpnClientIbgpCe
    leafs["session-group-add-member"] = neighbor.SessionGroupAddMember
    leafs["egress-peer-engineering"] = neighbor.EgressPeerEngineering
    leafs["neighbor-graceful-restart-stalepath-time"] = neighbor.NeighborGracefulRestartStalepathTime
    leafs["shutdown"] = neighbor.Shutdown
    leafs["description"] = neighbor.Description
    leafs["neighbor-group-add-member"] = neighbor.NeighborGroupAddMember
    leafs["ebgp-recv-dmz"] = neighbor.EbgpRecvDmz
    leafs["neighbor-graceful-restart"] = neighbor.NeighborGracefulRestart
    leafs["enforce-first-as"] = neighbor.EnforceFirstAs
    leafs["idle-watch-time"] = neighbor.IdleWatchTime
    leafs["session-open-mode"] = neighbor.SessionOpenMode
    leafs["rpki-origin-as-validation-disable"] = neighbor.RpkiOriginAsValidationDisable
    leafs["ebgp-send-dmz-enable-modes"] = neighbor.EbgpSendDmzEnableModes
    leafs["suppress-all-capabilities"] = neighbor.SuppressAllCapabilities
    leafs["max-peers"] = neighbor.MaxPeers
    leafs["rpki-bestpath-origin-as-allow-invalid"] = neighbor.RpkiBestpathOriginAsAllowInvalid
    leafs["additional-paths-send-capability"] = neighbor.AdditionalPathsSendCapability
    leafs["propagate-dmz-link-bandwidth"] = neighbor.PropagateDmzLinkBandwidth
    leafs["bfd-enable-modes"] = neighbor.BfdEnableModes
    leafs["ttl-security"] = neighbor.TtlSecurity
    leafs["neighbor-graceful-restart-time"] = neighbor.NeighborGracefulRestartTime
    leafs["bfd-multiplier"] = neighbor.BfdMultiplier
    leafs["bfd-minimum-interval"] = neighbor.BfdMinimumInterval
    leafs["remote-as-list"] = neighbor.RemoteAsList
    leafs["additional-paths-receive-capability"] = neighbor.AdditionalPathsReceiveCapability
    leafs["ignore-connected-check-ebgp"] = neighbor.IgnoreConnectedCheckEbgp
    leafs["suppress-four-byte-as-capability"] = neighbor.SuppressFourByteAsCapability
    leafs["update-source-interface"] = neighbor.UpdateSourceInterface
    return leafs
}

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetBundleName() string { return "cisco_ios_xr" }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetYangName() string { return "neighbor" }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) SetParent(parent types.Entity) { neighbor.parent = parent }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetParent() types.Entity { return neighbor.parent }

func (neighbor *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor) GetParentYangName() string { return "neighbors" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs
// BGP neighbor AF configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family type of neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf.
    NeighborAf []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetFilter() yfilter.YFilter { return neighborAfs.YFilter }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) SetFilter(yf yfilter.YFilter) { neighborAfs.YFilter = yf }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetGoName(yname string) string {
    if yname == "neighbor-af" { return "NeighborAf" }
    return ""
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetSegmentPath() string {
    return "neighbor-afs"
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-af" {
        for _, c := range neighborAfs.NeighborAf {
            if neighborAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf{}
        neighborAfs.NeighborAf = append(neighborAfs.NeighborAf, child)
        return &neighborAfs.NeighborAf[len(neighborAfs.NeighborAf)-1]
    }
    return nil
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborAfs.NeighborAf {
        children[neighborAfs.NeighborAf[i].GetSegmentPath()] = &neighborAfs.NeighborAf[i]
    }
    return children
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetYangName() string { return "neighbor-afs" }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) SetParent(parent types.Entity) { neighborAfs.parent = parent }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetParent() types.Entity { return neighborAfs.parent }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf
// Address family type of neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2VpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group.  FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT.  FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client.  FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetFilter() yfilter.YFilter { return neighborAf.YFilter }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) SetFilter(yf yfilter.YFilter) { neighborAf.YFilter = yf }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "neighbor-af-long-lived-graceful-restart-capable" { return "NeighborAfLongLivedGracefulRestartCapable" }
    if yname == "l2vpn-signalling" { return "L2VpnSignalling" }
    if yname == "send-ext-community-ebgp" { return "SendExtCommunityEbgp" }
    if yname == "accept-route-legacy-rt" { return "AcceptRouteLegacyRt" }
    if yname == "send-community-ebgp" { return "SendCommunityEbgp" }
    if yname == "send-multicast-attr" { return "SendMulticastAttr" }
    if yname == "next-hop-unchanged" { return "NextHopUnchanged" }
    if yname == "advertise-local-labeled-route" { return "AdvertiseLocalLabeledRoute" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "flowspec-validation" { return "FlowspecValidation" }
    if yname == "encapsulation-type" { return "EncapsulationType" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "enforce-multiple-labels" { return "EnforceMultipleLabels" }
    if yname == "as-override" { return "AsOverride" }
    if yname == "multipath" { return "Multipath" }
    if yname == "send-community-ebgp-graceful-shutdown" { return "SendCommunityEbgpGracefulShutdown" }
    if yname == "activate" { return "Activate" }
    if yname == "prefix-orf-policy" { return "PrefixOrfPolicy" }
    if yname == "aigp" { return "Aigp" }
    if yname == "aigp-send-med" { return "AigpSendMed" }
    if yname == "allow-as-in" { return "AllowAsIn" }
    if yname == "advertise-orf" { return "AdvertiseOrf" }
    if yname == "route-reflector-client" { return "RouteReflectorClient" }
    if yname == "next-hop-self" { return "NextHopSelf" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-weight" { return "DefaultWeight" }
    if yname == "af-group" { return "AfGroup" }
    if yname == "next-hop-unchanged-multipath" { return "NextHopUnchangedMultipath" }
    if yname == "accept-own" { return "AcceptOwn" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "advertise-permanent-network" { return "AdvertisePermanentNetwork" }
    if yname == "aigp-cost-community" { return "AigpCostCommunity" }
    if yname == "advertise-def-imp-disable-v6" { return "AdvertiseDefImpDisableV6" }
    if yname == "advertise-disable" { return "AdvertiseDisable" }
    if yname == "maximum-prefixes" { return "MaximumPrefixes" }
    if yname == "remove-private-as-entire-as-path-inbound" { return "RemovePrivateAsEntireAsPathInbound" }
    if yname == "advertise-def-imp-disable-v4" { return "AdvertiseDefImpDisableV4" }
    if yname == "advertise-l2vpn-evpn" { return "AdvertiseL2VpnEvpn" }
    if yname == "advertise-local-l2vpn-evpn" { return "AdvertiseLocalL2VpnEvpn" }
    if yname == "neighbor-af-long-lived-graceful-restart-stale-time" { return "NeighborAfLongLivedGracefulRestartStaleTime" }
    if yname == "advertise-v6" { return "AdvertiseV6" }
    if yname == "advertise-local-v6" { return "AdvertiseLocalV6" }
    if yname == "import" { return "Import" }
    if yname == "default-originate" { return "DefaultOriginate" }
    if yname == "soft-reconfiguration" { return "SoftReconfiguration" }
    if yname == "advertise-vrf-imp-disable-v6" { return "AdvertiseVrfImpDisableV6" }
    if yname == "advertise-v4" { return "AdvertiseV4" }
    if yname == "advertise-local-v4" { return "AdvertiseLocalV4" }
    if yname == "remove-private-as-entire-as-path" { return "RemovePrivateAsEntireAsPath" }
    if yname == "advertise-vrf-imp-disable-v4" { return "AdvertiseVrfImpDisableV4" }
    return ""
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetSegmentPath() string {
    return "neighbor-af" + "[af-name='" + fmt.Sprintf("%v", neighborAf.AfName) + "']"
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aigp-cost-community" {
        return &neighborAf.AigpCostCommunity
    }
    if childYangName == "advertise-def-imp-disable-v6" {
        return &neighborAf.AdvertiseDefImpDisableV6
    }
    if childYangName == "advertise-disable" {
        return &neighborAf.AdvertiseDisable
    }
    if childYangName == "maximum-prefixes" {
        return &neighborAf.MaximumPrefixes
    }
    if childYangName == "remove-private-as-entire-as-path-inbound" {
        return &neighborAf.RemovePrivateAsEntireAsPathInbound
    }
    if childYangName == "advertise-def-imp-disable-v4" {
        return &neighborAf.AdvertiseDefImpDisableV4
    }
    if childYangName == "advertise-l2vpn-evpn" {
        return &neighborAf.AdvertiseL2VpnEvpn
    }
    if childYangName == "advertise-local-l2vpn-evpn" {
        return &neighborAf.AdvertiseLocalL2VpnEvpn
    }
    if childYangName == "neighbor-af-long-lived-graceful-restart-stale-time" {
        return &neighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    }
    if childYangName == "advertise-v6" {
        return &neighborAf.AdvertiseV6
    }
    if childYangName == "advertise-local-v6" {
        return &neighborAf.AdvertiseLocalV6
    }
    if childYangName == "import" {
        return &neighborAf.Import
    }
    if childYangName == "default-originate" {
        return &neighborAf.DefaultOriginate
    }
    if childYangName == "soft-reconfiguration" {
        return &neighborAf.SoftReconfiguration
    }
    if childYangName == "advertise-vrf-imp-disable-v6" {
        return &neighborAf.AdvertiseVrfImpDisableV6
    }
    if childYangName == "advertise-v4" {
        return &neighborAf.AdvertiseV4
    }
    if childYangName == "advertise-local-v4" {
        return &neighborAf.AdvertiseLocalV4
    }
    if childYangName == "remove-private-as-entire-as-path" {
        return &neighborAf.RemovePrivateAsEntireAsPath
    }
    if childYangName == "advertise-vrf-imp-disable-v4" {
        return &neighborAf.AdvertiseVrfImpDisableV4
    }
    return nil
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aigp-cost-community"] = &neighborAf.AigpCostCommunity
    children["advertise-def-imp-disable-v6"] = &neighborAf.AdvertiseDefImpDisableV6
    children["advertise-disable"] = &neighborAf.AdvertiseDisable
    children["maximum-prefixes"] = &neighborAf.MaximumPrefixes
    children["remove-private-as-entire-as-path-inbound"] = &neighborAf.RemovePrivateAsEntireAsPathInbound
    children["advertise-def-imp-disable-v4"] = &neighborAf.AdvertiseDefImpDisableV4
    children["advertise-l2vpn-evpn"] = &neighborAf.AdvertiseL2VpnEvpn
    children["advertise-local-l2vpn-evpn"] = &neighborAf.AdvertiseLocalL2VpnEvpn
    children["neighbor-af-long-lived-graceful-restart-stale-time"] = &neighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    children["advertise-v6"] = &neighborAf.AdvertiseV6
    children["advertise-local-v6"] = &neighborAf.AdvertiseLocalV6
    children["import"] = &neighborAf.Import
    children["default-originate"] = &neighborAf.DefaultOriginate
    children["soft-reconfiguration"] = &neighborAf.SoftReconfiguration
    children["advertise-vrf-imp-disable-v6"] = &neighborAf.AdvertiseVrfImpDisableV6
    children["advertise-v4"] = &neighborAf.AdvertiseV4
    children["advertise-local-v4"] = &neighborAf.AdvertiseLocalV4
    children["remove-private-as-entire-as-path"] = &neighborAf.RemovePrivateAsEntireAsPath
    children["advertise-vrf-imp-disable-v4"] = &neighborAf.AdvertiseVrfImpDisableV4
    return children
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = neighborAf.AfName
    leafs["neighbor-af-long-lived-graceful-restart-capable"] = neighborAf.NeighborAfLongLivedGracefulRestartCapable
    leafs["l2vpn-signalling"] = neighborAf.L2VpnSignalling
    leafs["send-ext-community-ebgp"] = neighborAf.SendExtCommunityEbgp
    leafs["accept-route-legacy-rt"] = neighborAf.AcceptRouteLegacyRt
    leafs["send-community-ebgp"] = neighborAf.SendCommunityEbgp
    leafs["send-multicast-attr"] = neighborAf.SendMulticastAttr
    leafs["next-hop-unchanged"] = neighborAf.NextHopUnchanged
    leafs["advertise-local-labeled-route"] = neighborAf.AdvertiseLocalLabeledRoute
    leafs["rpki-origin-as-validation-disable"] = neighborAf.RpkiOriginAsValidationDisable
    leafs["flowspec-validation"] = neighborAf.FlowspecValidation
    leafs["encapsulation-type"] = neighborAf.EncapsulationType
    leafs["rpki-bestpath-origin-as-allow-invalid"] = neighborAf.RpkiBestpathOriginAsAllowInvalid
    leafs["enforce-multiple-labels"] = neighborAf.EnforceMultipleLabels
    leafs["as-override"] = neighborAf.AsOverride
    leafs["multipath"] = neighborAf.Multipath
    leafs["send-community-ebgp-graceful-shutdown"] = neighborAf.SendCommunityEbgpGracefulShutdown
    leafs["activate"] = neighborAf.Activate
    leafs["prefix-orf-policy"] = neighborAf.PrefixOrfPolicy
    leafs["aigp"] = neighborAf.Aigp
    leafs["aigp-send-med"] = neighborAf.AigpSendMed
    leafs["allow-as-in"] = neighborAf.AllowAsIn
    leafs["advertise-orf"] = neighborAf.AdvertiseOrf
    leafs["route-reflector-client"] = neighborAf.RouteReflectorClient
    leafs["next-hop-self"] = neighborAf.NextHopSelf
    leafs["route-policy-in"] = neighborAf.RoutePolicyIn
    leafs["default-weight"] = neighborAf.DefaultWeight
    leafs["af-group"] = neighborAf.AfGroup
    leafs["next-hop-unchanged-multipath"] = neighborAf.NextHopUnchangedMultipath
    leafs["accept-own"] = neighborAf.AcceptOwn
    leafs["route-policy-out"] = neighborAf.RoutePolicyOut
    leafs["advertise-permanent-network"] = neighborAf.AdvertisePermanentNetwork
    return leafs
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetYangName() string { return "neighbor-af" }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) SetParent(parent types.Entity) { neighborAf.parent = parent }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetParent() types.Entity { return neighborAf.parent }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf) GetParentYangName() string { return "neighbor-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    // This attribute is mandatory.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi. This attribute is mandatory.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetFilter() yfilter.YFilter { return aigpCostCommunity.YFilter }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) SetFilter(yf yfilter.YFilter) { aigpCostCommunity.YFilter = yf }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "cost-community-id" { return "CostCommunityId" }
    if yname == "transitive" { return "Transitive" }
    if yname == "cost-community-poi-type" { return "CostCommunityPoiType" }
    return ""
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetSegmentPath() string {
    return "aigp-cost-community"
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = aigpCostCommunity.Enable
    leafs["cost-community-id"] = aigpCostCommunity.CostCommunityId
    leafs["transitive"] = aigpCostCommunity.Transitive
    leafs["cost-community-poi-type"] = aigpCostCommunity.CostCommunityPoiType
    return leafs
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetYangName() string { return "aigp-cost-community" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) SetParent(parent types.Entity) { aigpCostCommunity.parent = parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetParent() types.Entity { return aigpCostCommunity.parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AigpCostCommunity) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV6.YFilter }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV6.YFilter = yf }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetSegmentPath() string {
    return "advertise-def-imp-disable-v6"
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV6.AfName
    leafs["adv-option"] = advertiseDefImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV6.RtType
    return leafs
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetYangName() string { return "advertise-def-imp-disable-v6" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) SetParent(parent types.Entity) { advertiseDefImpDisableV6.parent = parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetParent() types.Entity { return advertiseDefImpDisableV6.parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetFilter() yfilter.YFilter { return advertiseDisable.YFilter }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) SetFilter(yf yfilter.YFilter) { advertiseDisable.YFilter = yf }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetSegmentPath() string {
    return "advertise-disable"
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDisable.AfName
    leafs["reorg-option"] = advertiseDisable.ReorgOption
    leafs["rt-type"] = advertiseDisable.RtType
    return leafs
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetYangName() string { return "advertise-disable" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) SetParent(parent types.Entity) { advertiseDisable.parent = parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetParent() types.Entity { return advertiseDisable.parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDisable) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetFilter() yfilter.YFilter { return maximumPrefixes.YFilter }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) SetFilter(yf yfilter.YFilter) { maximumPrefixes.YFilter = yf }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetGoName(yname string) string {
    if yname == "prefix-limit" { return "PrefixLimit" }
    if yname == "warning-percentage" { return "WarningPercentage" }
    if yname == "warning-only" { return "WarningOnly" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "discard-extra-paths" { return "DiscardExtraPaths" }
    return ""
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetSegmentPath() string {
    return "maximum-prefixes"
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-limit"] = maximumPrefixes.PrefixLimit
    leafs["warning-percentage"] = maximumPrefixes.WarningPercentage
    leafs["warning-only"] = maximumPrefixes.WarningOnly
    leafs["restart-time"] = maximumPrefixes.RestartTime
    leafs["discard-extra-paths"] = maximumPrefixes.DiscardExtraPaths
    return leafs
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetYangName() string { return "maximum-prefixes" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) SetParent(parent types.Entity) { maximumPrefixes.parent = parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetParent() types.Entity { return maximumPrefixes.parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_MaximumPrefixes) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPathInbound.YFilter }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPathInbound.YFilter = yf }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetSegmentPath() string {
    return "remove-private-as-entire-as-path-inbound"
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPathInbound.Enable
    leafs["entire"] = removePrivateAsEntireAsPathInbound.Entire
    return leafs
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetYangName() string { return "remove-private-as-entire-as-path-inbound" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) SetParent(parent types.Entity) { removePrivateAsEntireAsPathInbound.parent = parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetParent() types.Entity { return removePrivateAsEntireAsPathInbound.parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV4.YFilter }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV4.YFilter = yf }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetSegmentPath() string {
    return "advertise-def-imp-disable-v4"
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV4.AfName
    leafs["adv-option"] = advertiseDefImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV4.RtType
    return leafs
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetYangName() string { return "advertise-def-imp-disable-v4" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) SetParent(parent types.Entity) { advertiseDefImpDisableV4.parent = parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetParent() types.Entity { return advertiseDefImpDisableV4.parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseL2VpnEvpn.YFilter }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseL2VpnEvpn.YFilter = yf }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetSegmentPath() string {
    return "advertise-l2vpn-evpn"
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseL2VpnEvpn.RtType
    return leafs
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetYangName() string { return "advertise-l2vpn-evpn" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) SetParent(parent types.Entity) { advertiseL2VpnEvpn.parent = parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetParent() types.Entity { return advertiseL2VpnEvpn.parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseLocalL2VpnEvpn.YFilter }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseLocalL2VpnEvpn.YFilter = yf }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetSegmentPath() string {
    return "advertise-local-l2vpn-evpn"
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseLocalL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseLocalL2VpnEvpn.RtType
    return leafs
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetYangName() string { return "advertise-local-l2vpn-evpn" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) SetParent(parent types.Entity) { advertiseLocalL2VpnEvpn.parent = parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetParent() types.Entity { return advertiseLocalL2VpnEvpn.parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetFilter() yfilter.YFilter { return neighborAfLongLivedGracefulRestartStaleTime.YFilter }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetFilter(yf yfilter.YFilter) { neighborAfLongLivedGracefulRestartStaleTime.YFilter = yf }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetGoName(yname string) string {
    if yname == "stale-time-send" { return "StaleTimeSend" }
    if yname == "stale-time-accept" { return "StaleTimeAccept" }
    return ""
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetSegmentPath() string {
    return "neighbor-af-long-lived-graceful-restart-stale-time"
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stale-time-send"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend
    leafs["stale-time-accept"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept
    return leafs
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetYangName() string { return "neighbor-af-long-lived-graceful-restart-stale-time" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetParent(parent types.Entity) { neighborAfLongLivedGracefulRestartStaleTime.parent = parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParent() types.Entity { return neighborAfLongLivedGracefulRestartStaleTime.parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetFilter() yfilter.YFilter { return advertiseV6.YFilter }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) SetFilter(yf yfilter.YFilter) { advertiseV6.YFilter = yf }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetSegmentPath() string {
    return "advertise-v6"
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV6.AfName
    leafs["reorg-option"] = advertiseV6.ReorgOption
    leafs["rt-type"] = advertiseV6.RtType
    return leafs
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetYangName() string { return "advertise-v6" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) SetParent(parent types.Entity) { advertiseV6.parent = parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetParent() types.Entity { return advertiseV6.parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetFilter() yfilter.YFilter { return advertiseLocalV6.YFilter }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) SetFilter(yf yfilter.YFilter) { advertiseLocalV6.YFilter = yf }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetSegmentPath() string {
    return "advertise-local-v6"
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV6.AfName
    leafs["reorg-option"] = advertiseLocalV6.ReorgOption
    leafs["rt-type"] = advertiseLocalV6.RtType
    return leafs
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetYangName() string { return "advertise-local-v6" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) SetParent(parent types.Entity) { advertiseLocalV6.parent = parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetParent() types.Entity { return advertiseLocalV6.parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetGoName(yname string) string {
    if yname == "import-stitching" { return "ImportStitching" }
    if yname == "import-reoriginate" { return "ImportReoriginate" }
    if yname == "import-reoriginate-stitching" { return "ImportReoriginateStitching" }
    return ""
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetSegmentPath() string {
    return "import"
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["import-stitching"] = self.ImportStitching
    leafs["import-reoriginate"] = self.ImportReoriginate
    leafs["import-reoriginate-stitching"] = self.ImportReoriginateStitching
    return leafs
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetBundleName() string { return "cisco_ios_xr" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetYangName() string { return "import" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) SetParent(parent types.Entity) { self.parent = parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetParent() types.Entity { return self.parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_Import) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetFilter() yfilter.YFilter { return defaultOriginate.YFilter }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) SetFilter(yf yfilter.YFilter) { defaultOriginate.YFilter = yf }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetSegmentPath() string {
    return "default-originate"
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = defaultOriginate.Enable
    leafs["route-policy-name"] = defaultOriginate.RoutePolicyName
    return leafs
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetBundleName() string { return "cisco_ios_xr" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetYangName() string { return "default-originate" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) SetParent(parent types.Entity) { defaultOriginate.parent = parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetParent() types.Entity { return defaultOriginate.parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_DefaultOriginate) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetFilter() yfilter.YFilter { return softReconfiguration.YFilter }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) SetFilter(yf yfilter.YFilter) { softReconfiguration.YFilter = yf }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetGoName(yname string) string {
    if yname == "inbound-soft" { return "InboundSoft" }
    if yname == "soft-always" { return "SoftAlways" }
    return ""
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetSegmentPath() string {
    return "soft-reconfiguration"
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inbound-soft"] = softReconfiguration.InboundSoft
    leafs["soft-always"] = softReconfiguration.SoftAlways
    return leafs
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetYangName() string { return "soft-reconfiguration" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) SetParent(parent types.Entity) { softReconfiguration.parent = parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetParent() types.Entity { return softReconfiguration.parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_SoftReconfiguration) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV6.YFilter }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV6.YFilter = yf }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v6"
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV6.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV6.RtType
    return leafs
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetYangName() string { return "advertise-vrf-imp-disable-v6" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) SetParent(parent types.Entity) { advertiseVrfImpDisableV6.parent = parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetParent() types.Entity { return advertiseVrfImpDisableV6.parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetFilter() yfilter.YFilter { return advertiseV4.YFilter }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) SetFilter(yf yfilter.YFilter) { advertiseV4.YFilter = yf }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetSegmentPath() string {
    return "advertise-v4"
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV4.AfName
    leafs["reorg-option"] = advertiseV4.ReorgOption
    leafs["rt-type"] = advertiseV4.RtType
    return leafs
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetYangName() string { return "advertise-v4" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) SetParent(parent types.Entity) { advertiseV4.parent = parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetParent() types.Entity { return advertiseV4.parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetFilter() yfilter.YFilter { return advertiseLocalV4.YFilter }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) SetFilter(yf yfilter.YFilter) { advertiseLocalV4.YFilter = yf }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetSegmentPath() string {
    return "advertise-local-v4"
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV4.AfName
    leafs["reorg-option"] = advertiseLocalV4.ReorgOption
    leafs["rt-type"] = advertiseLocalV4.RtType
    return leafs
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetYangName() string { return "advertise-local-v4" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) SetParent(parent types.Entity) { advertiseLocalV4.parent = parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetParent() types.Entity { return advertiseLocalV4.parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPath.YFilter }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPath.YFilter = yf }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetSegmentPath() string {
    return "remove-private-as-entire-as-path"
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPath.Enable
    leafs["entire"] = removePrivateAsEntireAsPath.Entire
    return leafs
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetYangName() string { return "remove-private-as-entire-as-path" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) SetParent(parent types.Entity) { removePrivateAsEntireAsPath.parent = parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetParent() types.Entity { return removePrivateAsEntireAsPath.parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV4.YFilter }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV4.YFilter = yf }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v4"
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV4.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV4.RtType
    return leafs
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetYangName() string { return "advertise-vrf-imp-disable-v4" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) SetParent(parent types.Entity) { advertiseVrfImpDisableV4.parent = parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetParent() types.Entity { return advertiseVrfImpDisableV4.parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetFilter() yfilter.YFilter { return localAddress.YFilter }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) SetFilter(yf yfilter.YFilter) { localAddress.YFilter = yf }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetGoName(yname string) string {
    if yname == "local-address-disable" { return "LocalAddressDisable" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    return ""
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetSegmentPath() string {
    return "local-address"
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-address-disable"] = localAddress.LocalAddressDisable
    leafs["local-ip-address"] = localAddress.LocalIpAddress
    return leafs
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetYangName() string { return "local-address" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) SetParent(parent types.Entity) { localAddress.parent = parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetParent() types.Entity { return localAddress.parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAddress) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate.
    BmpActivate []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetFilter() yfilter.YFilter { return bmpActivates.YFilter }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) SetFilter(yf yfilter.YFilter) { bmpActivates.YFilter = yf }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetGoName(yname string) string {
    if yname == "bmp-activate" { return "BmpActivate" }
    return ""
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetSegmentPath() string {
    return "bmp-activates"
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-activate" {
        for _, c := range bmpActivates.BmpActivate {
            if bmpActivates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate{}
        bmpActivates.BmpActivate = append(bmpActivates.BmpActivate, child)
        return &bmpActivates.BmpActivate[len(bmpActivates.BmpActivate)-1]
    }
    return nil
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpActivates.BmpActivate {
        children[bmpActivates.BmpActivate[i].GetSegmentPath()] = &bmpActivates.BmpActivate[i]
    }
    return children
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetYangName() string { return "bmp-activates" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) SetParent(parent types.Entity) { bmpActivates.parent = parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetParent() types.Entity { return bmpActivates.parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetFilter() yfilter.YFilter { return bmpActivate.YFilter }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) SetFilter(yf yfilter.YFilter) { bmpActivate.YFilter = yf }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    return ""
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetSegmentPath() string {
    return "bmp-activate" + "[server-id='" + fmt.Sprintf("%v", bmpActivate.ServerId) + "']"
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpActivate.ServerId
    return leafs
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetYangName() string { return "bmp-activate" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) SetParent(parent types.Entity) { bmpActivate.parent = parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetParent() types.Entity { return bmpActivate.parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_BmpActivates_BmpActivate) GetParentYangName() string { return "bmp-activates" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetFilter() yfilter.YFilter { return ebgpMultihop.YFilter }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) SetFilter(yf yfilter.YFilter) { ebgpMultihop.YFilter = yf }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetGoName(yname string) string {
    if yname == "max-hop-count" { return "MaxHopCount" }
    if yname == "mpls-deactivation" { return "MplsDeactivation" }
    return ""
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetSegmentPath() string {
    return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-hop-count"] = ebgpMultihop.MaxHopCount
    leafs["mpls-deactivation"] = ebgpMultihop.MplsDeactivation
    return leafs
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetBundleName() string { return "cisco_ios_xr" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetYangName() string { return "ebgp-multihop" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) SetParent(parent types.Entity) { ebgpMultihop.parent = parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetParent() types.Entity { return ebgpMultihop.parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_EbgpMultihop) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetFilter() yfilter.YFilter { return remoteAs.YFilter }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) SetFilter(yf yfilter.YFilter) { remoteAs.YFilter = yf }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetSegmentPath() string {
    return "remote-as"
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = remoteAs.AsXx
    leafs["as-yy"] = remoteAs.AsYy
    return leafs
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetBundleName() string { return "cisco_ios_xr" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetYangName() string { return "remote-as" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) SetParent(parent types.Entity) { remoteAs.parent = parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetParent() types.Entity { return remoteAs.parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_RemoteAs) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetFilter() yfilter.YFilter { return localAs.YFilter }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) SetFilter(yf yfilter.YFilter) { localAs.YFilter = yf }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "no-prepend" { return "NoPrepend" }
    if yname == "disable" { return "Disable" }
    if yname == "replace-as" { return "ReplaceAs" }
    if yname == "dual-as" { return "DualAs" }
    return ""
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetSegmentPath() string {
    return "local-as"
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = localAs.AsXx
    leafs["as-yy"] = localAs.AsYy
    leafs["no-prepend"] = localAs.NoPrepend
    leafs["disable"] = localAs.Disable
    leafs["replace-as"] = localAs.ReplaceAs
    leafs["dual-as"] = localAs.DualAs
    return leafs
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetBundleName() string { return "cisco_ios_xr" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetYangName() string { return "local-as" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) SetParent(parent types.Entity) { localAs.parent = parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetParent() types.Entity { return localAs.parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_LocalAs) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetFilter() yfilter.YFilter { return password.YFilter }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) SetFilter(yf yfilter.YFilter) { password.YFilter = yf }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetGoName(yname string) string {
    if yname == "password-disable" { return "PasswordDisable" }
    if yname == "password" { return "Password" }
    return ""
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetSegmentPath() string {
    return "password"
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password-disable"] = password.PasswordDisable
    leafs["password"] = password.Password
    return leafs
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetBundleName() string { return "cisco_ios_xr" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetYangName() string { return "password" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) SetParent(parent types.Entity) { password.parent = parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetParent() types.Entity { return password.parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Password) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetFilter() yfilter.YFilter { return advertisementInterval.YFilter }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) SetFilter(yf yfilter.YFilter) { advertisementInterval.YFilter = yf }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetGoName(yname string) string {
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "minimum-interval-msecs" { return "MinimumIntervalMsecs" }
    return ""
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetSegmentPath() string {
    return "advertisement-interval"
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-interval"] = advertisementInterval.MinimumInterval
    leafs["minimum-interval-msecs"] = advertisementInterval.MinimumIntervalMsecs
    return leafs
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetBundleName() string { return "cisco_ios_xr" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetYangName() string { return "advertisement-interval" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) SetParent(parent types.Entity) { advertisementInterval.parent = parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetParent() types.Entity { return advertisementInterval.parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_AdvertisementInterval) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetFilter() yfilter.YFilter { return neighborClusterId.YFilter }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) SetFilter(yf yfilter.YFilter) { neighborClusterId.YFilter = yf }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetSegmentPath() string {
    return "neighbor-cluster-id"
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = neighborClusterId.ClusterIdNumber
    leafs["cluster-id-address"] = neighborClusterId.ClusterIdAddress
    return leafs
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetYangName() string { return "neighbor-cluster-id" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) SetParent(parent types.Entity) { neighborClusterId.parent = parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetParent() types.Entity { return neighborClusterId.parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_NeighborClusterId) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetFilter() yfilter.YFilter { return tcpmss.YFilter }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) SetFilter(yf yfilter.YFilter) { tcpmss.YFilter = yf }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetGoName(yname string) string {
    if yname == "tcpmss-disable" { return "TcpmssDisable" }
    if yname == "mss" { return "Mss" }
    return ""
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetSegmentPath() string {
    return "tcpmss"
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcpmss-disable"] = tcpmss.TcpmssDisable
    leafs["mss"] = tcpmss.Mss
    return leafs
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetBundleName() string { return "cisco_ios_xr" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetYangName() string { return "tcpmss" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) SetParent(parent types.Entity) { tcpmss.parent = parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetParent() types.Entity { return tcpmss.parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tcpmss) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetYangName() string { return "tos" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetParent() types.Entity { return tos.parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Tos) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetFilter() yfilter.YFilter { return updateInFiltering.YFilter }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) SetFilter(yf yfilter.YFilter) { updateInFiltering.YFilter = yf }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "update-in-filtering-attribute-filter-group" { return "UpdateInFilteringAttributeFilterGroup" }
    if yname == "update-in-filtering-syslog-disable" { return "UpdateInFilteringSyslogDisable" }
    if yname == "update-in-filtering-message-buffers" { return "UpdateInFilteringMessageBuffers" }
    return ""
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetSegmentPath() string {
    return "update-in-filtering"
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update-in-filtering-message-buffers" {
        return &updateInFiltering.UpdateInFilteringMessageBuffers
    }
    return nil
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["update-in-filtering-message-buffers"] = &updateInFiltering.UpdateInFilteringMessageBuffers
    return children
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = updateInFiltering.Enable
    leafs["update-in-filtering-attribute-filter-group"] = updateInFiltering.UpdateInFilteringAttributeFilterGroup
    leafs["update-in-filtering-syslog-disable"] = updateInFiltering.UpdateInFilteringSyslogDisable
    return leafs
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetYangName() string { return "update-in-filtering" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) SetParent(parent types.Entity) { updateInFiltering.parent = parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetParent() types.Entity { return updateInFiltering.parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetFilter() yfilter.YFilter { return updateInFilteringMessageBuffers.YFilter }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetFilter(yf yfilter.YFilter) { updateInFilteringMessageBuffers.YFilter = yf }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetGoName(yname string) string {
    if yname == "number-of-buffers" { return "NumberOfBuffers" }
    if yname == "non-circular-buffer" { return "NonCircularBuffer" }
    return ""
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetSegmentPath() string {
    return "update-in-filtering-message-buffers"
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-buffers"] = updateInFilteringMessageBuffers.NumberOfBuffers
    leafs["non-circular-buffer"] = updateInFilteringMessageBuffers.NonCircularBuffer
    return leafs
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetYangName() string { return "update-in-filtering-message-buffers" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetParent(parent types.Entity) { updateInFilteringMessageBuffers.parent = parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParent() types.Entity { return updateInFilteringMessageBuffers.parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParentYangName() string { return "update-in-filtering" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetFilter() yfilter.YFilter { return msgLogOut.YFilter }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) SetFilter(yf yfilter.YFilter) { msgLogOut.YFilter = yf }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetSegmentPath() string {
    return "msg-log-out"
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogOut.MsgBufCount
    leafs["msg-log-disable"] = msgLogOut.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogOut.MsgLogInheritDisable
    return leafs
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetYangName() string { return "msg-log-out" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) SetParent(parent types.Entity) { msgLogOut.parent = parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetParent() types.Entity { return msgLogOut.parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogOut) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetFilter() yfilter.YFilter { return receiveBufferSize.YFilter }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) SetFilter(yf yfilter.YFilter) { receiveBufferSize.YFilter = yf }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetSegmentPath() string {
    return "receive-buffer-size"
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveBufferSize.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveBufferSize.BgpReceiveSize
    return leafs
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetYangName() string { return "receive-buffer-size" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) SetParent(parent types.Entity) { receiveBufferSize.parent = parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetParent() types.Entity { return receiveBufferSize.parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_ReceiveBufferSize) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetFilter() yfilter.YFilter { return msgLogIn.YFilter }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) SetFilter(yf yfilter.YFilter) { msgLogIn.YFilter = yf }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetSegmentPath() string {
    return "msg-log-in"
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogIn.MsgBufCount
    leafs["msg-log-disable"] = msgLogIn.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogIn.MsgLogInheritDisable
    return leafs
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetYangName() string { return "msg-log-in" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) SetParent(parent types.Entity) { msgLogIn.parent = parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetParent() types.Entity { return msgLogIn.parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_MsgLogIn) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetFilter() yfilter.YFilter { return sendBufferSize.YFilter }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) SetFilter(yf yfilter.YFilter) { sendBufferSize.YFilter = yf }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetSegmentPath() string {
    return "send-buffer-size"
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendBufferSize.SocketSendSize
    leafs["bgp-send-size"] = sendBufferSize.BgpSendSize
    return leafs
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetYangName() string { return "send-buffer-size" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) SetParent(parent types.Entity) { sendBufferSize.parent = parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetParent() types.Entity { return sendBufferSize.parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_SendBufferSize) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetGoName(yname string) string {
    if yname == "keepalive-interval" { return "KeepaliveInterval" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive-interval"] = timers.KeepaliveInterval
    leafs["hold-time"] = timers.HoldTime
    leafs["min-accept-hold-time"] = timers.MinAcceptHoldTime
    return leafs
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetYangName() string { return "timers" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Timers) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetFilter() yfilter.YFilter { return keychain.YFilter }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) SetFilter(yf yfilter.YFilter) { keychain.YFilter = yf }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetGoName(yname string) string {
    if yname == "keychain-disable" { return "KeychainDisable" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetSegmentPath() string {
    return "keychain"
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keychain-disable"] = keychain.KeychainDisable
    leafs["keychain-name"] = keychain.KeychainName
    return leafs
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetBundleName() string { return "cisco_ios_xr" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetYangName() string { return "keychain" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) SetParent(parent types.Entity) { keychain.parent = parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetParent() types.Entity { return keychain.parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_Keychain) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetFilter() yfilter.YFilter { return gracefulMaintenance.YFilter }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) SetFilter(yf yfilter.YFilter) { gracefulMaintenance.YFilter = yf }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "graceful-maintenance-activate" { return "GracefulMaintenanceActivate" }
    if yname == "graceful-maintenance-local-preference" { return "GracefulMaintenanceLocalPreference" }
    if yname == "graceful-maintenance-as-prepends" { return "GracefulMaintenanceAsPrepends" }
    return ""
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetSegmentPath() string {
    return "graceful-maintenance"
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "graceful-maintenance-local-preference" {
        return &gracefulMaintenance.GracefulMaintenanceLocalPreference
    }
    if childYangName == "graceful-maintenance-as-prepends" {
        return &gracefulMaintenance.GracefulMaintenanceAsPrepends
    }
    return nil
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["graceful-maintenance-local-preference"] = &gracefulMaintenance.GracefulMaintenanceLocalPreference
    children["graceful-maintenance-as-prepends"] = &gracefulMaintenance.GracefulMaintenanceAsPrepends
    return children
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = gracefulMaintenance.Enable
    leafs["graceful-maintenance-activate"] = gracefulMaintenance.GracefulMaintenanceActivate
    return leafs
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetYangName() string { return "graceful-maintenance" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) SetParent(parent types.Entity) { gracefulMaintenance.parent = parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetParent() types.Entity { return gracefulMaintenance.parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance) GetParentYangName() string { return "neighbor" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetFilter() yfilter.YFilter { return gracefulMaintenanceLocalPreference.YFilter }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceLocalPreference.YFilter = yf }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetGoName(yname string) string {
    if yname == "gshut-loc-pref-disable" { return "GshutLocPrefDisable" }
    if yname == "local-preference" { return "LocalPreference" }
    return ""
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetSegmentPath() string {
    return "graceful-maintenance-local-preference"
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-loc-pref-disable"] = gracefulMaintenanceLocalPreference.GshutLocPrefDisable
    leafs["local-preference"] = gracefulMaintenanceLocalPreference.LocalPreference
    return leafs
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetYangName() string { return "graceful-maintenance-local-preference" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetParent(parent types.Entity) { gracefulMaintenanceLocalPreference.parent = parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParent() types.Entity { return gracefulMaintenanceLocalPreference.parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetFilter() yfilter.YFilter { return gracefulMaintenanceAsPrepends.YFilter }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceAsPrepends.YFilter = yf }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetGoName(yname string) string {
    if yname == "gshut-prepends-disable" { return "GshutPrependsDisable" }
    if yname == "as-prepends" { return "AsPrepends" }
    return ""
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetSegmentPath() string {
    return "graceful-maintenance-as-prepends"
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-prepends-disable"] = gracefulMaintenanceAsPrepends.GshutPrependsDisable
    leafs["as-prepends"] = gracefulMaintenanceAsPrepends.AsPrepends
    return leafs
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetYangName() string { return "graceful-maintenance-as-prepends" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetParent(parent types.Entity) { gracefulMaintenanceAsPrepends.parent = parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParent() types.Entity { return gracefulMaintenanceAsPrepends.parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_Neighbor_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength
// A particular BGP peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Prefix length. The type is interface{} with range:
    // 0..127.
    PrefixLength interface{}

    // This attribute is a key. Neighbor address. The type is one of the following
    // types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NeighborAddress interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart support for neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is bool.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability.  FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // BGP neighbor AF configuration table.
    NeighborAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetFilter() yfilter.YFilter { return neighborPrefixLength.YFilter }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) SetFilter(yf yfilter.YFilter) { neighborPrefixLength.YFilter = yf }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetGoName(yname string) string {
    if yname == "prefix-length" { return "PrefixLength" }
    if yname == "neighbor-address" { return "NeighborAddress" }
    if yname == "internal-vpn-client-ibgp-ce" { return "InternalVpnClientIbgpCe" }
    if yname == "session-group-add-member" { return "SessionGroupAddMember" }
    if yname == "egress-peer-engineering" { return "EgressPeerEngineering" }
    if yname == "neighbor-graceful-restart-stalepath-time" { return "NeighborGracefulRestartStalepathTime" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "description" { return "Description" }
    if yname == "neighbor-group-add-member" { return "NeighborGroupAddMember" }
    if yname == "ebgp-recv-dmz" { return "EbgpRecvDmz" }
    if yname == "neighbor-graceful-restart" { return "NeighborGracefulRestart" }
    if yname == "enforce-first-as" { return "EnforceFirstAs" }
    if yname == "idle-watch-time" { return "IdleWatchTime" }
    if yname == "session-open-mode" { return "SessionOpenMode" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "ebgp-send-dmz-enable-modes" { return "EbgpSendDmzEnableModes" }
    if yname == "suppress-all-capabilities" { return "SuppressAllCapabilities" }
    if yname == "max-peers" { return "MaxPeers" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "additional-paths-send-capability" { return "AdditionalPathsSendCapability" }
    if yname == "propagate-dmz-link-bandwidth" { return "PropagateDmzLinkBandwidth" }
    if yname == "bfd-enable-modes" { return "BfdEnableModes" }
    if yname == "ttl-security" { return "TtlSecurity" }
    if yname == "neighbor-graceful-restart-time" { return "NeighborGracefulRestartTime" }
    if yname == "bfd-multiplier" { return "BfdMultiplier" }
    if yname == "bfd-minimum-interval" { return "BfdMinimumInterval" }
    if yname == "remote-as-list" { return "RemoteAsList" }
    if yname == "additional-paths-receive-capability" { return "AdditionalPathsReceiveCapability" }
    if yname == "ignore-connected-check-ebgp" { return "IgnoreConnectedCheckEbgp" }
    if yname == "suppress-four-byte-as-capability" { return "SuppressFourByteAsCapability" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "neighbor-afs" { return "NeighborAfs" }
    if yname == "local-address" { return "LocalAddress" }
    if yname == "bmp-activates" { return "BmpActivates" }
    if yname == "ebgp-multihop" { return "EbgpMultihop" }
    if yname == "remote-as" { return "RemoteAs" }
    if yname == "local-as" { return "LocalAs" }
    if yname == "password" { return "Password" }
    if yname == "advertisement-interval" { return "AdvertisementInterval" }
    if yname == "neighbor-cluster-id" { return "NeighborClusterId" }
    if yname == "tcpmss" { return "Tcpmss" }
    if yname == "tos" { return "Tos" }
    if yname == "update-in-filtering" { return "UpdateInFiltering" }
    if yname == "msg-log-out" { return "MsgLogOut" }
    if yname == "receive-buffer-size" { return "ReceiveBufferSize" }
    if yname == "msg-log-in" { return "MsgLogIn" }
    if yname == "send-buffer-size" { return "SendBufferSize" }
    if yname == "timers" { return "Timers" }
    if yname == "keychain" { return "Keychain" }
    if yname == "graceful-maintenance" { return "GracefulMaintenance" }
    return ""
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetSegmentPath() string {
    return "neighbor-prefix-length" + "[prefix-length='" + fmt.Sprintf("%v", neighborPrefixLength.PrefixLength) + "']" + "[neighbor-address='" + fmt.Sprintf("%v", neighborPrefixLength.NeighborAddress) + "']"
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-afs" {
        return &neighborPrefixLength.NeighborAfs
    }
    if childYangName == "local-address" {
        return &neighborPrefixLength.LocalAddress
    }
    if childYangName == "bmp-activates" {
        return &neighborPrefixLength.BmpActivates
    }
    if childYangName == "ebgp-multihop" {
        return &neighborPrefixLength.EbgpMultihop
    }
    if childYangName == "remote-as" {
        return &neighborPrefixLength.RemoteAs
    }
    if childYangName == "local-as" {
        return &neighborPrefixLength.LocalAs
    }
    if childYangName == "password" {
        return &neighborPrefixLength.Password
    }
    if childYangName == "advertisement-interval" {
        return &neighborPrefixLength.AdvertisementInterval
    }
    if childYangName == "neighbor-cluster-id" {
        return &neighborPrefixLength.NeighborClusterId
    }
    if childYangName == "tcpmss" {
        return &neighborPrefixLength.Tcpmss
    }
    if childYangName == "tos" {
        return &neighborPrefixLength.Tos
    }
    if childYangName == "update-in-filtering" {
        return &neighborPrefixLength.UpdateInFiltering
    }
    if childYangName == "msg-log-out" {
        return &neighborPrefixLength.MsgLogOut
    }
    if childYangName == "receive-buffer-size" {
        return &neighborPrefixLength.ReceiveBufferSize
    }
    if childYangName == "msg-log-in" {
        return &neighborPrefixLength.MsgLogIn
    }
    if childYangName == "send-buffer-size" {
        return &neighborPrefixLength.SendBufferSize
    }
    if childYangName == "timers" {
        return &neighborPrefixLength.Timers
    }
    if childYangName == "keychain" {
        return &neighborPrefixLength.Keychain
    }
    if childYangName == "graceful-maintenance" {
        return &neighborPrefixLength.GracefulMaintenance
    }
    return nil
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-afs"] = &neighborPrefixLength.NeighborAfs
    children["local-address"] = &neighborPrefixLength.LocalAddress
    children["bmp-activates"] = &neighborPrefixLength.BmpActivates
    children["ebgp-multihop"] = &neighborPrefixLength.EbgpMultihop
    children["remote-as"] = &neighborPrefixLength.RemoteAs
    children["local-as"] = &neighborPrefixLength.LocalAs
    children["password"] = &neighborPrefixLength.Password
    children["advertisement-interval"] = &neighborPrefixLength.AdvertisementInterval
    children["neighbor-cluster-id"] = &neighborPrefixLength.NeighborClusterId
    children["tcpmss"] = &neighborPrefixLength.Tcpmss
    children["tos"] = &neighborPrefixLength.Tos
    children["update-in-filtering"] = &neighborPrefixLength.UpdateInFiltering
    children["msg-log-out"] = &neighborPrefixLength.MsgLogOut
    children["receive-buffer-size"] = &neighborPrefixLength.ReceiveBufferSize
    children["msg-log-in"] = &neighborPrefixLength.MsgLogIn
    children["send-buffer-size"] = &neighborPrefixLength.SendBufferSize
    children["timers"] = &neighborPrefixLength.Timers
    children["keychain"] = &neighborPrefixLength.Keychain
    children["graceful-maintenance"] = &neighborPrefixLength.GracefulMaintenance
    return children
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-length"] = neighborPrefixLength.PrefixLength
    leafs["neighbor-address"] = neighborPrefixLength.NeighborAddress
    leafs["internal-vpn-client-ibgp-ce"] = neighborPrefixLength.InternalVpnClientIbgpCe
    leafs["session-group-add-member"] = neighborPrefixLength.SessionGroupAddMember
    leafs["egress-peer-engineering"] = neighborPrefixLength.EgressPeerEngineering
    leafs["neighbor-graceful-restart-stalepath-time"] = neighborPrefixLength.NeighborGracefulRestartStalepathTime
    leafs["shutdown"] = neighborPrefixLength.Shutdown
    leafs["description"] = neighborPrefixLength.Description
    leafs["neighbor-group-add-member"] = neighborPrefixLength.NeighborGroupAddMember
    leafs["ebgp-recv-dmz"] = neighborPrefixLength.EbgpRecvDmz
    leafs["neighbor-graceful-restart"] = neighborPrefixLength.NeighborGracefulRestart
    leafs["enforce-first-as"] = neighborPrefixLength.EnforceFirstAs
    leafs["idle-watch-time"] = neighborPrefixLength.IdleWatchTime
    leafs["session-open-mode"] = neighborPrefixLength.SessionOpenMode
    leafs["rpki-origin-as-validation-disable"] = neighborPrefixLength.RpkiOriginAsValidationDisable
    leafs["ebgp-send-dmz-enable-modes"] = neighborPrefixLength.EbgpSendDmzEnableModes
    leafs["suppress-all-capabilities"] = neighborPrefixLength.SuppressAllCapabilities
    leafs["max-peers"] = neighborPrefixLength.MaxPeers
    leafs["rpki-bestpath-origin-as-allow-invalid"] = neighborPrefixLength.RpkiBestpathOriginAsAllowInvalid
    leafs["additional-paths-send-capability"] = neighborPrefixLength.AdditionalPathsSendCapability
    leafs["propagate-dmz-link-bandwidth"] = neighborPrefixLength.PropagateDmzLinkBandwidth
    leafs["bfd-enable-modes"] = neighborPrefixLength.BfdEnableModes
    leafs["ttl-security"] = neighborPrefixLength.TtlSecurity
    leafs["neighbor-graceful-restart-time"] = neighborPrefixLength.NeighborGracefulRestartTime
    leafs["bfd-multiplier"] = neighborPrefixLength.BfdMultiplier
    leafs["bfd-minimum-interval"] = neighborPrefixLength.BfdMinimumInterval
    leafs["remote-as-list"] = neighborPrefixLength.RemoteAsList
    leafs["additional-paths-receive-capability"] = neighborPrefixLength.AdditionalPathsReceiveCapability
    leafs["ignore-connected-check-ebgp"] = neighborPrefixLength.IgnoreConnectedCheckEbgp
    leafs["suppress-four-byte-as-capability"] = neighborPrefixLength.SuppressFourByteAsCapability
    leafs["update-source-interface"] = neighborPrefixLength.UpdateSourceInterface
    return leafs
}

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetBundleName() string { return "cisco_ios_xr" }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetYangName() string { return "neighbor-prefix-length" }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) SetParent(parent types.Entity) { neighborPrefixLength.parent = parent }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetParent() types.Entity { return neighborPrefixLength.parent }

func (neighborPrefixLength *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength) GetParentYangName() string { return "neighbors" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs
// BGP neighbor AF configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family type of neighbor. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf.
    NeighborAf []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetFilter() yfilter.YFilter { return neighborAfs.YFilter }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) SetFilter(yf yfilter.YFilter) { neighborAfs.YFilter = yf }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetGoName(yname string) string {
    if yname == "neighbor-af" { return "NeighborAf" }
    return ""
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetSegmentPath() string {
    return "neighbor-afs"
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-af" {
        for _, c := range neighborAfs.NeighborAf {
            if neighborAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf{}
        neighborAfs.NeighborAf = append(neighborAfs.NeighborAf, child)
        return &neighborAfs.NeighborAf[len(neighborAfs.NeighborAf)-1]
    }
    return nil
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborAfs.NeighborAf {
        children[neighborAfs.NeighborAf[i].GetSegmentPath()] = &neighborAfs.NeighborAf[i]
    }
    return children
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetYangName() string { return "neighbor-afs" }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) SetParent(parent types.Entity) { neighborAfs.parent = parent }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetParent() types.Entity { return neighborAfs.parent }

func (neighborAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf
// Address family type of neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP neighbor address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2VpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group.  FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT.  FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client.  FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetFilter() yfilter.YFilter { return neighborAf.YFilter }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) SetFilter(yf yfilter.YFilter) { neighborAf.YFilter = yf }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "neighbor-af-long-lived-graceful-restart-capable" { return "NeighborAfLongLivedGracefulRestartCapable" }
    if yname == "l2vpn-signalling" { return "L2VpnSignalling" }
    if yname == "send-ext-community-ebgp" { return "SendExtCommunityEbgp" }
    if yname == "accept-route-legacy-rt" { return "AcceptRouteLegacyRt" }
    if yname == "send-community-ebgp" { return "SendCommunityEbgp" }
    if yname == "send-multicast-attr" { return "SendMulticastAttr" }
    if yname == "next-hop-unchanged" { return "NextHopUnchanged" }
    if yname == "advertise-local-labeled-route" { return "AdvertiseLocalLabeledRoute" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "flowspec-validation" { return "FlowspecValidation" }
    if yname == "encapsulation-type" { return "EncapsulationType" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "enforce-multiple-labels" { return "EnforceMultipleLabels" }
    if yname == "as-override" { return "AsOverride" }
    if yname == "multipath" { return "Multipath" }
    if yname == "send-community-ebgp-graceful-shutdown" { return "SendCommunityEbgpGracefulShutdown" }
    if yname == "activate" { return "Activate" }
    if yname == "prefix-orf-policy" { return "PrefixOrfPolicy" }
    if yname == "aigp" { return "Aigp" }
    if yname == "aigp-send-med" { return "AigpSendMed" }
    if yname == "allow-as-in" { return "AllowAsIn" }
    if yname == "advertise-orf" { return "AdvertiseOrf" }
    if yname == "route-reflector-client" { return "RouteReflectorClient" }
    if yname == "next-hop-self" { return "NextHopSelf" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-weight" { return "DefaultWeight" }
    if yname == "af-group" { return "AfGroup" }
    if yname == "next-hop-unchanged-multipath" { return "NextHopUnchangedMultipath" }
    if yname == "accept-own" { return "AcceptOwn" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "advertise-permanent-network" { return "AdvertisePermanentNetwork" }
    if yname == "aigp-cost-community" { return "AigpCostCommunity" }
    if yname == "advertise-def-imp-disable-v6" { return "AdvertiseDefImpDisableV6" }
    if yname == "advertise-disable" { return "AdvertiseDisable" }
    if yname == "maximum-prefixes" { return "MaximumPrefixes" }
    if yname == "remove-private-as-entire-as-path-inbound" { return "RemovePrivateAsEntireAsPathInbound" }
    if yname == "advertise-def-imp-disable-v4" { return "AdvertiseDefImpDisableV4" }
    if yname == "advertise-l2vpn-evpn" { return "AdvertiseL2VpnEvpn" }
    if yname == "advertise-local-l2vpn-evpn" { return "AdvertiseLocalL2VpnEvpn" }
    if yname == "neighbor-af-long-lived-graceful-restart-stale-time" { return "NeighborAfLongLivedGracefulRestartStaleTime" }
    if yname == "advertise-v6" { return "AdvertiseV6" }
    if yname == "advertise-local-v6" { return "AdvertiseLocalV6" }
    if yname == "import" { return "Import" }
    if yname == "default-originate" { return "DefaultOriginate" }
    if yname == "soft-reconfiguration" { return "SoftReconfiguration" }
    if yname == "advertise-vrf-imp-disable-v6" { return "AdvertiseVrfImpDisableV6" }
    if yname == "advertise-v4" { return "AdvertiseV4" }
    if yname == "advertise-local-v4" { return "AdvertiseLocalV4" }
    if yname == "remove-private-as-entire-as-path" { return "RemovePrivateAsEntireAsPath" }
    if yname == "advertise-vrf-imp-disable-v4" { return "AdvertiseVrfImpDisableV4" }
    return ""
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetSegmentPath() string {
    return "neighbor-af" + "[af-name='" + fmt.Sprintf("%v", neighborAf.AfName) + "']"
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aigp-cost-community" {
        return &neighborAf.AigpCostCommunity
    }
    if childYangName == "advertise-def-imp-disable-v6" {
        return &neighborAf.AdvertiseDefImpDisableV6
    }
    if childYangName == "advertise-disable" {
        return &neighborAf.AdvertiseDisable
    }
    if childYangName == "maximum-prefixes" {
        return &neighborAf.MaximumPrefixes
    }
    if childYangName == "remove-private-as-entire-as-path-inbound" {
        return &neighborAf.RemovePrivateAsEntireAsPathInbound
    }
    if childYangName == "advertise-def-imp-disable-v4" {
        return &neighborAf.AdvertiseDefImpDisableV4
    }
    if childYangName == "advertise-l2vpn-evpn" {
        return &neighborAf.AdvertiseL2VpnEvpn
    }
    if childYangName == "advertise-local-l2vpn-evpn" {
        return &neighborAf.AdvertiseLocalL2VpnEvpn
    }
    if childYangName == "neighbor-af-long-lived-graceful-restart-stale-time" {
        return &neighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    }
    if childYangName == "advertise-v6" {
        return &neighborAf.AdvertiseV6
    }
    if childYangName == "advertise-local-v6" {
        return &neighborAf.AdvertiseLocalV6
    }
    if childYangName == "import" {
        return &neighborAf.Import
    }
    if childYangName == "default-originate" {
        return &neighborAf.DefaultOriginate
    }
    if childYangName == "soft-reconfiguration" {
        return &neighborAf.SoftReconfiguration
    }
    if childYangName == "advertise-vrf-imp-disable-v6" {
        return &neighborAf.AdvertiseVrfImpDisableV6
    }
    if childYangName == "advertise-v4" {
        return &neighborAf.AdvertiseV4
    }
    if childYangName == "advertise-local-v4" {
        return &neighborAf.AdvertiseLocalV4
    }
    if childYangName == "remove-private-as-entire-as-path" {
        return &neighborAf.RemovePrivateAsEntireAsPath
    }
    if childYangName == "advertise-vrf-imp-disable-v4" {
        return &neighborAf.AdvertiseVrfImpDisableV4
    }
    return nil
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aigp-cost-community"] = &neighborAf.AigpCostCommunity
    children["advertise-def-imp-disable-v6"] = &neighborAf.AdvertiseDefImpDisableV6
    children["advertise-disable"] = &neighborAf.AdvertiseDisable
    children["maximum-prefixes"] = &neighborAf.MaximumPrefixes
    children["remove-private-as-entire-as-path-inbound"] = &neighborAf.RemovePrivateAsEntireAsPathInbound
    children["advertise-def-imp-disable-v4"] = &neighborAf.AdvertiseDefImpDisableV4
    children["advertise-l2vpn-evpn"] = &neighborAf.AdvertiseL2VpnEvpn
    children["advertise-local-l2vpn-evpn"] = &neighborAf.AdvertiseLocalL2VpnEvpn
    children["neighbor-af-long-lived-graceful-restart-stale-time"] = &neighborAf.NeighborAfLongLivedGracefulRestartStaleTime
    children["advertise-v6"] = &neighborAf.AdvertiseV6
    children["advertise-local-v6"] = &neighborAf.AdvertiseLocalV6
    children["import"] = &neighborAf.Import
    children["default-originate"] = &neighborAf.DefaultOriginate
    children["soft-reconfiguration"] = &neighborAf.SoftReconfiguration
    children["advertise-vrf-imp-disable-v6"] = &neighborAf.AdvertiseVrfImpDisableV6
    children["advertise-v4"] = &neighborAf.AdvertiseV4
    children["advertise-local-v4"] = &neighborAf.AdvertiseLocalV4
    children["remove-private-as-entire-as-path"] = &neighborAf.RemovePrivateAsEntireAsPath
    children["advertise-vrf-imp-disable-v4"] = &neighborAf.AdvertiseVrfImpDisableV4
    return children
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = neighborAf.AfName
    leafs["neighbor-af-long-lived-graceful-restart-capable"] = neighborAf.NeighborAfLongLivedGracefulRestartCapable
    leafs["l2vpn-signalling"] = neighborAf.L2VpnSignalling
    leafs["send-ext-community-ebgp"] = neighborAf.SendExtCommunityEbgp
    leafs["accept-route-legacy-rt"] = neighborAf.AcceptRouteLegacyRt
    leafs["send-community-ebgp"] = neighborAf.SendCommunityEbgp
    leafs["send-multicast-attr"] = neighborAf.SendMulticastAttr
    leafs["next-hop-unchanged"] = neighborAf.NextHopUnchanged
    leafs["advertise-local-labeled-route"] = neighborAf.AdvertiseLocalLabeledRoute
    leafs["rpki-origin-as-validation-disable"] = neighborAf.RpkiOriginAsValidationDisable
    leafs["flowspec-validation"] = neighborAf.FlowspecValidation
    leafs["encapsulation-type"] = neighborAf.EncapsulationType
    leafs["rpki-bestpath-origin-as-allow-invalid"] = neighborAf.RpkiBestpathOriginAsAllowInvalid
    leafs["enforce-multiple-labels"] = neighborAf.EnforceMultipleLabels
    leafs["as-override"] = neighborAf.AsOverride
    leafs["multipath"] = neighborAf.Multipath
    leafs["send-community-ebgp-graceful-shutdown"] = neighborAf.SendCommunityEbgpGracefulShutdown
    leafs["activate"] = neighborAf.Activate
    leafs["prefix-orf-policy"] = neighborAf.PrefixOrfPolicy
    leafs["aigp"] = neighborAf.Aigp
    leafs["aigp-send-med"] = neighborAf.AigpSendMed
    leafs["allow-as-in"] = neighborAf.AllowAsIn
    leafs["advertise-orf"] = neighborAf.AdvertiseOrf
    leafs["route-reflector-client"] = neighborAf.RouteReflectorClient
    leafs["next-hop-self"] = neighborAf.NextHopSelf
    leafs["route-policy-in"] = neighborAf.RoutePolicyIn
    leafs["default-weight"] = neighborAf.DefaultWeight
    leafs["af-group"] = neighborAf.AfGroup
    leafs["next-hop-unchanged-multipath"] = neighborAf.NextHopUnchangedMultipath
    leafs["accept-own"] = neighborAf.AcceptOwn
    leafs["route-policy-out"] = neighborAf.RoutePolicyOut
    leafs["advertise-permanent-network"] = neighborAf.AdvertisePermanentNetwork
    return leafs
}

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetYangName() string { return "neighbor-af" }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) SetParent(parent types.Entity) { neighborAf.parent = parent }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetParent() types.Entity { return neighborAf.parent }

func (neighborAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf) GetParentYangName() string { return "neighbor-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    // This attribute is mandatory.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi. This attribute is mandatory.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetFilter() yfilter.YFilter { return aigpCostCommunity.YFilter }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) SetFilter(yf yfilter.YFilter) { aigpCostCommunity.YFilter = yf }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "cost-community-id" { return "CostCommunityId" }
    if yname == "transitive" { return "Transitive" }
    if yname == "cost-community-poi-type" { return "CostCommunityPoiType" }
    return ""
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetSegmentPath() string {
    return "aigp-cost-community"
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = aigpCostCommunity.Enable
    leafs["cost-community-id"] = aigpCostCommunity.CostCommunityId
    leafs["transitive"] = aigpCostCommunity.Transitive
    leafs["cost-community-poi-type"] = aigpCostCommunity.CostCommunityPoiType
    return leafs
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetYangName() string { return "aigp-cost-community" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) SetParent(parent types.Entity) { aigpCostCommunity.parent = parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetParent() types.Entity { return aigpCostCommunity.parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AigpCostCommunity) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV6.YFilter }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV6.YFilter = yf }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetSegmentPath() string {
    return "advertise-def-imp-disable-v6"
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV6.AfName
    leafs["adv-option"] = advertiseDefImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV6.RtType
    return leafs
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetYangName() string { return "advertise-def-imp-disable-v6" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) SetParent(parent types.Entity) { advertiseDefImpDisableV6.parent = parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetParent() types.Entity { return advertiseDefImpDisableV6.parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetFilter() yfilter.YFilter { return advertiseDisable.YFilter }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) SetFilter(yf yfilter.YFilter) { advertiseDisable.YFilter = yf }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetSegmentPath() string {
    return "advertise-disable"
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDisable.AfName
    leafs["reorg-option"] = advertiseDisable.ReorgOption
    leafs["rt-type"] = advertiseDisable.RtType
    return leafs
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetYangName() string { return "advertise-disable" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) SetParent(parent types.Entity) { advertiseDisable.parent = parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetParent() types.Entity { return advertiseDisable.parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDisable) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetFilter() yfilter.YFilter { return maximumPrefixes.YFilter }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) SetFilter(yf yfilter.YFilter) { maximumPrefixes.YFilter = yf }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetGoName(yname string) string {
    if yname == "prefix-limit" { return "PrefixLimit" }
    if yname == "warning-percentage" { return "WarningPercentage" }
    if yname == "warning-only" { return "WarningOnly" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "discard-extra-paths" { return "DiscardExtraPaths" }
    return ""
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetSegmentPath() string {
    return "maximum-prefixes"
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-limit"] = maximumPrefixes.PrefixLimit
    leafs["warning-percentage"] = maximumPrefixes.WarningPercentage
    leafs["warning-only"] = maximumPrefixes.WarningOnly
    leafs["restart-time"] = maximumPrefixes.RestartTime
    leafs["discard-extra-paths"] = maximumPrefixes.DiscardExtraPaths
    return leafs
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetYangName() string { return "maximum-prefixes" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) SetParent(parent types.Entity) { maximumPrefixes.parent = parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetParent() types.Entity { return maximumPrefixes.parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_MaximumPrefixes) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPathInbound.YFilter }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPathInbound.YFilter = yf }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetSegmentPath() string {
    return "remove-private-as-entire-as-path-inbound"
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPathInbound.Enable
    leafs["entire"] = removePrivateAsEntireAsPathInbound.Entire
    return leafs
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetYangName() string { return "remove-private-as-entire-as-path-inbound" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) SetParent(parent types.Entity) { removePrivateAsEntireAsPathInbound.parent = parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetParent() types.Entity { return removePrivateAsEntireAsPathInbound.parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPathInbound) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV4.YFilter }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV4.YFilter = yf }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetSegmentPath() string {
    return "advertise-def-imp-disable-v4"
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV4.AfName
    leafs["adv-option"] = advertiseDefImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV4.RtType
    return leafs
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetYangName() string { return "advertise-def-imp-disable-v4" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) SetParent(parent types.Entity) { advertiseDefImpDisableV4.parent = parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetParent() types.Entity { return advertiseDefImpDisableV4.parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseDefImpDisableV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseL2VpnEvpn.YFilter }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseL2VpnEvpn.YFilter = yf }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetSegmentPath() string {
    return "advertise-l2vpn-evpn"
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseL2VpnEvpn.RtType
    return leafs
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetYangName() string { return "advertise-l2vpn-evpn" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) SetParent(parent types.Entity) { advertiseL2VpnEvpn.parent = parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetParent() types.Entity { return advertiseL2VpnEvpn.parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseL2VpnEvpn) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseLocalL2VpnEvpn.YFilter }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseLocalL2VpnEvpn.YFilter = yf }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetSegmentPath() string {
    return "advertise-local-l2vpn-evpn"
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseLocalL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseLocalL2VpnEvpn.RtType
    return leafs
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetYangName() string { return "advertise-local-l2vpn-evpn" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) SetParent(parent types.Entity) { advertiseLocalL2VpnEvpn.parent = parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetParent() types.Entity { return advertiseLocalL2VpnEvpn.parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalL2VpnEvpn) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetFilter() yfilter.YFilter { return neighborAfLongLivedGracefulRestartStaleTime.YFilter }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetFilter(yf yfilter.YFilter) { neighborAfLongLivedGracefulRestartStaleTime.YFilter = yf }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetGoName(yname string) string {
    if yname == "stale-time-send" { return "StaleTimeSend" }
    if yname == "stale-time-accept" { return "StaleTimeAccept" }
    return ""
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetSegmentPath() string {
    return "neighbor-af-long-lived-graceful-restart-stale-time"
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stale-time-send"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend
    leafs["stale-time-accept"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept
    return leafs
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetYangName() string { return "neighbor-af-long-lived-graceful-restart-stale-time" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) SetParent(parent types.Entity) { neighborAfLongLivedGracefulRestartStaleTime.parent = parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParent() types.Entity { return neighborAfLongLivedGracefulRestartStaleTime.parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetFilter() yfilter.YFilter { return advertiseV6.YFilter }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) SetFilter(yf yfilter.YFilter) { advertiseV6.YFilter = yf }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetSegmentPath() string {
    return "advertise-v6"
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV6.AfName
    leafs["reorg-option"] = advertiseV6.ReorgOption
    leafs["rt-type"] = advertiseV6.RtType
    return leafs
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetYangName() string { return "advertise-v6" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) SetParent(parent types.Entity) { advertiseV6.parent = parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetParent() types.Entity { return advertiseV6.parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetFilter() yfilter.YFilter { return advertiseLocalV6.YFilter }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) SetFilter(yf yfilter.YFilter) { advertiseLocalV6.YFilter = yf }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetSegmentPath() string {
    return "advertise-local-v6"
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV6.AfName
    leafs["reorg-option"] = advertiseLocalV6.ReorgOption
    leafs["rt-type"] = advertiseLocalV6.RtType
    return leafs
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetYangName() string { return "advertise-local-v6" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) SetParent(parent types.Entity) { advertiseLocalV6.parent = parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetParent() types.Entity { return advertiseLocalV6.parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetGoName(yname string) string {
    if yname == "import-stitching" { return "ImportStitching" }
    if yname == "import-reoriginate" { return "ImportReoriginate" }
    if yname == "import-reoriginate-stitching" { return "ImportReoriginateStitching" }
    return ""
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetSegmentPath() string {
    return "import"
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["import-stitching"] = self.ImportStitching
    leafs["import-reoriginate"] = self.ImportReoriginate
    leafs["import-reoriginate-stitching"] = self.ImportReoriginateStitching
    return leafs
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetBundleName() string { return "cisco_ios_xr" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetYangName() string { return "import" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) SetParent(parent types.Entity) { self.parent = parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetParent() types.Entity { return self.parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_Import) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetFilter() yfilter.YFilter { return defaultOriginate.YFilter }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) SetFilter(yf yfilter.YFilter) { defaultOriginate.YFilter = yf }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetSegmentPath() string {
    return "default-originate"
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = defaultOriginate.Enable
    leafs["route-policy-name"] = defaultOriginate.RoutePolicyName
    return leafs
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetBundleName() string { return "cisco_ios_xr" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetYangName() string { return "default-originate" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) SetParent(parent types.Entity) { defaultOriginate.parent = parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetParent() types.Entity { return defaultOriginate.parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_DefaultOriginate) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetFilter() yfilter.YFilter { return softReconfiguration.YFilter }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) SetFilter(yf yfilter.YFilter) { softReconfiguration.YFilter = yf }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetGoName(yname string) string {
    if yname == "inbound-soft" { return "InboundSoft" }
    if yname == "soft-always" { return "SoftAlways" }
    return ""
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetSegmentPath() string {
    return "soft-reconfiguration"
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inbound-soft"] = softReconfiguration.InboundSoft
    leafs["soft-always"] = softReconfiguration.SoftAlways
    return leafs
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetYangName() string { return "soft-reconfiguration" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) SetParent(parent types.Entity) { softReconfiguration.parent = parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetParent() types.Entity { return softReconfiguration.parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_SoftReconfiguration) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV6.YFilter }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV6.YFilter = yf }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v6"
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV6.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV6.RtType
    return leafs
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetYangName() string { return "advertise-vrf-imp-disable-v6" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) SetParent(parent types.Entity) { advertiseVrfImpDisableV6.parent = parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetParent() types.Entity { return advertiseVrfImpDisableV6.parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV6) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetFilter() yfilter.YFilter { return advertiseV4.YFilter }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) SetFilter(yf yfilter.YFilter) { advertiseV4.YFilter = yf }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetSegmentPath() string {
    return "advertise-v4"
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV4.AfName
    leafs["reorg-option"] = advertiseV4.ReorgOption
    leafs["rt-type"] = advertiseV4.RtType
    return leafs
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetYangName() string { return "advertise-v4" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) SetParent(parent types.Entity) { advertiseV4.parent = parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetParent() types.Entity { return advertiseV4.parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetFilter() yfilter.YFilter { return advertiseLocalV4.YFilter }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) SetFilter(yf yfilter.YFilter) { advertiseLocalV4.YFilter = yf }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetSegmentPath() string {
    return "advertise-local-v4"
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV4.AfName
    leafs["reorg-option"] = advertiseLocalV4.ReorgOption
    leafs["rt-type"] = advertiseLocalV4.RtType
    return leafs
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetYangName() string { return "advertise-local-v4" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) SetParent(parent types.Entity) { advertiseLocalV4.parent = parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetParent() types.Entity { return advertiseLocalV4.parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseLocalV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPath.YFilter }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPath.YFilter = yf }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetSegmentPath() string {
    return "remove-private-as-entire-as-path"
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPath.Enable
    leafs["entire"] = removePrivateAsEntireAsPath.Entire
    return leafs
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetYangName() string { return "remove-private-as-entire-as-path" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) SetParent(parent types.Entity) { removePrivateAsEntireAsPath.parent = parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetParent() types.Entity { return removePrivateAsEntireAsPath.parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_RemovePrivateAsEntireAsPath) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV4.YFilter }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV4.YFilter = yf }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v4"
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV4.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV4.RtType
    return leafs
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetYangName() string { return "advertise-vrf-imp-disable-v4" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) SetParent(parent types.Entity) { advertiseVrfImpDisableV4.parent = parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetParent() types.Entity { return advertiseVrfImpDisableV4.parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborAfs_NeighborAf_AdvertiseVrfImpDisableV4) GetParentYangName() string { return "neighbor-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetFilter() yfilter.YFilter { return localAddress.YFilter }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) SetFilter(yf yfilter.YFilter) { localAddress.YFilter = yf }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetGoName(yname string) string {
    if yname == "local-address-disable" { return "LocalAddressDisable" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    return ""
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetSegmentPath() string {
    return "local-address"
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-address-disable"] = localAddress.LocalAddressDisable
    leafs["local-ip-address"] = localAddress.LocalIpAddress
    return leafs
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetYangName() string { return "local-address" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) SetParent(parent types.Entity) { localAddress.parent = parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetParent() types.Entity { return localAddress.parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAddress) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate.
    BmpActivate []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetFilter() yfilter.YFilter { return bmpActivates.YFilter }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) SetFilter(yf yfilter.YFilter) { bmpActivates.YFilter = yf }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetGoName(yname string) string {
    if yname == "bmp-activate" { return "BmpActivate" }
    return ""
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetSegmentPath() string {
    return "bmp-activates"
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-activate" {
        for _, c := range bmpActivates.BmpActivate {
            if bmpActivates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate{}
        bmpActivates.BmpActivate = append(bmpActivates.BmpActivate, child)
        return &bmpActivates.BmpActivate[len(bmpActivates.BmpActivate)-1]
    }
    return nil
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpActivates.BmpActivate {
        children[bmpActivates.BmpActivate[i].GetSegmentPath()] = &bmpActivates.BmpActivate[i]
    }
    return children
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetYangName() string { return "bmp-activates" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) SetParent(parent types.Entity) { bmpActivates.parent = parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetParent() types.Entity { return bmpActivates.parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetFilter() yfilter.YFilter { return bmpActivate.YFilter }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) SetFilter(yf yfilter.YFilter) { bmpActivate.YFilter = yf }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    return ""
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetSegmentPath() string {
    return "bmp-activate" + "[server-id='" + fmt.Sprintf("%v", bmpActivate.ServerId) + "']"
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpActivate.ServerId
    return leafs
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetYangName() string { return "bmp-activate" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) SetParent(parent types.Entity) { bmpActivate.parent = parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetParent() types.Entity { return bmpActivate.parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_BmpActivates_BmpActivate) GetParentYangName() string { return "bmp-activates" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetFilter() yfilter.YFilter { return ebgpMultihop.YFilter }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) SetFilter(yf yfilter.YFilter) { ebgpMultihop.YFilter = yf }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetGoName(yname string) string {
    if yname == "max-hop-count" { return "MaxHopCount" }
    if yname == "mpls-deactivation" { return "MplsDeactivation" }
    return ""
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetSegmentPath() string {
    return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-hop-count"] = ebgpMultihop.MaxHopCount
    leafs["mpls-deactivation"] = ebgpMultihop.MplsDeactivation
    return leafs
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetBundleName() string { return "cisco_ios_xr" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetYangName() string { return "ebgp-multihop" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) SetParent(parent types.Entity) { ebgpMultihop.parent = parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetParent() types.Entity { return ebgpMultihop.parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_EbgpMultihop) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetFilter() yfilter.YFilter { return remoteAs.YFilter }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) SetFilter(yf yfilter.YFilter) { remoteAs.YFilter = yf }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetSegmentPath() string {
    return "remote-as"
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = remoteAs.AsXx
    leafs["as-yy"] = remoteAs.AsYy
    return leafs
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetBundleName() string { return "cisco_ios_xr" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetYangName() string { return "remote-as" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) SetParent(parent types.Entity) { remoteAs.parent = parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetParent() types.Entity { return remoteAs.parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_RemoteAs) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetFilter() yfilter.YFilter { return localAs.YFilter }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) SetFilter(yf yfilter.YFilter) { localAs.YFilter = yf }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "no-prepend" { return "NoPrepend" }
    if yname == "disable" { return "Disable" }
    if yname == "replace-as" { return "ReplaceAs" }
    if yname == "dual-as" { return "DualAs" }
    return ""
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetSegmentPath() string {
    return "local-as"
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = localAs.AsXx
    leafs["as-yy"] = localAs.AsYy
    leafs["no-prepend"] = localAs.NoPrepend
    leafs["disable"] = localAs.Disable
    leafs["replace-as"] = localAs.ReplaceAs
    leafs["dual-as"] = localAs.DualAs
    return leafs
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetBundleName() string { return "cisco_ios_xr" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetYangName() string { return "local-as" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) SetParent(parent types.Entity) { localAs.parent = parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetParent() types.Entity { return localAs.parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_LocalAs) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetFilter() yfilter.YFilter { return password.YFilter }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) SetFilter(yf yfilter.YFilter) { password.YFilter = yf }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetGoName(yname string) string {
    if yname == "password-disable" { return "PasswordDisable" }
    if yname == "password" { return "Password" }
    return ""
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetSegmentPath() string {
    return "password"
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password-disable"] = password.PasswordDisable
    leafs["password"] = password.Password
    return leafs
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetBundleName() string { return "cisco_ios_xr" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetYangName() string { return "password" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) SetParent(parent types.Entity) { password.parent = parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetParent() types.Entity { return password.parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Password) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetFilter() yfilter.YFilter { return advertisementInterval.YFilter }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) SetFilter(yf yfilter.YFilter) { advertisementInterval.YFilter = yf }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetGoName(yname string) string {
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "minimum-interval-msecs" { return "MinimumIntervalMsecs" }
    return ""
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetSegmentPath() string {
    return "advertisement-interval"
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-interval"] = advertisementInterval.MinimumInterval
    leafs["minimum-interval-msecs"] = advertisementInterval.MinimumIntervalMsecs
    return leafs
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetBundleName() string { return "cisco_ios_xr" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetYangName() string { return "advertisement-interval" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) SetParent(parent types.Entity) { advertisementInterval.parent = parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetParent() types.Entity { return advertisementInterval.parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_AdvertisementInterval) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetFilter() yfilter.YFilter { return neighborClusterId.YFilter }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) SetFilter(yf yfilter.YFilter) { neighborClusterId.YFilter = yf }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetSegmentPath() string {
    return "neighbor-cluster-id"
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = neighborClusterId.ClusterIdNumber
    leafs["cluster-id-address"] = neighborClusterId.ClusterIdAddress
    return leafs
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetYangName() string { return "neighbor-cluster-id" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) SetParent(parent types.Entity) { neighborClusterId.parent = parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetParent() types.Entity { return neighborClusterId.parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_NeighborClusterId) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetFilter() yfilter.YFilter { return tcpmss.YFilter }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) SetFilter(yf yfilter.YFilter) { tcpmss.YFilter = yf }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetGoName(yname string) string {
    if yname == "tcpmss-disable" { return "TcpmssDisable" }
    if yname == "mss" { return "Mss" }
    return ""
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetSegmentPath() string {
    return "tcpmss"
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcpmss-disable"] = tcpmss.TcpmssDisable
    leafs["mss"] = tcpmss.Mss
    return leafs
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetBundleName() string { return "cisco_ios_xr" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetYangName() string { return "tcpmss" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) SetParent(parent types.Entity) { tcpmss.parent = parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetParent() types.Entity { return tcpmss.parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tcpmss) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetYangName() string { return "tos" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetParent() types.Entity { return tos.parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Tos) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetFilter() yfilter.YFilter { return updateInFiltering.YFilter }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) SetFilter(yf yfilter.YFilter) { updateInFiltering.YFilter = yf }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "update-in-filtering-attribute-filter-group" { return "UpdateInFilteringAttributeFilterGroup" }
    if yname == "update-in-filtering-syslog-disable" { return "UpdateInFilteringSyslogDisable" }
    if yname == "update-in-filtering-message-buffers" { return "UpdateInFilteringMessageBuffers" }
    return ""
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetSegmentPath() string {
    return "update-in-filtering"
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update-in-filtering-message-buffers" {
        return &updateInFiltering.UpdateInFilteringMessageBuffers
    }
    return nil
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["update-in-filtering-message-buffers"] = &updateInFiltering.UpdateInFilteringMessageBuffers
    return children
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = updateInFiltering.Enable
    leafs["update-in-filtering-attribute-filter-group"] = updateInFiltering.UpdateInFilteringAttributeFilterGroup
    leafs["update-in-filtering-syslog-disable"] = updateInFiltering.UpdateInFilteringSyslogDisable
    return leafs
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetYangName() string { return "update-in-filtering" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) SetParent(parent types.Entity) { updateInFiltering.parent = parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetParent() types.Entity { return updateInFiltering.parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetFilter() yfilter.YFilter { return updateInFilteringMessageBuffers.YFilter }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetFilter(yf yfilter.YFilter) { updateInFilteringMessageBuffers.YFilter = yf }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetGoName(yname string) string {
    if yname == "number-of-buffers" { return "NumberOfBuffers" }
    if yname == "non-circular-buffer" { return "NonCircularBuffer" }
    return ""
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetSegmentPath() string {
    return "update-in-filtering-message-buffers"
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-buffers"] = updateInFilteringMessageBuffers.NumberOfBuffers
    leafs["non-circular-buffer"] = updateInFilteringMessageBuffers.NonCircularBuffer
    return leafs
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetYangName() string { return "update-in-filtering-message-buffers" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetParent(parent types.Entity) { updateInFilteringMessageBuffers.parent = parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParent() types.Entity { return updateInFilteringMessageBuffers.parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParentYangName() string { return "update-in-filtering" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetFilter() yfilter.YFilter { return msgLogOut.YFilter }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) SetFilter(yf yfilter.YFilter) { msgLogOut.YFilter = yf }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetSegmentPath() string {
    return "msg-log-out"
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogOut.MsgBufCount
    leafs["msg-log-disable"] = msgLogOut.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogOut.MsgLogInheritDisable
    return leafs
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetYangName() string { return "msg-log-out" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) SetParent(parent types.Entity) { msgLogOut.parent = parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetParent() types.Entity { return msgLogOut.parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogOut) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetFilter() yfilter.YFilter { return receiveBufferSize.YFilter }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) SetFilter(yf yfilter.YFilter) { receiveBufferSize.YFilter = yf }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetSegmentPath() string {
    return "receive-buffer-size"
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveBufferSize.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveBufferSize.BgpReceiveSize
    return leafs
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetYangName() string { return "receive-buffer-size" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) SetParent(parent types.Entity) { receiveBufferSize.parent = parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetParent() types.Entity { return receiveBufferSize.parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_ReceiveBufferSize) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetFilter() yfilter.YFilter { return msgLogIn.YFilter }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) SetFilter(yf yfilter.YFilter) { msgLogIn.YFilter = yf }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetSegmentPath() string {
    return "msg-log-in"
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogIn.MsgBufCount
    leafs["msg-log-disable"] = msgLogIn.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogIn.MsgLogInheritDisable
    return leafs
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetYangName() string { return "msg-log-in" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) SetParent(parent types.Entity) { msgLogIn.parent = parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetParent() types.Entity { return msgLogIn.parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_MsgLogIn) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetFilter() yfilter.YFilter { return sendBufferSize.YFilter }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) SetFilter(yf yfilter.YFilter) { sendBufferSize.YFilter = yf }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetSegmentPath() string {
    return "send-buffer-size"
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendBufferSize.SocketSendSize
    leafs["bgp-send-size"] = sendBufferSize.BgpSendSize
    return leafs
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetYangName() string { return "send-buffer-size" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) SetParent(parent types.Entity) { sendBufferSize.parent = parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetParent() types.Entity { return sendBufferSize.parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_SendBufferSize) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetGoName(yname string) string {
    if yname == "keepalive-interval" { return "KeepaliveInterval" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive-interval"] = timers.KeepaliveInterval
    leafs["hold-time"] = timers.HoldTime
    leafs["min-accept-hold-time"] = timers.MinAcceptHoldTime
    return leafs
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetYangName() string { return "timers" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Timers) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetFilter() yfilter.YFilter { return keychain.YFilter }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) SetFilter(yf yfilter.YFilter) { keychain.YFilter = yf }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetGoName(yname string) string {
    if yname == "keychain-disable" { return "KeychainDisable" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetSegmentPath() string {
    return "keychain"
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keychain-disable"] = keychain.KeychainDisable
    leafs["keychain-name"] = keychain.KeychainName
    return leafs
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetBundleName() string { return "cisco_ios_xr" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetYangName() string { return "keychain" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) SetParent(parent types.Entity) { keychain.parent = parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetParent() types.Entity { return keychain.parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_Keychain) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetFilter() yfilter.YFilter { return gracefulMaintenance.YFilter }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) SetFilter(yf yfilter.YFilter) { gracefulMaintenance.YFilter = yf }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "graceful-maintenance-activate" { return "GracefulMaintenanceActivate" }
    if yname == "graceful-maintenance-local-preference" { return "GracefulMaintenanceLocalPreference" }
    if yname == "graceful-maintenance-as-prepends" { return "GracefulMaintenanceAsPrepends" }
    return ""
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetSegmentPath() string {
    return "graceful-maintenance"
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "graceful-maintenance-local-preference" {
        return &gracefulMaintenance.GracefulMaintenanceLocalPreference
    }
    if childYangName == "graceful-maintenance-as-prepends" {
        return &gracefulMaintenance.GracefulMaintenanceAsPrepends
    }
    return nil
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["graceful-maintenance-local-preference"] = &gracefulMaintenance.GracefulMaintenanceLocalPreference
    children["graceful-maintenance-as-prepends"] = &gracefulMaintenance.GracefulMaintenanceAsPrepends
    return children
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = gracefulMaintenance.Enable
    leafs["graceful-maintenance-activate"] = gracefulMaintenance.GracefulMaintenanceActivate
    return leafs
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetYangName() string { return "graceful-maintenance" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) SetParent(parent types.Entity) { gracefulMaintenance.parent = parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetParent() types.Entity { return gracefulMaintenance.parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance) GetParentYangName() string { return "neighbor-prefix-length" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetFilter() yfilter.YFilter { return gracefulMaintenanceLocalPreference.YFilter }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceLocalPreference.YFilter = yf }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetGoName(yname string) string {
    if yname == "gshut-loc-pref-disable" { return "GshutLocPrefDisable" }
    if yname == "local-preference" { return "LocalPreference" }
    return ""
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetSegmentPath() string {
    return "graceful-maintenance-local-preference"
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-loc-pref-disable"] = gracefulMaintenanceLocalPreference.GshutLocPrefDisable
    leafs["local-preference"] = gracefulMaintenanceLocalPreference.LocalPreference
    return leafs
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetYangName() string { return "graceful-maintenance-local-preference" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetParent(parent types.Entity) { gracefulMaintenanceLocalPreference.parent = parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParent() types.Entity { return gracefulMaintenanceLocalPreference.parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetFilter() yfilter.YFilter { return gracefulMaintenanceAsPrepends.YFilter }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceAsPrepends.YFilter = yf }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetGoName(yname string) string {
    if yname == "gshut-prepends-disable" { return "GshutPrependsDisable" }
    if yname == "as-prepends" { return "AsPrepends" }
    return ""
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetSegmentPath() string {
    return "graceful-maintenance-as-prepends"
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-prepends-disable"] = gracefulMaintenanceAsPrepends.GshutPrependsDisable
    leafs["as-prepends"] = gracefulMaintenanceAsPrepends.AsPrepends
    return leafs
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetYangName() string { return "graceful-maintenance-as-prepends" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetParent(parent types.Entity) { gracefulMaintenanceAsPrepends.parent = parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParent() types.Entity { return gracefulMaintenanceAsPrepends.parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_Neighbors_NeighborPrefixLength_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups
// Neighbor-group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A particular BGP neighbor group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup.
    NeighborGroup []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetFilter() yfilter.YFilter { return neighborGroups.YFilter }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) SetFilter(yf yfilter.YFilter) { neighborGroups.YFilter = yf }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetGoName(yname string) string {
    if yname == "neighbor-group" { return "NeighborGroup" }
    return ""
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetSegmentPath() string {
    return "neighbor-groups"
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-group" {
        for _, c := range neighborGroups.NeighborGroup {
            if neighborGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup{}
        neighborGroups.NeighborGroup = append(neighborGroups.NeighborGroup, child)
        return &neighborGroups.NeighborGroup[len(neighborGroups.NeighborGroup)-1]
    }
    return nil
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborGroups.NeighborGroup {
        children[neighborGroups.NeighborGroup[i].GetSegmentPath()] = &neighborGroups.NeighborGroup[i]
    }
    return children
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetBundleName() string { return "cisco_ios_xr" }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetYangName() string { return "neighbor-groups" }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) SetParent(parent types.Entity) { neighborGroups.parent = parent }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetParent() types.Entity { return neighborGroups.parent }

func (neighborGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups) GetParentYangName() string { return "bgp-entity" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup
// A particular BGP neighbor group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP neighbor group name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    NeighborGroupName interface{}

    // Inherit configuration from a neighbor-group. The type is string.
    NeighborGroupAddMember interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart support for neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is bool.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability.  FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // Create this group. Deletion of this object causes deletion of all the
    // objects under NeighborGroup/SessionGroup associated with this object. The
    // type is interface{}.
    Create interface{}

    // BGP neighbor-group AF configuration table.
    NeighborGroupAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetFilter() yfilter.YFilter { return neighborGroup.YFilter }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) SetFilter(yf yfilter.YFilter) { neighborGroup.YFilter = yf }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetGoName(yname string) string {
    if yname == "neighbor-group-name" { return "NeighborGroupName" }
    if yname == "neighbor-group-add-member" { return "NeighborGroupAddMember" }
    if yname == "internal-vpn-client-ibgp-ce" { return "InternalVpnClientIbgpCe" }
    if yname == "session-group-add-member" { return "SessionGroupAddMember" }
    if yname == "egress-peer-engineering" { return "EgressPeerEngineering" }
    if yname == "neighbor-graceful-restart-stalepath-time" { return "NeighborGracefulRestartStalepathTime" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "description" { return "Description" }
    if yname == "ebgp-recv-dmz" { return "EbgpRecvDmz" }
    if yname == "neighbor-graceful-restart" { return "NeighborGracefulRestart" }
    if yname == "enforce-first-as" { return "EnforceFirstAs" }
    if yname == "idle-watch-time" { return "IdleWatchTime" }
    if yname == "session-open-mode" { return "SessionOpenMode" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "ebgp-send-dmz-enable-modes" { return "EbgpSendDmzEnableModes" }
    if yname == "suppress-all-capabilities" { return "SuppressAllCapabilities" }
    if yname == "max-peers" { return "MaxPeers" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "additional-paths-send-capability" { return "AdditionalPathsSendCapability" }
    if yname == "propagate-dmz-link-bandwidth" { return "PropagateDmzLinkBandwidth" }
    if yname == "bfd-enable-modes" { return "BfdEnableModes" }
    if yname == "ttl-security" { return "TtlSecurity" }
    if yname == "neighbor-graceful-restart-time" { return "NeighborGracefulRestartTime" }
    if yname == "bfd-multiplier" { return "BfdMultiplier" }
    if yname == "bfd-minimum-interval" { return "BfdMinimumInterval" }
    if yname == "remote-as-list" { return "RemoteAsList" }
    if yname == "additional-paths-receive-capability" { return "AdditionalPathsReceiveCapability" }
    if yname == "ignore-connected-check-ebgp" { return "IgnoreConnectedCheckEbgp" }
    if yname == "suppress-four-byte-as-capability" { return "SuppressFourByteAsCapability" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "create" { return "Create" }
    if yname == "neighbor-group-afs" { return "NeighborGroupAfs" }
    if yname == "local-address" { return "LocalAddress" }
    if yname == "bmp-activates" { return "BmpActivates" }
    if yname == "ebgp-multihop" { return "EbgpMultihop" }
    if yname == "remote-as" { return "RemoteAs" }
    if yname == "local-as" { return "LocalAs" }
    if yname == "password" { return "Password" }
    if yname == "advertisement-interval" { return "AdvertisementInterval" }
    if yname == "neighbor-cluster-id" { return "NeighborClusterId" }
    if yname == "tcpmss" { return "Tcpmss" }
    if yname == "tos" { return "Tos" }
    if yname == "update-in-filtering" { return "UpdateInFiltering" }
    if yname == "msg-log-out" { return "MsgLogOut" }
    if yname == "receive-buffer-size" { return "ReceiveBufferSize" }
    if yname == "msg-log-in" { return "MsgLogIn" }
    if yname == "send-buffer-size" { return "SendBufferSize" }
    if yname == "timers" { return "Timers" }
    if yname == "keychain" { return "Keychain" }
    if yname == "graceful-maintenance" { return "GracefulMaintenance" }
    return ""
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetSegmentPath() string {
    return "neighbor-group" + "[neighbor-group-name='" + fmt.Sprintf("%v", neighborGroup.NeighborGroupName) + "']"
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-group-afs" {
        return &neighborGroup.NeighborGroupAfs
    }
    if childYangName == "local-address" {
        return &neighborGroup.LocalAddress
    }
    if childYangName == "bmp-activates" {
        return &neighborGroup.BmpActivates
    }
    if childYangName == "ebgp-multihop" {
        return &neighborGroup.EbgpMultihop
    }
    if childYangName == "remote-as" {
        return &neighborGroup.RemoteAs
    }
    if childYangName == "local-as" {
        return &neighborGroup.LocalAs
    }
    if childYangName == "password" {
        return &neighborGroup.Password
    }
    if childYangName == "advertisement-interval" {
        return &neighborGroup.AdvertisementInterval
    }
    if childYangName == "neighbor-cluster-id" {
        return &neighborGroup.NeighborClusterId
    }
    if childYangName == "tcpmss" {
        return &neighborGroup.Tcpmss
    }
    if childYangName == "tos" {
        return &neighborGroup.Tos
    }
    if childYangName == "update-in-filtering" {
        return &neighborGroup.UpdateInFiltering
    }
    if childYangName == "msg-log-out" {
        return &neighborGroup.MsgLogOut
    }
    if childYangName == "receive-buffer-size" {
        return &neighborGroup.ReceiveBufferSize
    }
    if childYangName == "msg-log-in" {
        return &neighborGroup.MsgLogIn
    }
    if childYangName == "send-buffer-size" {
        return &neighborGroup.SendBufferSize
    }
    if childYangName == "timers" {
        return &neighborGroup.Timers
    }
    if childYangName == "keychain" {
        return &neighborGroup.Keychain
    }
    if childYangName == "graceful-maintenance" {
        return &neighborGroup.GracefulMaintenance
    }
    return nil
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["neighbor-group-afs"] = &neighborGroup.NeighborGroupAfs
    children["local-address"] = &neighborGroup.LocalAddress
    children["bmp-activates"] = &neighborGroup.BmpActivates
    children["ebgp-multihop"] = &neighborGroup.EbgpMultihop
    children["remote-as"] = &neighborGroup.RemoteAs
    children["local-as"] = &neighborGroup.LocalAs
    children["password"] = &neighborGroup.Password
    children["advertisement-interval"] = &neighborGroup.AdvertisementInterval
    children["neighbor-cluster-id"] = &neighborGroup.NeighborClusterId
    children["tcpmss"] = &neighborGroup.Tcpmss
    children["tos"] = &neighborGroup.Tos
    children["update-in-filtering"] = &neighborGroup.UpdateInFiltering
    children["msg-log-out"] = &neighborGroup.MsgLogOut
    children["receive-buffer-size"] = &neighborGroup.ReceiveBufferSize
    children["msg-log-in"] = &neighborGroup.MsgLogIn
    children["send-buffer-size"] = &neighborGroup.SendBufferSize
    children["timers"] = &neighborGroup.Timers
    children["keychain"] = &neighborGroup.Keychain
    children["graceful-maintenance"] = &neighborGroup.GracefulMaintenance
    return children
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["neighbor-group-name"] = neighborGroup.NeighborGroupName
    leafs["neighbor-group-add-member"] = neighborGroup.NeighborGroupAddMember
    leafs["internal-vpn-client-ibgp-ce"] = neighborGroup.InternalVpnClientIbgpCe
    leafs["session-group-add-member"] = neighborGroup.SessionGroupAddMember
    leafs["egress-peer-engineering"] = neighborGroup.EgressPeerEngineering
    leafs["neighbor-graceful-restart-stalepath-time"] = neighborGroup.NeighborGracefulRestartStalepathTime
    leafs["shutdown"] = neighborGroup.Shutdown
    leafs["description"] = neighborGroup.Description
    leafs["ebgp-recv-dmz"] = neighborGroup.EbgpRecvDmz
    leafs["neighbor-graceful-restart"] = neighborGroup.NeighborGracefulRestart
    leafs["enforce-first-as"] = neighborGroup.EnforceFirstAs
    leafs["idle-watch-time"] = neighborGroup.IdleWatchTime
    leafs["session-open-mode"] = neighborGroup.SessionOpenMode
    leafs["rpki-origin-as-validation-disable"] = neighborGroup.RpkiOriginAsValidationDisable
    leafs["ebgp-send-dmz-enable-modes"] = neighborGroup.EbgpSendDmzEnableModes
    leafs["suppress-all-capabilities"] = neighborGroup.SuppressAllCapabilities
    leafs["max-peers"] = neighborGroup.MaxPeers
    leafs["rpki-bestpath-origin-as-allow-invalid"] = neighborGroup.RpkiBestpathOriginAsAllowInvalid
    leafs["additional-paths-send-capability"] = neighborGroup.AdditionalPathsSendCapability
    leafs["propagate-dmz-link-bandwidth"] = neighborGroup.PropagateDmzLinkBandwidth
    leafs["bfd-enable-modes"] = neighborGroup.BfdEnableModes
    leafs["ttl-security"] = neighborGroup.TtlSecurity
    leafs["neighbor-graceful-restart-time"] = neighborGroup.NeighborGracefulRestartTime
    leafs["bfd-multiplier"] = neighborGroup.BfdMultiplier
    leafs["bfd-minimum-interval"] = neighborGroup.BfdMinimumInterval
    leafs["remote-as-list"] = neighborGroup.RemoteAsList
    leafs["additional-paths-receive-capability"] = neighborGroup.AdditionalPathsReceiveCapability
    leafs["ignore-connected-check-ebgp"] = neighborGroup.IgnoreConnectedCheckEbgp
    leafs["suppress-four-byte-as-capability"] = neighborGroup.SuppressFourByteAsCapability
    leafs["update-source-interface"] = neighborGroup.UpdateSourceInterface
    leafs["create"] = neighborGroup.Create
    return leafs
}

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetBundleName() string { return "cisco_ios_xr" }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetYangName() string { return "neighbor-group" }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) SetParent(parent types.Entity) { neighborGroup.parent = parent }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetParent() types.Entity { return neighborGroup.parent }

func (neighborGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup) GetParentYangName() string { return "neighbor-groups" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs
// BGP neighbor-group AF configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family type of neighbor group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf.
    NeighborGroupAf []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetFilter() yfilter.YFilter { return neighborGroupAfs.YFilter }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) SetFilter(yf yfilter.YFilter) { neighborGroupAfs.YFilter = yf }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetGoName(yname string) string {
    if yname == "neighbor-group-af" { return "NeighborGroupAf" }
    return ""
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetSegmentPath() string {
    return "neighbor-group-afs"
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "neighbor-group-af" {
        for _, c := range neighborGroupAfs.NeighborGroupAf {
            if neighborGroupAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf{}
        neighborGroupAfs.NeighborGroupAf = append(neighborGroupAfs.NeighborGroupAf, child)
        return &neighborGroupAfs.NeighborGroupAf[len(neighborGroupAfs.NeighborGroupAf)-1]
    }
    return nil
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range neighborGroupAfs.NeighborGroupAf {
        children[neighborGroupAfs.NeighborGroupAf[i].GetSegmentPath()] = &neighborGroupAfs.NeighborGroupAf[i]
    }
    return children
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetBundleName() string { return "cisco_ios_xr" }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetYangName() string { return "neighbor-group-afs" }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) SetParent(parent types.Entity) { neighborGroupAfs.parent = parent }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetParent() types.Entity { return neighborGroupAfs.parent }

func (neighborGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf
// Address family type of neighbor group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP neighbor group address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2VpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group.  FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT.  FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Activate an address family for this neighbor. Deletion of this object
    // causes deletion of all the objects under
    // NeighborAF/VRFNeighborAF/NeighborGroupAF associated with this object. The
    // type is interface{}.
    Activate interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client.  FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetFilter() yfilter.YFilter { return neighborGroupAf.YFilter }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) SetFilter(yf yfilter.YFilter) { neighborGroupAf.YFilter = yf }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "neighbor-af-long-lived-graceful-restart-capable" { return "NeighborAfLongLivedGracefulRestartCapable" }
    if yname == "l2vpn-signalling" { return "L2VpnSignalling" }
    if yname == "send-ext-community-ebgp" { return "SendExtCommunityEbgp" }
    if yname == "accept-route-legacy-rt" { return "AcceptRouteLegacyRt" }
    if yname == "send-community-ebgp" { return "SendCommunityEbgp" }
    if yname == "send-multicast-attr" { return "SendMulticastAttr" }
    if yname == "next-hop-unchanged" { return "NextHopUnchanged" }
    if yname == "advertise-local-labeled-route" { return "AdvertiseLocalLabeledRoute" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "flowspec-validation" { return "FlowspecValidation" }
    if yname == "encapsulation-type" { return "EncapsulationType" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "enforce-multiple-labels" { return "EnforceMultipleLabels" }
    if yname == "as-override" { return "AsOverride" }
    if yname == "multipath" { return "Multipath" }
    if yname == "send-community-ebgp-graceful-shutdown" { return "SendCommunityEbgpGracefulShutdown" }
    if yname == "activate" { return "Activate" }
    if yname == "prefix-orf-policy" { return "PrefixOrfPolicy" }
    if yname == "aigp" { return "Aigp" }
    if yname == "aigp-send-med" { return "AigpSendMed" }
    if yname == "allow-as-in" { return "AllowAsIn" }
    if yname == "advertise-orf" { return "AdvertiseOrf" }
    if yname == "route-reflector-client" { return "RouteReflectorClient" }
    if yname == "next-hop-self" { return "NextHopSelf" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-weight" { return "DefaultWeight" }
    if yname == "af-group" { return "AfGroup" }
    if yname == "next-hop-unchanged-multipath" { return "NextHopUnchangedMultipath" }
    if yname == "accept-own" { return "AcceptOwn" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "advertise-permanent-network" { return "AdvertisePermanentNetwork" }
    if yname == "aigp-cost-community" { return "AigpCostCommunity" }
    if yname == "advertise-def-imp-disable-v6" { return "AdvertiseDefImpDisableV6" }
    if yname == "advertise-disable" { return "AdvertiseDisable" }
    if yname == "maximum-prefixes" { return "MaximumPrefixes" }
    if yname == "remove-private-as-entire-as-path-inbound" { return "RemovePrivateAsEntireAsPathInbound" }
    if yname == "advertise-def-imp-disable-v4" { return "AdvertiseDefImpDisableV4" }
    if yname == "advertise-l2vpn-evpn" { return "AdvertiseL2VpnEvpn" }
    if yname == "advertise-local-l2vpn-evpn" { return "AdvertiseLocalL2VpnEvpn" }
    if yname == "neighbor-af-long-lived-graceful-restart-stale-time" { return "NeighborAfLongLivedGracefulRestartStaleTime" }
    if yname == "site-of-origin" { return "SiteOfOrigin" }
    if yname == "advertise-v6" { return "AdvertiseV6" }
    if yname == "advertise-local-v6" { return "AdvertiseLocalV6" }
    if yname == "import" { return "Import" }
    if yname == "default-originate" { return "DefaultOriginate" }
    if yname == "soft-reconfiguration" { return "SoftReconfiguration" }
    if yname == "advertise-vrf-imp-disable-v6" { return "AdvertiseVrfImpDisableV6" }
    if yname == "advertise-v4" { return "AdvertiseV4" }
    if yname == "advertise-local-v4" { return "AdvertiseLocalV4" }
    if yname == "remove-private-as-entire-as-path" { return "RemovePrivateAsEntireAsPath" }
    if yname == "advertise-vrf-imp-disable-v4" { return "AdvertiseVrfImpDisableV4" }
    return ""
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetSegmentPath() string {
    return "neighbor-group-af" + "[af-name='" + fmt.Sprintf("%v", neighborGroupAf.AfName) + "']"
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aigp-cost-community" {
        return &neighborGroupAf.AigpCostCommunity
    }
    if childYangName == "advertise-def-imp-disable-v6" {
        return &neighborGroupAf.AdvertiseDefImpDisableV6
    }
    if childYangName == "advertise-disable" {
        return &neighborGroupAf.AdvertiseDisable
    }
    if childYangName == "maximum-prefixes" {
        return &neighborGroupAf.MaximumPrefixes
    }
    if childYangName == "remove-private-as-entire-as-path-inbound" {
        return &neighborGroupAf.RemovePrivateAsEntireAsPathInbound
    }
    if childYangName == "advertise-def-imp-disable-v4" {
        return &neighborGroupAf.AdvertiseDefImpDisableV4
    }
    if childYangName == "advertise-l2vpn-evpn" {
        return &neighborGroupAf.AdvertiseL2VpnEvpn
    }
    if childYangName == "advertise-local-l2vpn-evpn" {
        return &neighborGroupAf.AdvertiseLocalL2VpnEvpn
    }
    if childYangName == "neighbor-af-long-lived-graceful-restart-stale-time" {
        return &neighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime
    }
    if childYangName == "site-of-origin" {
        return &neighborGroupAf.SiteOfOrigin
    }
    if childYangName == "advertise-v6" {
        return &neighborGroupAf.AdvertiseV6
    }
    if childYangName == "advertise-local-v6" {
        return &neighborGroupAf.AdvertiseLocalV6
    }
    if childYangName == "import" {
        return &neighborGroupAf.Import
    }
    if childYangName == "default-originate" {
        return &neighborGroupAf.DefaultOriginate
    }
    if childYangName == "soft-reconfiguration" {
        return &neighborGroupAf.SoftReconfiguration
    }
    if childYangName == "advertise-vrf-imp-disable-v6" {
        return &neighborGroupAf.AdvertiseVrfImpDisableV6
    }
    if childYangName == "advertise-v4" {
        return &neighborGroupAf.AdvertiseV4
    }
    if childYangName == "advertise-local-v4" {
        return &neighborGroupAf.AdvertiseLocalV4
    }
    if childYangName == "remove-private-as-entire-as-path" {
        return &neighborGroupAf.RemovePrivateAsEntireAsPath
    }
    if childYangName == "advertise-vrf-imp-disable-v4" {
        return &neighborGroupAf.AdvertiseVrfImpDisableV4
    }
    return nil
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aigp-cost-community"] = &neighborGroupAf.AigpCostCommunity
    children["advertise-def-imp-disable-v6"] = &neighborGroupAf.AdvertiseDefImpDisableV6
    children["advertise-disable"] = &neighborGroupAf.AdvertiseDisable
    children["maximum-prefixes"] = &neighborGroupAf.MaximumPrefixes
    children["remove-private-as-entire-as-path-inbound"] = &neighborGroupAf.RemovePrivateAsEntireAsPathInbound
    children["advertise-def-imp-disable-v4"] = &neighborGroupAf.AdvertiseDefImpDisableV4
    children["advertise-l2vpn-evpn"] = &neighborGroupAf.AdvertiseL2VpnEvpn
    children["advertise-local-l2vpn-evpn"] = &neighborGroupAf.AdvertiseLocalL2VpnEvpn
    children["neighbor-af-long-lived-graceful-restart-stale-time"] = &neighborGroupAf.NeighborAfLongLivedGracefulRestartStaleTime
    children["site-of-origin"] = &neighborGroupAf.SiteOfOrigin
    children["advertise-v6"] = &neighborGroupAf.AdvertiseV6
    children["advertise-local-v6"] = &neighborGroupAf.AdvertiseLocalV6
    children["import"] = &neighborGroupAf.Import
    children["default-originate"] = &neighborGroupAf.DefaultOriginate
    children["soft-reconfiguration"] = &neighborGroupAf.SoftReconfiguration
    children["advertise-vrf-imp-disable-v6"] = &neighborGroupAf.AdvertiseVrfImpDisableV6
    children["advertise-v4"] = &neighborGroupAf.AdvertiseV4
    children["advertise-local-v4"] = &neighborGroupAf.AdvertiseLocalV4
    children["remove-private-as-entire-as-path"] = &neighborGroupAf.RemovePrivateAsEntireAsPath
    children["advertise-vrf-imp-disable-v4"] = &neighborGroupAf.AdvertiseVrfImpDisableV4
    return children
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = neighborGroupAf.AfName
    leafs["neighbor-af-long-lived-graceful-restart-capable"] = neighborGroupAf.NeighborAfLongLivedGracefulRestartCapable
    leafs["l2vpn-signalling"] = neighborGroupAf.L2VpnSignalling
    leafs["send-ext-community-ebgp"] = neighborGroupAf.SendExtCommunityEbgp
    leafs["accept-route-legacy-rt"] = neighborGroupAf.AcceptRouteLegacyRt
    leafs["send-community-ebgp"] = neighborGroupAf.SendCommunityEbgp
    leafs["send-multicast-attr"] = neighborGroupAf.SendMulticastAttr
    leafs["next-hop-unchanged"] = neighborGroupAf.NextHopUnchanged
    leafs["advertise-local-labeled-route"] = neighborGroupAf.AdvertiseLocalLabeledRoute
    leafs["rpki-origin-as-validation-disable"] = neighborGroupAf.RpkiOriginAsValidationDisable
    leafs["flowspec-validation"] = neighborGroupAf.FlowspecValidation
    leafs["encapsulation-type"] = neighborGroupAf.EncapsulationType
    leafs["rpki-bestpath-origin-as-allow-invalid"] = neighborGroupAf.RpkiBestpathOriginAsAllowInvalid
    leafs["enforce-multiple-labels"] = neighborGroupAf.EnforceMultipleLabels
    leafs["as-override"] = neighborGroupAf.AsOverride
    leafs["multipath"] = neighborGroupAf.Multipath
    leafs["send-community-ebgp-graceful-shutdown"] = neighborGroupAf.SendCommunityEbgpGracefulShutdown
    leafs["activate"] = neighborGroupAf.Activate
    leafs["prefix-orf-policy"] = neighborGroupAf.PrefixOrfPolicy
    leafs["aigp"] = neighborGroupAf.Aigp
    leafs["aigp-send-med"] = neighborGroupAf.AigpSendMed
    leafs["allow-as-in"] = neighborGroupAf.AllowAsIn
    leafs["advertise-orf"] = neighborGroupAf.AdvertiseOrf
    leafs["route-reflector-client"] = neighborGroupAf.RouteReflectorClient
    leafs["next-hop-self"] = neighborGroupAf.NextHopSelf
    leafs["route-policy-in"] = neighborGroupAf.RoutePolicyIn
    leafs["default-weight"] = neighborGroupAf.DefaultWeight
    leafs["af-group"] = neighborGroupAf.AfGroup
    leafs["next-hop-unchanged-multipath"] = neighborGroupAf.NextHopUnchangedMultipath
    leafs["accept-own"] = neighborGroupAf.AcceptOwn
    leafs["route-policy-out"] = neighborGroupAf.RoutePolicyOut
    leafs["advertise-permanent-network"] = neighborGroupAf.AdvertisePermanentNetwork
    return leafs
}

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetBundleName() string { return "cisco_ios_xr" }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetYangName() string { return "neighbor-group-af" }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) SetParent(parent types.Entity) { neighborGroupAf.parent = parent }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetParent() types.Entity { return neighborGroupAf.parent }

func (neighborGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf) GetParentYangName() string { return "neighbor-group-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    // This attribute is mandatory.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi. This attribute is mandatory.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetFilter() yfilter.YFilter { return aigpCostCommunity.YFilter }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) SetFilter(yf yfilter.YFilter) { aigpCostCommunity.YFilter = yf }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "cost-community-id" { return "CostCommunityId" }
    if yname == "transitive" { return "Transitive" }
    if yname == "cost-community-poi-type" { return "CostCommunityPoiType" }
    return ""
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetSegmentPath() string {
    return "aigp-cost-community"
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = aigpCostCommunity.Enable
    leafs["cost-community-id"] = aigpCostCommunity.CostCommunityId
    leafs["transitive"] = aigpCostCommunity.Transitive
    leafs["cost-community-poi-type"] = aigpCostCommunity.CostCommunityPoiType
    return leafs
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetYangName() string { return "aigp-cost-community" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) SetParent(parent types.Entity) { aigpCostCommunity.parent = parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetParent() types.Entity { return aigpCostCommunity.parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AigpCostCommunity) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV6.YFilter }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV6.YFilter = yf }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetSegmentPath() string {
    return "advertise-def-imp-disable-v6"
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV6.AfName
    leafs["adv-option"] = advertiseDefImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV6.RtType
    return leafs
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetYangName() string { return "advertise-def-imp-disable-v6" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) SetParent(parent types.Entity) { advertiseDefImpDisableV6.parent = parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetParent() types.Entity { return advertiseDefImpDisableV6.parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV6) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetFilter() yfilter.YFilter { return advertiseDisable.YFilter }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) SetFilter(yf yfilter.YFilter) { advertiseDisable.YFilter = yf }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetSegmentPath() string {
    return "advertise-disable"
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDisable.AfName
    leafs["reorg-option"] = advertiseDisable.ReorgOption
    leafs["rt-type"] = advertiseDisable.RtType
    return leafs
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetYangName() string { return "advertise-disable" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) SetParent(parent types.Entity) { advertiseDisable.parent = parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetParent() types.Entity { return advertiseDisable.parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDisable) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetFilter() yfilter.YFilter { return maximumPrefixes.YFilter }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) SetFilter(yf yfilter.YFilter) { maximumPrefixes.YFilter = yf }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetGoName(yname string) string {
    if yname == "prefix-limit" { return "PrefixLimit" }
    if yname == "warning-percentage" { return "WarningPercentage" }
    if yname == "warning-only" { return "WarningOnly" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "discard-extra-paths" { return "DiscardExtraPaths" }
    return ""
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetSegmentPath() string {
    return "maximum-prefixes"
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-limit"] = maximumPrefixes.PrefixLimit
    leafs["warning-percentage"] = maximumPrefixes.WarningPercentage
    leafs["warning-only"] = maximumPrefixes.WarningOnly
    leafs["restart-time"] = maximumPrefixes.RestartTime
    leafs["discard-extra-paths"] = maximumPrefixes.DiscardExtraPaths
    return leafs
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetYangName() string { return "maximum-prefixes" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) SetParent(parent types.Entity) { maximumPrefixes.parent = parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetParent() types.Entity { return maximumPrefixes.parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_MaximumPrefixes) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPathInbound.YFilter }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPathInbound.YFilter = yf }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetSegmentPath() string {
    return "remove-private-as-entire-as-path-inbound"
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPathInbound.Enable
    leafs["entire"] = removePrivateAsEntireAsPathInbound.Entire
    return leafs
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetYangName() string { return "remove-private-as-entire-as-path-inbound" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) SetParent(parent types.Entity) { removePrivateAsEntireAsPathInbound.parent = parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetParent() types.Entity { return removePrivateAsEntireAsPathInbound.parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPathInbound) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV4.YFilter }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV4.YFilter = yf }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetSegmentPath() string {
    return "advertise-def-imp-disable-v4"
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV4.AfName
    leafs["adv-option"] = advertiseDefImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV4.RtType
    return leafs
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetYangName() string { return "advertise-def-imp-disable-v4" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) SetParent(parent types.Entity) { advertiseDefImpDisableV4.parent = parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetParent() types.Entity { return advertiseDefImpDisableV4.parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseDefImpDisableV4) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseL2VpnEvpn.YFilter }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseL2VpnEvpn.YFilter = yf }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetSegmentPath() string {
    return "advertise-l2vpn-evpn"
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseL2VpnEvpn.RtType
    return leafs
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetYangName() string { return "advertise-l2vpn-evpn" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) SetParent(parent types.Entity) { advertiseL2VpnEvpn.parent = parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetParent() types.Entity { return advertiseL2VpnEvpn.parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseL2VpnEvpn) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseLocalL2VpnEvpn.YFilter }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseLocalL2VpnEvpn.YFilter = yf }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetSegmentPath() string {
    return "advertise-local-l2vpn-evpn"
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseLocalL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseLocalL2VpnEvpn.RtType
    return leafs
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetYangName() string { return "advertise-local-l2vpn-evpn" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) SetParent(parent types.Entity) { advertiseLocalL2VpnEvpn.parent = parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetParent() types.Entity { return advertiseLocalL2VpnEvpn.parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalL2VpnEvpn) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetFilter() yfilter.YFilter { return neighborAfLongLivedGracefulRestartStaleTime.YFilter }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) SetFilter(yf yfilter.YFilter) { neighborAfLongLivedGracefulRestartStaleTime.YFilter = yf }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetGoName(yname string) string {
    if yname == "stale-time-send" { return "StaleTimeSend" }
    if yname == "stale-time-accept" { return "StaleTimeAccept" }
    return ""
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetSegmentPath() string {
    return "neighbor-af-long-lived-graceful-restart-stale-time"
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stale-time-send"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend
    leafs["stale-time-accept"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept
    return leafs
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetYangName() string { return "neighbor-af-long-lived-graceful-restart-stale-time" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) SetParent(parent types.Entity) { neighborAfLongLivedGracefulRestartStaleTime.parent = parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParent() types.Entity { return neighborAfLongLivedGracefulRestartStaleTime.parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetFilter() yfilter.YFilter { return siteOfOrigin.YFilter }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) SetFilter(yf yfilter.YFilter) { siteOfOrigin.YFilter = yf }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "address-index" { return "AddressIndex" }
    return ""
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetSegmentPath() string {
    return "site-of-origin"
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = siteOfOrigin.Type
    leafs["as-xx"] = siteOfOrigin.AsXx
    leafs["as"] = siteOfOrigin.As
    leafs["as-index"] = siteOfOrigin.AsIndex
    leafs["address"] = siteOfOrigin.Address
    leafs["address-index"] = siteOfOrigin.AddressIndex
    return leafs
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetYangName() string { return "site-of-origin" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) SetParent(parent types.Entity) { siteOfOrigin.parent = parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetParent() types.Entity { return siteOfOrigin.parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SiteOfOrigin) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetFilter() yfilter.YFilter { return advertiseV6.YFilter }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) SetFilter(yf yfilter.YFilter) { advertiseV6.YFilter = yf }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetSegmentPath() string {
    return "advertise-v6"
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV6.AfName
    leafs["reorg-option"] = advertiseV6.ReorgOption
    leafs["rt-type"] = advertiseV6.RtType
    return leafs
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetYangName() string { return "advertise-v6" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) SetParent(parent types.Entity) { advertiseV6.parent = parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetParent() types.Entity { return advertiseV6.parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV6) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetFilter() yfilter.YFilter { return advertiseLocalV6.YFilter }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) SetFilter(yf yfilter.YFilter) { advertiseLocalV6.YFilter = yf }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetSegmentPath() string {
    return "advertise-local-v6"
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV6.AfName
    leafs["reorg-option"] = advertiseLocalV6.ReorgOption
    leafs["rt-type"] = advertiseLocalV6.RtType
    return leafs
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetYangName() string { return "advertise-local-v6" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) SetParent(parent types.Entity) { advertiseLocalV6.parent = parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetParent() types.Entity { return advertiseLocalV6.parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV6) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetGoName(yname string) string {
    if yname == "import-stitching" { return "ImportStitching" }
    if yname == "import-reoriginate" { return "ImportReoriginate" }
    if yname == "import-reoriginate-stitching" { return "ImportReoriginateStitching" }
    return ""
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetSegmentPath() string {
    return "import"
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["import-stitching"] = self.ImportStitching
    leafs["import-reoriginate"] = self.ImportReoriginate
    leafs["import-reoriginate-stitching"] = self.ImportReoriginateStitching
    return leafs
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetBundleName() string { return "cisco_ios_xr" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetYangName() string { return "import" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) SetParent(parent types.Entity) { self.parent = parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetParent() types.Entity { return self.parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_Import) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetFilter() yfilter.YFilter { return defaultOriginate.YFilter }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) SetFilter(yf yfilter.YFilter) { defaultOriginate.YFilter = yf }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetSegmentPath() string {
    return "default-originate"
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = defaultOriginate.Enable
    leafs["route-policy-name"] = defaultOriginate.RoutePolicyName
    return leafs
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetBundleName() string { return "cisco_ios_xr" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetYangName() string { return "default-originate" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) SetParent(parent types.Entity) { defaultOriginate.parent = parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetParent() types.Entity { return defaultOriginate.parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_DefaultOriginate) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetFilter() yfilter.YFilter { return softReconfiguration.YFilter }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) SetFilter(yf yfilter.YFilter) { softReconfiguration.YFilter = yf }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetGoName(yname string) string {
    if yname == "inbound-soft" { return "InboundSoft" }
    if yname == "soft-always" { return "SoftAlways" }
    return ""
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetSegmentPath() string {
    return "soft-reconfiguration"
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inbound-soft"] = softReconfiguration.InboundSoft
    leafs["soft-always"] = softReconfiguration.SoftAlways
    return leafs
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetYangName() string { return "soft-reconfiguration" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) SetParent(parent types.Entity) { softReconfiguration.parent = parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetParent() types.Entity { return softReconfiguration.parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_SoftReconfiguration) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV6.YFilter }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV6.YFilter = yf }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v6"
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV6.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV6.RtType
    return leafs
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetYangName() string { return "advertise-vrf-imp-disable-v6" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) SetParent(parent types.Entity) { advertiseVrfImpDisableV6.parent = parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetParent() types.Entity { return advertiseVrfImpDisableV6.parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV6) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetFilter() yfilter.YFilter { return advertiseV4.YFilter }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) SetFilter(yf yfilter.YFilter) { advertiseV4.YFilter = yf }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetSegmentPath() string {
    return "advertise-v4"
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV4.AfName
    leafs["reorg-option"] = advertiseV4.ReorgOption
    leafs["rt-type"] = advertiseV4.RtType
    return leafs
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetYangName() string { return "advertise-v4" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) SetParent(parent types.Entity) { advertiseV4.parent = parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetParent() types.Entity { return advertiseV4.parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseV4) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetFilter() yfilter.YFilter { return advertiseLocalV4.YFilter }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) SetFilter(yf yfilter.YFilter) { advertiseLocalV4.YFilter = yf }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetSegmentPath() string {
    return "advertise-local-v4"
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV4.AfName
    leafs["reorg-option"] = advertiseLocalV4.ReorgOption
    leafs["rt-type"] = advertiseLocalV4.RtType
    return leafs
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetYangName() string { return "advertise-local-v4" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) SetParent(parent types.Entity) { advertiseLocalV4.parent = parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetParent() types.Entity { return advertiseLocalV4.parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseLocalV4) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPath.YFilter }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPath.YFilter = yf }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetSegmentPath() string {
    return "remove-private-as-entire-as-path"
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPath.Enable
    leafs["entire"] = removePrivateAsEntireAsPath.Entire
    return leafs
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetYangName() string { return "remove-private-as-entire-as-path" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) SetParent(parent types.Entity) { removePrivateAsEntireAsPath.parent = parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetParent() types.Entity { return removePrivateAsEntireAsPath.parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_RemovePrivateAsEntireAsPath) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV4.YFilter }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV4.YFilter = yf }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v4"
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV4.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV4.RtType
    return leafs
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetYangName() string { return "advertise-vrf-imp-disable-v4" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) SetParent(parent types.Entity) { advertiseVrfImpDisableV4.parent = parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetParent() types.Entity { return advertiseVrfImpDisableV4.parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborGroupAfs_NeighborGroupAf_AdvertiseVrfImpDisableV4) GetParentYangName() string { return "neighbor-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetFilter() yfilter.YFilter { return localAddress.YFilter }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) SetFilter(yf yfilter.YFilter) { localAddress.YFilter = yf }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetGoName(yname string) string {
    if yname == "local-address-disable" { return "LocalAddressDisable" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    return ""
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetSegmentPath() string {
    return "local-address"
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-address-disable"] = localAddress.LocalAddressDisable
    leafs["local-ip-address"] = localAddress.LocalIpAddress
    return leafs
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetYangName() string { return "local-address" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) SetParent(parent types.Entity) { localAddress.parent = parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetParent() types.Entity { return localAddress.parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAddress) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate.
    BmpActivate []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetFilter() yfilter.YFilter { return bmpActivates.YFilter }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) SetFilter(yf yfilter.YFilter) { bmpActivates.YFilter = yf }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetGoName(yname string) string {
    if yname == "bmp-activate" { return "BmpActivate" }
    return ""
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetSegmentPath() string {
    return "bmp-activates"
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-activate" {
        for _, c := range bmpActivates.BmpActivate {
            if bmpActivates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate{}
        bmpActivates.BmpActivate = append(bmpActivates.BmpActivate, child)
        return &bmpActivates.BmpActivate[len(bmpActivates.BmpActivate)-1]
    }
    return nil
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpActivates.BmpActivate {
        children[bmpActivates.BmpActivate[i].GetSegmentPath()] = &bmpActivates.BmpActivate[i]
    }
    return children
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetYangName() string { return "bmp-activates" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) SetParent(parent types.Entity) { bmpActivates.parent = parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetParent() types.Entity { return bmpActivates.parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetFilter() yfilter.YFilter { return bmpActivate.YFilter }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) SetFilter(yf yfilter.YFilter) { bmpActivate.YFilter = yf }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    return ""
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetSegmentPath() string {
    return "bmp-activate" + "[server-id='" + fmt.Sprintf("%v", bmpActivate.ServerId) + "']"
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpActivate.ServerId
    return leafs
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetYangName() string { return "bmp-activate" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) SetParent(parent types.Entity) { bmpActivate.parent = parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetParent() types.Entity { return bmpActivate.parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_BmpActivates_BmpActivate) GetParentYangName() string { return "bmp-activates" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetFilter() yfilter.YFilter { return ebgpMultihop.YFilter }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) SetFilter(yf yfilter.YFilter) { ebgpMultihop.YFilter = yf }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetGoName(yname string) string {
    if yname == "max-hop-count" { return "MaxHopCount" }
    if yname == "mpls-deactivation" { return "MplsDeactivation" }
    return ""
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetSegmentPath() string {
    return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-hop-count"] = ebgpMultihop.MaxHopCount
    leafs["mpls-deactivation"] = ebgpMultihop.MplsDeactivation
    return leafs
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetBundleName() string { return "cisco_ios_xr" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetYangName() string { return "ebgp-multihop" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) SetParent(parent types.Entity) { ebgpMultihop.parent = parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetParent() types.Entity { return ebgpMultihop.parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_EbgpMultihop) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetFilter() yfilter.YFilter { return remoteAs.YFilter }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) SetFilter(yf yfilter.YFilter) { remoteAs.YFilter = yf }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetSegmentPath() string {
    return "remote-as"
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = remoteAs.AsXx
    leafs["as-yy"] = remoteAs.AsYy
    return leafs
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetBundleName() string { return "cisco_ios_xr" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetYangName() string { return "remote-as" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) SetParent(parent types.Entity) { remoteAs.parent = parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetParent() types.Entity { return remoteAs.parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_RemoteAs) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetFilter() yfilter.YFilter { return localAs.YFilter }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) SetFilter(yf yfilter.YFilter) { localAs.YFilter = yf }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "no-prepend" { return "NoPrepend" }
    if yname == "disable" { return "Disable" }
    if yname == "replace-as" { return "ReplaceAs" }
    if yname == "dual-as" { return "DualAs" }
    return ""
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetSegmentPath() string {
    return "local-as"
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = localAs.AsXx
    leafs["as-yy"] = localAs.AsYy
    leafs["no-prepend"] = localAs.NoPrepend
    leafs["disable"] = localAs.Disable
    leafs["replace-as"] = localAs.ReplaceAs
    leafs["dual-as"] = localAs.DualAs
    return leafs
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetBundleName() string { return "cisco_ios_xr" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetYangName() string { return "local-as" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) SetParent(parent types.Entity) { localAs.parent = parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetParent() types.Entity { return localAs.parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_LocalAs) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetFilter() yfilter.YFilter { return password.YFilter }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) SetFilter(yf yfilter.YFilter) { password.YFilter = yf }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetGoName(yname string) string {
    if yname == "password-disable" { return "PasswordDisable" }
    if yname == "password" { return "Password" }
    return ""
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetSegmentPath() string {
    return "password"
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password-disable"] = password.PasswordDisable
    leafs["password"] = password.Password
    return leafs
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetBundleName() string { return "cisco_ios_xr" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetYangName() string { return "password" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) SetParent(parent types.Entity) { password.parent = parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetParent() types.Entity { return password.parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Password) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetFilter() yfilter.YFilter { return advertisementInterval.YFilter }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) SetFilter(yf yfilter.YFilter) { advertisementInterval.YFilter = yf }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetGoName(yname string) string {
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "minimum-interval-msecs" { return "MinimumIntervalMsecs" }
    return ""
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetSegmentPath() string {
    return "advertisement-interval"
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-interval"] = advertisementInterval.MinimumInterval
    leafs["minimum-interval-msecs"] = advertisementInterval.MinimumIntervalMsecs
    return leafs
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetBundleName() string { return "cisco_ios_xr" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetYangName() string { return "advertisement-interval" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) SetParent(parent types.Entity) { advertisementInterval.parent = parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetParent() types.Entity { return advertisementInterval.parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_AdvertisementInterval) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetFilter() yfilter.YFilter { return neighborClusterId.YFilter }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) SetFilter(yf yfilter.YFilter) { neighborClusterId.YFilter = yf }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetSegmentPath() string {
    return "neighbor-cluster-id"
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = neighborClusterId.ClusterIdNumber
    leafs["cluster-id-address"] = neighborClusterId.ClusterIdAddress
    return leafs
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetYangName() string { return "neighbor-cluster-id" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) SetParent(parent types.Entity) { neighborClusterId.parent = parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetParent() types.Entity { return neighborClusterId.parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_NeighborClusterId) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetFilter() yfilter.YFilter { return tcpmss.YFilter }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) SetFilter(yf yfilter.YFilter) { tcpmss.YFilter = yf }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetGoName(yname string) string {
    if yname == "tcpmss-disable" { return "TcpmssDisable" }
    if yname == "mss" { return "Mss" }
    return ""
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetSegmentPath() string {
    return "tcpmss"
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcpmss-disable"] = tcpmss.TcpmssDisable
    leafs["mss"] = tcpmss.Mss
    return leafs
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetBundleName() string { return "cisco_ios_xr" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetYangName() string { return "tcpmss" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) SetParent(parent types.Entity) { tcpmss.parent = parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetParent() types.Entity { return tcpmss.parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tcpmss) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetYangName() string { return "tos" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetParent() types.Entity { return tos.parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Tos) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetFilter() yfilter.YFilter { return updateInFiltering.YFilter }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) SetFilter(yf yfilter.YFilter) { updateInFiltering.YFilter = yf }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "update-in-filtering-attribute-filter-group" { return "UpdateInFilteringAttributeFilterGroup" }
    if yname == "update-in-filtering-syslog-disable" { return "UpdateInFilteringSyslogDisable" }
    if yname == "update-in-filtering-message-buffers" { return "UpdateInFilteringMessageBuffers" }
    return ""
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetSegmentPath() string {
    return "update-in-filtering"
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update-in-filtering-message-buffers" {
        return &updateInFiltering.UpdateInFilteringMessageBuffers
    }
    return nil
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["update-in-filtering-message-buffers"] = &updateInFiltering.UpdateInFilteringMessageBuffers
    return children
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = updateInFiltering.Enable
    leafs["update-in-filtering-attribute-filter-group"] = updateInFiltering.UpdateInFilteringAttributeFilterGroup
    leafs["update-in-filtering-syslog-disable"] = updateInFiltering.UpdateInFilteringSyslogDisable
    return leafs
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetYangName() string { return "update-in-filtering" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) SetParent(parent types.Entity) { updateInFiltering.parent = parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetParent() types.Entity { return updateInFiltering.parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetFilter() yfilter.YFilter { return updateInFilteringMessageBuffers.YFilter }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetFilter(yf yfilter.YFilter) { updateInFilteringMessageBuffers.YFilter = yf }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetGoName(yname string) string {
    if yname == "number-of-buffers" { return "NumberOfBuffers" }
    if yname == "non-circular-buffer" { return "NonCircularBuffer" }
    return ""
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetSegmentPath() string {
    return "update-in-filtering-message-buffers"
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-buffers"] = updateInFilteringMessageBuffers.NumberOfBuffers
    leafs["non-circular-buffer"] = updateInFilteringMessageBuffers.NonCircularBuffer
    return leafs
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetYangName() string { return "update-in-filtering-message-buffers" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetParent(parent types.Entity) { updateInFilteringMessageBuffers.parent = parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParent() types.Entity { return updateInFilteringMessageBuffers.parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParentYangName() string { return "update-in-filtering" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetFilter() yfilter.YFilter { return msgLogOut.YFilter }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) SetFilter(yf yfilter.YFilter) { msgLogOut.YFilter = yf }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetSegmentPath() string {
    return "msg-log-out"
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogOut.MsgBufCount
    leafs["msg-log-disable"] = msgLogOut.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogOut.MsgLogInheritDisable
    return leafs
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetYangName() string { return "msg-log-out" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) SetParent(parent types.Entity) { msgLogOut.parent = parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetParent() types.Entity { return msgLogOut.parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogOut) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetFilter() yfilter.YFilter { return receiveBufferSize.YFilter }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) SetFilter(yf yfilter.YFilter) { receiveBufferSize.YFilter = yf }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetSegmentPath() string {
    return "receive-buffer-size"
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveBufferSize.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveBufferSize.BgpReceiveSize
    return leafs
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetYangName() string { return "receive-buffer-size" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) SetParent(parent types.Entity) { receiveBufferSize.parent = parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetParent() types.Entity { return receiveBufferSize.parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_ReceiveBufferSize) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetFilter() yfilter.YFilter { return msgLogIn.YFilter }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) SetFilter(yf yfilter.YFilter) { msgLogIn.YFilter = yf }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetSegmentPath() string {
    return "msg-log-in"
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogIn.MsgBufCount
    leafs["msg-log-disable"] = msgLogIn.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogIn.MsgLogInheritDisable
    return leafs
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetYangName() string { return "msg-log-in" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) SetParent(parent types.Entity) { msgLogIn.parent = parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetParent() types.Entity { return msgLogIn.parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_MsgLogIn) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetFilter() yfilter.YFilter { return sendBufferSize.YFilter }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) SetFilter(yf yfilter.YFilter) { sendBufferSize.YFilter = yf }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetSegmentPath() string {
    return "send-buffer-size"
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendBufferSize.SocketSendSize
    leafs["bgp-send-size"] = sendBufferSize.BgpSendSize
    return leafs
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetYangName() string { return "send-buffer-size" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) SetParent(parent types.Entity) { sendBufferSize.parent = parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetParent() types.Entity { return sendBufferSize.parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_SendBufferSize) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetGoName(yname string) string {
    if yname == "keepalive-interval" { return "KeepaliveInterval" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive-interval"] = timers.KeepaliveInterval
    leafs["hold-time"] = timers.HoldTime
    leafs["min-accept-hold-time"] = timers.MinAcceptHoldTime
    return leafs
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetYangName() string { return "timers" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Timers) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetFilter() yfilter.YFilter { return keychain.YFilter }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) SetFilter(yf yfilter.YFilter) { keychain.YFilter = yf }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetGoName(yname string) string {
    if yname == "keychain-disable" { return "KeychainDisable" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetSegmentPath() string {
    return "keychain"
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keychain-disable"] = keychain.KeychainDisable
    leafs["keychain-name"] = keychain.KeychainName
    return leafs
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetBundleName() string { return "cisco_ios_xr" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetYangName() string { return "keychain" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) SetParent(parent types.Entity) { keychain.parent = parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetParent() types.Entity { return keychain.parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_Keychain) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetFilter() yfilter.YFilter { return gracefulMaintenance.YFilter }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) SetFilter(yf yfilter.YFilter) { gracefulMaintenance.YFilter = yf }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "graceful-maintenance-activate" { return "GracefulMaintenanceActivate" }
    if yname == "graceful-maintenance-local-preference" { return "GracefulMaintenanceLocalPreference" }
    if yname == "graceful-maintenance-as-prepends" { return "GracefulMaintenanceAsPrepends" }
    return ""
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetSegmentPath() string {
    return "graceful-maintenance"
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "graceful-maintenance-local-preference" {
        return &gracefulMaintenance.GracefulMaintenanceLocalPreference
    }
    if childYangName == "graceful-maintenance-as-prepends" {
        return &gracefulMaintenance.GracefulMaintenanceAsPrepends
    }
    return nil
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["graceful-maintenance-local-preference"] = &gracefulMaintenance.GracefulMaintenanceLocalPreference
    children["graceful-maintenance-as-prepends"] = &gracefulMaintenance.GracefulMaintenanceAsPrepends
    return children
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = gracefulMaintenance.Enable
    leafs["graceful-maintenance-activate"] = gracefulMaintenance.GracefulMaintenanceActivate
    return leafs
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetYangName() string { return "graceful-maintenance" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) SetParent(parent types.Entity) { gracefulMaintenance.parent = parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetParent() types.Entity { return gracefulMaintenance.parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance) GetParentYangName() string { return "neighbor-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetFilter() yfilter.YFilter { return gracefulMaintenanceLocalPreference.YFilter }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceLocalPreference.YFilter = yf }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetGoName(yname string) string {
    if yname == "gshut-loc-pref-disable" { return "GshutLocPrefDisable" }
    if yname == "local-preference" { return "LocalPreference" }
    return ""
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetSegmentPath() string {
    return "graceful-maintenance-local-preference"
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-loc-pref-disable"] = gracefulMaintenanceLocalPreference.GshutLocPrefDisable
    leafs["local-preference"] = gracefulMaintenanceLocalPreference.LocalPreference
    return leafs
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetYangName() string { return "graceful-maintenance-local-preference" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetParent(parent types.Entity) { gracefulMaintenanceLocalPreference.parent = parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParent() types.Entity { return gracefulMaintenanceLocalPreference.parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetFilter() yfilter.YFilter { return gracefulMaintenanceAsPrepends.YFilter }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceAsPrepends.YFilter = yf }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetGoName(yname string) string {
    if yname == "gshut-prepends-disable" { return "GshutPrependsDisable" }
    if yname == "as-prepends" { return "AsPrepends" }
    return ""
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetSegmentPath() string {
    return "graceful-maintenance-as-prepends"
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-prepends-disable"] = gracefulMaintenanceAsPrepends.GshutPrependsDisable
    leafs["as-prepends"] = gracefulMaintenanceAsPrepends.AsPrepends
    return leafs
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetYangName() string { return "graceful-maintenance-as-prepends" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetParent(parent types.Entity) { gracefulMaintenanceAsPrepends.parent = parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParent() types.Entity { return gracefulMaintenanceAsPrepends.parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_NeighborGroups_NeighborGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups
// AF-group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A particular BGP AF group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup.
    AfGroup []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetFilter() yfilter.YFilter { return afGroups.YFilter }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) SetFilter(yf yfilter.YFilter) { afGroups.YFilter = yf }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetGoName(yname string) string {
    if yname == "af-group" { return "AfGroup" }
    return ""
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetSegmentPath() string {
    return "af-groups"
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af-group" {
        for _, c := range afGroups.AfGroup {
            if afGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup{}
        afGroups.AfGroup = append(afGroups.AfGroup, child)
        return &afGroups.AfGroup[len(afGroups.AfGroup)-1]
    }
    return nil
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range afGroups.AfGroup {
        children[afGroups.AfGroup[i].GetSegmentPath()] = &afGroups.AfGroup[i]
    }
    return children
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetBundleName() string { return "cisco_ios_xr" }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetYangName() string { return "af-groups" }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) SetParent(parent types.Entity) { afGroups.parent = parent }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetParent() types.Entity { return afGroups.parent }

func (afGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups) GetParentYangName() string { return "bgp-entity" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup
// A particular BGP AF group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP AF group name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    AfGroupName interface{}

    // AF group configuration table.
    AfGroupAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetFilter() yfilter.YFilter { return afGroup.YFilter }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) SetFilter(yf yfilter.YFilter) { afGroup.YFilter = yf }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetGoName(yname string) string {
    if yname == "af-group-name" { return "AfGroupName" }
    if yname == "af-group-afs" { return "AfGroupAfs" }
    return ""
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetSegmentPath() string {
    return "af-group" + "[af-group-name='" + fmt.Sprintf("%v", afGroup.AfGroupName) + "']"
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af-group-afs" {
        return &afGroup.AfGroupAfs
    }
    return nil
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["af-group-afs"] = &afGroup.AfGroupAfs
    return children
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-group-name"] = afGroup.AfGroupName
    return leafs
}

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetBundleName() string { return "cisco_ios_xr" }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetYangName() string { return "af-group" }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) SetParent(parent types.Entity) { afGroup.parent = parent }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetParent() types.Entity { return afGroup.parent }

func (afGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup) GetParentYangName() string { return "af-groups" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs
// AF group configuration table
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family type of an AF group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf.
    AfGroupAf []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetFilter() yfilter.YFilter { return afGroupAfs.YFilter }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) SetFilter(yf yfilter.YFilter) { afGroupAfs.YFilter = yf }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetGoName(yname string) string {
    if yname == "af-group-af" { return "AfGroupAf" }
    return ""
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetSegmentPath() string {
    return "af-group-afs"
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "af-group-af" {
        for _, c := range afGroupAfs.AfGroupAf {
            if afGroupAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf{}
        afGroupAfs.AfGroupAf = append(afGroupAfs.AfGroupAf, child)
        return &afGroupAfs.AfGroupAf[len(afGroupAfs.AfGroupAf)-1]
    }
    return nil
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range afGroupAfs.AfGroupAf {
        children[afGroupAfs.AfGroupAf[i].GetSegmentPath()] = &afGroupAfs.AfGroupAf[i]
    }
    return children
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetBundleName() string { return "cisco_ios_xr" }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetYangName() string { return "af-group-afs" }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) SetParent(parent types.Entity) { afGroupAfs.parent = parent }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetParent() types.Entity { return afGroupAfs.parent }

func (afGroupAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs) GetParentYangName() string { return "af-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf
// Address family type of an AF group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP AF group address family. The type is
    // BgpAddressFamily.
    AfName interface{}

    // Inherit configuration for this address-family from an AF-group. The type is
    // string.
    AfGroup interface{}

    // Create this address family group. Deletion of this object causes deletion
    // of all the objects under AFGroup associated with this object. The type is
    // interface{}.
    Create interface{}

    // TRUE to treat neighbor as Long-lived Graceful-restart capable. FALSE to
    // rely on capability negotiation. The type is bool. The default value is
    // false.
    NeighborAfLongLivedGracefulRestartCapable interface{}

    // Disable signalling type on the peer. The type is BgpSignal.
    L2VpnSignalling interface{}

    // TRUE to send extended communities to the external
    // neighbor/neighbor-group/af-group.  FALSE not to send and to prevent
    // inheritance from a parent. The type is bool.
    SendExtCommunityEbgp interface{}

    // TRUE to configure as a accept-route-legacy-RT.  FALSE to prevent
    // accept-route-legacy-RT from being inherited. The type is bool.
    AcceptRouteLegacyRt interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgp interface{}

    // Config send multicast attribute for this neighbor. The type is
    // BgpSendMcastAttrCfg.
    SendMulticastAttr interface{}

    // TRUE to disable overwriting of next hop before advertising to eBGP peers.
    // FALSE to prevent next-hop-unchanged from being inherited. The type is bool.
    NextHopUnchanged interface{}

    // Enable/disable advertisement of routes with local-label. The type is
    // BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRoute interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Config Flowspec validation for this neighbor. The type is
    // BgpFlowspecValidationCfg.
    FlowspecValidation interface{}

    // Encapsulation type for this neighbor. The type is BgpAfEncapsulation.
    EncapsulationType interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // TRUE to enforce multiple labels support. The type is bool.
    EnforceMultipleLabels interface{}

    // TRUE to override matching AS-number while sending update. FALSE to prevent
    // as-override from being inherited from the parent. The type is bool. The
    // default value is true.
    AsOverride interface{}

    // Allow paths from this neighbor to be eligible for selective multipath. The
    // type is interface{}.
    Multipath interface{}

    // TRUE to send communities to the external neighbor/neighbor-group/af-group. 
    // FALSE not to send and to prevent inheritance from a parent. The type is
    // bool.
    SendCommunityEbgpGracefulShutdown interface{}

    // Prefix ORF policy name for incoming updates. The type is string.
    PrefixOrfPolicy interface{}

    // Enable Accumulated IGP Metric for this neighbor. The type is BgpAigpCfg.
    Aigp interface{}

    // Enable/Disable sending AIGP in MED . The type is BgpAigpCfg.
    AigpSendMed interface{}

    // Allow as-path with my AS present in it. The type is interface{} with range:
    // 1..10. The default value is 3.
    AllowAsIn interface{}

    // Advertise ORF capability to the peer. The type is BgpOrf. The default value
    // is none.
    AdvertiseOrf interface{}

    // TRUE to configure as a route-reflector-client.  FALSE to prevent
    // route-reflector-client from being inherited. The type is bool.
    RouteReflectorClient interface{}

    // Disable the next hop calculation and  insert your own address in the
    // nexthop field of advertised routes you learned from the neighbor. The type
    // is bool.
    NextHopSelf interface{}

    // Route policy name to apply to inbound routes. The type is string.
    RoutePolicyIn interface{}

    // Set default weight for routes from this neighbor/neighbor-group/af-group.
    // The type is interface{} with range: 0..65535.
    DefaultWeight interface{}

    // TRUE to disable overwriting of next hop for multipaths. FALSE to prevent
    // next-hop-unchanged for multipaths. The type is bool.
    NextHopUnchangedMultipath interface{}

    // Handle self-originated routes with Accept-Own community. Valid for
    // following neighbor address-families: VPNv4Unicast, VPNv6Unicast. The type
    // is bool.
    AcceptOwn interface{}

    // Route policy name to apply to outbound routes. The type is string.
    RoutePolicyOut interface{}

    // Advertise Permanent Networks to the peer. The type is interface{}.
    AdvertisePermanentNetwork interface{}

    // Send AIGP value in Cost Community. .
    AigpCostCommunity Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6

    // Disable Advertise Of Routes to the peer.
    AdvertiseDisable Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable

    // Maximum number of prefixes to accept from this peer.
    MaximumPrefixes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes

    // Remove private AS number from inbound updates.
    RemovePrivateAsEntireAsPathInbound Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound

    // Disable Advertise Of Default VRF Imported Routes.
    AdvertiseDefImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4

    // Advertise Translated Routes to the peer.
    AdvertiseL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalL2VpnEvpn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn

    // Maximum time to wait before purging long lived routes.
    NeighborAfLongLivedGracefulRestartStaleTime Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime

    // Site-of-Origin extended community associated with the neighbor.
    SiteOfOrigin Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin

    // Advertise Translated Routes to the peer.
    AdvertiseV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6

    // Import Reorigination options for Routes from the peer.
    Import Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import

    // Originate default route to this neighbor.
    DefaultOriginate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate

    // Enable/disable inbound soft reconfiguration for this
    // neighbor/neighbor-group/af-group.
    SoftReconfiguration Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV6 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6

    // Advertise Translated Routes to the peer.
    AdvertiseV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4

    // Advertise Of Local Routes to the peer with different RT.
    AdvertiseLocalV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4

    // Remove private AS number from outbound updates.
    RemovePrivateAsEntireAsPath Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath

    // Disable Advertise Of VRF ReImported Routes.
    AdvertiseVrfImpDisableV4 Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetFilter() yfilter.YFilter { return afGroupAf.YFilter }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) SetFilter(yf yfilter.YFilter) { afGroupAf.YFilter = yf }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "af-group" { return "AfGroup" }
    if yname == "create" { return "Create" }
    if yname == "neighbor-af-long-lived-graceful-restart-capable" { return "NeighborAfLongLivedGracefulRestartCapable" }
    if yname == "l2vpn-signalling" { return "L2VpnSignalling" }
    if yname == "send-ext-community-ebgp" { return "SendExtCommunityEbgp" }
    if yname == "accept-route-legacy-rt" { return "AcceptRouteLegacyRt" }
    if yname == "send-community-ebgp" { return "SendCommunityEbgp" }
    if yname == "send-multicast-attr" { return "SendMulticastAttr" }
    if yname == "next-hop-unchanged" { return "NextHopUnchanged" }
    if yname == "advertise-local-labeled-route" { return "AdvertiseLocalLabeledRoute" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "flowspec-validation" { return "FlowspecValidation" }
    if yname == "encapsulation-type" { return "EncapsulationType" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "enforce-multiple-labels" { return "EnforceMultipleLabels" }
    if yname == "as-override" { return "AsOverride" }
    if yname == "multipath" { return "Multipath" }
    if yname == "send-community-ebgp-graceful-shutdown" { return "SendCommunityEbgpGracefulShutdown" }
    if yname == "prefix-orf-policy" { return "PrefixOrfPolicy" }
    if yname == "aigp" { return "Aigp" }
    if yname == "aigp-send-med" { return "AigpSendMed" }
    if yname == "allow-as-in" { return "AllowAsIn" }
    if yname == "advertise-orf" { return "AdvertiseOrf" }
    if yname == "route-reflector-client" { return "RouteReflectorClient" }
    if yname == "next-hop-self" { return "NextHopSelf" }
    if yname == "route-policy-in" { return "RoutePolicyIn" }
    if yname == "default-weight" { return "DefaultWeight" }
    if yname == "next-hop-unchanged-multipath" { return "NextHopUnchangedMultipath" }
    if yname == "accept-own" { return "AcceptOwn" }
    if yname == "route-policy-out" { return "RoutePolicyOut" }
    if yname == "advertise-permanent-network" { return "AdvertisePermanentNetwork" }
    if yname == "aigp-cost-community" { return "AigpCostCommunity" }
    if yname == "advertise-def-imp-disable-v6" { return "AdvertiseDefImpDisableV6" }
    if yname == "advertise-disable" { return "AdvertiseDisable" }
    if yname == "maximum-prefixes" { return "MaximumPrefixes" }
    if yname == "remove-private-as-entire-as-path-inbound" { return "RemovePrivateAsEntireAsPathInbound" }
    if yname == "advertise-def-imp-disable-v4" { return "AdvertiseDefImpDisableV4" }
    if yname == "advertise-l2vpn-evpn" { return "AdvertiseL2VpnEvpn" }
    if yname == "advertise-local-l2vpn-evpn" { return "AdvertiseLocalL2VpnEvpn" }
    if yname == "neighbor-af-long-lived-graceful-restart-stale-time" { return "NeighborAfLongLivedGracefulRestartStaleTime" }
    if yname == "site-of-origin" { return "SiteOfOrigin" }
    if yname == "advertise-v6" { return "AdvertiseV6" }
    if yname == "advertise-local-v6" { return "AdvertiseLocalV6" }
    if yname == "import" { return "Import" }
    if yname == "default-originate" { return "DefaultOriginate" }
    if yname == "soft-reconfiguration" { return "SoftReconfiguration" }
    if yname == "advertise-vrf-imp-disable-v6" { return "AdvertiseVrfImpDisableV6" }
    if yname == "advertise-v4" { return "AdvertiseV4" }
    if yname == "advertise-local-v4" { return "AdvertiseLocalV4" }
    if yname == "remove-private-as-entire-as-path" { return "RemovePrivateAsEntireAsPath" }
    if yname == "advertise-vrf-imp-disable-v4" { return "AdvertiseVrfImpDisableV4" }
    return ""
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetSegmentPath() string {
    return "af-group-af" + "[af-name='" + fmt.Sprintf("%v", afGroupAf.AfName) + "']"
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aigp-cost-community" {
        return &afGroupAf.AigpCostCommunity
    }
    if childYangName == "advertise-def-imp-disable-v6" {
        return &afGroupAf.AdvertiseDefImpDisableV6
    }
    if childYangName == "advertise-disable" {
        return &afGroupAf.AdvertiseDisable
    }
    if childYangName == "maximum-prefixes" {
        return &afGroupAf.MaximumPrefixes
    }
    if childYangName == "remove-private-as-entire-as-path-inbound" {
        return &afGroupAf.RemovePrivateAsEntireAsPathInbound
    }
    if childYangName == "advertise-def-imp-disable-v4" {
        return &afGroupAf.AdvertiseDefImpDisableV4
    }
    if childYangName == "advertise-l2vpn-evpn" {
        return &afGroupAf.AdvertiseL2VpnEvpn
    }
    if childYangName == "advertise-local-l2vpn-evpn" {
        return &afGroupAf.AdvertiseLocalL2VpnEvpn
    }
    if childYangName == "neighbor-af-long-lived-graceful-restart-stale-time" {
        return &afGroupAf.NeighborAfLongLivedGracefulRestartStaleTime
    }
    if childYangName == "site-of-origin" {
        return &afGroupAf.SiteOfOrigin
    }
    if childYangName == "advertise-v6" {
        return &afGroupAf.AdvertiseV6
    }
    if childYangName == "advertise-local-v6" {
        return &afGroupAf.AdvertiseLocalV6
    }
    if childYangName == "import" {
        return &afGroupAf.Import
    }
    if childYangName == "default-originate" {
        return &afGroupAf.DefaultOriginate
    }
    if childYangName == "soft-reconfiguration" {
        return &afGroupAf.SoftReconfiguration
    }
    if childYangName == "advertise-vrf-imp-disable-v6" {
        return &afGroupAf.AdvertiseVrfImpDisableV6
    }
    if childYangName == "advertise-v4" {
        return &afGroupAf.AdvertiseV4
    }
    if childYangName == "advertise-local-v4" {
        return &afGroupAf.AdvertiseLocalV4
    }
    if childYangName == "remove-private-as-entire-as-path" {
        return &afGroupAf.RemovePrivateAsEntireAsPath
    }
    if childYangName == "advertise-vrf-imp-disable-v4" {
        return &afGroupAf.AdvertiseVrfImpDisableV4
    }
    return nil
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["aigp-cost-community"] = &afGroupAf.AigpCostCommunity
    children["advertise-def-imp-disable-v6"] = &afGroupAf.AdvertiseDefImpDisableV6
    children["advertise-disable"] = &afGroupAf.AdvertiseDisable
    children["maximum-prefixes"] = &afGroupAf.MaximumPrefixes
    children["remove-private-as-entire-as-path-inbound"] = &afGroupAf.RemovePrivateAsEntireAsPathInbound
    children["advertise-def-imp-disable-v4"] = &afGroupAf.AdvertiseDefImpDisableV4
    children["advertise-l2vpn-evpn"] = &afGroupAf.AdvertiseL2VpnEvpn
    children["advertise-local-l2vpn-evpn"] = &afGroupAf.AdvertiseLocalL2VpnEvpn
    children["neighbor-af-long-lived-graceful-restart-stale-time"] = &afGroupAf.NeighborAfLongLivedGracefulRestartStaleTime
    children["site-of-origin"] = &afGroupAf.SiteOfOrigin
    children["advertise-v6"] = &afGroupAf.AdvertiseV6
    children["advertise-local-v6"] = &afGroupAf.AdvertiseLocalV6
    children["import"] = &afGroupAf.Import
    children["default-originate"] = &afGroupAf.DefaultOriginate
    children["soft-reconfiguration"] = &afGroupAf.SoftReconfiguration
    children["advertise-vrf-imp-disable-v6"] = &afGroupAf.AdvertiseVrfImpDisableV6
    children["advertise-v4"] = &afGroupAf.AdvertiseV4
    children["advertise-local-v4"] = &afGroupAf.AdvertiseLocalV4
    children["remove-private-as-entire-as-path"] = &afGroupAf.RemovePrivateAsEntireAsPath
    children["advertise-vrf-imp-disable-v4"] = &afGroupAf.AdvertiseVrfImpDisableV4
    return children
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = afGroupAf.AfName
    leafs["af-group"] = afGroupAf.AfGroup
    leafs["create"] = afGroupAf.Create
    leafs["neighbor-af-long-lived-graceful-restart-capable"] = afGroupAf.NeighborAfLongLivedGracefulRestartCapable
    leafs["l2vpn-signalling"] = afGroupAf.L2VpnSignalling
    leafs["send-ext-community-ebgp"] = afGroupAf.SendExtCommunityEbgp
    leafs["accept-route-legacy-rt"] = afGroupAf.AcceptRouteLegacyRt
    leafs["send-community-ebgp"] = afGroupAf.SendCommunityEbgp
    leafs["send-multicast-attr"] = afGroupAf.SendMulticastAttr
    leafs["next-hop-unchanged"] = afGroupAf.NextHopUnchanged
    leafs["advertise-local-labeled-route"] = afGroupAf.AdvertiseLocalLabeledRoute
    leafs["rpki-origin-as-validation-disable"] = afGroupAf.RpkiOriginAsValidationDisable
    leafs["flowspec-validation"] = afGroupAf.FlowspecValidation
    leafs["encapsulation-type"] = afGroupAf.EncapsulationType
    leafs["rpki-bestpath-origin-as-allow-invalid"] = afGroupAf.RpkiBestpathOriginAsAllowInvalid
    leafs["enforce-multiple-labels"] = afGroupAf.EnforceMultipleLabels
    leafs["as-override"] = afGroupAf.AsOverride
    leafs["multipath"] = afGroupAf.Multipath
    leafs["send-community-ebgp-graceful-shutdown"] = afGroupAf.SendCommunityEbgpGracefulShutdown
    leafs["prefix-orf-policy"] = afGroupAf.PrefixOrfPolicy
    leafs["aigp"] = afGroupAf.Aigp
    leafs["aigp-send-med"] = afGroupAf.AigpSendMed
    leafs["allow-as-in"] = afGroupAf.AllowAsIn
    leafs["advertise-orf"] = afGroupAf.AdvertiseOrf
    leafs["route-reflector-client"] = afGroupAf.RouteReflectorClient
    leafs["next-hop-self"] = afGroupAf.NextHopSelf
    leafs["route-policy-in"] = afGroupAf.RoutePolicyIn
    leafs["default-weight"] = afGroupAf.DefaultWeight
    leafs["next-hop-unchanged-multipath"] = afGroupAf.NextHopUnchangedMultipath
    leafs["accept-own"] = afGroupAf.AcceptOwn
    leafs["route-policy-out"] = afGroupAf.RoutePolicyOut
    leafs["advertise-permanent-network"] = afGroupAf.AdvertisePermanentNetwork
    return leafs
}

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetBundleName() string { return "cisco_ios_xr" }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetYangName() string { return "af-group-af" }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) SetParent(parent types.Entity) { afGroupAf.parent = parent }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetParent() types.Entity { return afGroupAf.parent }

func (afGroupAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf) GetParentYangName() string { return "af-group-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity
// Send AIGP value in Cost Community. 
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to enable sending cost community, FALSE otherwise . The type is bool.
    // This attribute is mandatory.
    Enable interface{}

    // Cost Community ID. The type is interface{} with range: 0..255. This
    // attribute is mandatory.
    CostCommunityId interface{}

    // True to send transitive cost community FALSE otherwise. The type is bool.
    Transitive interface{}

    // Cost Community POI. The type is BgpAigpCfgPoi. This attribute is mandatory.
    CostCommunityPoiType interface{}
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetFilter() yfilter.YFilter { return aigpCostCommunity.YFilter }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) SetFilter(yf yfilter.YFilter) { aigpCostCommunity.YFilter = yf }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "cost-community-id" { return "CostCommunityId" }
    if yname == "transitive" { return "Transitive" }
    if yname == "cost-community-poi-type" { return "CostCommunityPoiType" }
    return ""
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetSegmentPath() string {
    return "aigp-cost-community"
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = aigpCostCommunity.Enable
    leafs["cost-community-id"] = aigpCostCommunity.CostCommunityId
    leafs["transitive"] = aigpCostCommunity.Transitive
    leafs["cost-community-poi-type"] = aigpCostCommunity.CostCommunityPoiType
    return leafs
}

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetBundleName() string { return "cisco_ios_xr" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetYangName() string { return "aigp-cost-community" }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) SetParent(parent types.Entity) { aigpCostCommunity.parent = parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetParent() types.Entity { return aigpCostCommunity.parent }

func (aigpCostCommunity *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AigpCostCommunity) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV6.YFilter }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV6.YFilter = yf }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetSegmentPath() string {
    return "advertise-def-imp-disable-v6"
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV6.AfName
    leafs["adv-option"] = advertiseDefImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV6.RtType
    return leafs
}

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetYangName() string { return "advertise-def-imp-disable-v6" }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) SetParent(parent types.Entity) { advertiseDefImpDisableV6.parent = parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetParent() types.Entity { return advertiseDefImpDisableV6.parent }

func (advertiseDefImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV6) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable
// Disable Advertise Of Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetFilter() yfilter.YFilter { return advertiseDisable.YFilter }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) SetFilter(yf yfilter.YFilter) { advertiseDisable.YFilter = yf }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetSegmentPath() string {
    return "advertise-disable"
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDisable.AfName
    leafs["reorg-option"] = advertiseDisable.ReorgOption
    leafs["rt-type"] = advertiseDisable.RtType
    return leafs
}

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetYangName() string { return "advertise-disable" }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) SetParent(parent types.Entity) { advertiseDisable.parent = parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetParent() types.Entity { return advertiseDisable.parent }

func (advertiseDisable *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDisable) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes
// Maximum number of prefixes to accept from this
// peer
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum prefixes limit. The type is interface{} with range: 1..4294967295.
    // This attribute is mandatory.
    PrefixLimit interface{}

    // Threshold value (%) at which to generate a warning message. The type is
    // interface{} with range: 1..100. The default value is 75.
    WarningPercentage interface{}

    // TRUE to only give a warning message when limit is exceeded.  FALSE to
    // accept max prefix limit only. The type is bool. The default value is false.
    WarningOnly interface{}

    // Restart interval. The type is interface{} with range: 0..65535. The default
    // value is 0.
    RestartTime interface{}

    // Discard extra paths when limit is exceeded. The type is bool. The default
    // value is false.
    DiscardExtraPaths interface{}
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetFilter() yfilter.YFilter { return maximumPrefixes.YFilter }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) SetFilter(yf yfilter.YFilter) { maximumPrefixes.YFilter = yf }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetGoName(yname string) string {
    if yname == "prefix-limit" { return "PrefixLimit" }
    if yname == "warning-percentage" { return "WarningPercentage" }
    if yname == "warning-only" { return "WarningOnly" }
    if yname == "restart-time" { return "RestartTime" }
    if yname == "discard-extra-paths" { return "DiscardExtraPaths" }
    return ""
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetSegmentPath() string {
    return "maximum-prefixes"
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["prefix-limit"] = maximumPrefixes.PrefixLimit
    leafs["warning-percentage"] = maximumPrefixes.WarningPercentage
    leafs["warning-only"] = maximumPrefixes.WarningOnly
    leafs["restart-time"] = maximumPrefixes.RestartTime
    leafs["discard-extra-paths"] = maximumPrefixes.DiscardExtraPaths
    return leafs
}

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetBundleName() string { return "cisco_ios_xr" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetYangName() string { return "maximum-prefixes" }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) SetParent(parent types.Entity) { maximumPrefixes.parent = parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetParent() types.Entity { return maximumPrefixes.parent }

func (maximumPrefixes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_MaximumPrefixes) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound
// Remove private AS number from inbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from inbound updates. FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from inbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPathInbound.YFilter }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPathInbound.YFilter = yf }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetSegmentPath() string {
    return "remove-private-as-entire-as-path-inbound"
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPathInbound.Enable
    leafs["entire"] = removePrivateAsEntireAsPathInbound.Entire
    return leafs
}

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetYangName() string { return "remove-private-as-entire-as-path-inbound" }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) SetParent(parent types.Entity) { removePrivateAsEntireAsPathInbound.parent = parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetParent() types.Entity { return removePrivateAsEntireAsPathInbound.parent }

func (removePrivateAsEntireAsPathInbound *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPathInbound) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4
// Disable Advertise Of Default VRF Imported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetFilter() yfilter.YFilter { return advertiseDefImpDisableV4.YFilter }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseDefImpDisableV4.YFilter = yf }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetSegmentPath() string {
    return "advertise-def-imp-disable-v4"
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseDefImpDisableV4.AfName
    leafs["adv-option"] = advertiseDefImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseDefImpDisableV4.RtType
    return leafs
}

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetYangName() string { return "advertise-def-imp-disable-v4" }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) SetParent(parent types.Entity) { advertiseDefImpDisableV4.parent = parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetParent() types.Entity { return advertiseDefImpDisableV4.parent }

func (advertiseDefImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseDefImpDisableV4) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseL2VpnEvpn.YFilter }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseL2VpnEvpn.YFilter = yf }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetSegmentPath() string {
    return "advertise-l2vpn-evpn"
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseL2VpnEvpn.RtType
    return leafs
}

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetYangName() string { return "advertise-l2vpn-evpn" }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) SetParent(parent types.Entity) { advertiseL2VpnEvpn.parent = parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetParent() types.Entity { return advertiseL2VpnEvpn.parent }

func (advertiseL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseL2VpnEvpn) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetFilter() yfilter.YFilter { return advertiseLocalL2VpnEvpn.YFilter }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) SetFilter(yf yfilter.YFilter) { advertiseLocalL2VpnEvpn.YFilter = yf }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetSegmentPath() string {
    return "advertise-local-l2vpn-evpn"
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalL2VpnEvpn.AfName
    leafs["reorg-option"] = advertiseLocalL2VpnEvpn.ReorgOption
    leafs["rt-type"] = advertiseLocalL2VpnEvpn.RtType
    return leafs
}

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetYangName() string { return "advertise-local-l2vpn-evpn" }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) SetParent(parent types.Entity) { advertiseLocalL2VpnEvpn.parent = parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetParent() types.Entity { return advertiseLocalL2VpnEvpn.parent }

func (advertiseLocalL2VpnEvpn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalL2VpnEvpn) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime
// Maximum time to wait before purging long lived
// routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeSend interface{}

    // Max time (seconds). The type is interface{} with range: 0..16777215. Units
    // are second. The default value is 0.
    StaleTimeAccept interface{}
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetFilter() yfilter.YFilter { return neighborAfLongLivedGracefulRestartStaleTime.YFilter }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) SetFilter(yf yfilter.YFilter) { neighborAfLongLivedGracefulRestartStaleTime.YFilter = yf }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetGoName(yname string) string {
    if yname == "stale-time-send" { return "StaleTimeSend" }
    if yname == "stale-time-accept" { return "StaleTimeAccept" }
    return ""
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetSegmentPath() string {
    return "neighbor-af-long-lived-graceful-restart-stale-time"
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["stale-time-send"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeSend
    leafs["stale-time-accept"] = neighborAfLongLivedGracefulRestartStaleTime.StaleTimeAccept
    return leafs
}

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleName() string { return "cisco_ios_xr" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetYangName() string { return "neighbor-af-long-lived-graceful-restart-stale-time" }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) SetParent(parent types.Entity) { neighborAfLongLivedGracefulRestartStaleTime.parent = parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParent() types.Entity { return neighborAfLongLivedGracefulRestartStaleTime.parent }

func (neighborAfLongLivedGracefulRestartStaleTime *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_NeighborAfLongLivedGracefulRestartStaleTime) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin
// Site-of-Origin extended community associated
// with the neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Type of Extended community. The type is BgpSiteOfOrigin.
    Type interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // AS number. The type is interface{} with range: 0..4294967295.
    As interface{}

    // AS number Index. The type is interface{} with range: 0..4294967295.
    AsIndex interface{}

    // IP address. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    Address interface{}

    // IP address Index. The type is interface{} with range: 0..65535.
    AddressIndex interface{}
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetFilter() yfilter.YFilter { return siteOfOrigin.YFilter }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) SetFilter(yf yfilter.YFilter) { siteOfOrigin.YFilter = yf }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "as-xx" { return "AsXx" }
    if yname == "as" { return "As" }
    if yname == "as-index" { return "AsIndex" }
    if yname == "address" { return "Address" }
    if yname == "address-index" { return "AddressIndex" }
    return ""
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetSegmentPath() string {
    return "site-of-origin"
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = siteOfOrigin.Type
    leafs["as-xx"] = siteOfOrigin.AsXx
    leafs["as"] = siteOfOrigin.As
    leafs["as-index"] = siteOfOrigin.AsIndex
    leafs["address"] = siteOfOrigin.Address
    leafs["address-index"] = siteOfOrigin.AddressIndex
    return leafs
}

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetBundleName() string { return "cisco_ios_xr" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetYangName() string { return "site-of-origin" }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) SetParent(parent types.Entity) { siteOfOrigin.parent = parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetParent() types.Entity { return siteOfOrigin.parent }

func (siteOfOrigin *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SiteOfOrigin) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetFilter() yfilter.YFilter { return advertiseV6.YFilter }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) SetFilter(yf yfilter.YFilter) { advertiseV6.YFilter = yf }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetSegmentPath() string {
    return "advertise-v6"
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV6.AfName
    leafs["reorg-option"] = advertiseV6.ReorgOption
    leafs["rt-type"] = advertiseV6.RtType
    return leafs
}

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetYangName() string { return "advertise-v6" }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) SetParent(parent types.Entity) { advertiseV6.parent = parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetParent() types.Entity { return advertiseV6.parent }

func (advertiseV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV6) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetFilter() yfilter.YFilter { return advertiseLocalV6.YFilter }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) SetFilter(yf yfilter.YFilter) { advertiseLocalV6.YFilter = yf }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetSegmentPath() string {
    return "advertise-local-v6"
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV6.AfName
    leafs["reorg-option"] = advertiseLocalV6.ReorgOption
    leafs["rt-type"] = advertiseLocalV6.RtType
    return leafs
}

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetYangName() string { return "advertise-local-v6" }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) SetParent(parent types.Entity) { advertiseLocalV6.parent = parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetParent() types.Entity { return advertiseLocalV6.parent }

func (advertiseLocalV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV6) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import
// Import Reorigination options for Routes from the
// peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to Import with Stitching RTs, FALSE to Import with normal RTs. The
    // type is bool.
    ImportStitching interface{}

    // TRUE to Reoriginate imported routes, FALSE to not Reoriginate imported
    // routes - not supported. The type is bool.
    ImportReoriginate interface{}

    // TRUE to Reoriginate imported routes with Stitching RTs, FALSE to
    // Reoriginate imported routes with normal RTs. The type is bool.
    ImportReoriginateStitching interface{}
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetFilter() yfilter.YFilter { return self.YFilter }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) SetFilter(yf yfilter.YFilter) { self.YFilter = yf }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetGoName(yname string) string {
    if yname == "import-stitching" { return "ImportStitching" }
    if yname == "import-reoriginate" { return "ImportReoriginate" }
    if yname == "import-reoriginate-stitching" { return "ImportReoriginateStitching" }
    return ""
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetSegmentPath() string {
    return "import"
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["import-stitching"] = self.ImportStitching
    leafs["import-reoriginate"] = self.ImportReoriginate
    leafs["import-reoriginate-stitching"] = self.ImportReoriginateStitching
    return leafs
}

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetBundleName() string { return "cisco_ios_xr" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetYangName() string { return "import" }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) SetParent(parent types.Entity) { self.parent = parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetParent() types.Entity { return self.parent }

func (self *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_Import) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate
// Originate default route to this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prevent default-originate from, being inherited from a parent.
    // TRUE otherwise. The type is bool. The default value is false.
    Enable interface{}

    // Route policy name to specify criteria to originate default. The type is
    // string.
    RoutePolicyName interface{}
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetFilter() yfilter.YFilter { return defaultOriginate.YFilter }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) SetFilter(yf yfilter.YFilter) { defaultOriginate.YFilter = yf }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetSegmentPath() string {
    return "default-originate"
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = defaultOriginate.Enable
    leafs["route-policy-name"] = defaultOriginate.RoutePolicyName
    return leafs
}

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetBundleName() string { return "cisco_ios_xr" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetYangName() string { return "default-originate" }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) SetParent(parent types.Entity) { defaultOriginate.parent = parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetParent() types.Entity { return defaultOriginate.parent }

func (defaultOriginate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_DefaultOriginate) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration
// Enable/disable inbound soft reconfiguration for
// this neighbor/neighbor-group/af-group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // FALSE to prohibit inbound soft reconfiguration. TRUE otherwise. The type is
    // bool. The default value is false.
    InboundSoft interface{}

    // TRUE to always use soft reconfig, even if route refresh is supported. 
    // FALSE otherwise. The type is bool. The default value is false.
    SoftAlways interface{}
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetFilter() yfilter.YFilter { return softReconfiguration.YFilter }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) SetFilter(yf yfilter.YFilter) { softReconfiguration.YFilter = yf }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetGoName(yname string) string {
    if yname == "inbound-soft" { return "InboundSoft" }
    if yname == "soft-always" { return "SoftAlways" }
    return ""
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetSegmentPath() string {
    return "soft-reconfiguration"
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["inbound-soft"] = softReconfiguration.InboundSoft
    leafs["soft-always"] = softReconfiguration.SoftAlways
    return leafs
}

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetBundleName() string { return "cisco_ios_xr" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetYangName() string { return "soft-reconfiguration" }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) SetParent(parent types.Entity) { softReconfiguration.parent = parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetParent() types.Entity { return softReconfiguration.parent }

func (softReconfiguration *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_SoftReconfiguration) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV6.YFilter }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV6.YFilter = yf }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v6"
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV6.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV6.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV6.RtType
    return leafs
}

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetYangName() string { return "advertise-vrf-imp-disable-v6" }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) SetParent(parent types.Entity) { advertiseVrfImpDisableV6.parent = parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetParent() types.Entity { return advertiseVrfImpDisableV6.parent }

func (advertiseVrfImpDisableV6 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV6) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4
// Advertise Translated Routes to the peer
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetFilter() yfilter.YFilter { return advertiseV4.YFilter }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) SetFilter(yf yfilter.YFilter) { advertiseV4.YFilter = yf }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetSegmentPath() string {
    return "advertise-v4"
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseV4.AfName
    leafs["reorg-option"] = advertiseV4.ReorgOption
    leafs["rt-type"] = advertiseV4.RtType
    return leafs
}

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetYangName() string { return "advertise-v4" }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) SetParent(parent types.Entity) { advertiseV4.parent = parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetParent() types.Entity { return advertiseV4.parent }

func (advertiseV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseV4) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4
// Advertise Of Local Routes to the peer with
// different RT
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Reorigination option. The type is BgpReorgOpt.
    ReorgOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetFilter() yfilter.YFilter { return advertiseLocalV4.YFilter }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) SetFilter(yf yfilter.YFilter) { advertiseLocalV4.YFilter = yf }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "reorg-option" { return "ReorgOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetSegmentPath() string {
    return "advertise-local-v4"
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseLocalV4.AfName
    leafs["reorg-option"] = advertiseLocalV4.ReorgOption
    leafs["rt-type"] = advertiseLocalV4.RtType
    return leafs
}

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetYangName() string { return "advertise-local-v4" }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) SetParent(parent types.Entity) { advertiseLocalV4.parent = parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetParent() types.Entity { return advertiseLocalV4.parent }

func (advertiseLocalV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseLocalV4) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath
// Remove private AS number from outbound updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to remove private AS from outbound updates .  FALSE to prevent
    // remove-private-AS from being inherited. The type is bool. This attribute is
    // mandatory.
    Enable interface{}

    // TRUE to remove private AS from outbound updates if all ASes in aspath
    // areprivate. FALSE to prevent remove-private-ASfrom being inherited. The
    // type is bool.
    Entire interface{}
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetFilter() yfilter.YFilter { return removePrivateAsEntireAsPath.YFilter }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) SetFilter(yf yfilter.YFilter) { removePrivateAsEntireAsPath.YFilter = yf }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "entire" { return "Entire" }
    return ""
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetSegmentPath() string {
    return "remove-private-as-entire-as-path"
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = removePrivateAsEntireAsPath.Enable
    leafs["entire"] = removePrivateAsEntireAsPath.Entire
    return leafs
}

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetBundleName() string { return "cisco_ios_xr" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetYangName() string { return "remove-private-as-entire-as-path" }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) SetParent(parent types.Entity) { removePrivateAsEntireAsPath.parent = parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetParent() types.Entity { return removePrivateAsEntireAsPath.parent }

func (removePrivateAsEntireAsPath *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_RemovePrivateAsEntireAsPath) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4
// Disable Advertise Of VRF ReImported Routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4 struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Address family. The type is BgpAddressFamily.
    AfName interface{}

    // Advertise option. The type is BgpReorgOpt.
    AdvOption interface{}

    // RT type. The type is BgpAdvRt.
    RtType interface{}
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetFilter() yfilter.YFilter { return advertiseVrfImpDisableV4.YFilter }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) SetFilter(yf yfilter.YFilter) { advertiseVrfImpDisableV4.YFilter = yf }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "adv-option" { return "AdvOption" }
    if yname == "rt-type" { return "RtType" }
    return ""
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetSegmentPath() string {
    return "advertise-vrf-imp-disable-v4"
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = advertiseVrfImpDisableV4.AfName
    leafs["adv-option"] = advertiseVrfImpDisableV4.AdvOption
    leafs["rt-type"] = advertiseVrfImpDisableV4.RtType
    return leafs
}

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetBundleName() string { return "cisco_ios_xr" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetYangName() string { return "advertise-vrf-imp-disable-v4" }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) SetParent(parent types.Entity) { advertiseVrfImpDisableV4.parent = parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetParent() types.Entity { return advertiseVrfImpDisableV4.parent }

func (advertiseVrfImpDisableV4 *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_AfGroups_AfGroup_AfGroupAfs_AfGroupAf_AdvertiseVrfImpDisableV4) GetParentYangName() string { return "af-group-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups
// Session group configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A particular BGP session group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup.
    SessionGroup []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetFilter() yfilter.YFilter { return sessionGroups.YFilter }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) SetFilter(yf yfilter.YFilter) { sessionGroups.YFilter = yf }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetGoName(yname string) string {
    if yname == "session-group" { return "SessionGroup" }
    return ""
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetSegmentPath() string {
    return "session-groups"
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "session-group" {
        for _, c := range sessionGroups.SessionGroup {
            if sessionGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup{}
        sessionGroups.SessionGroup = append(sessionGroups.SessionGroup, child)
        return &sessionGroups.SessionGroup[len(sessionGroups.SessionGroup)-1]
    }
    return nil
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sessionGroups.SessionGroup {
        children[sessionGroups.SessionGroup[i].GetSegmentPath()] = &sessionGroups.SessionGroup[i]
    }
    return children
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetBundleName() string { return "cisco_ios_xr" }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetYangName() string { return "session-groups" }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) SetParent(parent types.Entity) { sessionGroups.parent = parent }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetParent() types.Entity { return sessionGroups.parent }

func (sessionGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups) GetParentYangName() string { return "bgp-entity" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup
// A particular BGP session group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BGP session group name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    SessionGroupName interface{}

    // Inherit address-family independent config from a session-group. The type is
    // string.
    SessionGroupAddMember interface{}

    // TRUE to preserve the CE path attributes.FALSE to override CE path
    // attributes. The type is bool.
    InternalVpnClientIbgpCe interface{}

    // TRUE to enable egress peer engineering FALSE to disable egress peer
    // engineering and to prevent inheritance from a parent. The type is bool.
    EgressPeerEngineering interface{}

    // Maximum time to wait for restart of GR capable peer. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    NeighborGracefulRestartStalepathTime interface{}

    // TRUE to shutdown this entity, FALSE to prevent this entity from being
    // shutdown even if the parent is. The type is bool.
    Shutdown interface{}

    // Up to 80 characters describing this neighbor. The type is string.
    Description interface{}

    // TRUE to receive DMZ link bandwidth from ebgp peer. FALSE to not receive
    // from ebgp peer and to prevent inheritance from a parent. The type is bool.
    EbgpRecvDmz interface{}

    // TRUE to Enable graceful restart support for neighbor.  FALSE to disable
    // graceful restart support for neighbor. The type is bool.
    NeighborGracefulRestart interface{}

    // TRUE to enforce first AS; FALSE to not enforce first AS. The type is bool.
    EnforceFirstAs interface{}

    // Time to wait for deleteing IDLE state Dynamic peer. The type is interface{}
    // with range: 30..1800. Units are second.
    IdleWatchTime interface{}

    // TCP mode to be used to establish BGP session. The type is BgpTcpMode. The
    // default value is either.
    SessionOpenMode interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // Default mode, Cumulative mode or Disable to prevent inheritance from a
    // parent. The type is BgpEbgpSendDmzEnableMode.
    EbgpSendDmzEnableModes interface{}

    // TRUE to suppress all capabilities. FALSE to not suppress and to prevent
    // inheritance from a parent. The type is bool.
    SuppressAllCapabilities interface{}

    // Set Maximum Peers in Dynamic Range. The type is interface{} with range:
    // 1..4096.
    MaxPeers interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Advertise additional paths Send capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsSendCapability interface{}

    // TRUE to propagate DMZ link bandwidth.  FALSE to not propagate and to
    // prevent inheritance from a parent. The type is bool.
    PropagateDmzLinkBandwidth interface{}

    // Strict mode, Default mode or Disable to prevent inheritance from a parent.
    // The type is BgpBfdEnableMode.
    BfdEnableModes interface{}

    // TRUE to enable BGP TTL Security.  FALSE to not enable it and to prevent
    // inheritance from a parent. The type is bool.
    TtlSecurity interface{}

    // Restart time advertised to neighbor. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    NeighborGracefulRestartTime interface{}

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    BfdMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    BfdMinimumInterval interface{}

    // Remote-as-list group name. The type is string.
    RemoteAsList interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpNbrCapAdditionalPathsCfg.
    AdditionalPathsReceiveCapability interface{}

    // TRUE to disable the connected nexthop check for this peer.FALSE to enable
    // the connected nexthop check for this peer. The type is bool.
    IgnoreConnectedCheckEbgp interface{}

    // TRUE to suppress BGP 4-byte-as capability.  FALSE to not suppress it and to
    // prevent inheritance from a parent. The type is bool.
    SuppressFourByteAsCapability interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // Create this group. Deletion of this object causes deletion of all the
    // objects under NeighborGroup/SessionGroup associated with this object. The
    // type is interface{}.
    Create interface{}

    // Local ip address.
    LocalAddress Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress

    // Enable BMP logging for this neighbor.
    BmpActivates Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates

    // Allow EBGP neighbors not on directly connected networks.
    EbgpMultihop Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop

    // Set remote AS.
    RemoteAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs

    // Specify a local-as number.
    LocalAs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs

    // Set or disable a password.
    Password Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password

    // Minimum interval between sending BGP routing updates.
    AdvertisementInterval Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval

    // Neighbor Cluster-id.
    NeighborClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId

    // TCP Maximum segment size.
    Tcpmss Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss

    // TOS (Type Of Service).
    Tos Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos

    // Inbound update filtering.
    UpdateInFiltering Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering

    // Message log outbound.
    MsgLogOut Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut

    // Set socket receive buffer size and BGP read buffer size.
    ReceiveBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize

    // Message log inbound.
    MsgLogIn Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn

    // Set socket send buffer size and BGP write buffer size.
    SendBufferSize Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize

    // BGP per neighbor timers.
    Timers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers

    // Set or disable keychain based authentication.
    Keychain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain

    // Graceful Maintenance mode.
    GracefulMaintenance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetFilter() yfilter.YFilter { return sessionGroup.YFilter }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) SetFilter(yf yfilter.YFilter) { sessionGroup.YFilter = yf }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetGoName(yname string) string {
    if yname == "session-group-name" { return "SessionGroupName" }
    if yname == "session-group-add-member" { return "SessionGroupAddMember" }
    if yname == "internal-vpn-client-ibgp-ce" { return "InternalVpnClientIbgpCe" }
    if yname == "egress-peer-engineering" { return "EgressPeerEngineering" }
    if yname == "neighbor-graceful-restart-stalepath-time" { return "NeighborGracefulRestartStalepathTime" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "description" { return "Description" }
    if yname == "ebgp-recv-dmz" { return "EbgpRecvDmz" }
    if yname == "neighbor-graceful-restart" { return "NeighborGracefulRestart" }
    if yname == "enforce-first-as" { return "EnforceFirstAs" }
    if yname == "idle-watch-time" { return "IdleWatchTime" }
    if yname == "session-open-mode" { return "SessionOpenMode" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "ebgp-send-dmz-enable-modes" { return "EbgpSendDmzEnableModes" }
    if yname == "suppress-all-capabilities" { return "SuppressAllCapabilities" }
    if yname == "max-peers" { return "MaxPeers" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "additional-paths-send-capability" { return "AdditionalPathsSendCapability" }
    if yname == "propagate-dmz-link-bandwidth" { return "PropagateDmzLinkBandwidth" }
    if yname == "bfd-enable-modes" { return "BfdEnableModes" }
    if yname == "ttl-security" { return "TtlSecurity" }
    if yname == "neighbor-graceful-restart-time" { return "NeighborGracefulRestartTime" }
    if yname == "bfd-multiplier" { return "BfdMultiplier" }
    if yname == "bfd-minimum-interval" { return "BfdMinimumInterval" }
    if yname == "remote-as-list" { return "RemoteAsList" }
    if yname == "additional-paths-receive-capability" { return "AdditionalPathsReceiveCapability" }
    if yname == "ignore-connected-check-ebgp" { return "IgnoreConnectedCheckEbgp" }
    if yname == "suppress-four-byte-as-capability" { return "SuppressFourByteAsCapability" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "create" { return "Create" }
    if yname == "local-address" { return "LocalAddress" }
    if yname == "bmp-activates" { return "BmpActivates" }
    if yname == "ebgp-multihop" { return "EbgpMultihop" }
    if yname == "remote-as" { return "RemoteAs" }
    if yname == "local-as" { return "LocalAs" }
    if yname == "password" { return "Password" }
    if yname == "advertisement-interval" { return "AdvertisementInterval" }
    if yname == "neighbor-cluster-id" { return "NeighborClusterId" }
    if yname == "tcpmss" { return "Tcpmss" }
    if yname == "tos" { return "Tos" }
    if yname == "update-in-filtering" { return "UpdateInFiltering" }
    if yname == "msg-log-out" { return "MsgLogOut" }
    if yname == "receive-buffer-size" { return "ReceiveBufferSize" }
    if yname == "msg-log-in" { return "MsgLogIn" }
    if yname == "send-buffer-size" { return "SendBufferSize" }
    if yname == "timers" { return "Timers" }
    if yname == "keychain" { return "Keychain" }
    if yname == "graceful-maintenance" { return "GracefulMaintenance" }
    return ""
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetSegmentPath() string {
    return "session-group" + "[session-group-name='" + fmt.Sprintf("%v", sessionGroup.SessionGroupName) + "']"
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "local-address" {
        return &sessionGroup.LocalAddress
    }
    if childYangName == "bmp-activates" {
        return &sessionGroup.BmpActivates
    }
    if childYangName == "ebgp-multihop" {
        return &sessionGroup.EbgpMultihop
    }
    if childYangName == "remote-as" {
        return &sessionGroup.RemoteAs
    }
    if childYangName == "local-as" {
        return &sessionGroup.LocalAs
    }
    if childYangName == "password" {
        return &sessionGroup.Password
    }
    if childYangName == "advertisement-interval" {
        return &sessionGroup.AdvertisementInterval
    }
    if childYangName == "neighbor-cluster-id" {
        return &sessionGroup.NeighborClusterId
    }
    if childYangName == "tcpmss" {
        return &sessionGroup.Tcpmss
    }
    if childYangName == "tos" {
        return &sessionGroup.Tos
    }
    if childYangName == "update-in-filtering" {
        return &sessionGroup.UpdateInFiltering
    }
    if childYangName == "msg-log-out" {
        return &sessionGroup.MsgLogOut
    }
    if childYangName == "receive-buffer-size" {
        return &sessionGroup.ReceiveBufferSize
    }
    if childYangName == "msg-log-in" {
        return &sessionGroup.MsgLogIn
    }
    if childYangName == "send-buffer-size" {
        return &sessionGroup.SendBufferSize
    }
    if childYangName == "timers" {
        return &sessionGroup.Timers
    }
    if childYangName == "keychain" {
        return &sessionGroup.Keychain
    }
    if childYangName == "graceful-maintenance" {
        return &sessionGroup.GracefulMaintenance
    }
    return nil
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["local-address"] = &sessionGroup.LocalAddress
    children["bmp-activates"] = &sessionGroup.BmpActivates
    children["ebgp-multihop"] = &sessionGroup.EbgpMultihop
    children["remote-as"] = &sessionGroup.RemoteAs
    children["local-as"] = &sessionGroup.LocalAs
    children["password"] = &sessionGroup.Password
    children["advertisement-interval"] = &sessionGroup.AdvertisementInterval
    children["neighbor-cluster-id"] = &sessionGroup.NeighborClusterId
    children["tcpmss"] = &sessionGroup.Tcpmss
    children["tos"] = &sessionGroup.Tos
    children["update-in-filtering"] = &sessionGroup.UpdateInFiltering
    children["msg-log-out"] = &sessionGroup.MsgLogOut
    children["receive-buffer-size"] = &sessionGroup.ReceiveBufferSize
    children["msg-log-in"] = &sessionGroup.MsgLogIn
    children["send-buffer-size"] = &sessionGroup.SendBufferSize
    children["timers"] = &sessionGroup.Timers
    children["keychain"] = &sessionGroup.Keychain
    children["graceful-maintenance"] = &sessionGroup.GracefulMaintenance
    return children
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["session-group-name"] = sessionGroup.SessionGroupName
    leafs["session-group-add-member"] = sessionGroup.SessionGroupAddMember
    leafs["internal-vpn-client-ibgp-ce"] = sessionGroup.InternalVpnClientIbgpCe
    leafs["egress-peer-engineering"] = sessionGroup.EgressPeerEngineering
    leafs["neighbor-graceful-restart-stalepath-time"] = sessionGroup.NeighborGracefulRestartStalepathTime
    leafs["shutdown"] = sessionGroup.Shutdown
    leafs["description"] = sessionGroup.Description
    leafs["ebgp-recv-dmz"] = sessionGroup.EbgpRecvDmz
    leafs["neighbor-graceful-restart"] = sessionGroup.NeighborGracefulRestart
    leafs["enforce-first-as"] = sessionGroup.EnforceFirstAs
    leafs["idle-watch-time"] = sessionGroup.IdleWatchTime
    leafs["session-open-mode"] = sessionGroup.SessionOpenMode
    leafs["rpki-origin-as-validation-disable"] = sessionGroup.RpkiOriginAsValidationDisable
    leafs["ebgp-send-dmz-enable-modes"] = sessionGroup.EbgpSendDmzEnableModes
    leafs["suppress-all-capabilities"] = sessionGroup.SuppressAllCapabilities
    leafs["max-peers"] = sessionGroup.MaxPeers
    leafs["rpki-bestpath-origin-as-allow-invalid"] = sessionGroup.RpkiBestpathOriginAsAllowInvalid
    leafs["additional-paths-send-capability"] = sessionGroup.AdditionalPathsSendCapability
    leafs["propagate-dmz-link-bandwidth"] = sessionGroup.PropagateDmzLinkBandwidth
    leafs["bfd-enable-modes"] = sessionGroup.BfdEnableModes
    leafs["ttl-security"] = sessionGroup.TtlSecurity
    leafs["neighbor-graceful-restart-time"] = sessionGroup.NeighborGracefulRestartTime
    leafs["bfd-multiplier"] = sessionGroup.BfdMultiplier
    leafs["bfd-minimum-interval"] = sessionGroup.BfdMinimumInterval
    leafs["remote-as-list"] = sessionGroup.RemoteAsList
    leafs["additional-paths-receive-capability"] = sessionGroup.AdditionalPathsReceiveCapability
    leafs["ignore-connected-check-ebgp"] = sessionGroup.IgnoreConnectedCheckEbgp
    leafs["suppress-four-byte-as-capability"] = sessionGroup.SuppressFourByteAsCapability
    leafs["update-source-interface"] = sessionGroup.UpdateSourceInterface
    leafs["create"] = sessionGroup.Create
    return leafs
}

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetBundleName() string { return "cisco_ios_xr" }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetYangName() string { return "session-group" }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) SetParent(parent types.Entity) { sessionGroup.parent = parent }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetParent() types.Entity { return sessionGroup.parent }

func (sessionGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup) GetParentYangName() string { return "session-groups" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress
// Local ip address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a local address if the parent has
    // one.FALSE to specify local ip address. The type is bool.
    LocalAddressDisable interface{}

    // Local ip address for neighbor. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    LocalIpAddress interface{}
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetFilter() yfilter.YFilter { return localAddress.YFilter }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) SetFilter(yf yfilter.YFilter) { localAddress.YFilter = yf }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetGoName(yname string) string {
    if yname == "local-address-disable" { return "LocalAddressDisable" }
    if yname == "local-ip-address" { return "LocalIpAddress" }
    return ""
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetSegmentPath() string {
    return "local-address"
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["local-address-disable"] = localAddress.LocalAddressDisable
    leafs["local-ip-address"] = localAddress.LocalIpAddress
    return leafs
}

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetBundleName() string { return "cisco_ios_xr" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetYangName() string { return "local-address" }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) SetParent(parent types.Entity) { localAddress.parent = parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetParent() types.Entity { return localAddress.parent }

func (localAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAddress) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates
// Enable BMP logging for this neighbor
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable BMP logging for this particular server. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate.
    BmpActivate []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetFilter() yfilter.YFilter { return bmpActivates.YFilter }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) SetFilter(yf yfilter.YFilter) { bmpActivates.YFilter = yf }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetGoName(yname string) string {
    if yname == "bmp-activate" { return "BmpActivate" }
    return ""
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetSegmentPath() string {
    return "bmp-activates"
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-activate" {
        for _, c := range bmpActivates.BmpActivate {
            if bmpActivates.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate{}
        bmpActivates.BmpActivate = append(bmpActivates.BmpActivate, child)
        return &bmpActivates.BmpActivate[len(bmpActivates.BmpActivate)-1]
    }
    return nil
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpActivates.BmpActivate {
        children[bmpActivates.BmpActivate[i].GetSegmentPath()] = &bmpActivates.BmpActivate[i]
    }
    return children
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetYangName() string { return "bmp-activates" }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) SetParent(parent types.Entity) { bmpActivates.parent = parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetParent() types.Entity { return bmpActivates.parent }

func (bmpActivates *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate
// Enable BMP logging for this particular server
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetFilter() yfilter.YFilter { return bmpActivate.YFilter }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) SetFilter(yf yfilter.YFilter) { bmpActivate.YFilter = yf }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    return ""
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetSegmentPath() string {
    return "bmp-activate" + "[server-id='" + fmt.Sprintf("%v", bmpActivate.ServerId) + "']"
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpActivate.ServerId
    return leafs
}

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetBundleName() string { return "cisco_ios_xr" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetYangName() string { return "bmp-activate" }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) SetParent(parent types.Entity) { bmpActivate.parent = parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetParent() types.Entity { return bmpActivate.parent }

func (bmpActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_BmpActivates_BmpActivate) GetParentYangName() string { return "bmp-activates" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop
// Allow EBGP neighbors not on directly connected
// networks
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum hop count. The type is interface{} with range: 1..255. The default
    // value is 255.
    MaxHopCount interface{}

    // TRUE to not enable MPLS and NULL rewrite. The type is bool. The default
    // value is false.
    MplsDeactivation interface{}
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetFilter() yfilter.YFilter { return ebgpMultihop.YFilter }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) SetFilter(yf yfilter.YFilter) { ebgpMultihop.YFilter = yf }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetGoName(yname string) string {
    if yname == "max-hop-count" { return "MaxHopCount" }
    if yname == "mpls-deactivation" { return "MplsDeactivation" }
    return ""
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetSegmentPath() string {
    return "ebgp-multihop"
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["max-hop-count"] = ebgpMultihop.MaxHopCount
    leafs["mpls-deactivation"] = ebgpMultihop.MplsDeactivation
    return leafs
}

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetBundleName() string { return "cisco_ios_xr" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetYangName() string { return "ebgp-multihop" }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) SetParent(parent types.Entity) { ebgpMultihop.parent = parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetParent() types.Entity { return ebgpMultihop.parent }

func (ebgpMultihop *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_EbgpMultihop) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs
// Set remote AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetFilter() yfilter.YFilter { return remoteAs.YFilter }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) SetFilter(yf yfilter.YFilter) { remoteAs.YFilter = yf }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetSegmentPath() string {
    return "remote-as"
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = remoteAs.AsXx
    leafs["as-yy"] = remoteAs.AsYy
    return leafs
}

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetBundleName() string { return "cisco_ios_xr" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetYangName() string { return "remote-as" }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) SetParent(parent types.Entity) { remoteAs.parent = parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetParent() types.Entity { return remoteAs.parent }

func (remoteAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_RemoteAs) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs
// Specify a local-as number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}

    // Do not prepend Local AS to announcements from this neighbor. The type is
    // interface{}.
    NoPrepend interface{}

    // Disable Local AS and prevent it from being inherited from a parent. The
    // type is interface{}.
    Disable interface{}

    // Prepend only Local AS to announcements from this neighbor. The type is
    // interface{}.
    ReplaceAs interface{}

    // Dual-AS mode. The type is interface{}.
    DualAs interface{}
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetFilter() yfilter.YFilter { return localAs.YFilter }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) SetFilter(yf yfilter.YFilter) { localAs.YFilter = yf }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    if yname == "no-prepend" { return "NoPrepend" }
    if yname == "disable" { return "Disable" }
    if yname == "replace-as" { return "ReplaceAs" }
    if yname == "dual-as" { return "DualAs" }
    return ""
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetSegmentPath() string {
    return "local-as"
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = localAs.AsXx
    leafs["as-yy"] = localAs.AsYy
    leafs["no-prepend"] = localAs.NoPrepend
    leafs["disable"] = localAs.Disable
    leafs["replace-as"] = localAs.ReplaceAs
    leafs["dual-as"] = localAs.DualAs
    return leafs
}

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetBundleName() string { return "cisco_ios_xr" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetYangName() string { return "local-as" }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) SetParent(parent types.Entity) { localAs.parent = parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetParent() types.Entity { return localAs.parent }

func (localAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_LocalAs) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password
// Set or disable a password
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a password even if the parent has
    // one.  FALSEto specify a password. The type is bool.
    PasswordDisable interface{}

    // The neighbor password.  Leave unspecified when disabling the password. The
    // type is string with pattern: (!.+)|([^!].+).
    Password interface{}
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetFilter() yfilter.YFilter { return password.YFilter }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) SetFilter(yf yfilter.YFilter) { password.YFilter = yf }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetGoName(yname string) string {
    if yname == "password-disable" { return "PasswordDisable" }
    if yname == "password" { return "Password" }
    return ""
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetSegmentPath() string {
    return "password"
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["password-disable"] = password.PasswordDisable
    leafs["password"] = password.Password
    return leafs
}

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetBundleName() string { return "cisco_ios_xr" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetYangName() string { return "password" }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) SetParent(parent types.Entity) { password.parent = parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetParent() types.Entity { return password.parent }

func (password *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Password) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval
// Minimum interval between sending BGP routing
// updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Minimum advertisement interval time, secs part. The type is interface{}
    // with range: 0..600. This attribute is mandatory. Units are second.
    MinimumInterval interface{}

    // Minimum advertisement interval time, msecs part. The type is interface{}
    // with range: 0..999. Units are millisecond.
    MinimumIntervalMsecs interface{}
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetFilter() yfilter.YFilter { return advertisementInterval.YFilter }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) SetFilter(yf yfilter.YFilter) { advertisementInterval.YFilter = yf }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetGoName(yname string) string {
    if yname == "minimum-interval" { return "MinimumInterval" }
    if yname == "minimum-interval-msecs" { return "MinimumIntervalMsecs" }
    return ""
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetSegmentPath() string {
    return "advertisement-interval"
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["minimum-interval"] = advertisementInterval.MinimumInterval
    leafs["minimum-interval-msecs"] = advertisementInterval.MinimumIntervalMsecs
    return leafs
}

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetBundleName() string { return "cisco_ios_xr" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetYangName() string { return "advertisement-interval" }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) SetParent(parent types.Entity) { advertisementInterval.parent = parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetParent() types.Entity { return advertisementInterval.parent }

func (advertisementInterval *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_AdvertisementInterval) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId
// Neighbor Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetFilter() yfilter.YFilter { return neighborClusterId.YFilter }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) SetFilter(yf yfilter.YFilter) { neighborClusterId.YFilter = yf }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetSegmentPath() string {
    return "neighbor-cluster-id"
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = neighborClusterId.ClusterIdNumber
    leafs["cluster-id-address"] = neighborClusterId.ClusterIdAddress
    return leafs
}

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetYangName() string { return "neighbor-cluster-id" }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) SetParent(parent types.Entity) { neighborClusterId.parent = parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetParent() types.Entity { return neighborClusterId.parent }

func (neighborClusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_NeighborClusterId) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss
// TCP Maximum segment size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance ofTCP MSS valuefrom its parents.FALSE,
    // otherwise. The type is bool.
    TcpmssDisable interface{}

    // Maximum Segment Size. The type is interface{} with range: 68..10000.
    Mss interface{}
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetFilter() yfilter.YFilter { return tcpmss.YFilter }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) SetFilter(yf yfilter.YFilter) { tcpmss.YFilter = yf }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetGoName(yname string) string {
    if yname == "tcpmss-disable" { return "TcpmssDisable" }
    if yname == "mss" { return "Mss" }
    return ""
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetSegmentPath() string {
    return "tcpmss"
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["tcpmss-disable"] = tcpmss.TcpmssDisable
    leafs["mss"] = tcpmss.Mss
    return leafs
}

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetBundleName() string { return "cisco_ios_xr" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetYangName() string { return "tcpmss" }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) SetParent(parent types.Entity) { tcpmss.parent = parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetParent() types.Entity { return tcpmss.parent }

func (tcpmss *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tcpmss) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos
// TOS (Type Of Service)
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetYangName() string { return "tos" }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetParent() types.Entity { return tos.parent }

func (tos *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Tos) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering
// Inbound update filtering
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure inbound update filtering. The type is interface{}.
    Enable interface{}

    // Attribute-filter group name for update filtering. The type is string.
    UpdateInFilteringAttributeFilterGroup interface{}

    // Disable inbound update filtering syslog messages. The type is interface{}.
    UpdateInFilteringSyslogDisable interface{}

    // Message buffers to store filtered updates.
    UpdateInFilteringMessageBuffers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetFilter() yfilter.YFilter { return updateInFiltering.YFilter }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) SetFilter(yf yfilter.YFilter) { updateInFiltering.YFilter = yf }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "update-in-filtering-attribute-filter-group" { return "UpdateInFilteringAttributeFilterGroup" }
    if yname == "update-in-filtering-syslog-disable" { return "UpdateInFilteringSyslogDisable" }
    if yname == "update-in-filtering-message-buffers" { return "UpdateInFilteringMessageBuffers" }
    return ""
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetSegmentPath() string {
    return "update-in-filtering"
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "update-in-filtering-message-buffers" {
        return &updateInFiltering.UpdateInFilteringMessageBuffers
    }
    return nil
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["update-in-filtering-message-buffers"] = &updateInFiltering.UpdateInFilteringMessageBuffers
    return children
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = updateInFiltering.Enable
    leafs["update-in-filtering-attribute-filter-group"] = updateInFiltering.UpdateInFilteringAttributeFilterGroup
    leafs["update-in-filtering-syslog-disable"] = updateInFiltering.UpdateInFilteringSyslogDisable
    return leafs
}

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetYangName() string { return "update-in-filtering" }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) SetParent(parent types.Entity) { updateInFiltering.parent = parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetParent() types.Entity { return updateInFiltering.parent }

func (updateInFiltering *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers
// Message buffers to store filtered updates
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of message buffers. The type is interface{} with range: 0..25. This
    // attribute is mandatory.
    NumberOfBuffers interface{}

    // TRUE to configure non-circular buffer. The type is bool. This attribute is
    // mandatory.
    NonCircularBuffer interface{}
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetFilter() yfilter.YFilter { return updateInFilteringMessageBuffers.YFilter }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetFilter(yf yfilter.YFilter) { updateInFilteringMessageBuffers.YFilter = yf }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetGoName(yname string) string {
    if yname == "number-of-buffers" { return "NumberOfBuffers" }
    if yname == "non-circular-buffer" { return "NonCircularBuffer" }
    return ""
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetSegmentPath() string {
    return "update-in-filtering-message-buffers"
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["number-of-buffers"] = updateInFilteringMessageBuffers.NumberOfBuffers
    leafs["non-circular-buffer"] = updateInFilteringMessageBuffers.NonCircularBuffer
    return leafs
}

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleName() string { return "cisco_ios_xr" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetYangName() string { return "update-in-filtering-message-buffers" }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) SetParent(parent types.Entity) { updateInFilteringMessageBuffers.parent = parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParent() types.Entity { return updateInFilteringMessageBuffers.parent }

func (updateInFilteringMessageBuffers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_UpdateInFiltering_UpdateInFilteringMessageBuffers) GetParentYangName() string { return "update-in-filtering" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut
// Message log outbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Outbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a outbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetFilter() yfilter.YFilter { return msgLogOut.YFilter }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) SetFilter(yf yfilter.YFilter) { msgLogOut.YFilter = yf }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetSegmentPath() string {
    return "msg-log-out"
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogOut.MsgBufCount
    leafs["msg-log-disable"] = msgLogOut.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogOut.MsgLogInheritDisable
    return leafs
}

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetYangName() string { return "msg-log-out" }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) SetParent(parent types.Entity) { msgLogOut.parent = parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetParent() types.Entity { return msgLogOut.parent }

func (msgLogOut *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogOut) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize
// Set socket receive buffer size and BGP read
// buffer size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetFilter() yfilter.YFilter { return receiveBufferSize.YFilter }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) SetFilter(yf yfilter.YFilter) { receiveBufferSize.YFilter = yf }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetSegmentPath() string {
    return "receive-buffer-size"
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveBufferSize.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveBufferSize.BgpReceiveSize
    return leafs
}

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetYangName() string { return "receive-buffer-size" }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) SetParent(parent types.Entity) { receiveBufferSize.parent = parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetParent() types.Entity { return receiveBufferSize.parent }

func (receiveBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_ReceiveBufferSize) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn
// Message log inbound
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Inbound message log buffer size. The type is interface{} with range:
    // 1..100.
    MsgBufCount interface{}

    // Disable inbound message logging. The type is bool.
    MsgLogDisable interface{}

    // TRUE, to prevent this entity from having a inbound message logging if
    // parent has one. The type is bool.
    MsgLogInheritDisable interface{}
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetFilter() yfilter.YFilter { return msgLogIn.YFilter }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) SetFilter(yf yfilter.YFilter) { msgLogIn.YFilter = yf }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetGoName(yname string) string {
    if yname == "msg-buf-count" { return "MsgBufCount" }
    if yname == "msg-log-disable" { return "MsgLogDisable" }
    if yname == "msg-log-inherit-disable" { return "MsgLogInheritDisable" }
    return ""
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetSegmentPath() string {
    return "msg-log-in"
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["msg-buf-count"] = msgLogIn.MsgBufCount
    leafs["msg-log-disable"] = msgLogIn.MsgLogDisable
    leafs["msg-log-inherit-disable"] = msgLogIn.MsgLogInheritDisable
    return leafs
}

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetBundleName() string { return "cisco_ios_xr" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetYangName() string { return "msg-log-in" }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) SetParent(parent types.Entity) { msgLogIn.parent = parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetParent() types.Entity { return msgLogIn.parent }

func (msgLogIn *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_MsgLogIn) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize
// Set socket send buffer size and BGP write buffer
// size
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetFilter() yfilter.YFilter { return sendBufferSize.YFilter }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) SetFilter(yf yfilter.YFilter) { sendBufferSize.YFilter = yf }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetSegmentPath() string {
    return "send-buffer-size"
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendBufferSize.SocketSendSize
    leafs["bgp-send-size"] = sendBufferSize.BgpSendSize
    return leafs
}

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetBundleName() string { return "cisco_ios_xr" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetYangName() string { return "send-buffer-size" }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) SetParent(parent types.Entity) { sendBufferSize.parent = parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetParent() types.Entity { return sendBufferSize.parent }

func (sendBufferSize *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_SendBufferSize) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers
// BGP per neighbor timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval. The type is interface{} with range: 0..65535. The
    // default value is 60.
    KeepaliveInterval interface{}

    // Hold time.  Specify 0 to disable keepalives/hold time. The type is
    // interface{} with range: 0..65535. The default value is 180.
    HoldTime interface{}

    // Minimum acceptable hold time.  Specify 0 to disable keepalives/hold time.
    // The type is interface{} with range: 0..65535. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetFilter() yfilter.YFilter { return timers.YFilter }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) SetFilter(yf yfilter.YFilter) { timers.YFilter = yf }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetGoName(yname string) string {
    if yname == "keepalive-interval" { return "KeepaliveInterval" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetSegmentPath() string {
    return "timers"
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive-interval"] = timers.KeepaliveInterval
    leafs["hold-time"] = timers.HoldTime
    leafs["min-accept-hold-time"] = timers.MinAcceptHoldTime
    return leafs
}

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetBundleName() string { return "cisco_ios_xr" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetYangName() string { return "timers" }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) SetParent(parent types.Entity) { timers.parent = parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetParent() types.Entity { return timers.parent }

func (timers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Timers) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain
// Set or disable keychain based authentication
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE to prevent this entity from having a keychain based authentication
    // even if the parent has one.FALSE to specify a keychain name. The type is
    // bool.
    KeychainDisable interface{}

    // Name of the keychain associated with neighbor. The type is string.
    KeychainName interface{}
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetFilter() yfilter.YFilter { return keychain.YFilter }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) SetFilter(yf yfilter.YFilter) { keychain.YFilter = yf }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetGoName(yname string) string {
    if yname == "keychain-disable" { return "KeychainDisable" }
    if yname == "keychain-name" { return "KeychainName" }
    return ""
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetSegmentPath() string {
    return "keychain"
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keychain-disable"] = keychain.KeychainDisable
    leafs["keychain-name"] = keychain.KeychainName
    return leafs
}

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetBundleName() string { return "cisco_ios_xr" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetYangName() string { return "keychain" }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) SetParent(parent types.Entity) { keychain.parent = parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetParent() types.Entity { return keychain.parent }

func (keychain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_Keychain) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance
// Graceful Maintenance mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enter Graceful Maintenance mode to configure parametrs. The type is
    // interface{}.
    Enable interface{}

    // Initiate the graceful shutdown procedure. The type is bool.
    GracefulMaintenanceActivate interface{}

    // Set Local Preference to advertise routes with.
    GracefulMaintenanceLocalPreference Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference

    // Number of times to prepend local AS number to the AS path.
    GracefulMaintenanceAsPrepends Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetFilter() yfilter.YFilter { return gracefulMaintenance.YFilter }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) SetFilter(yf yfilter.YFilter) { gracefulMaintenance.YFilter = yf }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "graceful-maintenance-activate" { return "GracefulMaintenanceActivate" }
    if yname == "graceful-maintenance-local-preference" { return "GracefulMaintenanceLocalPreference" }
    if yname == "graceful-maintenance-as-prepends" { return "GracefulMaintenanceAsPrepends" }
    return ""
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetSegmentPath() string {
    return "graceful-maintenance"
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "graceful-maintenance-local-preference" {
        return &gracefulMaintenance.GracefulMaintenanceLocalPreference
    }
    if childYangName == "graceful-maintenance-as-prepends" {
        return &gracefulMaintenance.GracefulMaintenanceAsPrepends
    }
    return nil
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["graceful-maintenance-local-preference"] = &gracefulMaintenance.GracefulMaintenanceLocalPreference
    children["graceful-maintenance-as-prepends"] = &gracefulMaintenance.GracefulMaintenanceAsPrepends
    return children
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = gracefulMaintenance.Enable
    leafs["graceful-maintenance-activate"] = gracefulMaintenance.GracefulMaintenanceActivate
    return leafs
}

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetYangName() string { return "graceful-maintenance" }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) SetParent(parent types.Entity) { gracefulMaintenance.parent = parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetParent() types.Entity { return gracefulMaintenance.parent }

func (gracefulMaintenance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance) GetParentYangName() string { return "session-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference
// Set Local Preference to advertise routes with
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of Local Pref value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutLocPrefDisable interface{}

    // Local Preference Value. The type is interface{} with range: 0..4294967295.
    LocalPreference interface{}
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetFilter() yfilter.YFilter { return gracefulMaintenanceLocalPreference.YFilter }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceLocalPreference.YFilter = yf }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetGoName(yname string) string {
    if yname == "gshut-loc-pref-disable" { return "GshutLocPrefDisable" }
    if yname == "local-preference" { return "LocalPreference" }
    return ""
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetSegmentPath() string {
    return "graceful-maintenance-local-preference"
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-loc-pref-disable"] = gracefulMaintenanceLocalPreference.GshutLocPrefDisable
    leafs["local-preference"] = gracefulMaintenanceLocalPreference.LocalPreference
    return leafs
}

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetYangName() string { return "graceful-maintenance-local-preference" }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) SetParent(parent types.Entity) { gracefulMaintenanceLocalPreference.parent = parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParent() types.Entity { return gracefulMaintenanceLocalPreference.parent }

func (gracefulMaintenanceLocalPreference *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceLocalPreference) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends
// Number of times to prepend local AS number to
// the AS path
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // TRUE, to prevent inheritance of AS Prepends value from its parents.FALSE,
    // otherwise. The type is bool.
    GshutPrependsDisable interface{}

    // number of times AS prepends. The type is interface{} with range: 0..6.
    AsPrepends interface{}
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetFilter() yfilter.YFilter { return gracefulMaintenanceAsPrepends.YFilter }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetFilter(yf yfilter.YFilter) { gracefulMaintenanceAsPrepends.YFilter = yf }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetGoName(yname string) string {
    if yname == "gshut-prepends-disable" { return "GshutPrependsDisable" }
    if yname == "as-prepends" { return "AsPrepends" }
    return ""
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetSegmentPath() string {
    return "graceful-maintenance-as-prepends"
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["gshut-prepends-disable"] = gracefulMaintenanceAsPrepends.GshutPrependsDisable
    leafs["as-prepends"] = gracefulMaintenanceAsPrepends.AsPrepends
    return leafs
}

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleName() string { return "cisco_ios_xr" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetYangName() string { return "graceful-maintenance-as-prepends" }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) SetParent(parent types.Entity) { gracefulMaintenanceAsPrepends.parent = parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParent() types.Entity { return gracefulMaintenanceAsPrepends.parent }

func (gracefulMaintenanceAsPrepends *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_BgpEntity_SessionGroups_SessionGroup_GracefulMaintenance_GracefulMaintenanceAsPrepends) GetParentYangName() string { return "graceful-maintenance" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global
// Global default config
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable graceful restart support. The type is interface{}.
    GracefulRestart interface{}

    // Enables logging of update generation events. The type is interface{}.
    UpdateOutLogging interface{}

    // Install diversion path to RIB/CEF. The type is interface{}.
    InstallDiversion interface{}

    // Set the delay for triggering nexthop recalculations. The type is
    // interface{} with range: 0..300. Units are second. The default value is 5.
    NextHopTriggerDelay interface{}

    // TRUE to Enable non-stop routing supportFALSE to Disable non-stop routing
    // support. The type is bool.
    Nsr interface{}

    // Include extra detail in neighbor change messages. The type is interface{}.
    NeighborLoggingDetail interface{}

    // Connect to PIM/PIM6. The type is interface{}.
    Mvpn interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // RPKI origin-AS validity signal ibgp. The type is interface{}.
    RpkiOriginAsValiditySignalIbgp interface{}

    // Configure background scanner interval for generic scanner. The type is
    // interface{} with range: 5..3600. Units are second. The default value is 60.
    GlobalScanTime interface{}

    // RPKI bestpath use origin-AS validity. The type is interface{}.
    RpkiBestpathUseOriginAsValidity interface{}

    // Prefix validation time (in seconds). Range  : 5 - 60. Specify 0 to disable
    // the timer. The type is interface{} with range: 0..60. Units are second.
    RpkiOriginAsValidationTime interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Time before stale routes are purged. The type is interface{} with range:
    // 1..6000. Units are second. The default value is 600.
    GracefulRestartPurgeTime interface{}

    // Allow all attributes to be modified by outbound policy for iBGP peers. The
    // type is interface{}.
    EnforceIbgpOutPolicy interface{}

    // Upper bound on update generation transient memory usage for the process.
    // The type is interface{} with range: 16..2048. Units are megabyte. The
    // default value is 512.
    UpdateLimitProcess interface{}

    // Restart time advertised to neighbors. The type is interface{} with range:
    // 1..4095. Units are second. The default value is 120.
    GracefulRestartTime interface{}

    // Inbound update basic error-handling for IBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingBasicIbgpDisable interface{}

    // Allow duplicate table config and disable update generation. The type is
    // interface{}.
    ReadOnly interface{}

    // Maximum time to wait for restart of GR capable peers. The type is
    // interface{} with range: 1..4095. Units are second. The default value is
    // 360.
    GracefulRestartStalepathTime interface{}

    // Inbound update extended error-handling for EBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingExtendedEbgp interface{}

    // Inbound update basic error-handling for EBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingBasicEbgpDisable interface{}

    // Reset gracefully if configuration change forces a peer reset. The type is
    // interface{}.
    GracefulReset interface{}

    // Enable AS-path loop checking for iBGP peers. The type is interface{}.
    IgpLoopCheck interface{}

    // Inbound update extended error-handling for IBGP neighbors. The type is
    // interface{}.
    UpdateErrorHandlingExtendedIbgp interface{}

    // Configure Router-id. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // The default value is 0.0.0.0.
    RouterId interface{}

    // Disable enforce the first AS for EBGP routes. The type is interface{}.
    DisableEnforceFirstAs interface{}

    // Change default route selection criteria to ignore cost community
    // comparison. The type is interface{}.
    BestPathCostCommunity interface{}

    // Change default route selection criteria to ignore AIGP unless both paths
    // whichare compared have AIGP attribute. The type is interface{}.
    BestPathAigpIgnore interface{}

    // Change default route selection criteria to ignore AS path length. The type
    // is interface{}.
    BestPathAsPathLength interface{}

    // Allow redistribution of iBGP into IGPs (dangerous). The type is
    // interface{}.
    IgpRedistInternal interface{}

    // Change default multi-route selection criteria to ignore everything onwards
    // as-path check. The type is interface{}.
    MultiPathAsPathIgnoreOnwards interface{}

    // Disable immediate reset session if a link to a directly connected external
    // peer goes down. The type is interface{}.
    DisableFastExternalFallover interface{}

    // Default redistributed metric. The type is interface{} with range:
    // 1..4294967295.
    DefaultMetric interface{}

    // Control distribution of default information. The type is interface{}.
    DefaultInfoOriginate interface{}

    // Change default route selection criteria and allow the comparing of MED
    // among confederation paths. The type is interface{}.
    BestPathConfederationPaths interface{}

    // Change default multi-route selection criteria to relax as-path checking -
    // only require same aspath length. The type is interface{}.
    BestPathAsMultipathRelax interface{}

    // Disable automatic soft peer reset on policy reconfiguration. The type is
    // interface{}.
    DisableAutoSoftReset interface{}

    // Disable inbound and outbound messagelogging for all neighbors under the
    // vrf. The type is interface{}.
    DisableMsgLog interface{}

    // Disable neighbor change logging. The type is interface{}.
    DisableNeighborLogging interface{}

    // Change default route selection criteria and allow comparing of MED from
    // different neighbors. The type is interface{}.
    BestPathMedAlways interface{}

    // Change default route selection criteria and compare router-id for identical
    // EBGP paths. The type is interface{}.
    BestPathRouterId interface{}

    // Treat missing MED as the least preferred one. The type is interface{}.
    BestPathMedMissing interface{}

    // Configure default local preference. The type is interface{} with range:
    // 0..4294967295. The default value is 100.
    LocalPreference interface{}

    // Configure Route-Reflector Cluster-id.
    ClusterId Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId

    // Set write-queue limit for each update group.
    WriteLimit Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit

    // Set the max initial delay for sending updates.
    UpdateDelay Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay

    // AS League.
    AsLeague Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague

    // RPKI server configuration.
    RpkiServers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers

    // AS-list group lists.
    AsListGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups

    // Maximum number that can be configured.
    Limits Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits

    // Set routing domain confederation AS.
    ConfederationDomain Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain

    // Define peer ASes in BGP confederation.
    ConfederationPeerAses Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses

    // Attribute-filter groups list.
    AttributeFilterGroups Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups

    // Activate Graceful Maintenance Mode for all neighbors with graceful
    // maintenance config.
    GlobalGracefulMaintenanceActivate Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate

    // Global AF-specific configuration.
    GlobalAfs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs

    // RPKI static route configuration.
    RpkiStaticRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes

    // Configure list of MPLS activated interfaces.
    MplsActivatedInterfaces Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces

    // Adjust routing timers.
    GlobalTimers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers

    // BFD configuration.
    Bfd Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd

    // set socket parameters.
    SendSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes

    // Set socket and BGP receive buffer sizes.
    ReceiveSocketBufferSizes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetFilter() yfilter.YFilter { return global.YFilter }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) SetFilter(yf yfilter.YFilter) { global.YFilter = yf }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetGoName(yname string) string {
    if yname == "graceful-restart" { return "GracefulRestart" }
    if yname == "update-out-logging" { return "UpdateOutLogging" }
    if yname == "install-diversion" { return "InstallDiversion" }
    if yname == "next-hop-trigger-delay" { return "NextHopTriggerDelay" }
    if yname == "nsr" { return "Nsr" }
    if yname == "neighbor-logging-detail" { return "NeighborLoggingDetail" }
    if yname == "mvpn" { return "Mvpn" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "rpki-origin-as-validity-signal-ibgp" { return "RpkiOriginAsValiditySignalIbgp" }
    if yname == "global-scan-time" { return "GlobalScanTime" }
    if yname == "rpki-bestpath-use-origin-as-validity" { return "RpkiBestpathUseOriginAsValidity" }
    if yname == "rpki-origin-as-validation-time" { return "RpkiOriginAsValidationTime" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "graceful-restart-purge-time" { return "GracefulRestartPurgeTime" }
    if yname == "enforce-ibgp-out-policy" { return "EnforceIbgpOutPolicy" }
    if yname == "update-limit-process" { return "UpdateLimitProcess" }
    if yname == "graceful-restart-time" { return "GracefulRestartTime" }
    if yname == "update-error-handling-basic-ibgp-disable" { return "UpdateErrorHandlingBasicIbgpDisable" }
    if yname == "read-only" { return "ReadOnly" }
    if yname == "graceful-restart-stalepath-time" { return "GracefulRestartStalepathTime" }
    if yname == "update-error-handling-extended-ebgp" { return "UpdateErrorHandlingExtendedEbgp" }
    if yname == "update-error-handling-basic-ebgp-disable" { return "UpdateErrorHandlingBasicEbgpDisable" }
    if yname == "graceful-reset" { return "GracefulReset" }
    if yname == "igp-loop-check" { return "IgpLoopCheck" }
    if yname == "update-error-handling-extended-ibgp" { return "UpdateErrorHandlingExtendedIbgp" }
    if yname == "router-id" { return "RouterId" }
    if yname == "disable-enforce-first-as" { return "DisableEnforceFirstAs" }
    if yname == "best-path-cost-community" { return "BestPathCostCommunity" }
    if yname == "best-path-aigp-ignore" { return "BestPathAigpIgnore" }
    if yname == "best-path-as-path-length" { return "BestPathAsPathLength" }
    if yname == "igp-redist-internal" { return "IgpRedistInternal" }
    if yname == "multi-path-as-path-ignore-onwards" { return "MultiPathAsPathIgnoreOnwards" }
    if yname == "disable-fast-external-fallover" { return "DisableFastExternalFallover" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "default-info-originate" { return "DefaultInfoOriginate" }
    if yname == "best-path-confederation-paths" { return "BestPathConfederationPaths" }
    if yname == "best-path-as-multipath-relax" { return "BestPathAsMultipathRelax" }
    if yname == "disable-auto-soft-reset" { return "DisableAutoSoftReset" }
    if yname == "disable-msg-log" { return "DisableMsgLog" }
    if yname == "disable-neighbor-logging" { return "DisableNeighborLogging" }
    if yname == "best-path-med-always" { return "BestPathMedAlways" }
    if yname == "best-path-router-id" { return "BestPathRouterId" }
    if yname == "best-path-med-missing" { return "BestPathMedMissing" }
    if yname == "local-preference" { return "LocalPreference" }
    if yname == "cluster-id" { return "ClusterId" }
    if yname == "write-limit" { return "WriteLimit" }
    if yname == "update-delay" { return "UpdateDelay" }
    if yname == "as-league" { return "AsLeague" }
    if yname == "rpki-servers" { return "RpkiServers" }
    if yname == "as-list-groups" { return "AsListGroups" }
    if yname == "limits" { return "Limits" }
    if yname == "confederation-domain" { return "ConfederationDomain" }
    if yname == "confederation-peer-ases" { return "ConfederationPeerAses" }
    if yname == "attribute-filter-groups" { return "AttributeFilterGroups" }
    if yname == "global-graceful-maintenance-activate" { return "GlobalGracefulMaintenanceActivate" }
    if yname == "global-afs" { return "GlobalAfs" }
    if yname == "rpki-static-routes" { return "RpkiStaticRoutes" }
    if yname == "mpls-activated-interfaces" { return "MplsActivatedInterfaces" }
    if yname == "global-timers" { return "GlobalTimers" }
    if yname == "bfd" { return "Bfd" }
    if yname == "send-socket-buffer-sizes" { return "SendSocketBufferSizes" }
    if yname == "receive-socket-buffer-sizes" { return "ReceiveSocketBufferSizes" }
    return ""
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetSegmentPath() string {
    return "global"
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "cluster-id" {
        return &global.ClusterId
    }
    if childYangName == "write-limit" {
        return &global.WriteLimit
    }
    if childYangName == "update-delay" {
        return &global.UpdateDelay
    }
    if childYangName == "as-league" {
        return &global.AsLeague
    }
    if childYangName == "rpki-servers" {
        return &global.RpkiServers
    }
    if childYangName == "as-list-groups" {
        return &global.AsListGroups
    }
    if childYangName == "limits" {
        return &global.Limits
    }
    if childYangName == "confederation-domain" {
        return &global.ConfederationDomain
    }
    if childYangName == "confederation-peer-ases" {
        return &global.ConfederationPeerAses
    }
    if childYangName == "attribute-filter-groups" {
        return &global.AttributeFilterGroups
    }
    if childYangName == "global-graceful-maintenance-activate" {
        return &global.GlobalGracefulMaintenanceActivate
    }
    if childYangName == "global-afs" {
        return &global.GlobalAfs
    }
    if childYangName == "rpki-static-routes" {
        return &global.RpkiStaticRoutes
    }
    if childYangName == "mpls-activated-interfaces" {
        return &global.MplsActivatedInterfaces
    }
    if childYangName == "global-timers" {
        return &global.GlobalTimers
    }
    if childYangName == "bfd" {
        return &global.Bfd
    }
    if childYangName == "send-socket-buffer-sizes" {
        return &global.SendSocketBufferSizes
    }
    if childYangName == "receive-socket-buffer-sizes" {
        return &global.ReceiveSocketBufferSizes
    }
    return nil
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["cluster-id"] = &global.ClusterId
    children["write-limit"] = &global.WriteLimit
    children["update-delay"] = &global.UpdateDelay
    children["as-league"] = &global.AsLeague
    children["rpki-servers"] = &global.RpkiServers
    children["as-list-groups"] = &global.AsListGroups
    children["limits"] = &global.Limits
    children["confederation-domain"] = &global.ConfederationDomain
    children["confederation-peer-ases"] = &global.ConfederationPeerAses
    children["attribute-filter-groups"] = &global.AttributeFilterGroups
    children["global-graceful-maintenance-activate"] = &global.GlobalGracefulMaintenanceActivate
    children["global-afs"] = &global.GlobalAfs
    children["rpki-static-routes"] = &global.RpkiStaticRoutes
    children["mpls-activated-interfaces"] = &global.MplsActivatedInterfaces
    children["global-timers"] = &global.GlobalTimers
    children["bfd"] = &global.Bfd
    children["send-socket-buffer-sizes"] = &global.SendSocketBufferSizes
    children["receive-socket-buffer-sizes"] = &global.ReceiveSocketBufferSizes
    return children
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["graceful-restart"] = global.GracefulRestart
    leafs["update-out-logging"] = global.UpdateOutLogging
    leafs["install-diversion"] = global.InstallDiversion
    leafs["next-hop-trigger-delay"] = global.NextHopTriggerDelay
    leafs["nsr"] = global.Nsr
    leafs["neighbor-logging-detail"] = global.NeighborLoggingDetail
    leafs["mvpn"] = global.Mvpn
    leafs["rpki-origin-as-validation-disable"] = global.RpkiOriginAsValidationDisable
    leafs["rpki-origin-as-validity-signal-ibgp"] = global.RpkiOriginAsValiditySignalIbgp
    leafs["global-scan-time"] = global.GlobalScanTime
    leafs["rpki-bestpath-use-origin-as-validity"] = global.RpkiBestpathUseOriginAsValidity
    leafs["rpki-origin-as-validation-time"] = global.RpkiOriginAsValidationTime
    leafs["rpki-bestpath-origin-as-allow-invalid"] = global.RpkiBestpathOriginAsAllowInvalid
    leafs["graceful-restart-purge-time"] = global.GracefulRestartPurgeTime
    leafs["enforce-ibgp-out-policy"] = global.EnforceIbgpOutPolicy
    leafs["update-limit-process"] = global.UpdateLimitProcess
    leafs["graceful-restart-time"] = global.GracefulRestartTime
    leafs["update-error-handling-basic-ibgp-disable"] = global.UpdateErrorHandlingBasicIbgpDisable
    leafs["read-only"] = global.ReadOnly
    leafs["graceful-restart-stalepath-time"] = global.GracefulRestartStalepathTime
    leafs["update-error-handling-extended-ebgp"] = global.UpdateErrorHandlingExtendedEbgp
    leafs["update-error-handling-basic-ebgp-disable"] = global.UpdateErrorHandlingBasicEbgpDisable
    leafs["graceful-reset"] = global.GracefulReset
    leafs["igp-loop-check"] = global.IgpLoopCheck
    leafs["update-error-handling-extended-ibgp"] = global.UpdateErrorHandlingExtendedIbgp
    leafs["router-id"] = global.RouterId
    leafs["disable-enforce-first-as"] = global.DisableEnforceFirstAs
    leafs["best-path-cost-community"] = global.BestPathCostCommunity
    leafs["best-path-aigp-ignore"] = global.BestPathAigpIgnore
    leafs["best-path-as-path-length"] = global.BestPathAsPathLength
    leafs["igp-redist-internal"] = global.IgpRedistInternal
    leafs["multi-path-as-path-ignore-onwards"] = global.MultiPathAsPathIgnoreOnwards
    leafs["disable-fast-external-fallover"] = global.DisableFastExternalFallover
    leafs["default-metric"] = global.DefaultMetric
    leafs["default-info-originate"] = global.DefaultInfoOriginate
    leafs["best-path-confederation-paths"] = global.BestPathConfederationPaths
    leafs["best-path-as-multipath-relax"] = global.BestPathAsMultipathRelax
    leafs["disable-auto-soft-reset"] = global.DisableAutoSoftReset
    leafs["disable-msg-log"] = global.DisableMsgLog
    leafs["disable-neighbor-logging"] = global.DisableNeighborLogging
    leafs["best-path-med-always"] = global.BestPathMedAlways
    leafs["best-path-router-id"] = global.BestPathRouterId
    leafs["best-path-med-missing"] = global.BestPathMedMissing
    leafs["local-preference"] = global.LocalPreference
    return leafs
}

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetBundleName() string { return "cisco_ios_xr" }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetYangName() string { return "global" }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) SetParent(parent types.Entity) { global.parent = parent }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetParent() types.Entity { return global.parent }

func (global *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global) GetParentYangName() string { return "default-vrf" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId
// Configure Route-Reflector Cluster-id
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Route-Reflector Cluster ID as 32 bit quantity. The type is interface{} with
    // range: 1..4294967295.
    ClusterIdNumber interface{}

    // Route-Reflector Cluster ID in IPV4 address format. The type is string with
    // pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetFilter() yfilter.YFilter { return clusterId.YFilter }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) SetFilter(yf yfilter.YFilter) { clusterId.YFilter = yf }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetSegmentPath() string {
    return "cluster-id"
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = clusterId.ClusterIdNumber
    leafs["cluster-id-address"] = clusterId.ClusterIdAddress
    return leafs
}

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetBundleName() string { return "cisco_ios_xr" }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetYangName() string { return "cluster-id" }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) SetParent(parent types.Entity) { clusterId.parent = parent }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetParent() types.Entity { return clusterId.parent }

func (clusterId *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ClusterId) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit
// Set write-queue limit for each update group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of messages to be formatted per update group. The type is
    // interface{} with range: 500..100000000. The default value is 50000.
    FormattedMessages interface{}

    // Number of messages that can be enqueued in total. The type is interface{}
    // with range: 500..100000000. The default value is 250000.
    EnqueuedMessages interface{}

    // TRUE to enable desynchronization, FALSE otherwise. The type is bool. The
    // default value is false.
    Desynchronize interface{}
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetFilter() yfilter.YFilter { return writeLimit.YFilter }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) SetFilter(yf yfilter.YFilter) { writeLimit.YFilter = yf }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetGoName(yname string) string {
    if yname == "formatted-messages" { return "FormattedMessages" }
    if yname == "enqueued-messages" { return "EnqueuedMessages" }
    if yname == "desynchronize" { return "Desynchronize" }
    return ""
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetSegmentPath() string {
    return "write-limit"
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["formatted-messages"] = writeLimit.FormattedMessages
    leafs["enqueued-messages"] = writeLimit.EnqueuedMessages
    leafs["desynchronize"] = writeLimit.Desynchronize
    return leafs
}

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetBundleName() string { return "cisco_ios_xr" }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetYangName() string { return "write-limit" }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) SetParent(parent types.Entity) { writeLimit.parent = parent }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetParent() types.Entity { return writeLimit.parent }

func (writeLimit *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_WriteLimit) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay
// Set the max initial delay for sending
// updates
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay value (seconds). The type is interface{} with range: 0..3600. Units
    // are second. The default value is 120.
    Delay interface{}

    // Set to TRUE to disable keepalive trigger bestpath and delay is enforced.
    // The type is bool. The default value is false.
    Always interface{}
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetFilter() yfilter.YFilter { return updateDelay.YFilter }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) SetFilter(yf yfilter.YFilter) { updateDelay.YFilter = yf }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetGoName(yname string) string {
    if yname == "delay" { return "Delay" }
    if yname == "always" { return "Always" }
    return ""
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetSegmentPath() string {
    return "update-delay"
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["delay"] = updateDelay.Delay
    leafs["always"] = updateDelay.Always
    return leafs
}

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetBundleName() string { return "cisco_ios_xr" }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetYangName() string { return "update-delay" }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) SetParent(parent types.Entity) { updateDelay.parent = parent }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetParent() types.Entity { return updateDelay.parent }

func (updateDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_UpdateDelay) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague
// AS League
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS League creation. The type is interface{}.
    Enable interface{}

    // AS League Peers.
    Peers Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetFilter() yfilter.YFilter { return asLeague.YFilter }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) SetFilter(yf yfilter.YFilter) { asLeague.YFilter = yf }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetGoName(yname string) string {
    if yname == "enable" { return "Enable" }
    if yname == "peers" { return "Peers" }
    return ""
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetSegmentPath() string {
    return "as-league"
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peers" {
        return &asLeague.Peers
    }
    return nil
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["peers"] = &asLeague.Peers
    return children
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["enable"] = asLeague.Enable
    return leafs
}

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetBundleName() string { return "cisco_ios_xr" }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetYangName() string { return "as-league" }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) SetParent(parent types.Entity) { asLeague.parent = parent }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetParent() types.Entity { return asLeague.parent }

func (asLeague *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers
// AS League Peers
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS League Peer AS. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer.
    Peer []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetFilter() yfilter.YFilter { return peers.YFilter }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) SetFilter(yf yfilter.YFilter) { peers.YFilter = yf }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetGoName(yname string) string {
    if yname == "peer" { return "Peer" }
    return ""
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetSegmentPath() string {
    return "peers"
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "peer" {
        for _, c := range peers.Peer {
            if peers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer{}
        peers.Peer = append(peers.Peer, child)
        return &peers.Peer[len(peers.Peer)-1]
    }
    return nil
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range peers.Peer {
        children[peers.Peer[i].GetSegmentPath()] = &peers.Peer[i]
    }
    return children
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetBundleName() string { return "cisco_ios_xr" }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetYangName() string { return "peers" }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) SetParent(parent types.Entity) { peers.parent = parent }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetParent() types.Entity { return peers.parent }

func (peers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers) GetParentYangName() string { return "as-league" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer
// AS League Peer AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. xx of peer AS xx.yy. The type is interface{} with
    // range: 0..4294967295.
    AsXx interface{}

    // This attribute is a key. yy of peer AS xx.yy. The type is interface{} with
    // range: 0..4294967295.
    AsYy interface{}
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetFilter() yfilter.YFilter { return peer.YFilter }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) SetFilter(yf yfilter.YFilter) { peer.YFilter = yf }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetSegmentPath() string {
    return "peer" + "[as-xx='" + fmt.Sprintf("%v", peer.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", peer.AsYy) + "']"
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = peer.AsXx
    leafs["as-yy"] = peer.AsYy
    return leafs
}

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetBundleName() string { return "cisco_ios_xr" }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetYangName() string { return "peer" }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) SetParent(parent types.Entity) { peer.parent = parent }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetParent() types.Entity { return peer.parent }

func (peer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsLeague_Peers_Peer) GetParentYangName() string { return "peers" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers
// RPKI server configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPKI server configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer.
    RpkiServer []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetFilter() yfilter.YFilter { return rpkiServers.YFilter }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) SetFilter(yf yfilter.YFilter) { rpkiServers.YFilter = yf }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetGoName(yname string) string {
    if yname == "rpki-server" { return "RpkiServer" }
    return ""
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetSegmentPath() string {
    return "rpki-servers"
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rpki-server" {
        for _, c := range rpkiServers.RpkiServer {
            if rpkiServers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer{}
        rpkiServers.RpkiServer = append(rpkiServers.RpkiServer, child)
        return &rpkiServers.RpkiServer[len(rpkiServers.RpkiServer)-1]
    }
    return nil
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rpkiServers.RpkiServer {
        children[rpkiServers.RpkiServer[i].GetSegmentPath()] = &rpkiServers.RpkiServer[i]
    }
    return children
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetBundleName() string { return "cisco_ios_xr" }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetYangName() string { return "rpki-servers" }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) SetParent(parent types.Entity) { rpkiServers.parent = parent }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetParent() types.Entity { return rpkiServers.parent }

func (rpkiServers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer
// RPKI server configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Server address (opaque string). The type is
    // string.
    Server interface{}

    // RPKI server configuration. The type is interface{}.
    Enable interface{}

    // RPKI server shutdown. The type is interface{}.
    Shutdown interface{}

    // RPKI server password. The type is string.
    Password interface{}

    // RPKI server response-time (seconds). The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    ResponseTime interface{}

    // RPKI server username. The type is string.
    Username interface{}

    // RPKI server refresh-time (seconds). The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    RefreshTime interface{}

    // RPKI server purge-time (seconds). The type is interface{} with range:
    // -2147483648..2147483647. Units are second.
    PurgeTime interface{}

    // RPKI server transport.
    Transport Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetFilter() yfilter.YFilter { return rpkiServer.YFilter }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) SetFilter(yf yfilter.YFilter) { rpkiServer.YFilter = yf }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetGoName(yname string) string {
    if yname == "server" { return "Server" }
    if yname == "enable" { return "Enable" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "password" { return "Password" }
    if yname == "response-time" { return "ResponseTime" }
    if yname == "username" { return "Username" }
    if yname == "refresh-time" { return "RefreshTime" }
    if yname == "purge-time" { return "PurgeTime" }
    if yname == "transport" { return "Transport" }
    return ""
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetSegmentPath() string {
    return "rpki-server" + "[server='" + fmt.Sprintf("%v", rpkiServer.Server) + "']"
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "transport" {
        return &rpkiServer.Transport
    }
    return nil
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["transport"] = &rpkiServer.Transport
    return children
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server"] = rpkiServer.Server
    leafs["enable"] = rpkiServer.Enable
    leafs["shutdown"] = rpkiServer.Shutdown
    leafs["password"] = rpkiServer.Password
    leafs["response-time"] = rpkiServer.ResponseTime
    leafs["username"] = rpkiServer.Username
    leafs["refresh-time"] = rpkiServer.RefreshTime
    leafs["purge-time"] = rpkiServer.PurgeTime
    return leafs
}

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetBundleName() string { return "cisco_ios_xr" }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetYangName() string { return "rpki-server" }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) SetParent(parent types.Entity) { rpkiServer.parent = parent }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetParent() types.Entity { return rpkiServer.parent }

func (rpkiServer *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer) GetParentYangName() string { return "rpki-servers" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport
// RPKI server transport
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPKI server transport. The type is BgpRpkiTransport. The default value is
    // ssh.
    Transport interface{}

    // port. The type is interface{} with range: 1..65535. The default value is
    // 22.
    Port interface{}
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetFilter() yfilter.YFilter { return transport.YFilter }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) SetFilter(yf yfilter.YFilter) { transport.YFilter = yf }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetGoName(yname string) string {
    if yname == "transport" { return "Transport" }
    if yname == "port" { return "Port" }
    return ""
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetSegmentPath() string {
    return "transport"
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["transport"] = transport.Transport
    leafs["port"] = transport.Port
    return leafs
}

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetBundleName() string { return "cisco_ios_xr" }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetYangName() string { return "transport" }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) SetParent(parent types.Entity) { transport.parent = parent }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetParent() types.Entity { return transport.parent }

func (transport *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiServers_RpkiServer_Transport) GetParentYangName() string { return "rpki-server" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups
// AS-list group lists
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS-List group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup.
    AsListGroup []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetFilter() yfilter.YFilter { return asListGroups.YFilter }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) SetFilter(yf yfilter.YFilter) { asListGroups.YFilter = yf }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetGoName(yname string) string {
    if yname == "as-list-group" { return "AsListGroup" }
    return ""
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetSegmentPath() string {
    return "as-list-groups"
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as-list-group" {
        for _, c := range asListGroups.AsListGroup {
            if asListGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup{}
        asListGroups.AsListGroup = append(asListGroups.AsListGroup, child)
        return &asListGroups.AsListGroup[len(asListGroups.AsListGroup)-1]
    }
    return nil
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range asListGroups.AsListGroup {
        children[asListGroups.AsListGroup[i].GetSegmentPath()] = &asListGroups.AsListGroup[i]
    }
    return children
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetBundleName() string { return "cisco_ios_xr" }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetYangName() string { return "as-list-groups" }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) SetParent(parent types.Entity) { asListGroups.parent = parent }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetParent() types.Entity { return asListGroups.parent }

func (asListGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup
// AS-List group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Group name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    AsListGroupName interface{}

    // AS-List group creation. The type is interface{}.
    Enable interface{}

    // AS list.
    Ases Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetFilter() yfilter.YFilter { return asListGroup.YFilter }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) SetFilter(yf yfilter.YFilter) { asListGroup.YFilter = yf }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetGoName(yname string) string {
    if yname == "as-list-group-name" { return "AsListGroupName" }
    if yname == "enable" { return "Enable" }
    if yname == "ases" { return "Ases" }
    return ""
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetSegmentPath() string {
    return "as-list-group" + "[as-list-group-name='" + fmt.Sprintf("%v", asListGroup.AsListGroupName) + "']"
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ases" {
        return &asListGroup.Ases
    }
    return nil
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["ases"] = &asListGroup.Ases
    return children
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-list-group-name"] = asListGroup.AsListGroupName
    leafs["enable"] = asListGroup.Enable
    return leafs
}

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetBundleName() string { return "cisco_ios_xr" }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetYangName() string { return "as-list-group" }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) SetParent(parent types.Entity) { asListGroup.parent = parent }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetParent() types.Entity { return asListGroup.parent }

func (asListGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup) GetParentYangName() string { return "as-list-groups" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases
// AS list
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS-List group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As.
    As []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetFilter() yfilter.YFilter { return ases.YFilter }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) SetFilter(yf yfilter.YFilter) { ases.YFilter = yf }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    return ""
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetSegmentPath() string {
    return "ases"
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "as" {
        for _, c := range ases.As {
            if ases.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As{}
        ases.As = append(ases.As, child)
        return &ases.As[len(ases.As)-1]
    }
    return nil
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ases.As {
        children[ases.As[i].GetSegmentPath()] = &ases.As[i]
    }
    return children
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetBundleName() string { return "cisco_ios_xr" }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetYangName() string { return "ases" }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) SetParent(parent types.Entity) { ases.parent = parent }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetParent() types.Entity { return ases.parent }

func (ases *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases) GetParentYangName() string { return "as-list-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As
// AS-List group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. xx of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsXx interface{}

    // This attribute is a key. yy of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetFilter() yfilter.YFilter { return as.YFilter }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) SetFilter(yf yfilter.YFilter) { as.YFilter = yf }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetSegmentPath() string {
    return "as" + "[as-xx='" + fmt.Sprintf("%v", as.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", as.AsYy) + "']"
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = as.AsXx
    leafs["as-yy"] = as.AsYy
    return leafs
}

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetBundleName() string { return "cisco_ios_xr" }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetYangName() string { return "as" }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) SetParent(parent types.Entity) { as.parent = parent }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetParent() types.Entity { return as.parent }

func (as *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AsListGroups_AsListGroup_Ases_As) GetParentYangName() string { return "ases" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits
// Maximum number that can be configured
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Maximum number of neighbors that can be configured. The type is interface{}
    // with range: 1..15000. The default value is 10000.
    MaximumNeighbors interface{}
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetFilter() yfilter.YFilter { return limits.YFilter }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) SetFilter(yf yfilter.YFilter) { limits.YFilter = yf }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetGoName(yname string) string {
    if yname == "maximum-neighbors" { return "MaximumNeighbors" }
    return ""
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetSegmentPath() string {
    return "limits"
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximum-neighbors"] = limits.MaximumNeighbors
    return leafs
}

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetBundleName() string { return "cisco_ios_xr" }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetYangName() string { return "limits" }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) SetParent(parent types.Entity) { limits.parent = parent }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetParent() types.Entity { return limits.parent }

func (limits *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Limits) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain
// Set routing domain confederation AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // xx of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsXx interface{}

    // yy of AS number xx.yy. The type is interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetFilter() yfilter.YFilter { return confederationDomain.YFilter }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) SetFilter(yf yfilter.YFilter) { confederationDomain.YFilter = yf }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetSegmentPath() string {
    return "confederation-domain"
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = confederationDomain.AsXx
    leafs["as-yy"] = confederationDomain.AsYy
    return leafs
}

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetBundleName() string { return "cisco_ios_xr" }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetYangName() string { return "confederation-domain" }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) SetParent(parent types.Entity) { confederationDomain.parent = parent }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetParent() types.Entity { return confederationDomain.parent }

func (confederationDomain *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationDomain) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses
// Define peer ASes in BGP confederation
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Confederation peer AS. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs.
    ConfederationPeerAs []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetFilter() yfilter.YFilter { return confederationPeerAses.YFilter }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) SetFilter(yf yfilter.YFilter) { confederationPeerAses.YFilter = yf }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetGoName(yname string) string {
    if yname == "confederation-peer-as" { return "ConfederationPeerAs" }
    return ""
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetSegmentPath() string {
    return "confederation-peer-ases"
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "confederation-peer-as" {
        for _, c := range confederationPeerAses.ConfederationPeerAs {
            if confederationPeerAses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs{}
        confederationPeerAses.ConfederationPeerAs = append(confederationPeerAses.ConfederationPeerAs, child)
        return &confederationPeerAses.ConfederationPeerAs[len(confederationPeerAses.ConfederationPeerAs)-1]
    }
    return nil
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range confederationPeerAses.ConfederationPeerAs {
        children[confederationPeerAses.ConfederationPeerAs[i].GetSegmentPath()] = &confederationPeerAses.ConfederationPeerAs[i]
    }
    return children
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetBundleName() string { return "cisco_ios_xr" }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetYangName() string { return "confederation-peer-ases" }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) SetParent(parent types.Entity) { confederationPeerAses.parent = parent }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetParent() types.Entity { return confederationPeerAses.parent }

func (confederationPeerAses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs
// Confederation peer AS
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. xx of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsXx interface{}

    // This attribute is a key. yy of AS number/confed peer xx.yy. The type is
    // interface{} with range: 0..4294967295.
    AsYy interface{}
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetFilter() yfilter.YFilter { return confederationPeerAs.YFilter }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) SetFilter(yf yfilter.YFilter) { confederationPeerAs.YFilter = yf }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetGoName(yname string) string {
    if yname == "as-xx" { return "AsXx" }
    if yname == "as-yy" { return "AsYy" }
    return ""
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetSegmentPath() string {
    return "confederation-peer-as" + "[as-xx='" + fmt.Sprintf("%v", confederationPeerAs.AsXx) + "']" + "[as-yy='" + fmt.Sprintf("%v", confederationPeerAs.AsYy) + "']"
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as-xx"] = confederationPeerAs.AsXx
    leafs["as-yy"] = confederationPeerAs.AsYy
    return leafs
}

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetBundleName() string { return "cisco_ios_xr" }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetYangName() string { return "confederation-peer-as" }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) SetParent(parent types.Entity) { confederationPeerAs.parent = parent }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetParent() types.Entity { return confederationPeerAs.parent }

func (confederationPeerAs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ConfederationPeerAses_ConfederationPeerAs) GetParentYangName() string { return "confederation-peer-ases" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups
// Attribute-filter groups list
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Attribute-filter group. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup.
    AttributeFilterGroup []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetFilter() yfilter.YFilter { return attributeFilterGroups.YFilter }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) SetFilter(yf yfilter.YFilter) { attributeFilterGroups.YFilter = yf }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetGoName(yname string) string {
    if yname == "attribute-filter-group" { return "AttributeFilterGroup" }
    return ""
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetSegmentPath() string {
    return "attribute-filter-groups"
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attribute-filter-group" {
        for _, c := range attributeFilterGroups.AttributeFilterGroup {
            if attributeFilterGroups.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup{}
        attributeFilterGroups.AttributeFilterGroup = append(attributeFilterGroups.AttributeFilterGroup, child)
        return &attributeFilterGroups.AttributeFilterGroup[len(attributeFilterGroups.AttributeFilterGroup)-1]
    }
    return nil
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range attributeFilterGroups.AttributeFilterGroup {
        children[attributeFilterGroups.AttributeFilterGroup[i].GetSegmentPath()] = &attributeFilterGroups.AttributeFilterGroup[i]
    }
    return children
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetBundleName() string { return "cisco_ios_xr" }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetYangName() string { return "attribute-filter-groups" }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) SetParent(parent types.Entity) { attributeFilterGroups.parent = parent }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetParent() types.Entity { return attributeFilterGroups.parent }

func (attributeFilterGroups *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup
// Attribute-filter group
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Group name. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    AttributeFilterGroupName interface{}

    // Attribute-filter group creation. The type is interface{}.
    Enable interface{}

    // Attribute-filter group attributes list.
    AttributeFilters Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetFilter() yfilter.YFilter { return attributeFilterGroup.YFilter }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) SetFilter(yf yfilter.YFilter) { attributeFilterGroup.YFilter = yf }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetGoName(yname string) string {
    if yname == "attribute-filter-group-name" { return "AttributeFilterGroupName" }
    if yname == "enable" { return "Enable" }
    if yname == "attribute-filters" { return "AttributeFilters" }
    return ""
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetSegmentPath() string {
    return "attribute-filter-group" + "[attribute-filter-group-name='" + fmt.Sprintf("%v", attributeFilterGroup.AttributeFilterGroupName) + "']"
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attribute-filters" {
        return &attributeFilterGroup.AttributeFilters
    }
    return nil
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["attribute-filters"] = &attributeFilterGroup.AttributeFilters
    return children
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-filter-group-name"] = attributeFilterGroup.AttributeFilterGroupName
    leafs["enable"] = attributeFilterGroup.Enable
    return leafs
}

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetBundleName() string { return "cisco_ios_xr" }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetYangName() string { return "attribute-filter-group" }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) SetParent(parent types.Entity) { attributeFilterGroup.parent = parent }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetParent() types.Entity { return attributeFilterGroup.parent }

func (attributeFilterGroup *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup) GetParentYangName() string { return "attribute-filter-groups" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters
// Attribute-filter group attributes list
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Attribute-filter group attribute. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter.
    AttributeFilter []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetFilter() yfilter.YFilter { return attributeFilters.YFilter }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) SetFilter(yf yfilter.YFilter) { attributeFilters.YFilter = yf }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetGoName(yname string) string {
    if yname == "attribute-filter" { return "AttributeFilter" }
    return ""
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetSegmentPath() string {
    return "attribute-filters"
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "attribute-filter" {
        for _, c := range attributeFilters.AttributeFilter {
            if attributeFilters.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter{}
        attributeFilters.AttributeFilter = append(attributeFilters.AttributeFilter, child)
        return &attributeFilters.AttributeFilter[len(attributeFilters.AttributeFilter)-1]
    }
    return nil
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range attributeFilters.AttributeFilter {
        children[attributeFilters.AttributeFilter[i].GetSegmentPath()] = &attributeFilters.AttributeFilter[i]
    }
    return children
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetBundleName() string { return "cisco_ios_xr" }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetYangName() string { return "attribute-filters" }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) SetParent(parent types.Entity) { attributeFilters.parent = parent }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetParent() types.Entity { return attributeFilters.parent }

func (attributeFilters *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters) GetParentYangName() string { return "attribute-filter-group" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter
// Attribute-filter group attribute
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Start of attribute range. The type is interface{}
    // with range: 0..256.
    AttributeStart interface{}

    // This attribute is a key. End of attribute range. The type is interface{}
    // with range: 0..256.
    AttributeEnd interface{}

    // Filtering action. The type is BgpUpdateFilterAction. This attribute is
    // mandatory.
    FilterAction interface{}
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetFilter() yfilter.YFilter { return attributeFilter.YFilter }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) SetFilter(yf yfilter.YFilter) { attributeFilter.YFilter = yf }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetGoName(yname string) string {
    if yname == "attribute-start" { return "AttributeStart" }
    if yname == "attribute-end" { return "AttributeEnd" }
    if yname == "filter-action" { return "FilterAction" }
    return ""
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetSegmentPath() string {
    return "attribute-filter" + "[attribute-start='" + fmt.Sprintf("%v", attributeFilter.AttributeStart) + "']" + "[attribute-end='" + fmt.Sprintf("%v", attributeFilter.AttributeEnd) + "']"
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["attribute-start"] = attributeFilter.AttributeStart
    leafs["attribute-end"] = attributeFilter.AttributeEnd
    leafs["filter-action"] = attributeFilter.FilterAction
    return leafs
}

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetBundleName() string { return "cisco_ios_xr" }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetYangName() string { return "attribute-filter" }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) SetParent(parent types.Entity) { attributeFilter.parent = parent }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetParent() types.Entity { return attributeFilter.parent }

func (attributeFilter *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_AttributeFilterGroups_AttributeFilterGroup_AttributeFilters_AttributeFilter) GetParentYangName() string { return "attribute-filters" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate
// Activate Graceful Maintenance Mode for all
// neighbors with graceful maintenance config
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Also for neighbors without graceful maintenance config. The type is bool.
    AllNeighbors interface{}

    // Keep routes in RIB once BGP stops. The type is bool.
    RetainRoutes interface{}
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetFilter() yfilter.YFilter { return globalGracefulMaintenanceActivate.YFilter }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) SetFilter(yf yfilter.YFilter) { globalGracefulMaintenanceActivate.YFilter = yf }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetGoName(yname string) string {
    if yname == "all-neighbors" { return "AllNeighbors" }
    if yname == "retain-routes" { return "RetainRoutes" }
    return ""
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetSegmentPath() string {
    return "global-graceful-maintenance-activate"
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all-neighbors"] = globalGracefulMaintenanceActivate.AllNeighbors
    leafs["retain-routes"] = globalGracefulMaintenanceActivate.RetainRoutes
    return leafs
}

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetBundleName() string { return "cisco_ios_xr" }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetYangName() string { return "global-graceful-maintenance-activate" }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) SetParent(parent types.Entity) { globalGracefulMaintenanceActivate.parent = parent }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetParent() types.Entity { return globalGracefulMaintenanceActivate.parent }

func (globalGracefulMaintenanceActivate *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalGracefulMaintenanceActivate) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs
// Global AF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Global AF-specific configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf.
    GlobalAf []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetFilter() yfilter.YFilter { return globalAfs.YFilter }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) SetFilter(yf yfilter.YFilter) { globalAfs.YFilter = yf }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetGoName(yname string) string {
    if yname == "global-af" { return "GlobalAf" }
    return ""
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetSegmentPath() string {
    return "global-afs"
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "global-af" {
        for _, c := range globalAfs.GlobalAf {
            if globalAfs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf{}
        globalAfs.GlobalAf = append(globalAfs.GlobalAf, child)
        return &globalAfs.GlobalAf[len(globalAfs.GlobalAf)-1]
    }
    return nil
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range globalAfs.GlobalAf {
        children[globalAfs.GlobalAf[i].GetSegmentPath()] = &globalAfs.GlobalAf[i]
    }
    return children
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetBundleName() string { return "cisco_ios_xr" }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetYangName() string { return "global-afs" }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) SetParent(parent types.Entity) { globalAfs.parent = parent }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetParent() types.Entity { return globalAfs.parent }

func (globalAfs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf
// Global AF-specific configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address family. The type is BgpAddressFamily.
    AfName interface{}

    // RNH install format type: extcomm - install rnh as opaque and extcomms,
    // extcomm-only - install rnh as extcomms only. The type is
    // BgpRnhInstallFormat.
    RnhInstallFormat interface{}

    // Enable install remote MVPN routes to PIM in default VRF. The type is
    // interface{}.
    InterAsInstall interface{}

    // Enable segmented multicast. The type is interface{}.
    SegmentedMcast interface{}

    // Disable default Martian Check. The type is interface{}.
    DisableDefaultMartianCheck interface{}

    // Next hop Critical Trigger Delay. The type is interface{} with range:
    // 0..4294967295. Units are millisecond. The default value is 3000.
    NextHopCriticalTriggerDelay interface{}

    // Next hop Non-critical Trigger Delay. The type is interface{} with range:
    // 0..4294967295. Units are millisecond. The default value is 10000.
    NextHopNonCriticalTriggerDelay interface{}

    // Calculate label-security RPF lists and install to RIB/LSD. The type is
    // interface{}.
    LabelSecurityRpf interface{}

    // Use IGP SR label for resolution configuration. The type is interface{}.
    UseIgpsrLabel interface{}

    // Label retention time in minutes. The type is interface{} with range: 3..60.
    // Units are minute.
    LabelRetain interface{}

    // Configure background scanner interval for this address family. The type is
    // interface{} with range: 5..3600. Units are second. The default value is 60.
    ScanTime interface{}

    // RPKI origin-AS validation disable. The type is interface{}.
    RpkiOriginAsValidationDisable interface{}

    // RPKI origin-AS validity signal ibgp. The type is interface{}.
    RpkiOriginAsValiditySignalIbgp interface{}

    // Upper bound on update generation transient memory usage for every EBGP
    // Sub-group. The type is interface{} with range: 1..512. Units are megabyte.
    // The default value is 32.
    UpdateLimitSubGroupEbgp interface{}

    // Upper bound on update generation transient memory usage for the
    // address-family. The type is interface{} with range: 4..2048. Units are
    // megabyte. The default value is 256.
    UpdateLimitAddressFamily interface{}

    // RPKI bestpath use origin-AS validity. The type is interface{}.
    RpkiBestpathUseOriginAsValidity interface{}

    // Upper bound on update generation transient memory usage for every IBGP
    // Sub-group. The type is interface{} with range: 1..512. Units are megabyte.
    // The default value is 32.
    UpdateLimitSubGroupIbgp interface{}

    // RPKI bestpath origin-AS allow invalid. The type is interface{}.
    RpkiBestpathOriginAsAllowInvalid interface{}

    // Disable client-to-client reflection. The type is interface{}.
    DisableClientToClientRr interface{}

    // Next hop policy to filter out nexthop notification. The type is string.
    NextHopRoutePolicy interface{}

    // Enable global table multicast. The type is interface{}.
    GlobalTableMcast interface{}

    // Wait for route install before sending updates to neighbors. The type is
    // interface{}.
    WaitRibInstall interface{}

    // Update generation delay (in minutes) after a MED change. The type is
    // interface{} with range: 0..10. Units are minute. The default value is 10.
    DynamicMedInterval interface{}

    // Enable the address family. Deletion of this object causes deletion of all
    // the objects under GlobalAF/VRFGlobalAF associated with this object . The
    // type is interface{}.
    Enable interface{}

    // Configure policy for installation of routes to RIB. The type is string.
    TablePolicy interface{}

    // Attribute download configuration. The type is interface{}.
    AttributeDownload interface{}

    // TRUE to enable BE FALSE to disable BE inheritance from a parent. The type
    // is bool.
    BestExternal interface{}

    // Advertise additional paths Receive capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsReceive interface{}

    // Route policy for permanent networks. The type is string.
    PermanentNetwork interface{}

    // Minimum prefix-length for nexthop resolution. The type is interface{} with
    // range: 0..128. The default value is 0.
    NextHopResolutionPrefixLengthMinimum interface{}

    // TRUE to reset weight on import. FALSE to not reset and to prevent
    // inheritance from a parent. The type is bool.
    ResetWeightOnImport interface{}

    // Advertise additional paths Send capability. The type is
    // BgpAfAdditionalPathsCfg.
    AdditionalPathsSend interface{}

    // Enable/disable advertisement of routes with local-label via Unicast SAFI.
    // The type is BgpAdvertiseLocalLabeledRouteCfg.
    AdvertiseLocalLabeledRouteSafiUnicast interface{}

    // Disable outbound AS Path loop check. The type is interface{}.
    DisableAsPathLoopCheck interface{}

    // Redistribute information for IS-IS routes .
    IsisRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes

    // <ASN, router-id> tuple to use to identify the link-state domain.
    DomainDistinguisher Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher

    // Configurations to be inherited to all vrfs.
    VrfAll Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll

    // Disable client-to-client reflection for a cluster.
    DisableClusterClientToClientRrs Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs

    // Delay timer to batch label processing.
    LabelDelay Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay

    // Use eBGP multipaths.
    Ebgp Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp

    // Use eiBGP multipaths.
    Eibgp Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp

    // Accept received updates with the specified attributes.
    RetainRt Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt

    // Use iBGP multipaths.
    Ibgp Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp

    // Delay timer to batch import processing.
    ImportDelay Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay

    // Configure BGP aggregate entries.
    AggregateAddresses Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses

    // Enable route-flap dampening.
    Dampening Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening

    // Redistribute RIP routes.
    RipRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes

    // Redistribute lisp routes.
    LispRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes

    // Redistribute static routes.
    StaticRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes

    // Define an administrative distance.
    Distance Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance

    // Redistribute information for Application routes.
    ApplicationRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes

    // BGP 6PE/MPLS-VPN label allocation mode.
    LabelMode Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode

    // Redistribute information for EIGRP routes.
    EigrpRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes

    // Specify a network to announce via BGP.
    SourcedNetworks Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks

    // Redistribute connected routes.
    ConnectedRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes

    // Label allocation policy.
    AllocateLabel Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel

    // Configure additional paths selection.
    AdditionalPathsSelection Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection

    // Redistribute information for OSPF routes.
    OspfRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes

    // Redistribute mobile routes.
    MobileRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes

    // Redistribute subscriber routes.
    SubscriberRoutes Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetFilter() yfilter.YFilter { return globalAf.YFilter }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) SetFilter(yf yfilter.YFilter) { globalAf.YFilter = yf }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetGoName(yname string) string {
    if yname == "af-name" { return "AfName" }
    if yname == "rnh-install-format" { return "RnhInstallFormat" }
    if yname == "inter-as-install" { return "InterAsInstall" }
    if yname == "segmented-mcast" { return "SegmentedMcast" }
    if yname == "disable-default-martian-check" { return "DisableDefaultMartianCheck" }
    if yname == "next-hop-critical-trigger-delay" { return "NextHopCriticalTriggerDelay" }
    if yname == "next-hop-non-critical-trigger-delay" { return "NextHopNonCriticalTriggerDelay" }
    if yname == "label-security-rpf" { return "LabelSecurityRpf" }
    if yname == "use-igpsr-label" { return "UseIgpsrLabel" }
    if yname == "label-retain" { return "LabelRetain" }
    if yname == "scan-time" { return "ScanTime" }
    if yname == "rpki-origin-as-validation-disable" { return "RpkiOriginAsValidationDisable" }
    if yname == "rpki-origin-as-validity-signal-ibgp" { return "RpkiOriginAsValiditySignalIbgp" }
    if yname == "update-limit-sub-group-ebgp" { return "UpdateLimitSubGroupEbgp" }
    if yname == "update-limit-address-family" { return "UpdateLimitAddressFamily" }
    if yname == "rpki-bestpath-use-origin-as-validity" { return "RpkiBestpathUseOriginAsValidity" }
    if yname == "update-limit-sub-group-ibgp" { return "UpdateLimitSubGroupIbgp" }
    if yname == "rpki-bestpath-origin-as-allow-invalid" { return "RpkiBestpathOriginAsAllowInvalid" }
    if yname == "disable-client-to-client-rr" { return "DisableClientToClientRr" }
    if yname == "next-hop-route-policy" { return "NextHopRoutePolicy" }
    if yname == "global-table-mcast" { return "GlobalTableMcast" }
    if yname == "wait-rib-install" { return "WaitRibInstall" }
    if yname == "dynamic-med-interval" { return "DynamicMedInterval" }
    if yname == "enable" { return "Enable" }
    if yname == "table-policy" { return "TablePolicy" }
    if yname == "attribute-download" { return "AttributeDownload" }
    if yname == "best-external" { return "BestExternal" }
    if yname == "additional-paths-receive" { return "AdditionalPathsReceive" }
    if yname == "permanent-network" { return "PermanentNetwork" }
    if yname == "next-hop-resolution-prefix-length-minimum" { return "NextHopResolutionPrefixLengthMinimum" }
    if yname == "reset-weight-on-import" { return "ResetWeightOnImport" }
    if yname == "additional-paths-send" { return "AdditionalPathsSend" }
    if yname == "advertise-local-labeled-route-safi-unicast" { return "AdvertiseLocalLabeledRouteSafiUnicast" }
    if yname == "disable-as-path-loop-check" { return "DisableAsPathLoopCheck" }
    if yname == "isis-routes" { return "IsisRoutes" }
    if yname == "domain-distinguisher" { return "DomainDistinguisher" }
    if yname == "vrf-all" { return "VrfAll" }
    if yname == "disable-cluster-client-to-client-rrs" { return "DisableClusterClientToClientRrs" }
    if yname == "label-delay" { return "LabelDelay" }
    if yname == "ebgp" { return "Ebgp" }
    if yname == "eibgp" { return "Eibgp" }
    if yname == "retain-rt" { return "RetainRt" }
    if yname == "ibgp" { return "Ibgp" }
    if yname == "import-delay" { return "ImportDelay" }
    if yname == "aggregate-addresses" { return "AggregateAddresses" }
    if yname == "dampening" { return "Dampening" }
    if yname == "rip-routes" { return "RipRoutes" }
    if yname == "lisp-routes" { return "LispRoutes" }
    if yname == "static-routes" { return "StaticRoutes" }
    if yname == "distance" { return "Distance" }
    if yname == "application-routes" { return "ApplicationRoutes" }
    if yname == "label-mode" { return "LabelMode" }
    if yname == "eigrp-routes" { return "EigrpRoutes" }
    if yname == "sourced-networks" { return "SourcedNetworks" }
    if yname == "connected-routes" { return "ConnectedRoutes" }
    if yname == "allocate-label" { return "AllocateLabel" }
    if yname == "additional-paths-selection" { return "AdditionalPathsSelection" }
    if yname == "ospf-routes" { return "OspfRoutes" }
    if yname == "mobile-routes" { return "MobileRoutes" }
    if yname == "subscriber-routes" { return "SubscriberRoutes" }
    return ""
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetSegmentPath() string {
    return "global-af" + "[af-name='" + fmt.Sprintf("%v", globalAf.AfName) + "']"
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-routes" {
        return &globalAf.IsisRoutes
    }
    if childYangName == "domain-distinguisher" {
        return &globalAf.DomainDistinguisher
    }
    if childYangName == "vrf-all" {
        return &globalAf.VrfAll
    }
    if childYangName == "disable-cluster-client-to-client-rrs" {
        return &globalAf.DisableClusterClientToClientRrs
    }
    if childYangName == "label-delay" {
        return &globalAf.LabelDelay
    }
    if childYangName == "ebgp" {
        return &globalAf.Ebgp
    }
    if childYangName == "eibgp" {
        return &globalAf.Eibgp
    }
    if childYangName == "retain-rt" {
        return &globalAf.RetainRt
    }
    if childYangName == "ibgp" {
        return &globalAf.Ibgp
    }
    if childYangName == "import-delay" {
        return &globalAf.ImportDelay
    }
    if childYangName == "aggregate-addresses" {
        return &globalAf.AggregateAddresses
    }
    if childYangName == "dampening" {
        return &globalAf.Dampening
    }
    if childYangName == "rip-routes" {
        return &globalAf.RipRoutes
    }
    if childYangName == "lisp-routes" {
        return &globalAf.LispRoutes
    }
    if childYangName == "static-routes" {
        return &globalAf.StaticRoutes
    }
    if childYangName == "distance" {
        return &globalAf.Distance
    }
    if childYangName == "application-routes" {
        return &globalAf.ApplicationRoutes
    }
    if childYangName == "label-mode" {
        return &globalAf.LabelMode
    }
    if childYangName == "eigrp-routes" {
        return &globalAf.EigrpRoutes
    }
    if childYangName == "sourced-networks" {
        return &globalAf.SourcedNetworks
    }
    if childYangName == "connected-routes" {
        return &globalAf.ConnectedRoutes
    }
    if childYangName == "allocate-label" {
        return &globalAf.AllocateLabel
    }
    if childYangName == "additional-paths-selection" {
        return &globalAf.AdditionalPathsSelection
    }
    if childYangName == "ospf-routes" {
        return &globalAf.OspfRoutes
    }
    if childYangName == "mobile-routes" {
        return &globalAf.MobileRoutes
    }
    if childYangName == "subscriber-routes" {
        return &globalAf.SubscriberRoutes
    }
    return nil
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["isis-routes"] = &globalAf.IsisRoutes
    children["domain-distinguisher"] = &globalAf.DomainDistinguisher
    children["vrf-all"] = &globalAf.VrfAll
    children["disable-cluster-client-to-client-rrs"] = &globalAf.DisableClusterClientToClientRrs
    children["label-delay"] = &globalAf.LabelDelay
    children["ebgp"] = &globalAf.Ebgp
    children["eibgp"] = &globalAf.Eibgp
    children["retain-rt"] = &globalAf.RetainRt
    children["ibgp"] = &globalAf.Ibgp
    children["import-delay"] = &globalAf.ImportDelay
    children["aggregate-addresses"] = &globalAf.AggregateAddresses
    children["dampening"] = &globalAf.Dampening
    children["rip-routes"] = &globalAf.RipRoutes
    children["lisp-routes"] = &globalAf.LispRoutes
    children["static-routes"] = &globalAf.StaticRoutes
    children["distance"] = &globalAf.Distance
    children["application-routes"] = &globalAf.ApplicationRoutes
    children["label-mode"] = &globalAf.LabelMode
    children["eigrp-routes"] = &globalAf.EigrpRoutes
    children["sourced-networks"] = &globalAf.SourcedNetworks
    children["connected-routes"] = &globalAf.ConnectedRoutes
    children["allocate-label"] = &globalAf.AllocateLabel
    children["additional-paths-selection"] = &globalAf.AdditionalPathsSelection
    children["ospf-routes"] = &globalAf.OspfRoutes
    children["mobile-routes"] = &globalAf.MobileRoutes
    children["subscriber-routes"] = &globalAf.SubscriberRoutes
    return children
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["af-name"] = globalAf.AfName
    leafs["rnh-install-format"] = globalAf.RnhInstallFormat
    leafs["inter-as-install"] = globalAf.InterAsInstall
    leafs["segmented-mcast"] = globalAf.SegmentedMcast
    leafs["disable-default-martian-check"] = globalAf.DisableDefaultMartianCheck
    leafs["next-hop-critical-trigger-delay"] = globalAf.NextHopCriticalTriggerDelay
    leafs["next-hop-non-critical-trigger-delay"] = globalAf.NextHopNonCriticalTriggerDelay
    leafs["label-security-rpf"] = globalAf.LabelSecurityRpf
    leafs["use-igpsr-label"] = globalAf.UseIgpsrLabel
    leafs["label-retain"] = globalAf.LabelRetain
    leafs["scan-time"] = globalAf.ScanTime
    leafs["rpki-origin-as-validation-disable"] = globalAf.RpkiOriginAsValidationDisable
    leafs["rpki-origin-as-validity-signal-ibgp"] = globalAf.RpkiOriginAsValiditySignalIbgp
    leafs["update-limit-sub-group-ebgp"] = globalAf.UpdateLimitSubGroupEbgp
    leafs["update-limit-address-family"] = globalAf.UpdateLimitAddressFamily
    leafs["rpki-bestpath-use-origin-as-validity"] = globalAf.RpkiBestpathUseOriginAsValidity
    leafs["update-limit-sub-group-ibgp"] = globalAf.UpdateLimitSubGroupIbgp
    leafs["rpki-bestpath-origin-as-allow-invalid"] = globalAf.RpkiBestpathOriginAsAllowInvalid
    leafs["disable-client-to-client-rr"] = globalAf.DisableClientToClientRr
    leafs["next-hop-route-policy"] = globalAf.NextHopRoutePolicy
    leafs["global-table-mcast"] = globalAf.GlobalTableMcast
    leafs["wait-rib-install"] = globalAf.WaitRibInstall
    leafs["dynamic-med-interval"] = globalAf.DynamicMedInterval
    leafs["enable"] = globalAf.Enable
    leafs["table-policy"] = globalAf.TablePolicy
    leafs["attribute-download"] = globalAf.AttributeDownload
    leafs["best-external"] = globalAf.BestExternal
    leafs["additional-paths-receive"] = globalAf.AdditionalPathsReceive
    leafs["permanent-network"] = globalAf.PermanentNetwork
    leafs["next-hop-resolution-prefix-length-minimum"] = globalAf.NextHopResolutionPrefixLengthMinimum
    leafs["reset-weight-on-import"] = globalAf.ResetWeightOnImport
    leafs["additional-paths-send"] = globalAf.AdditionalPathsSend
    leafs["advertise-local-labeled-route-safi-unicast"] = globalAf.AdvertiseLocalLabeledRouteSafiUnicast
    leafs["disable-as-path-loop-check"] = globalAf.DisableAsPathLoopCheck
    return leafs
}

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetBundleName() string { return "cisco_ios_xr" }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetYangName() string { return "global-af" }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) SetParent(parent types.Entity) { globalAf.parent = parent }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetParent() types.Entity { return globalAf.parent }

func (globalAf *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf) GetParentYangName() string { return "global-afs" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes
// Redistribute information for IS-IS routes
// .
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute IS-IS routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute.
    IsisRoute []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetFilter() yfilter.YFilter { return isisRoutes.YFilter }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) SetFilter(yf yfilter.YFilter) { isisRoutes.YFilter = yf }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetGoName(yname string) string {
    if yname == "isis-route" { return "IsisRoute" }
    return ""
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetSegmentPath() string {
    return "isis-routes"
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "isis-route" {
        for _, c := range isisRoutes.IsisRoute {
            if isisRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute{}
        isisRoutes.IsisRoute = append(isisRoutes.IsisRoute, child)
        return &isisRoutes.IsisRoute[len(isisRoutes.IsisRoute)-1]
    }
    return nil
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range isisRoutes.IsisRoute {
        children[isisRoutes.IsisRoute[i].GetSegmentPath()] = &isisRoutes.IsisRoute[i]
    }
    return children
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetYangName() string { return "isis-routes" }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) SetParent(parent types.Entity) { isisRoutes.parent = parent }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetParent() types.Entity { return isisRoutes.parent }

func (isisRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute
// Redistribute IS-IS routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. IS-IS instance name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for level 1 routes, 02 for level 2 routes, 04 for
    // level 1 inter-area routes. Logical combinations permitted. The type is
    // string with pattern: [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetFilter() yfilter.YFilter { return isisRoute.YFilter }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) SetFilter(yf yfilter.YFilter) { isisRoute.YFilter = yf }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "redist-type" { return "RedistType" }
    return ""
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetSegmentPath() string {
    return "isis-route" + "[instance-name='" + fmt.Sprintf("%v", isisRoute.InstanceName) + "']"
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = isisRoute.InstanceName
    leafs["default-metric"] = isisRoute.DefaultMetric
    leafs["route-policy-name"] = isisRoute.RoutePolicyName
    leafs["redist-type"] = isisRoute.RedistType
    return leafs
}

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetBundleName() string { return "cisco_ios_xr" }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetYangName() string { return "isis-route" }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) SetParent(parent types.Entity) { isisRoute.parent = parent }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetParent() types.Entity { return isisRoute.parent }

func (isisRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_IsisRoutes_IsisRoute) GetParentYangName() string { return "isis-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher
// <ASN, router-id> tuple to use to identify
// the link-state domain
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // AS Number. The type is interface{} with range: 0..4294967295. This
    // attribute is mandatory.
    As interface{}

    // Router ID. The type is string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?.
    // This attribute is mandatory.
    RouterId interface{}
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetFilter() yfilter.YFilter { return domainDistinguisher.YFilter }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) SetFilter(yf yfilter.YFilter) { domainDistinguisher.YFilter = yf }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetGoName(yname string) string {
    if yname == "as" { return "As" }
    if yname == "router-id" { return "RouterId" }
    return ""
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetSegmentPath() string {
    return "domain-distinguisher"
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["as"] = domainDistinguisher.As
    leafs["router-id"] = domainDistinguisher.RouterId
    return leafs
}

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetBundleName() string { return "cisco_ios_xr" }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetYangName() string { return "domain-distinguisher" }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) SetParent(parent types.Entity) { domainDistinguisher.parent = parent }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetParent() types.Entity { return domainDistinguisher.parent }

func (domainDistinguisher *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DomainDistinguisher) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll
// Configurations to be inherited to all
// vrfs
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RNH install format type: extcomm - install rnh as opaque and extcomms,
    // extcomm-only - install rnh as extcomms only. The type is
    // BgpRnhInstallFormat.
    RnhInstallFormat interface{}

    // Enable vrf all configuration submode. The type is interface{}.
    Enable interface{}

    // Configure policy for installation of routes to RIB. The type is string.
    TablePolicy interface{}

    // Enable sourcing of import route-targets  from import-policy. The type is
    // interface{}.
    SourceRtImportPolicy interface{}

    // MPLS-VPN label allocation mode.
    LabelMode Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetFilter() yfilter.YFilter { return vrfAll.YFilter }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) SetFilter(yf yfilter.YFilter) { vrfAll.YFilter = yf }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetGoName(yname string) string {
    if yname == "rnh-install-format" { return "RnhInstallFormat" }
    if yname == "enable" { return "Enable" }
    if yname == "table-policy" { return "TablePolicy" }
    if yname == "source-rt-import-policy" { return "SourceRtImportPolicy" }
    if yname == "label-mode" { return "LabelMode" }
    return ""
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetSegmentPath() string {
    return "vrf-all"
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "label-mode" {
        return &vrfAll.LabelMode
    }
    return nil
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["label-mode"] = &vrfAll.LabelMode
    return children
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["rnh-install-format"] = vrfAll.RnhInstallFormat
    leafs["enable"] = vrfAll.Enable
    leafs["table-policy"] = vrfAll.TablePolicy
    leafs["source-rt-import-policy"] = vrfAll.SourceRtImportPolicy
    return leafs
}

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetBundleName() string { return "cisco_ios_xr" }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetYangName() string { return "vrf-all" }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) SetParent(parent types.Entity) { vrfAll.parent = parent }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetParent() types.Entity { return vrfAll.parent }

func (vrfAll *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode
// MPLS-VPN label allocation mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label allocation mode: per-ce  Set per CE label mode, per-vrf Set per VRF
    // label mode. The type is string.
    LabelAllocationMode interface{}

    // Label mode route policy name. The type is string.
    RoutePolicyName interface{}
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetFilter() yfilter.YFilter { return labelMode.YFilter }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) SetFilter(yf yfilter.YFilter) { labelMode.YFilter = yf }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetGoName(yname string) string {
    if yname == "label-allocation-mode" { return "LabelAllocationMode" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetSegmentPath() string {
    return "label-mode"
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-allocation-mode"] = labelMode.LabelAllocationMode
    leafs["route-policy-name"] = labelMode.RoutePolicyName
    return leafs
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetBundleName() string { return "cisco_ios_xr" }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetYangName() string { return "label-mode" }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) SetParent(parent types.Entity) { labelMode.parent = parent }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetParent() types.Entity { return labelMode.parent }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_VrfAll_LabelMode) GetParentYangName() string { return "vrf-all" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs
// Disable client-to-client reflection for a
// cluster
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Cluster ID for which reflection is to be disbled. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr.
    DisableClusterClientToClientRr []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetFilter() yfilter.YFilter { return disableClusterClientToClientRrs.YFilter }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) SetFilter(yf yfilter.YFilter) { disableClusterClientToClientRrs.YFilter = yf }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetGoName(yname string) string {
    if yname == "disable-cluster-client-to-client-rr" { return "DisableClusterClientToClientRr" }
    return ""
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetSegmentPath() string {
    return "disable-cluster-client-to-client-rrs"
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "disable-cluster-client-to-client-rr" {
        for _, c := range disableClusterClientToClientRrs.DisableClusterClientToClientRr {
            if disableClusterClientToClientRrs.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr{}
        disableClusterClientToClientRrs.DisableClusterClientToClientRr = append(disableClusterClientToClientRrs.DisableClusterClientToClientRr, child)
        return &disableClusterClientToClientRrs.DisableClusterClientToClientRr[len(disableClusterClientToClientRrs.DisableClusterClientToClientRr)-1]
    }
    return nil
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range disableClusterClientToClientRrs.DisableClusterClientToClientRr {
        children[disableClusterClientToClientRrs.DisableClusterClientToClientRr[i].GetSegmentPath()] = &disableClusterClientToClientRrs.DisableClusterClientToClientRr[i]
    }
    return children
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetBundleName() string { return "cisco_ios_xr" }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetYangName() string { return "disable-cluster-client-to-client-rrs" }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) SetParent(parent types.Entity) { disableClusterClientToClientRrs.parent = parent }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetParent() types.Entity { return disableClusterClientToClientRrs.parent }

func (disableClusterClientToClientRrs *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr
// Cluster ID for which reflection is to be
// disbled
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Type of cluster-id. The type is BgpClusterId.
    ClusterType interface{}

    // number. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number.
    Number []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number

    // ipv4 address. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address.
    Ipv4Address []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetFilter() yfilter.YFilter { return disableClusterClientToClientRr.YFilter }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) SetFilter(yf yfilter.YFilter) { disableClusterClientToClientRr.YFilter = yf }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetGoName(yname string) string {
    if yname == "cluster-type" { return "ClusterType" }
    if yname == "number" { return "Number" }
    if yname == "ipv4-address" { return "Ipv4Address" }
    return ""
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetSegmentPath() string {
    return "disable-cluster-client-to-client-rr" + "[cluster-type='" + fmt.Sprintf("%v", disableClusterClientToClientRr.ClusterType) + "']"
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "number" {
        for _, c := range disableClusterClientToClientRr.Number {
            if disableClusterClientToClientRr.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number{}
        disableClusterClientToClientRr.Number = append(disableClusterClientToClientRr.Number, child)
        return &disableClusterClientToClientRr.Number[len(disableClusterClientToClientRr.Number)-1]
    }
    if childYangName == "ipv4-address" {
        for _, c := range disableClusterClientToClientRr.Ipv4Address {
            if disableClusterClientToClientRr.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address{}
        disableClusterClientToClientRr.Ipv4Address = append(disableClusterClientToClientRr.Ipv4Address, child)
        return &disableClusterClientToClientRr.Ipv4Address[len(disableClusterClientToClientRr.Ipv4Address)-1]
    }
    return nil
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range disableClusterClientToClientRr.Number {
        children[disableClusterClientToClientRr.Number[i].GetSegmentPath()] = &disableClusterClientToClientRr.Number[i]
    }
    for i := range disableClusterClientToClientRr.Ipv4Address {
        children[disableClusterClientToClientRr.Ipv4Address[i].GetSegmentPath()] = &disableClusterClientToClientRr.Ipv4Address[i]
    }
    return children
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-type"] = disableClusterClientToClientRr.ClusterType
    return leafs
}

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetBundleName() string { return "cisco_ios_xr" }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetYangName() string { return "disable-cluster-client-to-client-rr" }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) SetParent(parent types.Entity) { disableClusterClientToClientRr.parent = parent }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetParent() types.Entity { return disableClusterClientToClientRr.parent }

func (disableClusterClientToClientRr *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr) GetParentYangName() string { return "disable-cluster-client-to-client-rrs" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number
// number
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Cluster ID: if configured as a number. The type is
    // interface{} with range: 0..4294967295.
    ClusterIdNumber interface{}
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetFilter() yfilter.YFilter { return number.YFilter }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) SetFilter(yf yfilter.YFilter) { number.YFilter = yf }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetGoName(yname string) string {
    if yname == "cluster-id-number" { return "ClusterIdNumber" }
    return ""
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetSegmentPath() string {
    return "number" + "[cluster-id-number='" + fmt.Sprintf("%v", number.ClusterIdNumber) + "']"
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-number"] = number.ClusterIdNumber
    return leafs
}

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetBundleName() string { return "cisco_ios_xr" }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetYangName() string { return "number" }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) SetParent(parent types.Entity) { number.parent = parent }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetParent() types.Entity { return number.parent }

func (number *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Number) GetParentYangName() string { return "disable-cluster-client-to-client-rr" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address
// ipv4 address
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Cluster ID: if configured as an IP Address. The
    // type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    ClusterIdAddress interface{}
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetFilter() yfilter.YFilter { return ipv4Address.YFilter }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) SetFilter(yf yfilter.YFilter) { ipv4Address.YFilter = yf }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetGoName(yname string) string {
    if yname == "cluster-id-address" { return "ClusterIdAddress" }
    return ""
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetSegmentPath() string {
    return "ipv4-address" + "[cluster-id-address='" + fmt.Sprintf("%v", ipv4Address.ClusterIdAddress) + "']"
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["cluster-id-address"] = ipv4Address.ClusterIdAddress
    return leafs
}

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetBundleName() string { return "cisco_ios_xr" }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetYangName() string { return "ipv4-address" }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) SetParent(parent types.Entity) { ipv4Address.parent = parent }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetParent() types.Entity { return ipv4Address.parent }

func (ipv4Address *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_DisableClusterClientToClientRrs_DisableClusterClientToClientRr_Ipv4Address) GetParentYangName() string { return "disable-cluster-client-to-client-rr" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay
// Delay timer to batch label processing.
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay, seconds part. The type is interface{} with range: 0..10. This
    // attribute is mandatory. Units are second.
    Seconds interface{}

    // Delay, milliseconds part. The type is interface{} with range: 0..999. This
    // attribute is mandatory. Units are millisecond.
    Milliseconds interface{}
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetFilter() yfilter.YFilter { return labelDelay.YFilter }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) SetFilter(yf yfilter.YFilter) { labelDelay.YFilter = yf }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "milliseconds" { return "Milliseconds" }
    return ""
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetSegmentPath() string {
    return "label-delay"
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = labelDelay.Seconds
    leafs["milliseconds"] = labelDelay.Milliseconds
    return leafs
}

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetBundleName() string { return "cisco_ios_xr" }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetYangName() string { return "label-delay" }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) SetParent(parent types.Entity) { labelDelay.parent = parent }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetParent() types.Entity { return labelDelay.parent }

func (labelDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelDelay) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp
// Use eBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of paths. The type is interface{} with range: 2..64. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetFilter() yfilter.YFilter { return ebgp.YFilter }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) SetFilter(yf yfilter.YFilter) { ebgp.YFilter = yf }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetGoName(yname string) string {
    if yname == "paths-value" { return "PathsValue" }
    if yname == "unequal-cost" { return "UnequalCost" }
    if yname == "selective" { return "Selective" }
    if yname == "order-by-igp-metric" { return "OrderByIgpMetric" }
    return ""
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetSegmentPath() string {
    return "ebgp"
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["paths-value"] = ebgp.PathsValue
    leafs["unequal-cost"] = ebgp.UnequalCost
    leafs["selective"] = ebgp.Selective
    leafs["order-by-igp-metric"] = ebgp.OrderByIgpMetric
    return leafs
}

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetBundleName() string { return "cisco_ios_xr" }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetYangName() string { return "ebgp" }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) SetParent(parent types.Entity) { ebgp.parent = parent }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetParent() types.Entity { return ebgp.parent }

func (ebgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ebgp) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp
// Use eiBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of paths. The type is interface{} with range: 2..64. This attribute
    // is mandatory.
    PathsValue interface{}

    // UNUSED. The type is bool. The default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetFilter() yfilter.YFilter { return eibgp.YFilter }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) SetFilter(yf yfilter.YFilter) { eibgp.YFilter = yf }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetGoName(yname string) string {
    if yname == "paths-value" { return "PathsValue" }
    if yname == "unequal-cost" { return "UnequalCost" }
    if yname == "selective" { return "Selective" }
    if yname == "order-by-igp-metric" { return "OrderByIgpMetric" }
    return ""
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetSegmentPath() string {
    return "eibgp"
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["paths-value"] = eibgp.PathsValue
    leafs["unequal-cost"] = eibgp.UnequalCost
    leafs["selective"] = eibgp.Selective
    leafs["order-by-igp-metric"] = eibgp.OrderByIgpMetric
    return leafs
}

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetBundleName() string { return "cisco_ios_xr" }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetYangName() string { return "eibgp" }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) SetParent(parent types.Entity) { eibgp.parent = parent }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetParent() types.Entity { return eibgp.parent }

func (eibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Eibgp) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt
// Accept received updates with the
// specified attributes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether all RTs are to be retained, default is FALSE. The type is bool.
    All interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetFilter() yfilter.YFilter { return retainRt.YFilter }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) SetFilter(yf yfilter.YFilter) { retainRt.YFilter = yf }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetSegmentPath() string {
    return "retain-rt"
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all"] = retainRt.All
    leafs["route-policy-name"] = retainRt.RoutePolicyName
    return leafs
}

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetBundleName() string { return "cisco_ios_xr" }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetYangName() string { return "retain-rt" }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) SetParent(parent types.Entity) { retainRt.parent = parent }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetParent() types.Entity { return retainRt.parent }

func (retainRt *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RetainRt) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp
// Use iBGP multipaths
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Number of paths. The type is interface{} with range: 2..64. This attribute
    // is mandatory.
    PathsValue interface{}

    // Allow multipaths to have different IGP metrics. The type is bool. The
    // default value is false.
    UnequalCost interface{}

    // Allow multipaths only from marked neighbors. The type is bool. The default
    // value is false.
    Selective interface{}

    // Order candidate multipaths by IGP metric. The type is bool. The default
    // value is false.
    OrderByIgpMetric interface{}
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetFilter() yfilter.YFilter { return ibgp.YFilter }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) SetFilter(yf yfilter.YFilter) { ibgp.YFilter = yf }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetGoName(yname string) string {
    if yname == "paths-value" { return "PathsValue" }
    if yname == "unequal-cost" { return "UnequalCost" }
    if yname == "selective" { return "Selective" }
    if yname == "order-by-igp-metric" { return "OrderByIgpMetric" }
    return ""
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetSegmentPath() string {
    return "ibgp"
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["paths-value"] = ibgp.PathsValue
    leafs["unequal-cost"] = ibgp.UnequalCost
    leafs["selective"] = ibgp.Selective
    leafs["order-by-igp-metric"] = ibgp.OrderByIgpMetric
    return leafs
}

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetBundleName() string { return "cisco_ios_xr" }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetYangName() string { return "ibgp" }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) SetParent(parent types.Entity) { ibgp.parent = parent }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetParent() types.Entity { return ibgp.parent }

func (ibgp *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Ibgp) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay
// Delay timer to batch import processing.
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay, seconds part. The type is interface{} with range: 0..10. This
    // attribute is mandatory. Units are second.
    Seconds interface{}

    // Delay, milliseconds part. The type is interface{} with range: 0..999. This
    // attribute is mandatory. Units are millisecond.
    Milliseconds interface{}
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetFilter() yfilter.YFilter { return importDelay.YFilter }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) SetFilter(yf yfilter.YFilter) { importDelay.YFilter = yf }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetGoName(yname string) string {
    if yname == "seconds" { return "Seconds" }
    if yname == "milliseconds" { return "Milliseconds" }
    return ""
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetSegmentPath() string {
    return "import-delay"
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["seconds"] = importDelay.Seconds
    leafs["milliseconds"] = importDelay.Milliseconds
    return leafs
}

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetBundleName() string { return "cisco_ios_xr" }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetYangName() string { return "import-delay" }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) SetParent(parent types.Entity) { importDelay.parent = parent }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetParent() types.Entity { return importDelay.parent }

func (importDelay *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ImportDelay) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses
// Configure BGP aggregate entries
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Aggregate address configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress.
    AggregateAddress []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetFilter() yfilter.YFilter { return aggregateAddresses.YFilter }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) SetFilter(yf yfilter.YFilter) { aggregateAddresses.YFilter = yf }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetGoName(yname string) string {
    if yname == "aggregate-address" { return "AggregateAddress" }
    return ""
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetSegmentPath() string {
    return "aggregate-addresses"
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "aggregate-address" {
        for _, c := range aggregateAddresses.AggregateAddress {
            if aggregateAddresses.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress{}
        aggregateAddresses.AggregateAddress = append(aggregateAddresses.AggregateAddress, child)
        return &aggregateAddresses.AggregateAddress[len(aggregateAddresses.AggregateAddress)-1]
    }
    return nil
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range aggregateAddresses.AggregateAddress {
        children[aggregateAddresses.AggregateAddress[i].GetSegmentPath()] = &aggregateAddresses.AggregateAddress[i]
    }
    return children
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetYangName() string { return "aggregate-addresses" }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) SetParent(parent types.Entity) { aggregateAddresses.parent = parent }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetParent() types.Entity { return aggregateAddresses.parent }

func (aggregateAddresses *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress
// Aggregate address configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Aggregate in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    AggregateAddr interface{}

    // This attribute is a key. Aggregate in prefix/length format (prefix part).
    // The type is interface{} with range: 0..128.
    AggregatePrefix interface{}

    // TRUE to generate AS set path information, FALSE otherwise. The type is
    // bool.
    GenerateSetInfo interface{}

    // TRUE to generate AS confederation set path information, FALSE otherwise.
    // The type is bool.
    GenerateConfederationSetInfo interface{}

    // TRUE to filter more specific routes from updates, FALSEotherwise. The type
    // is bool.
    SummaryOnly interface{}

    // Route policy on which to condition advertisement, suppression, and
    // attributes. The type is string.
    RoutePolicyName interface{}
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetFilter() yfilter.YFilter { return aggregateAddress.YFilter }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) SetFilter(yf yfilter.YFilter) { aggregateAddress.YFilter = yf }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetGoName(yname string) string {
    if yname == "aggregate-addr" { return "AggregateAddr" }
    if yname == "aggregate-prefix" { return "AggregatePrefix" }
    if yname == "generate-set-info" { return "GenerateSetInfo" }
    if yname == "generate-confederation-set-info" { return "GenerateConfederationSetInfo" }
    if yname == "summary-only" { return "SummaryOnly" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetSegmentPath() string {
    return "aggregate-address" + "[aggregate-addr='" + fmt.Sprintf("%v", aggregateAddress.AggregateAddr) + "']" + "[aggregate-prefix='" + fmt.Sprintf("%v", aggregateAddress.AggregatePrefix) + "']"
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["aggregate-addr"] = aggregateAddress.AggregateAddr
    leafs["aggregate-prefix"] = aggregateAddress.AggregatePrefix
    leafs["generate-set-info"] = aggregateAddress.GenerateSetInfo
    leafs["generate-confederation-set-info"] = aggregateAddress.GenerateConfederationSetInfo
    leafs["summary-only"] = aggregateAddress.SummaryOnly
    leafs["route-policy-name"] = aggregateAddress.RoutePolicyName
    return leafs
}

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetBundleName() string { return "cisco_ios_xr" }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetYangName() string { return "aggregate-address" }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) SetParent(parent types.Entity) { aggregateAddress.parent = parent }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetParent() types.Entity { return aggregateAddress.parent }

func (aggregateAddress *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AggregateAddresses_AggregateAddress) GetParentYangName() string { return "aggregate-addresses" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening
// Enable route-flap dampening
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Half-life time for the penalty (minutes). The type is interface{} with
    // range: 1..45. Units are minute.
    HalfLife interface{}

    // Value to start reusing a route. The type is interface{} with range:
    // 1..20000.
    ReuseThreshold interface{}

    // Value to start suppressing a route. The type is interface{} with range:
    // 1..20000.
    SuppressThreshold interface{}

    // Maximum duration to suppress a stable route (seconds). The type is
    // interface{} with range: 1..255. Units are second.
    SuppressTime interface{}

    // Route policy to specify criteria for dampening. This cannot be specified if
    // any other parameters are specified. The type is string.
    RoutePolicyName interface{}
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetFilter() yfilter.YFilter { return dampening.YFilter }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) SetFilter(yf yfilter.YFilter) { dampening.YFilter = yf }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetGoName(yname string) string {
    if yname == "half-life" { return "HalfLife" }
    if yname == "reuse-threshold" { return "ReuseThreshold" }
    if yname == "suppress-threshold" { return "SuppressThreshold" }
    if yname == "suppress-time" { return "SuppressTime" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetSegmentPath() string {
    return "dampening"
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["half-life"] = dampening.HalfLife
    leafs["reuse-threshold"] = dampening.ReuseThreshold
    leafs["suppress-threshold"] = dampening.SuppressThreshold
    leafs["suppress-time"] = dampening.SuppressTime
    leafs["route-policy-name"] = dampening.RoutePolicyName
    return leafs
}

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetBundleName() string { return "cisco_ios_xr" }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetYangName() string { return "dampening" }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) SetParent(parent types.Entity) { dampening.parent = parent }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetParent() types.Entity { return dampening.parent }

func (dampening *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Dampening) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes
// Redistribute RIP routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetFilter() yfilter.YFilter { return ripRoutes.YFilter }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) SetFilter(yf yfilter.YFilter) { ripRoutes.YFilter = yf }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetSegmentPath() string {
    return "rip-routes"
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = ripRoutes.DefaultMetric
    leafs["route-policy-name"] = ripRoutes.RoutePolicyName
    leafs["not-used"] = ripRoutes.NotUsed
    return leafs
}

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetYangName() string { return "rip-routes" }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) SetParent(parent types.Entity) { ripRoutes.parent = parent }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetParent() types.Entity { return ripRoutes.parent }

func (ripRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_RipRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes
// Redistribute lisp routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetFilter() yfilter.YFilter { return lispRoutes.YFilter }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) SetFilter(yf yfilter.YFilter) { lispRoutes.YFilter = yf }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetSegmentPath() string {
    return "lisp-routes"
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = lispRoutes.DefaultMetric
    leafs["route-policy-name"] = lispRoutes.RoutePolicyName
    return leafs
}

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetYangName() string { return "lisp-routes" }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) SetParent(parent types.Entity) { lispRoutes.parent = parent }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetParent() types.Entity { return lispRoutes.parent }

func (lispRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LispRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes
// Redistribute static routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetFilter() yfilter.YFilter { return staticRoutes.YFilter }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) SetFilter(yf yfilter.YFilter) { staticRoutes.YFilter = yf }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetSegmentPath() string {
    return "static-routes"
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = staticRoutes.DefaultMetric
    leafs["route-policy-name"] = staticRoutes.RoutePolicyName
    leafs["not-used"] = staticRoutes.NotUsed
    return leafs
}

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetYangName() string { return "static-routes" }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) SetParent(parent types.Entity) { staticRoutes.parent = parent }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetParent() types.Entity { return staticRoutes.parent }

func (staticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_StaticRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance
// Define an administrative distance
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Distance for routes external to the AS. The type is interface{} with range:
    // 1..255. The default value is 20.
    ExternalRoutes interface{}

    // Distance for routes internal to the AS. The type is interface{} with range:
    // 1..255. The default value is 200.
    InternalRoutes interface{}

    // Distance for local routes. The type is interface{} with range: 1..255. The
    // default value is 200.
    LocalRoutes interface{}
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetFilter() yfilter.YFilter { return distance.YFilter }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) SetFilter(yf yfilter.YFilter) { distance.YFilter = yf }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetGoName(yname string) string {
    if yname == "external-routes" { return "ExternalRoutes" }
    if yname == "internal-routes" { return "InternalRoutes" }
    if yname == "local-routes" { return "LocalRoutes" }
    return ""
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetSegmentPath() string {
    return "distance"
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["external-routes"] = distance.ExternalRoutes
    leafs["internal-routes"] = distance.InternalRoutes
    leafs["local-routes"] = distance.LocalRoutes
    return leafs
}

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetBundleName() string { return "cisco_ios_xr" }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetYangName() string { return "distance" }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) SetParent(parent types.Entity) { distance.parent = parent }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetParent() types.Entity { return distance.parent }

func (distance *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_Distance) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes
// Redistribute information for Application routes.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute application routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute.
    ApplicationRoute []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetFilter() yfilter.YFilter { return applicationRoutes.YFilter }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) SetFilter(yf yfilter.YFilter) { applicationRoutes.YFilter = yf }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetGoName(yname string) string {
    if yname == "application-route" { return "ApplicationRoute" }
    return ""
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetSegmentPath() string {
    return "application-routes"
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "application-route" {
        for _, c := range applicationRoutes.ApplicationRoute {
            if applicationRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute{}
        applicationRoutes.ApplicationRoute = append(applicationRoutes.ApplicationRoute, child)
        return &applicationRoutes.ApplicationRoute[len(applicationRoutes.ApplicationRoute)-1]
    }
    return nil
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range applicationRoutes.ApplicationRoute {
        children[applicationRoutes.ApplicationRoute[i].GetSegmentPath()] = &applicationRoutes.ApplicationRoute[i]
    }
    return children
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetYangName() string { return "application-routes" }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) SetParent(parent types.Entity) { applicationRoutes.parent = parent }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetParent() types.Entity { return applicationRoutes.parent }

func (applicationRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute
// Redistribute application routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OnePK application name. The type is string with
    // pattern: [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetFilter() yfilter.YFilter { return applicationRoute.YFilter }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) SetFilter(yf yfilter.YFilter) { applicationRoute.YFilter = yf }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetSegmentPath() string {
    return "application-route" + "[instance-name='" + fmt.Sprintf("%v", applicationRoute.InstanceName) + "']"
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = applicationRoute.InstanceName
    leafs["default-metric"] = applicationRoute.DefaultMetric
    leafs["route-policy-name"] = applicationRoute.RoutePolicyName
    leafs["not-used"] = applicationRoute.NotUsed
    return leafs
}

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetBundleName() string { return "cisco_ios_xr" }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetYangName() string { return "application-route" }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) SetParent(parent types.Entity) { applicationRoute.parent = parent }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetParent() types.Entity { return applicationRoute.parent }

func (applicationRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ApplicationRoutes_ApplicationRoute) GetParentYangName() string { return "application-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode
// BGP 6PE/MPLS-VPN label allocation mode
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Label allocation mode: per-ce  Set per CE label mode, per-vrf Set per VRF
    // label mode, per-prefix Set per Prefix label mode (for MPLS-VPN only). The
    // type is string.
    LabelAllocationMode interface{}

    // Label mode route policy name. The type is string.
    RoutePolicyName interface{}
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetFilter() yfilter.YFilter { return labelMode.YFilter }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) SetFilter(yf yfilter.YFilter) { labelMode.YFilter = yf }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetGoName(yname string) string {
    if yname == "label-allocation-mode" { return "LabelAllocationMode" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetSegmentPath() string {
    return "label-mode"
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["label-allocation-mode"] = labelMode.LabelAllocationMode
    leafs["route-policy-name"] = labelMode.RoutePolicyName
    return leafs
}

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetBundleName() string { return "cisco_ios_xr" }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetYangName() string { return "label-mode" }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) SetParent(parent types.Entity) { labelMode.parent = parent }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetParent() types.Entity { return labelMode.parent }

func (labelMode *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_LabelMode) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes
// Redistribute information for EIGRP routes.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute EIGRP routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute.
    EigrpRoute []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetFilter() yfilter.YFilter { return eigrpRoutes.YFilter }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) SetFilter(yf yfilter.YFilter) { eigrpRoutes.YFilter = yf }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetGoName(yname string) string {
    if yname == "eigrp-route" { return "EigrpRoute" }
    return ""
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetSegmentPath() string {
    return "eigrp-routes"
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "eigrp-route" {
        for _, c := range eigrpRoutes.EigrpRoute {
            if eigrpRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute{}
        eigrpRoutes.EigrpRoute = append(eigrpRoutes.EigrpRoute, child)
        return &eigrpRoutes.EigrpRoute[len(eigrpRoutes.EigrpRoute)-1]
    }
    return nil
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range eigrpRoutes.EigrpRoute {
        children[eigrpRoutes.EigrpRoute[i].GetSegmentPath()] = &eigrpRoutes.EigrpRoute[i]
    }
    return children
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetYangName() string { return "eigrp-routes" }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) SetParent(parent types.Entity) { eigrpRoutes.parent = parent }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetParent() types.Entity { return eigrpRoutes.parent }

func (eigrpRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute
// Redistribute EIGRP routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. EIGRP router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes,
    // Logical combinations permitted. The type is string with pattern:
    // [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetFilter() yfilter.YFilter { return eigrpRoute.YFilter }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) SetFilter(yf yfilter.YFilter) { eigrpRoute.YFilter = yf }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "redist-type" { return "RedistType" }
    return ""
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetSegmentPath() string {
    return "eigrp-route" + "[instance-name='" + fmt.Sprintf("%v", eigrpRoute.InstanceName) + "']"
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = eigrpRoute.InstanceName
    leafs["default-metric"] = eigrpRoute.DefaultMetric
    leafs["route-policy-name"] = eigrpRoute.RoutePolicyName
    leafs["redist-type"] = eigrpRoute.RedistType
    return leafs
}

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetBundleName() string { return "cisco_ios_xr" }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetYangName() string { return "eigrp-route" }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) SetParent(parent types.Entity) { eigrpRoute.parent = parent }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetParent() types.Entity { return eigrpRoute.parent }

func (eigrpRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_EigrpRoutes_EigrpRoute) GetParentYangName() string { return "eigrp-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks
// Specify a network to announce via BGP
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Sourced network configuration. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork.
    SourcedNetwork []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetFilter() yfilter.YFilter { return sourcedNetworks.YFilter }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) SetFilter(yf yfilter.YFilter) { sourcedNetworks.YFilter = yf }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetGoName(yname string) string {
    if yname == "sourced-network" { return "SourcedNetwork" }
    return ""
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetSegmentPath() string {
    return "sourced-networks"
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "sourced-network" {
        for _, c := range sourcedNetworks.SourcedNetwork {
            if sourcedNetworks.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork{}
        sourcedNetworks.SourcedNetwork = append(sourcedNetworks.SourcedNetwork, child)
        return &sourcedNetworks.SourcedNetwork[len(sourcedNetworks.SourcedNetwork)-1]
    }
    return nil
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range sourcedNetworks.SourcedNetwork {
        children[sourcedNetworks.SourcedNetwork[i].GetSegmentPath()] = &sourcedNetworks.SourcedNetwork[i]
    }
    return children
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetBundleName() string { return "cisco_ios_xr" }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetYangName() string { return "sourced-networks" }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) SetParent(parent types.Entity) { sourcedNetworks.parent = parent }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetParent() types.Entity { return sourcedNetworks.parent }

func (sourcedNetworks *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork
// Sourced network configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Network in prefix/length format (address part).
    // The type is one of the following types: string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    NetworkAddr interface{}

    // This attribute is a key. Network in prefix/length format (prefix part). The
    // type is interface{} with range: 0..128.
    NetworkPrefix interface{}

    // Specify a BGP backdoor route, default is FALSE. The type is bool.
    Backdoor interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetFilter() yfilter.YFilter { return sourcedNetwork.YFilter }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) SetFilter(yf yfilter.YFilter) { sourcedNetwork.YFilter = yf }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetGoName(yname string) string {
    if yname == "network-addr" { return "NetworkAddr" }
    if yname == "network-prefix" { return "NetworkPrefix" }
    if yname == "backdoor" { return "Backdoor" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetSegmentPath() string {
    return "sourced-network" + "[network-addr='" + fmt.Sprintf("%v", sourcedNetwork.NetworkAddr) + "']" + "[network-prefix='" + fmt.Sprintf("%v", sourcedNetwork.NetworkPrefix) + "']"
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["network-addr"] = sourcedNetwork.NetworkAddr
    leafs["network-prefix"] = sourcedNetwork.NetworkPrefix
    leafs["backdoor"] = sourcedNetwork.Backdoor
    leafs["route-policy-name"] = sourcedNetwork.RoutePolicyName
    return leafs
}

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetBundleName() string { return "cisco_ios_xr" }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetYangName() string { return "sourced-network" }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) SetParent(parent types.Entity) { sourcedNetwork.parent = parent }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetParent() types.Entity { return sourcedNetwork.parent }

func (sourcedNetwork *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SourcedNetworks_SourcedNetwork) GetParentYangName() string { return "sourced-networks" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes
// Redistribute connected routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetFilter() yfilter.YFilter { return connectedRoutes.YFilter }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) SetFilter(yf yfilter.YFilter) { connectedRoutes.YFilter = yf }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetSegmentPath() string {
    return "connected-routes"
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = connectedRoutes.DefaultMetric
    leafs["route-policy-name"] = connectedRoutes.RoutePolicyName
    leafs["not-used"] = connectedRoutes.NotUsed
    return leafs
}

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetYangName() string { return "connected-routes" }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) SetParent(parent types.Entity) { connectedRoutes.parent = parent }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetParent() types.Entity { return connectedRoutes.parent }

func (connectedRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_ConnectedRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel
// Label allocation policy
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Whether all nets should be labeled, default is FALSE. The type is bool.
    All interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetFilter() yfilter.YFilter { return allocateLabel.YFilter }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) SetFilter(yf yfilter.YFilter) { allocateLabel.YFilter = yf }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetGoName(yname string) string {
    if yname == "all" { return "All" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetSegmentPath() string {
    return "allocate-label"
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["all"] = allocateLabel.All
    leafs["route-policy-name"] = allocateLabel.RoutePolicyName
    return leafs
}

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetBundleName() string { return "cisco_ios_xr" }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetYangName() string { return "allocate-label" }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) SetParent(parent types.Entity) { allocateLabel.parent = parent }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetParent() types.Entity { return allocateLabel.parent }

func (allocateLabel *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AllocateLabel) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection
// Configure additional paths selection
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Enable/disable selection . The type is BgpAfAdditionalPathsCfg.
    Selection interface{}

    // Route policy for selection. The type is string.
    RoutePolicyName interface{}
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetFilter() yfilter.YFilter { return additionalPathsSelection.YFilter }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) SetFilter(yf yfilter.YFilter) { additionalPathsSelection.YFilter = yf }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetGoName(yname string) string {
    if yname == "selection" { return "Selection" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    return ""
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetSegmentPath() string {
    return "additional-paths-selection"
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["selection"] = additionalPathsSelection.Selection
    leafs["route-policy-name"] = additionalPathsSelection.RoutePolicyName
    return leafs
}

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetBundleName() string { return "cisco_ios_xr" }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetYangName() string { return "additional-paths-selection" }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) SetParent(parent types.Entity) { additionalPathsSelection.parent = parent }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetParent() types.Entity { return additionalPathsSelection.parent }

func (additionalPathsSelection *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_AdditionalPathsSelection) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes
// Redistribute information for OSPF routes.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Redistribute OSPF routes. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute.
    OspfRoute []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetFilter() yfilter.YFilter { return ospfRoutes.YFilter }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) SetFilter(yf yfilter.YFilter) { ospfRoutes.YFilter = yf }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetGoName(yname string) string {
    if yname == "ospf-route" { return "OspfRoute" }
    return ""
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetSegmentPath() string {
    return "ospf-routes"
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "ospf-route" {
        for _, c := range ospfRoutes.OspfRoute {
            if ospfRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute{}
        ospfRoutes.OspfRoute = append(ospfRoutes.OspfRoute, child)
        return &ospfRoutes.OspfRoute[len(ospfRoutes.OspfRoute)-1]
    }
    return nil
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range ospfRoutes.OspfRoute {
        children[ospfRoutes.OspfRoute[i].GetSegmentPath()] = &ospfRoutes.OspfRoute[i]
    }
    return children
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetYangName() string { return "ospf-routes" }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) SetParent(parent types.Entity) { ospfRoutes.parent = parent }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetParent() types.Entity { return ospfRoutes.parent }

func (ospfRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute
// Redistribute OSPF routes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. OSPF router tag. The type is string with pattern:
    // [\w\-\.:,_@#%$\+=\|;]+.
    InstanceName interface{}

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Redistribution type: 01 for internal routes, 02 for external routes of type
    // 1, 04 for external routes of type 2, 08 for NSSA external routes of type 1,
    // 10 for NSSA external routes of type 2, 20 for external routes, 40 for NSSA
    // external routes.  Logical combinations permitted. The type is string with
    // pattern: [0-9a-fA-F]{1,8}.
    RedistType interface{}
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetFilter() yfilter.YFilter { return ospfRoute.YFilter }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) SetFilter(yf yfilter.YFilter) { ospfRoute.YFilter = yf }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetGoName(yname string) string {
    if yname == "instance-name" { return "InstanceName" }
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "redist-type" { return "RedistType" }
    return ""
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetSegmentPath() string {
    return "ospf-route" + "[instance-name='" + fmt.Sprintf("%v", ospfRoute.InstanceName) + "']"
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["instance-name"] = ospfRoute.InstanceName
    leafs["default-metric"] = ospfRoute.DefaultMetric
    leafs["route-policy-name"] = ospfRoute.RoutePolicyName
    leafs["redist-type"] = ospfRoute.RedistType
    return leafs
}

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetBundleName() string { return "cisco_ios_xr" }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetYangName() string { return "ospf-route" }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) SetParent(parent types.Entity) { ospfRoute.parent = parent }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetParent() types.Entity { return ospfRoute.parent }

func (ospfRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_OspfRoutes_OspfRoute) GetParentYangName() string { return "ospf-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes
// Redistribute mobile routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetFilter() yfilter.YFilter { return mobileRoutes.YFilter }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) SetFilter(yf yfilter.YFilter) { mobileRoutes.YFilter = yf }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetSegmentPath() string {
    return "mobile-routes"
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = mobileRoutes.DefaultMetric
    leafs["route-policy-name"] = mobileRoutes.RoutePolicyName
    leafs["not-used"] = mobileRoutes.NotUsed
    return leafs
}

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetYangName() string { return "mobile-routes" }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) SetParent(parent types.Entity) { mobileRoutes.parent = parent }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetParent() types.Entity { return mobileRoutes.parent }

func (mobileRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_MobileRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes
// Redistribute subscriber routes
// This type is a presence type.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Default metric. The type is interface{} with range: 0..4294967295.
    DefaultMetric interface{}

    // Route policy name. The type is string.
    RoutePolicyName interface{}

    // Not used. The type is interface{} with range: 0..127.
    NotUsed interface{}
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetFilter() yfilter.YFilter { return subscriberRoutes.YFilter }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) SetFilter(yf yfilter.YFilter) { subscriberRoutes.YFilter = yf }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetGoName(yname string) string {
    if yname == "default-metric" { return "DefaultMetric" }
    if yname == "route-policy-name" { return "RoutePolicyName" }
    if yname == "not-used" { return "NotUsed" }
    return ""
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetSegmentPath() string {
    return "subscriber-routes"
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["default-metric"] = subscriberRoutes.DefaultMetric
    leafs["route-policy-name"] = subscriberRoutes.RoutePolicyName
    leafs["not-used"] = subscriberRoutes.NotUsed
    return leafs
}

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetYangName() string { return "subscriber-routes" }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) SetParent(parent types.Entity) { subscriberRoutes.parent = parent }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetParent() types.Entity { return subscriberRoutes.parent }

func (subscriberRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalAfs_GlobalAf_SubscriberRoutes) GetParentYangName() string { return "global-af" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes
// RPKI static route configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // RPKI static route. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute.
    RpkiStaticRoute []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetFilter() yfilter.YFilter { return rpkiStaticRoutes.YFilter }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) SetFilter(yf yfilter.YFilter) { rpkiStaticRoutes.YFilter = yf }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetGoName(yname string) string {
    if yname == "rpki-static-route" { return "RpkiStaticRoute" }
    return ""
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetSegmentPath() string {
    return "rpki-static-routes"
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "rpki-static-route" {
        for _, c := range rpkiStaticRoutes.RpkiStaticRoute {
            if rpkiStaticRoutes.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute{}
        rpkiStaticRoutes.RpkiStaticRoute = append(rpkiStaticRoutes.RpkiStaticRoute, child)
        return &rpkiStaticRoutes.RpkiStaticRoute[len(rpkiStaticRoutes.RpkiStaticRoute)-1]
    }
    return nil
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range rpkiStaticRoutes.RpkiStaticRoute {
        children[rpkiStaticRoutes.RpkiStaticRoute[i].GetSegmentPath()] = &rpkiStaticRoutes.RpkiStaticRoute[i]
    }
    return children
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetBundleName() string { return "cisco_ios_xr" }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetYangName() string { return "rpki-static-routes" }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) SetParent(parent types.Entity) { rpkiStaticRoutes.parent = parent }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetParent() types.Entity { return rpkiStaticRoutes.parent }

func (rpkiStaticRoutes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute
// RPKI static route
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Address. The type is one of the following types:
    // string with pattern:
    // (([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])\.){3}([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])(%[\p{N}\p{L}]+)?,
    // or string with pattern:
    // ((:|[0-9a-fA-F]{0,4}):)([0-9a-fA-F]{0,4}:){0,5}((([0-9a-fA-F]{0,4}:)?(:|[0-9a-fA-F]{0,4}))|(((25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9]?[0-9])))(%[\p{N}\p{L}]+)?.
    Addrress interface{}

    // This attribute is a key. Minimum Prefix Length. The type is interface{}
    // with range: -2147483648..2147483647.
    Minimum interface{}

    // This attribute is a key. Maximum Prefix Length. The type is interface{}
    // with range: -2147483648..2147483647.
    Maximum interface{}

    // This attribute is a key. AS Number. The type is interface{} with range:
    // -2147483648..2147483647.
    As interface{}
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetFilter() yfilter.YFilter { return rpkiStaticRoute.YFilter }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) SetFilter(yf yfilter.YFilter) { rpkiStaticRoute.YFilter = yf }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetGoName(yname string) string {
    if yname == "addrress" { return "Addrress" }
    if yname == "minimum" { return "Minimum" }
    if yname == "maximum" { return "Maximum" }
    if yname == "as" { return "As" }
    return ""
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetSegmentPath() string {
    return "rpki-static-route" + "[addrress='" + fmt.Sprintf("%v", rpkiStaticRoute.Addrress) + "']" + "[minimum='" + fmt.Sprintf("%v", rpkiStaticRoute.Minimum) + "']" + "[maximum='" + fmt.Sprintf("%v", rpkiStaticRoute.Maximum) + "']" + "[as='" + fmt.Sprintf("%v", rpkiStaticRoute.As) + "']"
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["addrress"] = rpkiStaticRoute.Addrress
    leafs["minimum"] = rpkiStaticRoute.Minimum
    leafs["maximum"] = rpkiStaticRoute.Maximum
    leafs["as"] = rpkiStaticRoute.As
    return leafs
}

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetBundleName() string { return "cisco_ios_xr" }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetYangName() string { return "rpki-static-route" }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) SetParent(parent types.Entity) { rpkiStaticRoute.parent = parent }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetParent() types.Entity { return rpkiStaticRoute.parent }

func (rpkiStaticRoute *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_RpkiStaticRoutes_RpkiStaticRoute) GetParentYangName() string { return "rpki-static-routes" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces
// Configure list of MPLS activated interfaces
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Configure a MPLS activated interface. The type is slice of
    // Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface.
    MplsActivatedInterface []Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetFilter() yfilter.YFilter { return mplsActivatedInterfaces.YFilter }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) SetFilter(yf yfilter.YFilter) { mplsActivatedInterfaces.YFilter = yf }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetGoName(yname string) string {
    if yname == "mpls-activated-interface" { return "MplsActivatedInterface" }
    return ""
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetSegmentPath() string {
    return "mpls-activated-interfaces"
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "mpls-activated-interface" {
        for _, c := range mplsActivatedInterfaces.MplsActivatedInterface {
            if mplsActivatedInterfaces.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface{}
        mplsActivatedInterfaces.MplsActivatedInterface = append(mplsActivatedInterfaces.MplsActivatedInterface, child)
        return &mplsActivatedInterfaces.MplsActivatedInterface[len(mplsActivatedInterfaces.MplsActivatedInterface)-1]
    }
    return nil
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range mplsActivatedInterfaces.MplsActivatedInterface {
        children[mplsActivatedInterfaces.MplsActivatedInterface[i].GetSegmentPath()] = &mplsActivatedInterfaces.MplsActivatedInterface[i]
    }
    return children
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetBundleName() string { return "cisco_ios_xr" }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetYangName() string { return "mpls-activated-interfaces" }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) SetParent(parent types.Entity) { mplsActivatedInterfaces.parent = parent }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetParent() types.Entity { return mplsActivatedInterfaces.parent }

func (mplsActivatedInterfaces *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface
// Configure a MPLS activated interface
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. Interface Name. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    InterfaceName interface{}
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetFilter() yfilter.YFilter { return mplsActivatedInterface.YFilter }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) SetFilter(yf yfilter.YFilter) { mplsActivatedInterface.YFilter = yf }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetGoName(yname string) string {
    if yname == "interface-name" { return "InterfaceName" }
    return ""
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetSegmentPath() string {
    return "mpls-activated-interface" + "[interface-name='" + fmt.Sprintf("%v", mplsActivatedInterface.InterfaceName) + "']"
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["interface-name"] = mplsActivatedInterface.InterfaceName
    return leafs
}

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetBundleName() string { return "cisco_ios_xr" }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetYangName() string { return "mpls-activated-interface" }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) SetParent(parent types.Entity) { mplsActivatedInterface.parent = parent }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetParent() types.Entity { return mplsActivatedInterface.parent }

func (mplsActivatedInterface *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_MplsActivatedInterfaces_MplsActivatedInterface) GetParentYangName() string { return "mpls-activated-interfaces" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers
// Adjust routing timers.
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Keepalive interval (seconds). The type is interface{} with range: 0..65535.
    // Units are second. The default value is 60.
    Keepalive interface{}

    // Hold time (seconds).  Specify 0 to disable keepalives/hold time. The type
    // is interface{} with range: 0..65535. Units are second. The default value is
    // 180.
    HoldTime interface{}

    // Minimum acceptable hold time (seconds). Specify 0 to disable
    // keepalives/hold time. The type is interface{} with range: 0..65535. Units
    // are second. The default value is 3.
    MinAcceptHoldTime interface{}
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetFilter() yfilter.YFilter { return globalTimers.YFilter }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) SetFilter(yf yfilter.YFilter) { globalTimers.YFilter = yf }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetGoName(yname string) string {
    if yname == "keepalive" { return "Keepalive" }
    if yname == "hold-time" { return "HoldTime" }
    if yname == "min-accept-hold-time" { return "MinAcceptHoldTime" }
    return ""
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetSegmentPath() string {
    return "global-timers"
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["keepalive"] = globalTimers.Keepalive
    leafs["hold-time"] = globalTimers.HoldTime
    leafs["min-accept-hold-time"] = globalTimers.MinAcceptHoldTime
    return leafs
}

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetBundleName() string { return "cisco_ios_xr" }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetYangName() string { return "global-timers" }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) SetParent(parent types.Entity) { globalTimers.parent = parent }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetParent() types.Entity { return globalTimers.parent }

func (globalTimers *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_GlobalTimers) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd
// BFD configuration
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Detection multiplier for BFD sessions created by BGP. The type is
    // interface{} with range: 2..16.
    DetectionMultiplier interface{}

    // Hello interval for BFD sessions created by BGP. The type is interface{}
    // with range: 3..30000. Units are millisecond.
    Interval interface{}
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetFilter() yfilter.YFilter { return bfd.YFilter }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) SetFilter(yf yfilter.YFilter) { bfd.YFilter = yf }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetGoName(yname string) string {
    if yname == "detection-multiplier" { return "DetectionMultiplier" }
    if yname == "interval" { return "Interval" }
    return ""
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetSegmentPath() string {
    return "bfd"
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["detection-multiplier"] = bfd.DetectionMultiplier
    leafs["interval"] = bfd.Interval
    return leafs
}

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetBundleName() string { return "cisco_ios_xr" }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetYangName() string { return "bfd" }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) SetParent(parent types.Entity) { bfd.parent = parent }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetParent() types.Entity { return bfd.parent }

func (bfd *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_Bfd) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes
// set socket parameters
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Send socket buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 24576.
    SocketSendSize interface{}

    // BGP Write buffer size in bytes. The type is interface{} with range:
    // 4096..131072. Units are byte. The default value is 4096.
    BgpSendSize interface{}
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetFilter() yfilter.YFilter { return sendSocketBufferSizes.YFilter }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) SetFilter(yf yfilter.YFilter) { sendSocketBufferSizes.YFilter = yf }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetGoName(yname string) string {
    if yname == "socket-send-size" { return "SocketSendSize" }
    if yname == "bgp-send-size" { return "BgpSendSize" }
    return ""
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetSegmentPath() string {
    return "send-socket-buffer-sizes"
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-send-size"] = sendSocketBufferSizes.SocketSendSize
    leafs["bgp-send-size"] = sendSocketBufferSizes.BgpSendSize
    return leafs
}

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetBundleName() string { return "cisco_ios_xr" }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetYangName() string { return "send-socket-buffer-sizes" }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) SetParent(parent types.Entity) { sendSocketBufferSizes.parent = parent }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetParent() types.Entity { return sendSocketBufferSizes.parent }

func (sendSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_SendSocketBufferSizes) GetParentYangName() string { return "global" }

// Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes
// Set socket and BGP receive buffer sizes
type Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Receive socket buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 32768.
    SocketReceiveSize interface{}

    // BGP Read buffer size in bytes. The type is interface{} with range:
    // 512..131072. Units are byte. The default value is 4096.
    BgpReceiveSize interface{}
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetFilter() yfilter.YFilter { return receiveSocketBufferSizes.YFilter }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) SetFilter(yf yfilter.YFilter) { receiveSocketBufferSizes.YFilter = yf }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetGoName(yname string) string {
    if yname == "socket-receive-size" { return "SocketReceiveSize" }
    if yname == "bgp-receive-size" { return "BgpReceiveSize" }
    return ""
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetSegmentPath() string {
    return "receive-socket-buffer-sizes"
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["socket-receive-size"] = receiveSocketBufferSizes.SocketReceiveSize
    leafs["bgp-receive-size"] = receiveSocketBufferSizes.BgpReceiveSize
    return leafs
}

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetBundleName() string { return "cisco_ios_xr" }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetYangName() string { return "receive-socket-buffer-sizes" }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) SetParent(parent types.Entity) { receiveSocketBufferSizes.parent = parent }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetParent() types.Entity { return receiveSocketBufferSizes.parent }

func (receiveSocketBufferSizes *Bgp_Instance_InstanceAs_FourByteAs_DefaultVrf_Global_ReceiveSocketBufferSizes) GetParentYangName() string { return "global" }

// BmpServerAll
// bmp server all
type BmpServerAll struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Range in MegaBytes for the maximum buffer size of BMP message queue. The
    // maximum buf-size is 20% and default buf-size is 15% of the platform virtual
    // memory max-limit (aka rlimit). Please run show bgp process
    // performance-statistics to see the individual values. Unit is in Megabytes.
    // The type is interface{} with range: 1..4294967295. Units are megabyte.
    MaximumBufferSize interface{}

    // Enable Route Monitoring capability for the BMP servers. BGP update messages
    // messages will be regenrated with a table walk .
    RouteMonitoring BmpServerAll_RouteMonitoring
}

func (bmpServerAll *BmpServerAll) GetFilter() yfilter.YFilter { return bmpServerAll.YFilter }

func (bmpServerAll *BmpServerAll) SetFilter(yf yfilter.YFilter) { bmpServerAll.YFilter = yf }

func (bmpServerAll *BmpServerAll) GetGoName(yname string) string {
    if yname == "maximum-buffer-size" { return "MaximumBufferSize" }
    if yname == "route-monitoring" { return "RouteMonitoring" }
    return ""
}

func (bmpServerAll *BmpServerAll) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-server-all"
}

func (bmpServerAll *BmpServerAll) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "route-monitoring" {
        return &bmpServerAll.RouteMonitoring
    }
    return nil
}

func (bmpServerAll *BmpServerAll) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["route-monitoring"] = &bmpServerAll.RouteMonitoring
    return children
}

func (bmpServerAll *BmpServerAll) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["maximum-buffer-size"] = bmpServerAll.MaximumBufferSize
    return leafs
}

func (bmpServerAll *BmpServerAll) GetBundleName() string { return "cisco_ios_xr" }

func (bmpServerAll *BmpServerAll) GetYangName() string { return "bmp-server-all" }

func (bmpServerAll *BmpServerAll) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpServerAll *BmpServerAll) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpServerAll *BmpServerAll) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpServerAll *BmpServerAll) SetParent(parent types.Entity) { bmpServerAll.parent = parent }

func (bmpServerAll *BmpServerAll) GetParent() types.Entity { return bmpServerAll.parent }

func (bmpServerAll *BmpServerAll) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-cfg" }

// BmpServerAll_RouteMonitoring
// Enable Route Monitoring capability for the BMP
// servers.
// BGP update messages messages will be
// regenrated with a table walk
// 
type BmpServerAll_RouteMonitoring struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Specify if the routes packed in update messages should be before or after
    // the application of route-policy. The type is BmpPolicySelect.
    Policy interface{}

    // Specify if the routes should be picked up at inbound or outbound direction.
    // The type is BmpRouteDirection.
    Direction interface{}
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetFilter() yfilter.YFilter { return routeMonitoring.YFilter }

func (routeMonitoring *BmpServerAll_RouteMonitoring) SetFilter(yf yfilter.YFilter) { routeMonitoring.YFilter = yf }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetGoName(yname string) string {
    if yname == "policy" { return "Policy" }
    if yname == "direction" { return "Direction" }
    return ""
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetSegmentPath() string {
    return "route-monitoring"
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["policy"] = routeMonitoring.Policy
    leafs["direction"] = routeMonitoring.Direction
    return leafs
}

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetBundleName() string { return "cisco_ios_xr" }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetYangName() string { return "route-monitoring" }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (routeMonitoring *BmpServerAll_RouteMonitoring) SetParent(parent types.Entity) { routeMonitoring.parent = parent }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetParent() types.Entity { return routeMonitoring.parent }

func (routeMonitoring *BmpServerAll_RouteMonitoring) GetParentYangName() string { return "bmp-server-all" }

// BmpServers
// bmp servers
type BmpServers struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // A particular BMP server. The type is slice of BmpServers_BmpServer.
    BmpServer []BmpServers_BmpServer
}

func (bmpServers *BmpServers) GetFilter() yfilter.YFilter { return bmpServers.YFilter }

func (bmpServers *BmpServers) SetFilter(yf yfilter.YFilter) { bmpServers.YFilter = yf }

func (bmpServers *BmpServers) GetGoName(yname string) string {
    if yname == "bmp-server" { return "BmpServer" }
    return ""
}

func (bmpServers *BmpServers) GetSegmentPath() string {
    return "Cisco-IOS-XR-ipv4-bgp-cfg:bmp-servers"
}

func (bmpServers *BmpServers) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "bmp-server" {
        for _, c := range bmpServers.BmpServer {
            if bmpServers.GetSegmentPath() == segmentPath {
                return &c
            }
        }
        child := BmpServers_BmpServer{}
        bmpServers.BmpServer = append(bmpServers.BmpServer, child)
        return &bmpServers.BmpServer[len(bmpServers.BmpServer)-1]
    }
    return nil
}

func (bmpServers *BmpServers) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    for i := range bmpServers.BmpServer {
        children[bmpServers.BmpServer[i].GetSegmentPath()] = &bmpServers.BmpServer[i]
    }
    return children
}

func (bmpServers *BmpServers) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    return leafs
}

func (bmpServers *BmpServers) GetBundleName() string { return "cisco_ios_xr" }

func (bmpServers *BmpServers) GetYangName() string { return "bmp-servers" }

func (bmpServers *BmpServers) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpServers *BmpServers) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpServers *BmpServers) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpServers *BmpServers) SetParent(parent types.Entity) { bmpServers.parent = parent }

func (bmpServers *BmpServers) GetParent() types.Entity { return bmpServers.parent }

func (bmpServers *BmpServers) GetParentYangName() string { return "Cisco-IOS-XR-ipv4-bgp-cfg" }

// BmpServers_BmpServer
// A particular BMP server
type BmpServers_BmpServer struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // This attribute is a key. BMP Server ID. The type is interface{} with range:
    // 1..8.
    ServerId interface{}

    // BMP Server Creation. The type is interface{}.
    Create interface{}

    // Range in MegaBytes for the maximum buffer size of BMP message queue. The
    // maximum buf-size is 20% and default buf-size is 15% of the platform virtual
    // memory max-limit (aka rlimit) . Please run show bgp process
    // performance-statistics to see the individual values. Unit is in Megabytes.
    // The type is interface{} with range: 1..4294967295. Units are megabyte.
    MaximumBufferSize interface{}

    // Initial connect delay in seconds in sending updates. The type is
    // interface{} with range: 1..3600. Units are second.
    InitialDelay interface{}

    // Delay in connecting to BMP Server after a flap had been detected. The type
    // is interface{} with range: 60..3600. Units are second.
    FlappingDelay interface{}

    // Stats reporting period for BMP server. The type is interface{} with range:
    // 1..3600. Units are second.
    StatusReportInterval interface{}

    // String to describe the BMP server. The type is string.
    Description interface{}

    // configure TCP maximum segment size. Default=16384. The type is interface{}
    // with range: 68..10000. Units are byte.
    BmptcpMaximumSegmentSize interface{}

    // configure TCP keep alives to be exchanged between client and server.
    // Default=1000. The type is interface{} with range: 0..7200. Units are
    // second.
    BmptcpKeepAlive interface{}

    // VRF for BMP Server. The type is string.
    Vrf interface{}

    // Shutdown connection to BMP server. The type is interface{}.
    Shutdown interface{}

    // Select an interface to configure. The type is string with pattern:
    // [a-zA-Z0-9./-]+.
    UpdateSourceInterface interface{}

    // Initial refresh to generate BGP updates.
    InitialRefreshDelay BmpServers_BmpServer_InitialRefreshDelay

    // Configure Host Name/Address and Port for BMP Server.
    HostPort BmpServers_BmpServer_HostPort

    // TOS (Type Of Service).
    Tos BmpServers_BmpServer_Tos
}

func (bmpServer *BmpServers_BmpServer) GetFilter() yfilter.YFilter { return bmpServer.YFilter }

func (bmpServer *BmpServers_BmpServer) SetFilter(yf yfilter.YFilter) { bmpServer.YFilter = yf }

func (bmpServer *BmpServers_BmpServer) GetGoName(yname string) string {
    if yname == "server-id" { return "ServerId" }
    if yname == "create" { return "Create" }
    if yname == "maximum-buffer-size" { return "MaximumBufferSize" }
    if yname == "initial-delay" { return "InitialDelay" }
    if yname == "flapping-delay" { return "FlappingDelay" }
    if yname == "status-report-interval" { return "StatusReportInterval" }
    if yname == "description" { return "Description" }
    if yname == "bmptcp-maximum-segment-size" { return "BmptcpMaximumSegmentSize" }
    if yname == "bmptcp-keep-alive" { return "BmptcpKeepAlive" }
    if yname == "vrf" { return "Vrf" }
    if yname == "shutdown" { return "Shutdown" }
    if yname == "update-source-interface" { return "UpdateSourceInterface" }
    if yname == "initial-refresh-delay" { return "InitialRefreshDelay" }
    if yname == "host-port" { return "HostPort" }
    if yname == "tos" { return "Tos" }
    return ""
}

func (bmpServer *BmpServers_BmpServer) GetSegmentPath() string {
    return "bmp-server" + "[server-id='" + fmt.Sprintf("%v", bmpServer.ServerId) + "']"
}

func (bmpServer *BmpServers_BmpServer) GetChildByName(childYangName string, segmentPath string) types.Entity {
    if childYangName == "initial-refresh-delay" {
        return &bmpServer.InitialRefreshDelay
    }
    if childYangName == "host-port" {
        return &bmpServer.HostPort
    }
    if childYangName == "tos" {
        return &bmpServer.Tos
    }
    return nil
}

func (bmpServer *BmpServers_BmpServer) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    children["initial-refresh-delay"] = &bmpServer.InitialRefreshDelay
    children["host-port"] = &bmpServer.HostPort
    children["tos"] = &bmpServer.Tos
    return children
}

func (bmpServer *BmpServers_BmpServer) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["server-id"] = bmpServer.ServerId
    leafs["create"] = bmpServer.Create
    leafs["maximum-buffer-size"] = bmpServer.MaximumBufferSize
    leafs["initial-delay"] = bmpServer.InitialDelay
    leafs["flapping-delay"] = bmpServer.FlappingDelay
    leafs["status-report-interval"] = bmpServer.StatusReportInterval
    leafs["description"] = bmpServer.Description
    leafs["bmptcp-maximum-segment-size"] = bmpServer.BmptcpMaximumSegmentSize
    leafs["bmptcp-keep-alive"] = bmpServer.BmptcpKeepAlive
    leafs["vrf"] = bmpServer.Vrf
    leafs["shutdown"] = bmpServer.Shutdown
    leafs["update-source-interface"] = bmpServer.UpdateSourceInterface
    return leafs
}

func (bmpServer *BmpServers_BmpServer) GetBundleName() string { return "cisco_ios_xr" }

func (bmpServer *BmpServers_BmpServer) GetYangName() string { return "bmp-server" }

func (bmpServer *BmpServers_BmpServer) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (bmpServer *BmpServers_BmpServer) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (bmpServer *BmpServers_BmpServer) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (bmpServer *BmpServers_BmpServer) SetParent(parent types.Entity) { bmpServer.parent = parent }

func (bmpServer *BmpServers_BmpServer) GetParent() types.Entity { return bmpServer.parent }

func (bmpServer *BmpServers_BmpServer) GetParentYangName() string { return "bmp-servers" }

// BmpServers_BmpServer_InitialRefreshDelay
// Initial refresh to generate BGP updates
type BmpServers_BmpServer_InitialRefreshDelay struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Delay in seconds before sending Refresh request to Peers. The type is
    // interface{} with range: 1..3600. Units are second.
    Delay interface{}

    // Spread over which to send initial Refresh request to Peers. The type is
    // interface{} with range: 1..3600.
    Spread interface{}

    // Skip Route Refresh request to Peers. The type is interface{}.
    Skip interface{}
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetFilter() yfilter.YFilter { return initialRefreshDelay.YFilter }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) SetFilter(yf yfilter.YFilter) { initialRefreshDelay.YFilter = yf }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetGoName(yname string) string {
    if yname == "delay" { return "Delay" }
    if yname == "spread" { return "Spread" }
    if yname == "skip" { return "Skip" }
    return ""
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetSegmentPath() string {
    return "initial-refresh-delay"
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["delay"] = initialRefreshDelay.Delay
    leafs["spread"] = initialRefreshDelay.Spread
    leafs["skip"] = initialRefreshDelay.Skip
    return leafs
}

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetBundleName() string { return "cisco_ios_xr" }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetYangName() string { return "initial-refresh-delay" }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) SetParent(parent types.Entity) { initialRefreshDelay.parent = parent }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetParent() types.Entity { return initialRefreshDelay.parent }

func (initialRefreshDelay *BmpServers_BmpServer_InitialRefreshDelay) GetParentYangName() string { return "bmp-server" }

// BmpServers_BmpServer_HostPort
// Configure Host Name/Address and Port for BMP
// Server
type BmpServers_BmpServer_HostPort struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Name of the BMP server(accepts IPv4/IPv6 Address format too). The type is
    // string.
    Host interface{}

    // Port Number of listening BMP server. The type is interface{} with range:
    // 1..65535.
    Port interface{}
}

func (hostPort *BmpServers_BmpServer_HostPort) GetFilter() yfilter.YFilter { return hostPort.YFilter }

func (hostPort *BmpServers_BmpServer_HostPort) SetFilter(yf yfilter.YFilter) { hostPort.YFilter = yf }

func (hostPort *BmpServers_BmpServer_HostPort) GetGoName(yname string) string {
    if yname == "host" { return "Host" }
    if yname == "port" { return "Port" }
    return ""
}

func (hostPort *BmpServers_BmpServer_HostPort) GetSegmentPath() string {
    return "host-port"
}

func (hostPort *BmpServers_BmpServer_HostPort) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (hostPort *BmpServers_BmpServer_HostPort) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (hostPort *BmpServers_BmpServer_HostPort) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["host"] = hostPort.Host
    leafs["port"] = hostPort.Port
    return leafs
}

func (hostPort *BmpServers_BmpServer_HostPort) GetBundleName() string { return "cisco_ios_xr" }

func (hostPort *BmpServers_BmpServer_HostPort) GetYangName() string { return "host-port" }

func (hostPort *BmpServers_BmpServer_HostPort) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (hostPort *BmpServers_BmpServer_HostPort) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (hostPort *BmpServers_BmpServer_HostPort) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (hostPort *BmpServers_BmpServer_HostPort) SetParent(parent types.Entity) { hostPort.parent = parent }

func (hostPort *BmpServers_BmpServer_HostPort) GetParent() types.Entity { return hostPort.parent }

func (hostPort *BmpServers_BmpServer_HostPort) GetParentYangName() string { return "bmp-server" }

// BmpServers_BmpServer_Tos
// TOS (Type Of Service)
type BmpServers_BmpServer_Tos struct {
    parent types.Entity
    YFilter yfilter.YFilter

    // Set type of service. The type is BgpTos.
    Type interface{}

    // TOS value to set. The type is one of the following types: enumeration
    // BgpPrecedenceDscp, or int with range: 0..63.
    Value interface{}
}

func (tos *BmpServers_BmpServer_Tos) GetFilter() yfilter.YFilter { return tos.YFilter }

func (tos *BmpServers_BmpServer_Tos) SetFilter(yf yfilter.YFilter) { tos.YFilter = yf }

func (tos *BmpServers_BmpServer_Tos) GetGoName(yname string) string {
    if yname == "type" { return "Type" }
    if yname == "value" { return "Value" }
    return ""
}

func (tos *BmpServers_BmpServer_Tos) GetSegmentPath() string {
    return "tos"
}

func (tos *BmpServers_BmpServer_Tos) GetChildByName(childYangName string, segmentPath string) types.Entity {
    return nil
}

func (tos *BmpServers_BmpServer_Tos) GetChildren() map[string]types.Entity {
    children := make(map[string]types.Entity)
    return children
}

func (tos *BmpServers_BmpServer_Tos) GetLeafs() map[string]interface{} {
    leafs := make(map[string]interface{})
    leafs["type"] = tos.Type
    leafs["value"] = tos.Value
    return leafs
}

func (tos *BmpServers_BmpServer_Tos) GetBundleName() string { return "cisco_ios_xr" }

func (tos *BmpServers_BmpServer_Tos) GetYangName() string { return "tos" }

func (tos *BmpServers_BmpServer_Tos) GetBundleYangModelsLocation() string { return cisco_ios_xr.GetModelsPath() }

func (tos *BmpServers_BmpServer_Tos) GetCapabilitiesTable() map[string]string {
    return cisco_ios_xr.GetCapabilities() }

func (tos *BmpServers_BmpServer_Tos) GetNamespaceTable() map[string]string {
    return cisco_ios_xr.GetNamespaces() }

func (tos *BmpServers_BmpServer_Tos) SetParent(parent types.Entity) { tos.parent = parent }

func (tos *BmpServers_BmpServer_Tos) GetParent() types.Entity { return tos.parent }

func (tos *BmpServers_BmpServer_Tos) GetParentYangName() string { return "bmp-server" }

